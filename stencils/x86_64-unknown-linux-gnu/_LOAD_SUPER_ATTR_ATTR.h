// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _LOAD_SUPER_ATTR_ATTRplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BEFORE_ASYNC_WITH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 df                      subq    %rbx, %r15
// 38: 49 83 c7 b8                   addq    $-0x48, %r15
// 3c: 49 c1 ef 03                   shrq    $0x3, %r15
// 40: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 28                   addq    $0x28, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 71: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 49 89 c4                      movq    %rax, %r12
// a8: 49 8b 06                      movq    (%r14), %rax
// ab: 48 85 c0                      testq   %rax, %rax
// ae: 7f 21                         jg      0xd1 <_JIT_ENTRY+0xd1>
// b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_NegativeRefcount
// c4: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c9: 4c 89 f2                      movq    %r14, %rdx
// cc: ff d0                         callq   *%rax
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 27                         js      0xfc <_JIT_ENTRY+0xfc>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0e                      decq    (%r14)
// e4: 75 16                         jne     0xfc <_JIT_ENTRY+0xfc>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  PySuper_Type
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_Dealloc
// fa: ff d0                         callq   *%rax
// fc: 48 8b 45 00                   movq    (%rbp), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7f 22                         jg      0x127 <_JIT_ENTRY+0x127>
// 105: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000107:  R_X86_64_64  .rodata.str1.1
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_NegativeRefcount
// 119: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11e: 48 89 ea                      movq    %rbp, %rdx
// 121: ff d0                         callq   *%rax
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 85 c0                         testl   %eax, %eax
// 129: 78 21                         js      0x14c <_JIT_ENTRY+0x14c>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 135: ff d0                         callq   *%rax
// 137: 48 ff 4d 00                   decq    (%rbp)
// 13b: 75 0f                         jne     0x14c <_JIT_ENTRY+0x14c>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_Dealloc
// 147: 48 89 ef                      movq    %rbp, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 45 00                   movq    (%r13), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 22                         jg      0x177 <_JIT_ENTRY+0x177>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16e: 4c 89 ea                      movq    %r13, %rdx
// 171: ff d0                         callq   *%rax
// 173: 49 8b 45 00                   movq    (%r13), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 21                         js      0x19c <_JIT_ENTRY+0x19c>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 49 ff 4d 00                   decq    (%r13)
// 18b: 75 0f                         jne     0x19c <_JIT_ENTRY+0x19c>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8d 47 e8                   leaq    -0x18(%r15), %rax
// 1a0: 4d 85 e4                      testq   %r12, %r12
// 1a3: 0f 84 fa 00 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 1a9: 49 8d 6f f0                   leaq    -0x10(%r15), %rbp
// 1ad: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1b2: 4c 89 20                      movq    %r12, (%rax)
// 1b5: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b7:  R_X86_64_64  _PyObject_LookupSpecial
// 1bf: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001c1:  R_X86_64_64  _PyRuntime
// 1c9: 49 8d b6 68 a6 00 00          leaq    0xa668(%r14), %rsi
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: 41 ff d5                      callq   *%r13
// 1d6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 0f 84 c7 00 00 00             je      0x2ab <_JIT_ENTRY+0x2ab>
// 1e4: 49 81 c6 a0 a6 00 00          addq    $0xa6a0, %r14           # imm = 0xA6A0
// 1eb: 4c 89 e7                      movq    %r12, %rdi
// 1ee: 4c 89 f6                      movq    %r14, %rsi
// 1f1: 41 ff d5                      callq   *%r13
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 0f 84 a4 01 00 00             je      0x3a1 <_JIT_ENTRY+0x3a1>
// 1fd: 49 89 c6                      movq    %rax, %r14
// 200: 49 8b 04 24                   movq    (%r12), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7f 22                         jg      0x22b <_JIT_ENTRY+0x22b>
// 209: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020b:  R_X86_64_64  .rodata.str1.1
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_NegativeRefcount
// 21d: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 222: 4c 89 e2                      movq    %r12, %rdx
// 225: ff d0                         callq   *%rax
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 232: 78 21                         js      0x255 <_JIT_ENTRY+0x255>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23e: ff d0                         callq   *%rax
// 240: 49 ff 0c 24                   decq    (%r12)
// 244: 75 0f                         jne     0x255 <_JIT_ENTRY+0x255>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_Dealloc
// 250: 4c 89 e7                      movq    %r12, %rdi
// 253: ff d0                         callq   *%rax
// 255: 4c 89 74 24 18                movq    %r14, 0x18(%rsp)
// 25a: 49 8b 45 08                   movq    0x8(%r13), %rax
// 25e: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 265: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 26a: 0f 84 88 00 00 00             je      0x2f8 <_JIT_ENTRY+0x2f8>
// 270: 48 8b 40 38                   movq    0x38(%rax), %rax
// 274: 49 8b 44 05 00                movq    (%r13,%rax), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 74 7a                         je      0x2f8 <_JIT_ENTRY+0x2f8>
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: 31 f6                         xorl    %esi, %esi
// 283: 31 d2                         xorl    %edx, %edx
// 285: 31 c9                         xorl    %ecx, %ecx
// 287: ff d0                         callq   *%rax
// 289: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028b:  R_X86_64_64  _Py_CheckFunctionResult
// 293: 4c 89 e7                      movq    %r12, %rdi
// 296: 4c 89 ee                      movq    %r13, %rsi
// 299: 48 89 c2                      movq    %rax, %rdx
// 29c: 31 c9                         xorl    %ecx, %ecx
// 29e: 41 ff d0                      callq   *%r8
// 2a1: eb 6e                         jmp     0x311 <_JIT_ENTRY+0x311>
// 2a3: 48 89 c5                      movq    %rax, %rbp
// 2a6: e9 0e 02 00 00                jmp     0x4b9 <_JIT_ENTRY+0x4b9>
// 2ab: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2b0: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 74 0b                         je      0x2c4 <_JIT_ENTRY+0x2c4>
// 2b9: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2be: 0f 85 f5 01 00 00             jne     0x4b9 <_JIT_ENTRY+0x4b9>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  PyExc_TypeError
// 2ce: 48 8b 30                      movq    (%rax), %rsi
// 2d1: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2d6: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2da: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002dc:  R_X86_64_64  .rodata.str1.1+0x39
// 2e4: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002e6:  R_X86_64_64  _PyErr_Format
// 2ee: 31 c0                         xorl    %eax, %eax
// 2f0: 41 ff d0                      callq   *%r8
// 2f3: e9 c1 01 00 00                jmp     0x4b9 <_JIT_ENTRY+0x4b9>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _PyObject_MakeTpCall
// 302: 4c 89 e7                      movq    %r12, %rdi
// 305: 4c 89 ee                      movq    %r13, %rsi
// 308: 31 d2                         xorl    %edx, %edx
// 30a: 31 c9                         xorl    %ecx, %ecx
// 30c: 45 31 c0                      xorl    %r8d, %r8d
// 30f: ff d0                         callq   *%rax
// 311: 49 89 c6                      movq    %rax, %r14
// 314: 49 8b 45 00                   movq    (%r13), %rax
// 318: 48 85 c0                      testq   %rax, %rax
// 31b: 7f 22                         jg      0x33f <_JIT_ENTRY+0x33f>
// 31d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031f:  R_X86_64_64  .rodata.str1.1
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_NegativeRefcount
// 331: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 336: 4c 89 ea                      movq    %r13, %rdx
// 339: ff d0                         callq   *%rax
// 33b: 49 8b 45 00                   movq    (%r13), %rax
// 33f: 85 c0                         testl   %eax, %eax
// 341: 78 21                         js      0x364 <_JIT_ENTRY+0x364>
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34d: ff d0                         callq   *%rax
// 34f: 49 ff 4d 00                   decq    (%r13)
// 353: 75 0f                         jne     0x364 <_JIT_ENTRY+0x364>
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _Py_Dealloc
// 35f: 4c 89 ef                      movq    %r13, %rdi
// 362: ff d0                         callq   *%rax
// 364: 4d 85 f6                      testq   %r14, %r14
// 367: 74 6f                         je      0x3d8 <_JIT_ENTRY+0x3d8>
// 369: 49 83 c7 f8                   addq    $-0x8, %r15
// 36d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 372: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 377: 48 89 08                      movq    %rcx, (%rax)
// 37a: 4c 89 75 00                   movq    %r14, (%rbp)
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _JIT_CONTINUE
// 388: 48 89 df                      movq    %rbx, %rdi
// 38b: 4c 89 fe                      movq    %r15, %rsi
// 38e: 4c 89 e2                      movq    %r12, %rdx
// 391: 48 83 c4 28                   addq    $0x28, %rsp
// 395: 5b                            popq    %rbx
// 396: 41 5c                         popq    %r12
// 398: 41 5d                         popq    %r13
// 39a: 41 5e                         popq    %r14
// 39c: 41 5f                         popq    %r15
// 39e: 5d                            popq    %rbp
// 39f: ff e0                         jmpq    *%rax
// 3a1: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 3a6: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 3aa: 48 85 c0                      testq   %rax, %rax
// 3ad: 0f 84 81 00 00 00             je      0x434 <_JIT_ENTRY+0x434>
// 3b3: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 3b8: 74 7a                         je      0x434 <_JIT_ENTRY+0x434>
// 3ba: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 3bf: 49 8b 06                      movq    (%r14), %rax
// 3c2: 48 85 c0                      testq   %rax, %rax
// 3c5: 0f 8e a9 00 00 00             jle     0x474 <_JIT_ENTRY+0x474>
// 3cb: 85 c0                         testl   %eax, %eax
// 3cd: 0f 89 c6 00 00 00             jns     0x499 <_JIT_ENTRY+0x499>
// 3d3: e9 e1 00 00 00                jmp     0x4b9 <_JIT_ENTRY+0x4b9>
// 3d8: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 3dd: 49 8b 06                      movq    (%r14), %rax
// 3e0: 48 85 c0                      testq   %rax, %rax
// 3e3: 7f 21                         jg      0x406 <_JIT_ENTRY+0x406>
// 3e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e7:  R_X86_64_64  .rodata.str1.1
// 3ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f1:  R_X86_64_64  _Py_NegativeRefcount
// 3f9: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 3fe: 4c 89 f2                      movq    %r14, %rdx
// 401: ff d0                         callq   *%rax
// 403: 49 8b 06                      movq    (%r14), %rax
// 406: 85 c0                         testl   %eax, %eax
// 408: 78 20                         js      0x42a <_JIT_ENTRY+0x42a>
// 40a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 414: ff d0                         callq   *%rax
// 416: 49 ff 0e                      decq    (%r14)
// 419: 75 0f                         jne     0x42a <_JIT_ENTRY+0x42a>
// 41b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041d:  R_X86_64_64  _Py_Dealloc
// 425: 4c 89 f7                      movq    %r14, %rdi
// 428: ff d0                         callq   *%rax
// 42a: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 42f: e9 85 00 00 00                jmp     0x4b9 <_JIT_ENTRY+0x4b9>
// 434: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000436:  R_X86_64_64  PyExc_TypeError
// 43e: 48 8b 30                      movq    (%rax), %rsi
// 441: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 446: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 44a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000044c:  R_X86_64_64  .rodata.str1.1+0x84
// 454: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000456:  R_X86_64_64  _PyErr_Format
// 45e: 31 c0                         xorl    %eax, %eax
// 460: 41 ff d0                      callq   *%r8
// 463: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 468: 49 8b 06                      movq    (%r14), %rax
// 46b: 48 85 c0                      testq   %rax, %rax
// 46e: 0f 8f 57 ff ff ff             jg      0x3cb <_JIT_ENTRY+0x3cb>
// 474: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000476:  R_X86_64_64  .rodata.str1.1
// 47e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000480:  R_X86_64_64  _Py_NegativeRefcount
// 488: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 48d: 4c 89 f2                      movq    %r14, %rdx
// 490: ff d0                         callq   *%rax
// 492: 49 8b 06                      movq    (%r14), %rax
// 495: 85 c0                         testl   %eax, %eax
// 497: 78 20                         js      0x4b9 <_JIT_ENTRY+0x4b9>
// 499: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000049b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a3: ff d0                         callq   *%rax
// 4a5: 49 ff 0e                      decq    (%r14)
// 4a8: 75 0f                         jne     0x4b9 <_JIT_ENTRY+0x4b9>
// 4aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ac:  R_X86_64_64  _Py_Dealloc
// 4b4: 4c 89 f7                      movq    %r14, %rdi
// 4b7: ff d0                         callq   *%rax
// 4b9: 48 29 dd                      subq    %rbx, %rbp
// 4bc: 48 83 c5 b8                   addq    $-0x48, %rbp
// 4c0: 48 c1 ed 03                   shrq    $0x3, %rbp
// 4c4: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 4c7: 31 c0                         xorl    %eax, %eax
// 4c9: e9 8f fb ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 4ce: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BEFORE_ASYNC_WITH_code_body[1231] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xfa, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x6f, 0xf0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x4c, 0x89, 0x20, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb6, 0x68, 0xa6, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x41, 0xff, 0xd5, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc6, 0xa0, 0xa6, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x74, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x44, 0x05, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x7a, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x6e, 0x48, 0x89, 0xc5, 0xe9, 0x0e, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0xf5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xc1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x6f, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x08, 0x4c, 0x89, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x7a, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xc6, 0x00, 0x00, 0x00, 0xe9, 0xe1, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x57, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x8f, 0xfb, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BEFORE_ASYNC_WITH_code_holes[45] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x40c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x41d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x436, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x44c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x456, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x476, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x480, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x49b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BEFORE_ASYNC_WITH_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BEFORE_WITH
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BEFORE_WITH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 df                      subq    %rbx, %r15
// 38: 49 83 c7 b8                   addq    $-0x48, %r15
// 3c: 49 c1 ef 03                   shrq    $0x3, %r15
// 40: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 28                   addq    $0x28, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 71: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 49 89 c4                      movq    %rax, %r12
// a8: 49 8b 06                      movq    (%r14), %rax
// ab: 48 85 c0                      testq   %rax, %rax
// ae: 7f 21                         jg      0xd1 <_JIT_ENTRY+0xd1>
// b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_NegativeRefcount
// c4: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c9: 4c 89 f2                      movq    %r14, %rdx
// cc: ff d0                         callq   *%rax
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 27                         js      0xfc <_JIT_ENTRY+0xfc>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0e                      decq    (%r14)
// e4: 75 16                         jne     0xfc <_JIT_ENTRY+0xfc>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  PySuper_Type
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_Dealloc
// fa: ff d0                         callq   *%rax
// fc: 48 8b 45 00                   movq    (%rbp), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7f 22                         jg      0x127 <_JIT_ENTRY+0x127>
// 105: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000107:  R_X86_64_64  .rodata.str1.1
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_NegativeRefcount
// 119: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11e: 48 89 ea                      movq    %rbp, %rdx
// 121: ff d0                         callq   *%rax
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 85 c0                         testl   %eax, %eax
// 129: 78 21                         js      0x14c <_JIT_ENTRY+0x14c>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 135: ff d0                         callq   *%rax
// 137: 48 ff 4d 00                   decq    (%rbp)
// 13b: 75 0f                         jne     0x14c <_JIT_ENTRY+0x14c>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_Dealloc
// 147: 48 89 ef                      movq    %rbp, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 45 00                   movq    (%r13), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 22                         jg      0x177 <_JIT_ENTRY+0x177>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16e: 4c 89 ea                      movq    %r13, %rdx
// 171: ff d0                         callq   *%rax
// 173: 49 8b 45 00                   movq    (%r13), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 21                         js      0x19c <_JIT_ENTRY+0x19c>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 49 ff 4d 00                   decq    (%r13)
// 18b: 75 0f                         jne     0x19c <_JIT_ENTRY+0x19c>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8d 47 e8                   leaq    -0x18(%r15), %rax
// 1a0: 4d 85 e4                      testq   %r12, %r12
// 1a3: 0f 84 fa 00 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 1a9: 49 8d 6f f0                   leaq    -0x10(%r15), %rbp
// 1ad: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1b2: 4c 89 20                      movq    %r12, (%rax)
// 1b5: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b7:  R_X86_64_64  _PyObject_LookupSpecial
// 1bf: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001c1:  R_X86_64_64  _PyRuntime
// 1c9: 49 8d b6 50 ae 00 00          leaq    0xae50(%r14), %rsi
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: 41 ff d5                      callq   *%r13
// 1d6: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 0f 84 c7 00 00 00             je      0x2ab <_JIT_ENTRY+0x2ab>
// 1e4: 49 81 c6 b8 ae 00 00          addq    $0xaeb8, %r14           # imm = 0xAEB8
// 1eb: 4c 89 e7                      movq    %r12, %rdi
// 1ee: 4c 89 f6                      movq    %r14, %rsi
// 1f1: 41 ff d5                      callq   *%r13
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 0f 84 a4 01 00 00             je      0x3a1 <_JIT_ENTRY+0x3a1>
// 1fd: 49 89 c6                      movq    %rax, %r14
// 200: 49 8b 04 24                   movq    (%r12), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7f 22                         jg      0x22b <_JIT_ENTRY+0x22b>
// 209: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020b:  R_X86_64_64  .rodata.str1.1
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_NegativeRefcount
// 21d: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 222: 4c 89 e2                      movq    %r12, %rdx
// 225: ff d0                         callq   *%rax
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 232: 78 21                         js      0x255 <_JIT_ENTRY+0x255>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23e: ff d0                         callq   *%rax
// 240: 49 ff 0c 24                   decq    (%r12)
// 244: 75 0f                         jne     0x255 <_JIT_ENTRY+0x255>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_Dealloc
// 250: 4c 89 e7                      movq    %r12, %rdi
// 253: ff d0                         callq   *%rax
// 255: 4c 89 74 24 18                movq    %r14, 0x18(%rsp)
// 25a: 49 8b 45 08                   movq    0x8(%r13), %rax
// 25e: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 265: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 26a: 0f 84 88 00 00 00             je      0x2f8 <_JIT_ENTRY+0x2f8>
// 270: 48 8b 40 38                   movq    0x38(%rax), %rax
// 274: 49 8b 44 05 00                movq    (%r13,%rax), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 74 7a                         je      0x2f8 <_JIT_ENTRY+0x2f8>
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: 31 f6                         xorl    %esi, %esi
// 283: 31 d2                         xorl    %edx, %edx
// 285: 31 c9                         xorl    %ecx, %ecx
// 287: ff d0                         callq   *%rax
// 289: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028b:  R_X86_64_64  _Py_CheckFunctionResult
// 293: 4c 89 e7                      movq    %r12, %rdi
// 296: 4c 89 ee                      movq    %r13, %rsi
// 299: 48 89 c2                      movq    %rax, %rdx
// 29c: 31 c9                         xorl    %ecx, %ecx
// 29e: 41 ff d0                      callq   *%r8
// 2a1: eb 6e                         jmp     0x311 <_JIT_ENTRY+0x311>
// 2a3: 48 89 c5                      movq    %rax, %rbp
// 2a6: e9 0e 02 00 00                jmp     0x4b9 <_JIT_ENTRY+0x4b9>
// 2ab: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2b0: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 74 0b                         je      0x2c4 <_JIT_ENTRY+0x2c4>
// 2b9: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2be: 0f 85 f5 01 00 00             jne     0x4b9 <_JIT_ENTRY+0x4b9>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  PyExc_TypeError
// 2ce: 48 8b 30                      movq    (%rax), %rsi
// 2d1: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2d6: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2da: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002dc:  R_X86_64_64  .rodata.str1.1+0x39
// 2e4: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002e6:  R_X86_64_64  _PyErr_Format
// 2ee: 31 c0                         xorl    %eax, %eax
// 2f0: 41 ff d0                      callq   *%r8
// 2f3: e9 c1 01 00 00                jmp     0x4b9 <_JIT_ENTRY+0x4b9>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _PyObject_MakeTpCall
// 302: 4c 89 e7                      movq    %r12, %rdi
// 305: 4c 89 ee                      movq    %r13, %rsi
// 308: 31 d2                         xorl    %edx, %edx
// 30a: 31 c9                         xorl    %ecx, %ecx
// 30c: 45 31 c0                      xorl    %r8d, %r8d
// 30f: ff d0                         callq   *%rax
// 311: 49 89 c6                      movq    %rax, %r14
// 314: 49 8b 45 00                   movq    (%r13), %rax
// 318: 48 85 c0                      testq   %rax, %rax
// 31b: 7f 22                         jg      0x33f <_JIT_ENTRY+0x33f>
// 31d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031f:  R_X86_64_64  .rodata.str1.1
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_NegativeRefcount
// 331: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 336: 4c 89 ea                      movq    %r13, %rdx
// 339: ff d0                         callq   *%rax
// 33b: 49 8b 45 00                   movq    (%r13), %rax
// 33f: 85 c0                         testl   %eax, %eax
// 341: 78 21                         js      0x364 <_JIT_ENTRY+0x364>
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34d: ff d0                         callq   *%rax
// 34f: 49 ff 4d 00                   decq    (%r13)
// 353: 75 0f                         jne     0x364 <_JIT_ENTRY+0x364>
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _Py_Dealloc
// 35f: 4c 89 ef                      movq    %r13, %rdi
// 362: ff d0                         callq   *%rax
// 364: 4d 85 f6                      testq   %r14, %r14
// 367: 74 6f                         je      0x3d8 <_JIT_ENTRY+0x3d8>
// 369: 49 83 c7 f8                   addq    $-0x8, %r15
// 36d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 372: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 377: 48 89 08                      movq    %rcx, (%rax)
// 37a: 4c 89 75 00                   movq    %r14, (%rbp)
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _JIT_CONTINUE
// 388: 48 89 df                      movq    %rbx, %rdi
// 38b: 4c 89 fe                      movq    %r15, %rsi
// 38e: 4c 89 e2                      movq    %r12, %rdx
// 391: 48 83 c4 28                   addq    $0x28, %rsp
// 395: 5b                            popq    %rbx
// 396: 41 5c                         popq    %r12
// 398: 41 5d                         popq    %r13
// 39a: 41 5e                         popq    %r14
// 39c: 41 5f                         popq    %r15
// 39e: 5d                            popq    %rbp
// 39f: ff e0                         jmpq    *%rax
// 3a1: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 3a6: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 3aa: 48 85 c0                      testq   %rax, %rax
// 3ad: 0f 84 81 00 00 00             je      0x434 <_JIT_ENTRY+0x434>
// 3b3: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 3b8: 74 7a                         je      0x434 <_JIT_ENTRY+0x434>
// 3ba: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 3bf: 49 8b 06                      movq    (%r14), %rax
// 3c2: 48 85 c0                      testq   %rax, %rax
// 3c5: 0f 8e a9 00 00 00             jle     0x474 <_JIT_ENTRY+0x474>
// 3cb: 85 c0                         testl   %eax, %eax
// 3cd: 0f 89 c6 00 00 00             jns     0x499 <_JIT_ENTRY+0x499>
// 3d3: e9 e1 00 00 00                jmp     0x4b9 <_JIT_ENTRY+0x4b9>
// 3d8: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 3dd: 49 8b 06                      movq    (%r14), %rax
// 3e0: 48 85 c0                      testq   %rax, %rax
// 3e3: 7f 21                         jg      0x406 <_JIT_ENTRY+0x406>
// 3e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e7:  R_X86_64_64  .rodata.str1.1
// 3ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f1:  R_X86_64_64  _Py_NegativeRefcount
// 3f9: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 3fe: 4c 89 f2                      movq    %r14, %rdx
// 401: ff d0                         callq   *%rax
// 403: 49 8b 06                      movq    (%r14), %rax
// 406: 85 c0                         testl   %eax, %eax
// 408: 78 20                         js      0x42a <_JIT_ENTRY+0x42a>
// 40a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 414: ff d0                         callq   *%rax
// 416: 49 ff 0e                      decq    (%r14)
// 419: 75 0f                         jne     0x42a <_JIT_ENTRY+0x42a>
// 41b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041d:  R_X86_64_64  _Py_Dealloc
// 425: 4c 89 f7                      movq    %r14, %rdi
// 428: ff d0                         callq   *%rax
// 42a: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 42f: e9 85 00 00 00                jmp     0x4b9 <_JIT_ENTRY+0x4b9>
// 434: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000436:  R_X86_64_64  PyExc_TypeError
// 43e: 48 8b 30                      movq    (%rax), %rsi
// 441: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 446: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 44a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000044c:  R_X86_64_64  .rodata.str1.1+0x77
// 454: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000456:  R_X86_64_64  _PyErr_Format
// 45e: 31 c0                         xorl    %eax, %eax
// 460: 41 ff d0                      callq   *%r8
// 463: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 468: 49 8b 06                      movq    (%r14), %rax
// 46b: 48 85 c0                      testq   %rax, %rax
// 46e: 0f 8f 57 ff ff ff             jg      0x3cb <_JIT_ENTRY+0x3cb>
// 474: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000476:  R_X86_64_64  .rodata.str1.1
// 47e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000480:  R_X86_64_64  _Py_NegativeRefcount
// 488: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 48d: 4c 89 f2                      movq    %r14, %rdx
// 490: ff d0                         callq   *%rax
// 492: 49 8b 06                      movq    (%r14), %rax
// 495: 85 c0                         testl   %eax, %eax
// 497: 78 20                         js      0x4b9 <_JIT_ENTRY+0x4b9>
// 499: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000049b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a3: ff d0                         callq   *%rax
// 4a5: 49 ff 0e                      decq    (%r14)
// 4a8: 75 0f                         jne     0x4b9 <_JIT_ENTRY+0x4b9>
// 4aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ac:  R_X86_64_64  _Py_Dealloc
// 4b4: 4c 89 f7                      movq    %r14, %rdi
// 4b7: ff d0                         callq   *%rax
// 4b9: 48 29 dd                      subq    %rbx, %rbp
// 4bc: 48 83 c5 b8                   addq    $-0x48, %rbp
// 4c0: 48 c1 ed 03                   shrq    $0x3, %rbp
// 4c4: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 4c7: 31 c0                         xorl    %eax, %eax
// 4c9: e9 8f fb ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 4ce: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BEFORE_WITH_code_body[1231] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xfa, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x6f, 0xf0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x4c, 0x89, 0x20, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb6, 0x50, 0xae, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x41, 0xff, 0xd5, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc6, 0xb8, 0xae, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x41, 0xff, 0xd5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa4, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x74, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x44, 0x05, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x7a, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x6e, 0x48, 0x89, 0xc5, 0xe9, 0x0e, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0xf5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xc1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x6f, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x08, 0x4c, 0x89, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x7a, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xc6, 0x00, 0x00, 0x00, 0xe9, 0xe1, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x57, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x8f, 0xfb, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BEFORE_WITH_code_holes[45] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x40c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x41d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x436, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x44c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x456, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x476, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x480, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x49b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BEFORE_WITH_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 85 ed                      testq   %rbp, %rbp
// 1a2: 0f 84 fb 00 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 1a8: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 1ac: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c0                      movzwl  %ax, %eax
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  _PyEval_BinaryOps
// 1c7: 4c 89 e7                      movq    %r12, %rdi
// 1ca: 48 89 ee                      movq    %rbp, %rsi
// 1cd: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1d0: 49 89 c5                      movq    %rax, %r13
// 1d3: 49 8b 04 24                   movq    (%r12), %rax
// 1d7: 48 85 c0                      testq   %rax, %rax
// 1da: 7f 22                         jg      0x1fe <_JIT_ENTRY+0x1fe>
// 1dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001de:  R_X86_64_64  .rodata.str1.1
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_NegativeRefcount
// 1f0: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 1f5: 4c 89 e2                      movq    %r12, %rdx
// 1f8: ff d0                         callq   *%rax
// 1fa: 49 8b 04 24                   movq    (%r12), %rax
// 1fe: 85 c0                         testl   %eax, %eax
// 200: 78 21                         js      0x223 <_JIT_ENTRY+0x223>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20c: ff d0                         callq   *%rax
// 20e: 49 ff 0c 24                   decq    (%r12)
// 212: 75 0f                         jne     0x223 <_JIT_ENTRY+0x223>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 e7                      movq    %r12, %rdi
// 221: ff d0                         callq   *%rax
// 223: 48 8b 45 00                   movq    (%rbp), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7f 22                         jg      0x24e <_JIT_ENTRY+0x24e>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 245: 48 89 ea                      movq    %rbp, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 48 8b 45 00                   movq    (%rbp), %rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 21                         js      0x273 <_JIT_ENTRY+0x273>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 48 ff 4d 00                   decq    (%rbp)
// 262: 75 0f                         jne     0x273 <_JIT_ENTRY+0x273>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 48 89 ef                      movq    %rbp, %rdi
// 271: ff d0                         callq   *%rax
// 273: 4d 85 ed                      testq   %r13, %r13
// 276: 74 34                         je      0x2ac <_JIT_ENTRY+0x2ac>
// 278: 4d 89 6e e0                   movq    %r13, -0x20(%r14)
// 27c: 49 83 c6 e8                   addq    $-0x18, %r14
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 f6                      movq    %r14, %rsi
// 290: 4c 89 fa                      movq    %r15, %rdx
// 293: 48 83 c4 08                   addq    $0x8, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 2aa: eb 07                         jmp     0x2b3 <_JIT_ENTRY+0x2b3>
// 2ac: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 2b3: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2b7: 48 29 d8                      subq    %rbx, %rax
// 2ba: 48 83 c0 a8                   addq    $-0x58, %rax
// 2be: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c2: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2c5: 31 c0                         xorl    %eax, %eax
// 2c7: e9 8e fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2cc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_code_body[717] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xfb, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x8b, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x4d, 0x89, 0x6e, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_FLOAT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 27 01 00 00             je      0x2cc <_JIT_ENTRY+0x2cc>
// 1a5: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a9: 49 8b 6e e0                   movq    -0x20(%r14), %rbp
// 1ad: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 1b2: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 1b9: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 1be: 75 3d                         jne     0x1fd <_JIT_ENTRY+0x1fd>
// 1c0: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 1c5: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1cb: 75 28                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyInterpreterState_Get
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1e0: 49 ff 0c 24                   decq    (%r12)
// 1e4: 75 0f                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _PyFloat_ExactDealloc
// 1f0: 4c 89 e7                      movq    %r12, %rdi
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 89 ec                      movq    %rbp, %r12
// 1f8: e9 e8 00 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 1fd: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 202: 75 32                         jne     0x236 <_JIT_ENTRY+0x236>
// 204: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 20b: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 20f: 0f 85 d0 00 00 00             jne     0x2e5 <_JIT_ENTRY+0x2e5>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  PyInterpreterState_Get
// 21f: ff d0                         callq   *%rax
// 221: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 228: 48 8b 45 00                   movq    (%rbp), %rax
// 22c: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 230: 48 89 4d 00                   movq    %rcx, (%rbp)
// 234: eb 69                         jmp     0x29f <_JIT_ENTRY+0x29f>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyFloat_FromDouble
// 240: ff d0                         callq   *%rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 74 7e                         je      0x2c5 <_JIT_ENTRY+0x2c5>
// 247: 49 89 c7                      movq    %rax, %r15
// 24a: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 24e: 75 25                         jne     0x275 <_JIT_ENTRY+0x275>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyInterpreterState_Get
// 25a: ff d0                         callq   *%rax
// 25c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 263: 48 8b 45 00                   movq    (%rbp), %rax
// 267: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 26b: 48 89 4d 00                   movq    %rcx, (%rbp)
// 26f: 48 83 f8 01                   cmpq    $0x1, %rax
// 273: 7e 30                         jle     0x2a5 <_JIT_ENTRY+0x2a5>
// 275: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 27b: 75 65                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  PyInterpreterState_Get
// 287: ff d0                         callq   *%rax
// 289: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 298: 49 89 0c 24                   movq    %rcx, (%r12)
// 29c: 4d 89 fc                      movq    %r15, %r12
// 29f: 48 83 f8 01                   cmpq    $0x1, %rax
// 2a3: 7f 40                         jg      0x2e5 <_JIT_ENTRY+0x2e5>
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x39
// 2af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1+0x4f
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 83 c6 f0                   addq    $-0x10, %r14
// 2c9: 4d 89 f5                      movq    %r14, %r13
// 2cc: 49 29 dd                      subq    %rbx, %r13
// 2cf: 49 83 c5 b8                   addq    $-0x48, %r13
// 2d3: 49 c1 ed 03                   shrq    $0x3, %r13
// 2d7: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2db: 31 c0                         xorl    %eax, %eax
// 2dd: e9 78 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2e2: 4d 89 fc                      movq    %r15, %r12
// 2e5: 4d 89 66 e0                   movq    %r12, -0x20(%r14)
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _JIT_CONTINUE
// 2f3: 48 89 df                      movq    %rbx, %rdi
// 2f6: 4c 89 ee                      movq    %r13, %rsi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 08                   addq    $0x8, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_FLOAT_code_body[782] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x49, 0x8b, 0x6e, 0xe0, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xe8, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x32, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0xeb, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc7, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x40, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x78, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xfc, 0x4d, 0x89, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_FLOAT_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 0f 84 a3 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 1a1: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a5: 4d 8b 6e e0                   movq    -0x20(%r14), %r13
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _PyLong_Add
// 1b3: 4c 89 ef                      movq    %r13, %rdi
// 1b6: 4c 89 e6                      movq    %r12, %rsi
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 89 c7                      movq    %rax, %r15
// 1be: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1c4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001c6:  R_X86_64_64  PyInterpreterState_Get
// 1ce: 75 1e                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1d0: ff d5                         callq   *%rbp
// 1d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d9: 49 ff 0c 24                   decq    (%r12)
// 1dd: 75 0f                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyObject_Free
// 1e9: 4c 89 e7                      movq    %r12, %rdi
// 1ec: ff d0                         callq   *%rax
// 1ee: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1f3: 75 1e                         jne     0x213 <_JIT_ENTRY+0x213>
// 1f5: ff d5                         callq   *%rbp
// 1f7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1fe: 49 ff 4d 00                   decq    (%r13)
// 202: 75 0f                         jne     0x213 <_JIT_ENTRY+0x213>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  PyObject_Free
// 20e: 4c 89 ef                      movq    %r13, %rdi
// 211: ff d0                         callq   *%rax
// 213: 4d 85 ff                      testq   %r15, %r15
// 216: 74 35                         je      0x24d <_JIT_ENTRY+0x24d>
// 218: 4d 89 7e e0                   movq    %r15, -0x20(%r14)
// 21c: 49 83 c6 e8                   addq    $-0x18, %r14
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_CONTINUE
// 22a: 48 89 df                      movq    %rbx, %rdi
// 22d: 4c 89 f6                      movq    %r14, %rsi
// 230: 48 8b 14 24                   movq    (%rsp), %rdx
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 24b: eb 07                         jmp     0x254 <_JIT_ENTRY+0x254>
// 24d: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 254: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 258: 48 29 d8                      subq    %rbx, %rax
// 25b: 48 83 c0 a8                   addq    $-0x58, %rax
// 25f: 48 c1 e8 03                   shrq    $0x3, %rax
// 263: 89 43 40                      movl    %eax, 0x40(%rbx)
// 266: 31 c0                         xorl    %eax, %eax
// 268: e9 ed fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 26d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_INT_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x6e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x35, 0x4d, 0x89, 0x7e, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xed, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_INT_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_UNICODE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 4d 00                   decq    (%r13)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 ef                      movq    %r13, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 34 24                   movq    (%rsp), %rsi
// 19f: 48 85 f6                      testq   %rsi, %rsi
// 1a2: 0f 84 a2 00 00 00             je      0x24a <_JIT_ENTRY+0x24a>
// 1a8: 49 89 76 e8                   movq    %rsi, -0x18(%r14)
// 1ac: 4d 8b 6e e0                   movq    -0x20(%r14), %r13
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  PyUnicode_Concat
// 1ba: 4c 89 ef                      movq    %r13, %rdi
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 89 c4                      movq    %rax, %r12
// 1c2: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1c7: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001c9:  R_X86_64_64  PyInterpreterState_Get
// 1d1: 75 1e                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1d3: ff d5                         callq   *%rbp
// 1d5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1dc: 49 ff 4d 00                   decq    (%r13)
// 1e0: 75 0f                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _PyUnicode_ExactDealloc
// 1ec: 4c 89 ef                      movq    %r13, %rdi
// 1ef: ff d0                         callq   *%rax
// 1f1: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1f5: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1fa: 75 1e                         jne     0x21a <_JIT_ENTRY+0x21a>
// 1fc: ff d5                         callq   *%rbp
// 1fe: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 205: 49 ff 4d 00                   decq    (%r13)
// 209: 75 0f                         jne     0x21a <_JIT_ENTRY+0x21a>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _PyUnicode_ExactDealloc
// 215: 4c 89 ef                      movq    %r13, %rdi
// 218: ff d0                         callq   *%rax
// 21a: 4d 85 e4                      testq   %r12, %r12
// 21d: 74 34                         je      0x253 <_JIT_ENTRY+0x253>
// 21f: 4d 89 66 e0                   movq    %r12, -0x20(%r14)
// 223: 49 83 c6 e8                   addq    $-0x18, %r14
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_CONTINUE
// 231: 48 89 df                      movq    %rbx, %rdi
// 234: 4c 89 f6                      movq    %r14, %rsi
// 237: 4c 89 fa                      movq    %r15, %rdx
// 23a: 48 83 c4 08                   addq    $0x8, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 251: eb 07                         jmp     0x25a <_JIT_ENTRY+0x25a>
// 253: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 25a: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 25e: 48 29 d8                      subq    %rbx, %rax
// 261: 48 83 c0 a8                   addq    $-0x58, %rax
// 265: 48 c1 e8 03                   shrq    $0x3, %rax
// 269: 89 43 40                      movl    %eax, 0x40(%rbx)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: e9 e7 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 273: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_UNICODE_code_body[628] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49, 0x89, 0x76, 0xe8, 0x4d, 0x8b, 0x6e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x34, 0x4d, 0x89, 0x66, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xe7, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_UNICODE_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 27 01 00 00             je      0x2cc <_JIT_ENTRY+0x2cc>
// 1a5: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a9: 49 8b 6e e0                   movq    -0x20(%r14), %rbp
// 1ad: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 1b2: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 1b9: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 1be: 75 3d                         jne     0x1fd <_JIT_ENTRY+0x1fd>
// 1c0: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 1c5: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1cb: 75 28                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyInterpreterState_Get
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1e0: 49 ff 0c 24                   decq    (%r12)
// 1e4: 75 0f                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _PyFloat_ExactDealloc
// 1f0: 4c 89 e7                      movq    %r12, %rdi
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 89 ec                      movq    %rbp, %r12
// 1f8: e9 e8 00 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 1fd: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 202: 75 32                         jne     0x236 <_JIT_ENTRY+0x236>
// 204: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 20b: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 20f: 0f 85 d0 00 00 00             jne     0x2e5 <_JIT_ENTRY+0x2e5>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  PyInterpreterState_Get
// 21f: ff d0                         callq   *%rax
// 221: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 228: 48 8b 45 00                   movq    (%rbp), %rax
// 22c: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 230: 48 89 4d 00                   movq    %rcx, (%rbp)
// 234: eb 69                         jmp     0x29f <_JIT_ENTRY+0x29f>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyFloat_FromDouble
// 240: ff d0                         callq   *%rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 74 7e                         je      0x2c5 <_JIT_ENTRY+0x2c5>
// 247: 49 89 c7                      movq    %rax, %r15
// 24a: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 24e: 75 25                         jne     0x275 <_JIT_ENTRY+0x275>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyInterpreterState_Get
// 25a: ff d0                         callq   *%rax
// 25c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 263: 48 8b 45 00                   movq    (%rbp), %rax
// 267: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 26b: 48 89 4d 00                   movq    %rcx, (%rbp)
// 26f: 48 83 f8 01                   cmpq    $0x1, %rax
// 273: 7e 30                         jle     0x2a5 <_JIT_ENTRY+0x2a5>
// 275: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 27b: 75 65                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  PyInterpreterState_Get
// 287: ff d0                         callq   *%rax
// 289: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 298: 49 89 0c 24                   movq    %rcx, (%r12)
// 29c: 4d 89 fc                      movq    %r15, %r12
// 29f: 48 83 f8 01                   cmpq    $0x1, %rax
// 2a3: 7f 40                         jg      0x2e5 <_JIT_ENTRY+0x2e5>
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x39
// 2af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1+0x4f
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 83 c6 f0                   addq    $-0x10, %r14
// 2c9: 4d 89 f5                      movq    %r14, %r13
// 2cc: 49 29 dd                      subq    %rbx, %r13
// 2cf: 49 83 c5 b8                   addq    $-0x48, %r13
// 2d3: 49 c1 ed 03                   shrq    $0x3, %r13
// 2d7: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2db: 31 c0                         xorl    %eax, %eax
// 2dd: e9 78 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2e2: 4d 89 fc                      movq    %r15, %r12
// 2e5: 4d 89 66 e0                   movq    %r12, -0x20(%r14)
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _JIT_CONTINUE
// 2f3: 48 89 df                      movq    %rbx, %rdi
// 2f6: 4c 89 ee                      movq    %r13, %rsi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 08                   addq    $0x8, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_FLOAT_code_body[782] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x49, 0x8b, 0x6e, 0xe0, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xe8, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x32, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0xeb, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc7, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x40, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x78, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xfc, 0x4d, 0x89, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 0f 84 a3 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 1a1: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a5: 4d 8b 6e e0                   movq    -0x20(%r14), %r13
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _PyLong_Multiply
// 1b3: 4c 89 ef                      movq    %r13, %rdi
// 1b6: 4c 89 e6                      movq    %r12, %rsi
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 89 c7                      movq    %rax, %r15
// 1be: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1c4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001c6:  R_X86_64_64  PyInterpreterState_Get
// 1ce: 75 1e                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1d0: ff d5                         callq   *%rbp
// 1d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d9: 49 ff 0c 24                   decq    (%r12)
// 1dd: 75 0f                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyObject_Free
// 1e9: 4c 89 e7                      movq    %r12, %rdi
// 1ec: ff d0                         callq   *%rax
// 1ee: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1f3: 75 1e                         jne     0x213 <_JIT_ENTRY+0x213>
// 1f5: ff d5                         callq   *%rbp
// 1f7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1fe: 49 ff 4d 00                   decq    (%r13)
// 202: 75 0f                         jne     0x213 <_JIT_ENTRY+0x213>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  PyObject_Free
// 20e: 4c 89 ef                      movq    %r13, %rdi
// 211: ff d0                         callq   *%rax
// 213: 4d 85 ff                      testq   %r15, %r15
// 216: 74 35                         je      0x24d <_JIT_ENTRY+0x24d>
// 218: 4d 89 7e e0                   movq    %r15, -0x20(%r14)
// 21c: 49 83 c6 e8                   addq    $-0x18, %r14
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_CONTINUE
// 22a: 48 89 df                      movq    %rbx, %rdi
// 22d: 4c 89 f6                      movq    %r14, %rsi
// 230: 48 8b 14 24                   movq    (%rsp), %rdx
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 24b: eb 07                         jmp     0x254 <_JIT_ENTRY+0x254>
// 24d: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 254: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 258: 48 29 d8                      subq    %rbx, %rax
// 25b: 48 83 c0 a8                   addq    $-0x58, %rax
// 25f: 48 c1 e8 03                   shrq    $0x3, %rax
// 263: 89 43 40                      movl    %eax, 0x40(%rbx)
// 266: 31 c0                         xorl    %eax, %eax
// 268: e9 ed fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 26d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_INT_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x6e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x35, 0x4d, 0x89, 0x7e, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xed, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_INT_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 27 01 00 00             je      0x2cc <_JIT_ENTRY+0x2cc>
// 1a5: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a9: 49 8b 6e e0                   movq    -0x20(%r14), %rbp
// 1ad: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 1b2: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 1b9: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 1be: 75 3d                         jne     0x1fd <_JIT_ENTRY+0x1fd>
// 1c0: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 1c5: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1cb: 75 28                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyInterpreterState_Get
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1e0: 49 ff 0c 24                   decq    (%r12)
// 1e4: 75 0f                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _PyFloat_ExactDealloc
// 1f0: 4c 89 e7                      movq    %r12, %rdi
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 89 ec                      movq    %rbp, %r12
// 1f8: e9 e8 00 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 1fd: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 202: 75 32                         jne     0x236 <_JIT_ENTRY+0x236>
// 204: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 20b: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 20f: 0f 85 d0 00 00 00             jne     0x2e5 <_JIT_ENTRY+0x2e5>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  PyInterpreterState_Get
// 21f: ff d0                         callq   *%rax
// 221: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 228: 48 8b 45 00                   movq    (%rbp), %rax
// 22c: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 230: 48 89 4d 00                   movq    %rcx, (%rbp)
// 234: eb 69                         jmp     0x29f <_JIT_ENTRY+0x29f>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyFloat_FromDouble
// 240: ff d0                         callq   *%rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 74 7e                         je      0x2c5 <_JIT_ENTRY+0x2c5>
// 247: 49 89 c7                      movq    %rax, %r15
// 24a: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 24e: 75 25                         jne     0x275 <_JIT_ENTRY+0x275>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyInterpreterState_Get
// 25a: ff d0                         callq   *%rax
// 25c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 263: 48 8b 45 00                   movq    (%rbp), %rax
// 267: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 26b: 48 89 4d 00                   movq    %rcx, (%rbp)
// 26f: 48 83 f8 01                   cmpq    $0x1, %rax
// 273: 7e 30                         jle     0x2a5 <_JIT_ENTRY+0x2a5>
// 275: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 27b: 75 65                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  PyInterpreterState_Get
// 287: ff d0                         callq   *%rax
// 289: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 298: 49 89 0c 24                   movq    %rcx, (%r12)
// 29c: 4d 89 fc                      movq    %r15, %r12
// 29f: 48 83 f8 01                   cmpq    $0x1, %rax
// 2a3: 7f 40                         jg      0x2e5 <_JIT_ENTRY+0x2e5>
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x39
// 2af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1+0x4f
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 83 c6 f0                   addq    $-0x10, %r14
// 2c9: 4d 89 f5                      movq    %r14, %r13
// 2cc: 49 29 dd                      subq    %rbx, %r13
// 2cf: 49 83 c5 b8                   addq    $-0x48, %r13
// 2d3: 49 c1 ed 03                   shrq    $0x3, %r13
// 2d7: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2db: 31 c0                         xorl    %eax, %eax
// 2dd: e9 78 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2e2: 4d 89 fc                      movq    %r15, %r12
// 2e5: 4d 89 66 e0                   movq    %r12, -0x20(%r14)
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _JIT_CONTINUE
// 2f3: 48 89 df                      movq    %rbx, %rdi
// 2f6: 4c 89 ee                      movq    %r13, %rsi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 08                   addq    $0x8, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_FLOAT_code_body[782] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x49, 0x8b, 0x6e, 0xe0, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xe8, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x32, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0xeb, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc7, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x40, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x78, 0xfd, 0xff, 0xff, 0x4d, 0x89, 0xfc, 0x4d, 0x89, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 0f 84 a3 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 1a1: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a5: 4d 8b 6e e0                   movq    -0x20(%r14), %r13
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _PyLong_Subtract
// 1b3: 4c 89 ef                      movq    %r13, %rdi
// 1b6: 4c 89 e6                      movq    %r12, %rsi
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 89 c7                      movq    %rax, %r15
// 1be: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1c4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001c6:  R_X86_64_64  PyInterpreterState_Get
// 1ce: 75 1e                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1d0: ff d5                         callq   *%rbp
// 1d2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d9: 49 ff 0c 24                   decq    (%r12)
// 1dd: 75 0f                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyObject_Free
// 1e9: 4c 89 e7                      movq    %r12, %rdi
// 1ec: ff d0                         callq   *%rax
// 1ee: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1f3: 75 1e                         jne     0x213 <_JIT_ENTRY+0x213>
// 1f5: ff d5                         callq   *%rbp
// 1f7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1fe: 49 ff 4d 00                   decq    (%r13)
// 202: 75 0f                         jne     0x213 <_JIT_ENTRY+0x213>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  PyObject_Free
// 20e: 4c 89 ef                      movq    %r13, %rdi
// 211: ff d0                         callq   *%rax
// 213: 4d 85 ff                      testq   %r15, %r15
// 216: 74 35                         je      0x24d <_JIT_ENTRY+0x24d>
// 218: 4d 89 7e e0                   movq    %r15, -0x20(%r14)
// 21c: 49 83 c6 e8                   addq    $-0x18, %r14
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_CONTINUE
// 22a: 48 89 df                      movq    %rbx, %rdi
// 22d: 4c 89 f6                      movq    %r14, %rsi
// 230: 48 8b 14 24                   movq    (%rsp), %rdx
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 24b: eb 07                         jmp     0x254 <_JIT_ENTRY+0x254>
// 24d: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 254: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 258: 48 29 d8                      subq    %rbx, %rax
// 25b: 48 83 c0 a8                   addq    $-0x58, %rax
// 25f: 48 c1 e8 03                   shrq    $0x3, %rax
// 263: 89 43 40                      movl    %eax, 0x40(%rbx)
// 266: 31 c0                         xorl    %eax, %eax
// 268: e9 ed fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 26d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_INT_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x6e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x35, 0x4d, 0x89, 0x7e, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xed, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_INT_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_SLICE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_SLICE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 71: 49 8b 06                      movq    (%r14), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 e6                      movq    %r12, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c5                      movq    %rax, %r13
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 04 24                   movq    (%r12), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 e2                      movq    %r12, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 0c 24                   decq    (%r12)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 e7                      movq    %r12, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 ed                      testq   %r13, %r13
// 19b: 0f 84 0f 01 00 00             je      0x2b0 <_JIT_ENTRY+0x2b0>
// 1a1: 4c 89 6b e8                   movq    %r13, -0x18(%rbx)
// 1a5: 4c 8b 63 d8                   movq    -0x28(%rbx), %r12
// 1a9: 48 8b 7b e0                   movq    -0x20(%rbx), %rdi
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1b7: 4c 89 ee                      movq    %r13, %rsi
// 1ba: ff d0                         callq   *%rax
// 1bc: 48 85 c0                      testq   %rax, %rax
// 1bf: 74 67                         je      0x228 <_JIT_ENTRY+0x228>
// 1c1: 49 89 c7                      movq    %rax, %r15
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  PyObject_GetItem
// 1ce: 4c 89 e7                      movq    %r12, %rdi
// 1d1: 4c 89 fe                      movq    %r15, %rsi
// 1d4: ff d0                         callq   *%rax
// 1d6: 49 89 c5                      movq    %rax, %r13
// 1d9: 49 8b 07                      movq    (%r15), %rax
// 1dc: 48 85 c0                      testq   %rax, %rax
// 1df: 7f 21                         jg      0x202 <_JIT_ENTRY+0x202>
// 1e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_NegativeRefcount
// 1f5: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 1fa: 4c 89 fa                      movq    %r15, %rdx
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 8b 07                      movq    (%r15), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 25                         js      0x22b <_JIT_ENTRY+0x22b>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 0f                      decq    (%r15)
// 215: 75 14                         jne     0x22b <_JIT_ENTRY+0x22b>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 4c 89 ff                      movq    %r15, %rdi
// 224: ff d0                         callq   *%rax
// 226: eb 03                         jmp     0x22b <_JIT_ENTRY+0x22b>
// 228: 45 31 ed                      xorl    %r13d, %r13d
// 22b: 49 8b 04 24                   movq    (%r12), %rax
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 7f 22                         jg      0x256 <_JIT_ENTRY+0x256>
// 234: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000236:  R_X86_64_64  .rodata.str1.1
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_NegativeRefcount
// 248: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 24d: 4c 89 e2                      movq    %r12, %rdx
// 250: ff d0                         callq   *%rax
// 252: 49 8b 04 24                   movq    (%r12), %rax
// 256: 85 c0                         testl   %eax, %eax
// 258: 78 21                         js      0x27b <_JIT_ENTRY+0x27b>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 264: ff d0                         callq   *%rax
// 266: 49 ff 0c 24                   decq    (%r12)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 4c 89 e7                      movq    %r12, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 4d 85 ed                      testq   %r13, %r13
// 27e: 74 2c                         je      0x2ac <_JIT_ENTRY+0x2ac>
// 280: 4c 89 6b d8                   movq    %r13, -0x28(%rbx)
// 284: 48 83 c3 e0                   addq    $-0x20, %rbx
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _JIT_CONTINUE
// 292: 4c 89 f7                      movq    %r14, %rdi
// 295: 48 89 de                      movq    %rbx, %rsi
// 298: 48 8b 14 24                   movq    (%rsp), %rdx
// 29c: 48 83 c4 08                   addq    $0x8, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: ff e0                         jmpq    *%rax
// 2ac: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2b0: 4c 29 f3                      subq    %r14, %rbx
// 2b3: 48 83 c3 a0                   addq    $-0x60, %rbx
// 2b7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2bb: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2bf: 31 c0                         xorl    %eax, %eax
// 2c1: e9 94 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2c6: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SLICE_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x0f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xe8, 0x4c, 0x8b, 0x63, 0xd8, 0x48, 0x8b, 0x7b, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x03, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x2c, 0x4c, 0x89, 0x6b, 0xd8, 0x48, 0x83, 0xc3, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x94, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SLICE_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SLICE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 85 ed                      testq   %rbp, %rbp
// 1a2: 0f 84 ed 00 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 1a8: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 1ac: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  PyObject_GetItem
// 1ba: 4c 89 e7                      movq    %r12, %rdi
// 1bd: 48 89 ee                      movq    %rbp, %rsi
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 89 c5                      movq    %rax, %r13
// 1c5: 49 8b 04 24                   movq    (%r12), %rax
// 1c9: 48 85 c0                      testq   %rax, %rax
// 1cc: 7f 22                         jg      0x1f0 <_JIT_ENTRY+0x1f0>
// 1ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d0:  R_X86_64_64  .rodata.str1.1
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_NegativeRefcount
// 1e2: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 1e7: 4c 89 e2                      movq    %r12, %rdx
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 8b 04 24                   movq    (%r12), %rax
// 1f0: 85 c0                         testl   %eax, %eax
// 1f2: 78 21                         js      0x215 <_JIT_ENTRY+0x215>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 49 ff 0c 24                   decq    (%r12)
// 204: 75 0f                         jne     0x215 <_JIT_ENTRY+0x215>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_Dealloc
// 210: 4c 89 e7                      movq    %r12, %rdi
// 213: ff d0                         callq   *%rax
// 215: 48 8b 45 00                   movq    (%rbp), %rax
// 219: 48 85 c0                      testq   %rax, %rax
// 21c: 7f 22                         jg      0x240 <_JIT_ENTRY+0x240>
// 21e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000220:  R_X86_64_64  .rodata.str1.1
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_NegativeRefcount
// 232: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 237: 48 89 ea                      movq    %rbp, %rdx
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 45 00                   movq    (%rbp), %rax
// 240: 85 c0                         testl   %eax, %eax
// 242: 78 21                         js      0x265 <_JIT_ENTRY+0x265>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24e: ff d0                         callq   *%rax
// 250: 48 ff 4d 00                   decq    (%rbp)
// 254: 75 0f                         jne     0x265 <_JIT_ENTRY+0x265>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_Dealloc
// 260: 48 89 ef                      movq    %rbp, %rdi
// 263: ff d0                         callq   *%rax
// 265: 4d 85 ed                      testq   %r13, %r13
// 268: 74 34                         je      0x29e <_JIT_ENTRY+0x29e>
// 26a: 4d 89 6e e0                   movq    %r13, -0x20(%r14)
// 26e: 49 83 c6 e8                   addq    $-0x18, %r14
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _JIT_CONTINUE
// 27c: 48 89 df                      movq    %rbx, %rdi
// 27f: 4c 89 f6                      movq    %r14, %rsi
// 282: 4c 89 fa                      movq    %r15, %rdx
// 285: 48 83 c4 08                   addq    $0x8, %rsp
// 289: 5b                            popq    %rbx
// 28a: 41 5c                         popq    %r12
// 28c: 41 5d                         popq    %r13
// 28e: 41 5e                         popq    %r14
// 290: 41 5f                         popq    %r15
// 292: 5d                            popq    %rbp
// 293: ff e0                         jmpq    *%rax
// 295: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 29c: eb 07                         jmp     0x2a5 <_JIT_ENTRY+0x2a5>
// 29e: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 2a5: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2a9: 48 29 d8                      subq    %rbx, %rax
// 2ac: 48 83 c0 a8                   addq    $-0x58, %rax
// 2b0: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2b7: 31 c0                         xorl    %eax, %eax
// 2b9: e9 9c fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2be: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_code_body[703] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x8b, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x4d, 0x89, 0x6e, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x9c, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 0f 85 6e 01 00 00             jne     0x196 <_JIT_ENTRY+0x196>
// 28: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 59 01 00 00             je      0x196 <_JIT_ENTRY+0x196>
// 3d: 49 89 d7                      movq    %rdx, %r15
// 40: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5b: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PySuper_Lookup
// 6a: 48 89 ef                      movq    %rbp, %rdi
// 6d: 4c 89 ee                      movq    %r13, %rsi
// 70: 31 c9                         xorl    %ecx, %ecx
// 72: ff d0                         callq   *%rax
// 74: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 79: 49 8b 04 24                   movq    (%r12), %rax
// 7d: 48 85 c0                      testq   %rax, %rax
// 80: 7f 22                         jg      0xa4 <_JIT_ENTRY+0xa4>
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 28                         js      0xd0 <_JIT_ENTRY+0xd0>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 16                         jne     0xd0 <_JIT_ENTRY+0xd0>
// ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000bc:  R_X86_64_64  PySuper_Type
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _Py_Dealloc
// ce: ff d0                         callq   *%rax
// d0: 48 8b 45 00                   movq    (%rbp), %rax
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 7f 22                         jg      0xfb <_JIT_ENTRY+0xfb>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// f2: 48 89 ea                      movq    %rbp, %rdx
// f5: ff d0                         callq   *%rax
// f7: 48 8b 45 00                   movq    (%rbp), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 102: 78 21                         js      0x125 <_JIT_ENTRY+0x125>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10e: ff d0                         callq   *%rax
// 110: 48 ff 4d 00                   decq    (%rbp)
// 114: 75 0f                         jne     0x125 <_JIT_ENTRY+0x125>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_Dealloc
// 120: 48 89 ef                      movq    %rbp, %rdi
// 123: ff d0                         callq   *%rax
// 125: 49 8b 45 00                   movq    (%r13), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7f 22                         jg      0x150 <_JIT_ENTRY+0x150>
// 12e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000130:  R_X86_64_64  .rodata.str1.1
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_NegativeRefcount
// 142: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 147: 4c 89 ea                      movq    %r13, %rdx
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 45 00                   movq    (%r13), %rax
// 150: 85 c0                         testl   %eax, %eax
// 152: 78 21                         js      0x175 <_JIT_ENTRY+0x175>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15e: ff d0                         callq   *%rax
// 160: 49 ff 4d 00                   decq    (%r13)
// 164: 75 0f                         jne     0x175 <_JIT_ENTRY+0x175>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_Dealloc
// 170: 4c 89 ef                      movq    %r13, %rdi
// 173: ff d0                         callq   *%rax
// 175: 4d 85 e4                      testq   %r12, %r12
// 178: 74 53                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 17a: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 17e: 4d 8b 6e e0                   movq    -0x20(%r14), %r13
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  PyDict_Type
// 18c: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 190: 74 58                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 192: 49 83 c6 f0                   addq    $-0x10, %r14
// 196: 49 29 de                      subq    %rbx, %r14
// 199: 49 83 c6 b8                   addq    $-0x48, %r14
// 19d: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a5: 48 8b 03                      movq    (%rbx), %rax
// 1a8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001aa:  R_X86_64_64  _JIT_TARGET
// 1b2: 89 c9                         movl    %ecx, %ecx
// 1b4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1be: 48 83 c4 18                   addq    $0x18, %rsp
// 1c2: 5b                            popq    %rbx
// 1c3: 41 5c                         popq    %r12
// 1c5: 41 5d                         popq    %r13
// 1c7: 41 5e                         popq    %r14
// 1c9: 41 5f                         popq    %r15
// 1cb: 5d                            popq    %rbp
// 1cc: c3                            retq
// 1cd: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 1d4: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1d8: 48 29 d8                      subq    %rbx, %rax
// 1db: 48 83 c0 a8                   addq    $-0x58, %rax
// 1df: 48 c1 e8 03                   shrq    $0x3, %rax
// 1e3: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1e6: 31 c0                         xorl    %eax, %eax
// 1e8: eb d4                         jmp     0x1be <_JIT_ENTRY+0x1be>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  PyDict_GetItemRef
// 1f4: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 1f9: 4c 89 ef                      movq    %r13, %rdi
// 1fc: 4c 89 e6                      movq    %r12, %rsi
// 1ff: ff d0                         callq   *%rax
// 201: 89 c5                         movl    %eax, %ebp
// 203: 85 c0                         testl   %eax, %eax
// 205: 74 19                         je      0x220 <_JIT_ENTRY+0x220>
// 207: 49 8b 45 00                   movq    (%r13), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7e 28                         jle     0x238 <_JIT_ENTRY+0x238>
// 210: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000212:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 79 4a                         jns     0x268 <_JIT_ENTRY+0x268>
// 21e: eb 60                         jmp     0x280 <_JIT_ENTRY+0x280>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _PyErr_SetKeyError
// 22a: 4c 89 e7                      movq    %r12, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 49 8b 45 00                   movq    (%r13), %rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 7f d8                         jg      0x210 <_JIT_ENTRY+0x210>
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  .rodata.str1.1
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 251: 4c 89 ea                      movq    %r13, %rdx
// 254: ff d0                         callq   *%rax
// 256: 49 8b 45 00                   movq    (%r13), %rax
// 25a: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000025c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 264: 85 c0                         testl   %eax, %eax
// 266: 78 18                         js      0x280 <_JIT_ENTRY+0x280>
// 268: 41 ff d4                      callq   *%r12
// 26b: 49 ff 4d 00                   decq    (%r13)
// 26f: 75 0f                         jne     0x280 <_JIT_ENTRY+0x280>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 ef                      movq    %r13, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 285: 48 8b 00                      movq    (%rax), %rax
// 288: 48 85 c0                      testq   %rax, %rax
// 28b: 7f 27                         jg      0x2b4 <_JIT_ENTRY+0x2b4>
// 28d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028f:  R_X86_64_64  .rodata.str1.1
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_NegativeRefcount
// 2a1: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 2a6: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 2ab: 4c 89 ea                      movq    %r13, %rdx
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 45 00                   movq    (%r13), %rax
// 2b4: 85 c0                         testl   %eax, %eax
// 2b6: 78 1e                         js      0x2d6 <_JIT_ENTRY+0x2d6>
// 2b8: 41 ff d4                      callq   *%r12
// 2bb: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2c0: 48 ff 08                      decq    (%rax)
// 2c3: 75 11                         jne     0x2d6 <_JIT_ENTRY+0x2d6>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_Dealloc
// 2cf: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 85 ed                         testl   %ebp, %ebp
// 2d8: 7e 30                         jle     0x30a <_JIT_ENTRY+0x30a>
// 2da: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2df: 49 89 46 e0                   movq    %rax, -0x20(%r14)
// 2e3: 49 83 c6 e8                   addq    $-0x18, %r14
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _JIT_CONTINUE
// 2f1: 48 89 df                      movq    %rbx, %rdi
// 2f4: 4c 89 f6                      movq    %r14, %rsi
// 2f7: 4c 89 fa                      movq    %r15, %rdx
// 2fa: 48 83 c4 18                   addq    $0x18, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: ff e0                         jmpq    *%rax
// 30a: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 311: e9 be fe ff ff                jmp     0x1d4 <_JIT_ENTRY+0x1d4>
// 316: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_DICT_code_body[791] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x0f, 0x85, 0x6e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x59, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x53, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x6e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x58, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xd4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x19, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x28, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x4a, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x1e, 0x41, 0xff, 0xd4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xed, 0x7e, 0x30, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0xe9, 0xbe, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_DICT_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_DICT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_LIST_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 18                   addq    $0x18, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 49 89 d6                      movq    %rdx, %r14
// 71: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 48 85 c0                      testq   %rax, %rax
// b1: 7f 22                         jg      0xd5 <_JIT_ENTRY+0xd5>
// b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b5:  R_X86_64_64  .rodata.str1.1
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_NegativeRefcount
// c7: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cc: 4c 89 e2                      movq    %r12, %rdx
// cf: ff d0                         callq   *%rax
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 85 c0                         testl   %eax, %eax
// d7: 78 28                         js      0x101 <_JIT_ENTRY+0x101>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e3: ff d0                         callq   *%rax
// e5: 49 ff 0c 24                   decq    (%r12)
// e9: 75 16                         jne     0x101 <_JIT_ENTRY+0x101>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  PySuper_Type
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f 22                         jg      0x12c <_JIT_ENTRY+0x12c>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 123: 48 89 ea                      movq    %rbp, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 45 00                   movq    (%rbp), %rax
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 133: 78 21                         js      0x156 <_JIT_ENTRY+0x156>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 48 ff 4d 00                   decq    (%rbp)
// 145: 75 0f                         jne     0x156 <_JIT_ENTRY+0x156>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_Dealloc
// 151: 48 89 ef                      movq    %rbp, %rdi
// 154: ff d0                         callq   *%rax
// 156: 49 8b 45 00                   movq    (%r13), %rax
// 15a: 48 85 c0                      testq   %rax, %rax
// 15d: 7f 22                         jg      0x181 <_JIT_ENTRY+0x181>
// 15f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000161:  R_X86_64_64  .rodata.str1.1
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_NegativeRefcount
// 173: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 178: 4c 89 ea                      movq    %r13, %rdx
// 17b: ff d0                         callq   *%rax
// 17d: 49 8b 45 00                   movq    (%r13), %rax
// 181: 85 c0                         testl   %eax, %eax
// 183: 78 21                         js      0x1a6 <_JIT_ENTRY+0x1a6>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18f: ff d0                         callq   *%rax
// 191: 49 ff 4d 00                   decq    (%r13)
// 195: 75 0f                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 4c 89 ef                      movq    %r13, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 1aa: 4d 85 e4                      testq   %r12, %r12
// 1ad: 0f 84 26 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 1b3: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1b7: 4d 89 67 e8                   movq    %r12, -0x18(%r15)
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  PyLong_Type
// 1c5: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1ca: 0f 85 68 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1d0: 49 8b 6f e0                   movq    -0x20(%r15), %rbp
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  PyList_Type
// 1de: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 1e2: 0f 85 50 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1e8: 49 83 7c 24 10 08             cmpq    $0x8, 0x10(%r12)
// 1ee: 0f 87 44 fe ff ff             ja      0x38 <_JIT_ENTRY+0x38>
// 1f4: 41 8b 4c 24 18                movl    0x18(%r12), %ecx
// 1f9: 48 39 4d 10                   cmpq    %rcx, 0x10(%rbp)
// 1fd: 0f 8e 35 fe ff ff             jle     0x38 <_JIT_ENTRY+0x38>
// 203: 48 8b 45 18                   movq    0x18(%rbp), %rax
// 207: 4c 8b 24 c8                   movq    (%rax,%rcx,8), %r12
// 20b: 41 8b 04 24                   movl    (%r12), %eax
// 20f: ff c0                         incl    %eax
// 211: 74 10                         je      0x223 <_JIT_ENTRY+0x223>
// 213: 41 89 04 24                   movl    %eax, (%r12)
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 221: ff d0                         callq   *%rax
// 223: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
// 228: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 22d: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 233: 75 28                         jne     0x25d <_JIT_ENTRY+0x25d>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  PyInterpreterState_Get
// 23f: ff d0                         callq   *%rax
// 241: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 248: 49 ff 0c 24                   decq    (%r12)
// 24c: 75 0f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  PyObject_Free
// 258: 4c 89 e7                      movq    %r12, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 48 8b 45 00                   movq    (%rbp), %rax
// 261: 48 85 c0                      testq   %rax, %rax
// 264: 7f 22                         jg      0x288 <_JIT_ENTRY+0x288>
// 266: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000268:  R_X86_64_64  .rodata.str1.1
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_NegativeRefcount
// 27a: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 27f: 48 89 ea                      movq    %rbp, %rdx
// 282: ff d0                         callq   *%rax
// 284: 48 8b 45 00                   movq    (%rbp), %rax
// 288: 85 c0                         testl   %eax, %eax
// 28a: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 28f: 78 21                         js      0x2b2 <_JIT_ENTRY+0x2b2>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29b: ff d0                         callq   *%rax
// 29d: 48 ff 4d 00                   decq    (%rbp)
// 2a1: 75 0f                         jne     0x2b2 <_JIT_ENTRY+0x2b2>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_Dealloc
// 2ad: 48 89 ef                      movq    %rbp, %rdi
// 2b0: ff d0                         callq   *%rax
// 2b2: 4d 89 67 e0                   movq    %r12, -0x20(%r15)
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _JIT_CONTINUE
// 2c0: 48 89 df                      movq    %rbx, %rdi
// 2c3: 4c 89 ee                      movq    %r13, %rsi
// 2c6: 4c 89 f2                      movq    %r14, %rdx
// 2c9: 48 83 c4 18                   addq    $0x18, %rsp
// 2cd: 5b                            popq    %rbx
// 2ce: 41 5c                         popq    %r12
// 2d0: 41 5d                         popq    %r13
// 2d2: 41 5e                         popq    %r14
// 2d4: 41 5f                         popq    %r15
// 2d6: 5d                            popq    %rbp
// 2d7: ff e0                         jmpq    *%rax
// 2d9: 49 29 dd                      subq    %rbx, %r13
// 2dc: 49 83 c5 b8                   addq    $-0x48, %r13
// 2e0: 49 c1 ed 03                   shrq    $0x3, %r13
// 2e4: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2e8: 31 c0                         xorl    %eax, %eax
// 2ea: e9 70 fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 2ef: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_LIST_INT_code_body[752] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x26, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x67, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x68, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6f, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x50, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x08, 0x0f, 0x87, 0x44, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x39, 0x4d, 0x10, 0x0f, 0x8e, 0x35, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x45, 0x18, 0x4c, 0x8b, 0x24, 0xc8, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x64, 0x24, 0x10, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x67, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x70, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_LIST_INT_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_STR_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 39                         jne     0x6b <_JIT_ENTRY+0x6b>
// 32: 4c 89 f8                      movq    %r15, %rax
// 35: 48 29 d8                      subq    %rbx, %rax
// 38: 48 83 c0 b8                   addq    $-0x48, %rax
// 3c: 48 c1 e8 03                   shrq    $0x3, %rax
// 40: 89 43 40                      movl    %eax, 0x40(%rbx)
// 43: 48 8b 03                      movq    (%rbx), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 56: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5c: 48 83 c4 08                   addq    $0x8, %rsp
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5d                         popq    %r13
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: 5d                            popq    %rbp
// 6a: c3                            retq
// 6b: 48 89 14 24                   movq    %rdx, (%rsp)
// 6f: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 49 89 c6                      movq    %rax, %r14
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 48 85 c0                      testq   %rax, %rax
// ad: 7f 22                         jg      0xd1 <_JIT_ENTRY+0xd1>
// af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b1:  R_X86_64_64  .rodata.str1.1
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_NegativeRefcount
// c3: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c8: 4c 89 e2                      movq    %r12, %rdx
// cb: ff d0                         callq   *%rax
// cd: 49 8b 04 24                   movq    (%r12), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 28                         js      0xfd <_JIT_ENTRY+0xfd>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0c 24                   decq    (%r12)
// e5: 75 16                         jne     0xfd <_JIT_ENTRY+0xfd>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  PySuper_Type
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_Dealloc
// fb: ff d0                         callq   *%rax
// fd: 48 8b 45 00                   movq    (%rbp), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f 22                         jg      0x128 <_JIT_ENTRY+0x128>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11f: 48 89 ea                      movq    %rbp, %rdx
// 122: ff d0                         callq   *%rax
// 124: 48 8b 45 00                   movq    (%rbp), %rax
// 128: 85 c0                         testl   %eax, %eax
// 12a: 78 21                         js      0x14d <_JIT_ENTRY+0x14d>
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 136: ff d0                         callq   *%rax
// 138: 48 ff 4d 00                   decq    (%rbp)
// 13c: 75 0f                         jne     0x14d <_JIT_ENTRY+0x14d>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_Dealloc
// 148: 48 89 ef                      movq    %rbp, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 49 8b 45 00                   movq    (%r13), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 22                         jg      0x178 <_JIT_ENTRY+0x178>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16f: 4c 89 ea                      movq    %r13, %rdx
// 172: ff d0                         callq   *%rax
// 174: 49 8b 45 00                   movq    (%r13), %rax
// 178: 85 c0                         testl   %eax, %eax
// 17a: 78 21                         js      0x19d <_JIT_ENTRY+0x19d>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 186: ff d0                         callq   *%rax
// 188: 49 ff 4d 00                   decq    (%r13)
// 18c: 75 0f                         jne     0x19d <_JIT_ENTRY+0x19d>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 4c 89 ef                      movq    %r13, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 1a1: 4d 85 f6                      testq   %r14, %r14
// 1a4: 74 71                         je      0x217 <_JIT_ENTRY+0x217>
// 1a6: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1aa: 4d 89 77 e8                   movq    %r14, -0x18(%r15)
// 1ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b0:  R_X86_64_64  PyLong_Type
// 1b8: 49 39 4e 08                   cmpq    %rcx, 0x8(%r14)
// 1bc: 0f 85 73 fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1c2: 49 8b 6f e0                   movq    -0x20(%r15), %rbp
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  PyUnicode_Type
// 1d0: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 1d4: 0f 85 5b fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1da: 49 83 7e 10 08                cmpq    $0x8, 0x10(%r14)
// 1df: 0f 87 50 fe ff ff             ja      0x35 <_JIT_ENTRY+0x35>
// 1e5: 41 8b 4e 18                   movl    0x18(%r14), %ecx
// 1e9: 48 39 4d 10                   cmpq    %rcx, 0x10(%rbp)
// 1ed: 0f 8e 42 fe ff ff             jle     0x35 <_JIT_ENTRY+0x35>
// 1f3: 8b 55 20                      movl    0x20(%rbp), %edx
// 1f6: 89 d6                         movl    %edx, %esi
// 1f8: c1 ee 02                      shrl    $0x2, %esi
// 1fb: 83 e6 07                      andl    $0x7, %esi
// 1fe: 83 fe 02                      cmpl    $0x2, %esi
// 201: 74 2a                         je      0x22d <_JIT_ENTRY+0x22d>
// 203: 83 fe 01                      cmpl    $0x1, %esi
// 206: 75 34                         jne     0x23c <_JIT_ENTRY+0x23c>
// 208: f6 c2 20                      testb   $0x20, %dl
// 20b: 75 3a                         jne     0x247 <_JIT_ENTRY+0x247>
// 20d: 48 8b 55 38                   movq    0x38(%rbp), %rdx
// 211: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 215: eb 7e                         jmp     0x295 <_JIT_ENTRY+0x295>
// 217: 49 29 dd                      subq    %rbx, %r13
// 21a: 49 83 c5 b8                   addq    $-0x48, %r13
// 21e: 49 c1 ed 03                   shrq    $0x3, %r13
// 222: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 226: 31 c0                         xorl    %eax, %eax
// 228: e9 2f fe ff ff                jmp     0x5c <_JIT_ENTRY+0x5c>
// 22d: f6 c2 20                      testb   $0x20, %dl
// 230: 75 30                         jne     0x262 <_JIT_ENTRY+0x262>
// 232: 48 8b 55 38                   movq    0x38(%rbp), %rdx
// 236: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 23a: eb 59                         jmp     0x295 <_JIT_ENTRY+0x295>
// 23c: f6 c2 20                      testb   $0x20, %dl
// 23f: 75 3c                         jne     0x27d <_JIT_ENTRY+0x27d>
// 241: 48 8b 55 38                   movq    0x38(%rbp), %rdx
// 245: eb 4b                         jmp     0x292 <_JIT_ENTRY+0x292>
// 247: 31 f6                         xorl    %esi, %esi
// 249: f6 c2 40                      testb   $0x40, %dl
// 24c: 40 0f 94 c6                   sete    %sil
// 250: 48 c1 e6 04                   shlq    $0x4, %rsi
// 254: 48 8d 14 2e                   leaq    (%rsi,%rbp), %rdx
// 258: 48 83 c2 28                   addq    $0x28, %rdx
// 25c: 0f b6 0c 0a                   movzbl  (%rdx,%rcx), %ecx
// 260: eb 33                         jmp     0x295 <_JIT_ENTRY+0x295>
// 262: 31 f6                         xorl    %esi, %esi
// 264: f6 c2 40                      testb   $0x40, %dl
// 267: 40 0f 94 c6                   sete    %sil
// 26b: 48 c1 e6 04                   shlq    $0x4, %rsi
// 26f: 48 8d 14 2e                   leaq    (%rsi,%rbp), %rdx
// 273: 48 83 c2 28                   addq    $0x28, %rdx
// 277: 0f b7 0c 4a                   movzwl  (%rdx,%rcx,2), %ecx
// 27b: eb 18                         jmp     0x295 <_JIT_ENTRY+0x295>
// 27d: 31 f6                         xorl    %esi, %esi
// 27f: f6 c2 40                      testb   $0x40, %dl
// 282: 40 0f 94 c6                   sete    %sil
// 286: 48 c1 e6 04                   shlq    $0x4, %rsi
// 28a: 48 8d 14 2e                   leaq    (%rsi,%rbp), %rdx
// 28e: 48 83 c2 28                   addq    $0x28, %rdx
// 292: 8b 0c 8a                      movl    (%rdx,%rcx,4), %ecx
// 295: 83 f9 7f                      cmpl    $0x7f, %ecx
// 298: 0f 87 97 fd ff ff             ja      0x35 <_JIT_ENTRY+0x35>
// 29e: 89 c8                         movl    %ecx, %eax
// 2a0: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 2a4: 48 c1 e0 04                   shlq    $0x4, %rax
// 2a8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002aa:  R_X86_64_64  _PyRuntime
// 2b2: 4c 8d 24 01                   leaq    (%rcx,%rax), %r12
// 2b6: 49 81 c4 a0 32 01 00          addq    $0x132a0, %r12          # imm = 0x132A0
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  .text+0x370
// 2c7: 4c 89 f7                      movq    %r14, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  .text+0x310
// 2d6: bf e3 01 00 00                movl    $0x1e3, %edi            # imm = 0x1E3
// 2db: 48 89 ee                      movq    %rbp, %rsi
// 2de: ff d0                         callq   *%rax
// 2e0: 4d 89 67 e0                   movq    %r12, -0x20(%r15)
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _JIT_CONTINUE
// 2ee: 48 89 df                      movq    %rbx, %rdi
// 2f1: 4c 89 ee                      movq    %r13, %rsi
// 2f4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2f8: 48 83 c4 08                   addq    $0x8, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: ff e0                         jmpq    *%rax
// 308: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 
// 0000000000000310 <Py_DECREF>:
// 310: 53                            pushq   %rbx
// 311: 48 89 f3                      movq    %rsi, %rbx
// 314: 48 8b 06                      movq    (%rsi), %rax
// 317: 48 85 c0                      testq   %rax, %rax
// 31a: 7e 06                         jle     0x322 <Py_DECREF+0x12>
// 31c: 85 c0                         testl   %eax, %eax
// 31e: 79 24                         jns     0x344 <Py_DECREF+0x34>
// 320: eb 33                         jmp     0x355 <Py_DECREF+0x45>
// 322: 89 fe                         movl    %edi, %esi
// 324: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000326:  R_X86_64_64  .rodata.str1.1
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _Py_NegativeRefcount
// 338: 48 89 da                      movq    %rbx, %rdx
// 33b: ff d0                         callq   *%rax
// 33d: 48 8b 03                      movq    (%rbx), %rax
// 340: 85 c0                         testl   %eax, %eax
// 342: 78 11                         js      0x355 <Py_DECREF+0x45>
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34e: ff d0                         callq   *%rax
// 350: 48 ff 0b                      decq    (%rbx)
// 353: 74 02                         je      0x357 <Py_DECREF+0x47>
// 355: 5b                            popq    %rbx
// 356: c3                            retq
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _Py_Dealloc
// 361: 48 89 df                      movq    %rbx, %rdi
// 364: 5b                            popq    %rbx
// 365: ff e0                         jmpq    *%rax
// 367: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 
// 0000000000000370 <_Py_DECREF_SPECIALIZED>:
// 370: 53                            pushq   %rbx
// 371: f6 47 03 80                   testb   $-0x80, 0x3(%rdi)
// 375: 75 1b                         jne     0x392 <_Py_DECREF_SPECIALIZED+0x22>
// 377: 48 89 fb                      movq    %rdi, %rbx
// 37a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037c:  R_X86_64_64  PyInterpreterState_Get
// 384: ff d0                         callq   *%rax
// 386: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 38d: 48 ff 0b                      decq    (%rbx)
// 390: 74 02                         je      0x394 <_Py_DECREF_SPECIALIZED+0x24>
// 392: 5b                            popq    %rbx
// 393: c3                            retq
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  PyObject_Free
// 39e: 48 89 df                      movq    %rbx, %rdi
// 3a1: 5b                            popq    %rbx
// 3a2: ff e0                         jmpq    *%rax
// 3a4: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_STR_INT_code_body[933] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xe8, 0x4d, 0x85, 0xf6, 0x74, 0x71, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x77, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4e, 0x08, 0x0f, 0x85, 0x73, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6f, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x5b, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7e, 0x10, 0x08, 0x0f, 0x87, 0x50, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4e, 0x18, 0x48, 0x39, 0x4d, 0x10, 0x0f, 0x8e, 0x42, 0xfe, 0xff, 0xff, 0x8b, 0x55, 0x20, 0x89, 0xd6, 0xc1, 0xee, 0x02, 0x83, 0xe6, 0x07, 0x83, 0xfe, 0x02, 0x74, 0x2a, 0x83, 0xfe, 0x01, 0x75, 0x34, 0xf6, 0xc2, 0x20, 0x75, 0x3a, 0x48, 0x8b, 0x55, 0x38, 0x0f, 0xb6, 0x0c, 0x0a, 0xeb, 0x7e, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x2f, 0xfe, 0xff, 0xff, 0xf6, 0xc2, 0x20, 0x75, 0x30, 0x48, 0x8b, 0x55, 0x38, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x59, 0xf6, 0xc2, 0x20, 0x75, 0x3c, 0x48, 0x8b, 0x55, 0x38, 0xeb, 0x4b, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x48, 0x8d, 0x14, 0x2e, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb6, 0x0c, 0x0a, 0xeb, 0x33, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x48, 0x8d, 0x14, 0x2e, 0x48, 0x83, 0xc2, 0x28, 0x0f, 0xb7, 0x0c, 0x4a, 0xeb, 0x18, 0x31, 0xf6, 0xf6, 0xc2, 0x40, 0x40, 0x0f, 0x94, 0xc6, 0x48, 0xc1, 0xe6, 0x04, 0x48, 0x8d, 0x14, 0x2e, 0x48, 0x83, 0xc2, 0x28, 0x8b, 0x0c, 0x8a, 0x83, 0xf9, 0x7f, 0x0f, 0x87, 0x97, 0xfd, 0xff, 0xff, 0x89, 0xc8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x24, 0x01, 0x49, 0x81, 0xc4, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xe3, 0x01, 0x00, 0x00, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x4d, 0x89, 0x67, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x1b, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_STR_INT_code_holes[30] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x370},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x310},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_TUPLE_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 18                   addq    $0x18, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 49 89 d6                      movq    %rdx, %r14
// 71: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 48 85 c0                      testq   %rax, %rax
// b1: 7f 22                         jg      0xd5 <_JIT_ENTRY+0xd5>
// b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b5:  R_X86_64_64  .rodata.str1.1
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_NegativeRefcount
// c7: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cc: 4c 89 e2                      movq    %r12, %rdx
// cf: ff d0                         callq   *%rax
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 85 c0                         testl   %eax, %eax
// d7: 78 28                         js      0x101 <_JIT_ENTRY+0x101>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e3: ff d0                         callq   *%rax
// e5: 49 ff 0c 24                   decq    (%r12)
// e9: 75 16                         jne     0x101 <_JIT_ENTRY+0x101>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  PySuper_Type
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f 22                         jg      0x12c <_JIT_ENTRY+0x12c>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 123: 48 89 ea                      movq    %rbp, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 45 00                   movq    (%rbp), %rax
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 133: 78 21                         js      0x156 <_JIT_ENTRY+0x156>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 48 ff 4d 00                   decq    (%rbp)
// 145: 75 0f                         jne     0x156 <_JIT_ENTRY+0x156>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_Dealloc
// 151: 48 89 ef                      movq    %rbp, %rdi
// 154: ff d0                         callq   *%rax
// 156: 49 8b 45 00                   movq    (%r13), %rax
// 15a: 48 85 c0                      testq   %rax, %rax
// 15d: 7f 22                         jg      0x181 <_JIT_ENTRY+0x181>
// 15f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000161:  R_X86_64_64  .rodata.str1.1
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_NegativeRefcount
// 173: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 178: 4c 89 ea                      movq    %r13, %rdx
// 17b: ff d0                         callq   *%rax
// 17d: 49 8b 45 00                   movq    (%r13), %rax
// 181: 85 c0                         testl   %eax, %eax
// 183: 78 21                         js      0x1a6 <_JIT_ENTRY+0x1a6>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18f: ff d0                         callq   *%rax
// 191: 49 ff 4d 00                   decq    (%r13)
// 195: 75 0f                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 4c 89 ef                      movq    %r13, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 1aa: 4d 85 e4                      testq   %r12, %r12
// 1ad: 0f 84 23 01 00 00             je      0x2d6 <_JIT_ENTRY+0x2d6>
// 1b3: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1b7: 4d 89 67 e8                   movq    %r12, -0x18(%r15)
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  PyLong_Type
// 1c5: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1ca: 0f 85 68 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1d0: 49 8b 6f e0                   movq    -0x20(%r15), %rbp
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  PyTuple_Type
// 1de: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 1e2: 0f 85 50 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1e8: 49 83 7c 24 10 08             cmpq    $0x8, 0x10(%r12)
// 1ee: 0f 87 44 fe ff ff             ja      0x38 <_JIT_ENTRY+0x38>
// 1f4: 41 8b 4c 24 18                movl    0x18(%r12), %ecx
// 1f9: 48 39 4d 10                   cmpq    %rcx, 0x10(%rbp)
// 1fd: 0f 8e 35 fe ff ff             jle     0x38 <_JIT_ENTRY+0x38>
// 203: 4c 8b 64 cd 18                movq    0x18(%rbp,%rcx,8), %r12
// 208: 41 8b 04 24                   movl    (%r12), %eax
// 20c: ff c0                         incl    %eax
// 20e: 74 10                         je      0x220 <_JIT_ENTRY+0x220>
// 210: 41 89 04 24                   movl    %eax, (%r12)
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 21e: ff d0                         callq   *%rax
// 220: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
// 225: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 22a: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 230: 75 28                         jne     0x25a <_JIT_ENTRY+0x25a>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  PyInterpreterState_Get
// 23c: ff d0                         callq   *%rax
// 23e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 245: 49 ff 0c 24                   decq    (%r12)
// 249: 75 0f                         jne     0x25a <_JIT_ENTRY+0x25a>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  PyObject_Free
// 255: 4c 89 e7                      movq    %r12, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 48 8b 45 00                   movq    (%rbp), %rax
// 25e: 48 85 c0                      testq   %rax, %rax
// 261: 7f 22                         jg      0x285 <_JIT_ENTRY+0x285>
// 263: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_NegativeRefcount
// 277: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 27c: 48 89 ea                      movq    %rbp, %rdx
// 27f: ff d0                         callq   *%rax
// 281: 48 8b 45 00                   movq    (%rbp), %rax
// 285: 85 c0                         testl   %eax, %eax
// 287: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 28c: 78 21                         js      0x2af <_JIT_ENTRY+0x2af>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 48 ff 4d 00                   decq    (%rbp)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: 48 89 ef                      movq    %rbp, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 4d 89 67 e0                   movq    %r12, -0x20(%r15)
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_CONTINUE
// 2bd: 48 89 df                      movq    %rbx, %rdi
// 2c0: 4c 89 ee                      movq    %r13, %rsi
// 2c3: 4c 89 f2                      movq    %r14, %rdx
// 2c6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ca: 5b                            popq    %rbx
// 2cb: 41 5c                         popq    %r12
// 2cd: 41 5d                         popq    %r13
// 2cf: 41 5e                         popq    %r14
// 2d1: 41 5f                         popq    %r15
// 2d3: 5d                            popq    %rbp
// 2d4: ff e0                         jmpq    *%rax
// 2d6: 49 29 dd                      subq    %rbx, %r13
// 2d9: 49 83 c5 b8                   addq    $-0x48, %r13
// 2dd: 49 c1 ed 03                   shrq    $0x3, %r13
// 2e1: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2e5: 31 c0                         xorl    %eax, %eax
// 2e7: e9 73 fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 2ec: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_TUPLE_INT_code_body[749] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x23, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x67, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x68, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6f, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x50, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x08, 0x0f, 0x87, 0x44, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x39, 0x4d, 0x10, 0x0f, 0x8e, 0x35, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x64, 0xcd, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x64, 0x24, 0x10, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x67, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x73, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_TUPLE_INT_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BUILD_CONST_KEY_MAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 49 8b 04 24                   movq    (%r12), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 e2                      movq    %r12, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 04 24                   movq    (%r12), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0c 24                   decq    (%r12)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 131: 78 21                         js      0x154 <_JIT_ENTRY+0x154>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 4d 00                   decq    (%rbp)
// 143: 75 0f                         jne     0x154 <_JIT_ENTRY+0x154>
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_Dealloc
// 14f: 48 89 ef                      movq    %rbp, %rdi
// 152: ff d0                         callq   *%rax
// 154: 49 8b 45 00                   movq    (%r13), %rax
// 158: 48 85 c0                      testq   %rax, %rax
// 15b: 7f 22                         jg      0x17f <_JIT_ENTRY+0x17f>
// 15d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015f:  R_X86_64_64  .rodata.str1.1
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_NegativeRefcount
// 171: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 176: 4c 89 ea                      movq    %r13, %rdx
// 179: ff d0                         callq   *%rax
// 17b: 49 8b 45 00                   movq    (%r13), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 4d 00                   decq    (%r13)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 ef                      movq    %r13, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 4d 85 e4                      testq   %r12, %r12
// 1a7: 0f 84 3e 01 00 00             je      0x2eb <_JIT_ENTRY+0x2eb>
// 1ad: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  PyTuple_Type
// 1bb: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1c0: 0f 85 f9 00 00 00             jne     0x2bf <_JIT_ENTRY+0x2bf>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _JIT_OPARG
// 1d0: 0f b7 c0                      movzwl  %ax, %eax
// 1d3: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1d8: 0f 85 e1 00 00 00             jne     0x2bf <_JIT_ENTRY+0x2bf>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _JIT_OPARG
// 1e8: f7 d0                         notl    %eax
// 1ea: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ef: 48 98                         cltq
// 1f1: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 1f5: 49 83 c5 f0                   addq    $-0x10, %r13
// 1f9: 4c 89 e7                      movq    %r12, %rdi
// 1fc: 48 83 c7 18                   addq    $0x18, %rdi
// 200: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000202:  R_X86_64_64  _JIT_OPARG
// 20a: 45 0f b7 c4                   movzwl  %r12w, %r8d
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _PyDict_FromItems
// 218: be 01 00 00 00                movl    $0x1, %esi
// 21d: b9 01 00 00 00                movl    $0x1, %ecx
// 222: 4c 89 ea                      movq    %r13, %rdx
// 225: ff d0                         callq   *%rax
// 227: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 22c: 41 f7 c4 ff ff 00 00          testl   $0xffff, %r12d          # imm = 0xFFFF
// 233: 0f 8e cf 00 00 00             jle     0x308 <_JIT_ENTRY+0x308>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_OPARG
// 243: 44 0f b7 e0                   movzwl  %ax, %r12d
// 247: 49 ff c4                      incq    %r12
// 24a: eb 11                         jmp     0x25d <_JIT_ENTRY+0x25d>
// 24c: 0f 1f 40 00                   nopl    (%rax)
// 250: 49 ff cc                      decq    %r12
// 253: 49 83 fc 01                   cmpq    $0x1, %r12
// 257: 0f 8e ab 00 00 00             jle     0x308 <_JIT_ENTRY+0x308>
// 25d: 41 8d 44 24 fe                leal    -0x2(%r12), %eax
// 262: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// 267: 48 8b 45 00                   movq    (%rbp), %rax
// 26b: 48 85 c0                      testq   %rax, %rax
// 26e: 7e 06                         jle     0x276 <_JIT_ENTRY+0x276>
// 270: 85 c0                         testl   %eax, %eax
// 272: 78 dc                         js      0x250 <_JIT_ENTRY+0x250>
// 274: eb 26                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1
// 280: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 285: 48 89 ea                      movq    %rbp, %rdx
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_NegativeRefcount
// 292: ff d0                         callq   *%rax
// 294: 48 8b 45 00                   movq    (%rbp), %rax
// 298: 85 c0                         testl   %eax, %eax
// 29a: 78 b4                         js      0x250 <_JIT_ENTRY+0x250>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a6: ff d0                         callq   *%rax
// 2a8: 48 ff 4d 00                   decq    (%rbp)
// 2ac: 75 a2                         jne     0x250 <_JIT_ENTRY+0x250>
// 2ae: 48 89 ef                      movq    %rbp, %rdi
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: ff d0                         callq   *%rax
// 2bd: eb 91                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2bf: 49 83 c6 f0                   addq    $-0x10, %r14
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  PyExc_SystemError
// 2cd: 48 8b 30                      movq    (%rax), %rsi
// 2d0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1+0x39
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _PyErr_SetString
// 2e4: 4c 89 ff                      movq    %r15, %rdi
// 2e7: ff d0                         callq   *%rax
// 2e9: eb 04                         jmp     0x2ef <_JIT_ENTRY+0x2ef>
// 2eb: 49 83 c6 e8                   addq    $-0x18, %r14
// 2ef: 4d 89 f5                      movq    %r14, %r13
// 2f2: 49 29 dd                      subq    %rbx, %r13
// 2f5: 49 83 c5 b8                   addq    $-0x48, %r13
// 2f9: 49 c1 ed 03                   shrq    $0x3, %r13
// 2fd: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 301: 31 c0                         xorl    %eax, %eax
// 303: e9 55 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 308: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 30d: 49 8b 04 24                   movq    (%r12), %rax
// 311: 48 85 c0                      testq   %rax, %rax
// 314: 7f 22                         jg      0x338 <_JIT_ENTRY+0x338>
// 316: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000318:  R_X86_64_64  .rodata.str1.1
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_NegativeRefcount
// 32a: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 32f: 4c 89 e2                      movq    %r12, %rdx
// 332: ff d0                         callq   *%rax
// 334: 49 8b 04 24                   movq    (%r12), %rax
// 338: 85 c0                         testl   %eax, %eax
// 33a: 78 21                         js      0x35d <_JIT_ENTRY+0x35d>
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 346: ff d0                         callq   *%rax
// 348: 49 ff 0c 24                   decq    (%r12)
// 34c: 75 0f                         jne     0x35d <_JIT_ENTRY+0x35d>
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_Dealloc
// 358: 4c 89 e7                      movq    %r12, %rdi
// 35b: ff d0                         callq   *%rax
// 35d: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 362: 48 85 d2                      testq   %rdx, %rdx
// 365: 74 8b                         je      0x2f2 <_JIT_ENTRY+0x2f2>
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _JIT_OPARG
// 371: 0f b7 c8                      movzwl  %ax, %ecx
// 374: f7 d0                         notl    %eax
// 376: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 37b: 48 98                         cltq
// 37d: 49 89 54 c6 f0                movq    %rdx, -0x10(%r14,%rax,8)
// 382: 48 c1 e1 03                   shlq    $0x3, %rcx
// 386: 48 f7 d9                      negq    %rcx
// 389: 49 8d 34 0e                   leaq    (%r14,%rcx), %rsi
// 38d: 48 83 c6 f0                   addq    $-0x10, %rsi
// 391: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000393:  R_X86_64_64  _JIT_CONTINUE
// 39b: 48 89 df                      movq    %rbx, %rdi
// 39e: 4c 89 fa                      movq    %r15, %rdx
// 3a1: 48 83 c4 18                   addq    $0x18, %rsp
// 3a5: 5b                            popq    %rbx
// 3a6: 41 5c                         popq    %r12
// 3a8: 41 5d                         popq    %r13
// 3aa: 41 5e                         popq    %r14
// 3ac: 41 5f                         popq    %r15
// 3ae: 5d                            popq    %rbp
// 3af: ff e0                         jmpq    *%rax
// 3b1: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_CONST_KEY_MAP_code_body[946] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x3e, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x83, 0xc5, 0xf0, 0x4c, 0x89, 0xe7, 0x48, 0x83, 0xc7, 0x18, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc4, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe0, 0x49, 0xff, 0xc4, 0xeb, 0x11, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xcc, 0x49, 0x83, 0xfc, 0x01, 0x0f, 0x8e, 0xab, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x44, 0x24, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xdc, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xb4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xa2, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x91, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x04, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x55, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x8b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x54, 0xc6, 0xf0, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x8d, 0x34, 0x0e, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_CONST_KEY_MAP_code_holes[37] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BUILD_LIST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BUILD_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 04 24                   movq    (%rsp), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 0f 84 85 00 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 1a8: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 f0                      movzwl  %ax, %esi
// 1b9: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 1c1: 48 f7 d8                      negq    %rax
// 1c4: 4d 8d 24 06                   leaq    (%r14,%rax), %r12
// 1c8: 49 83 c4 f0                   addq    $-0x10, %r12
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _PyList_FromArraySteal
// 1d6: 4c 89 e7                      movq    %r12, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 74 54                         je      0x234 <_JIT_ENTRY+0x234>
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  _JIT_OPARG
// 1ea: 0f b7 d1                      movzwl  %cx, %edx
// 1ed: 0f b7 c9                      movzwl  %cx, %ecx
// 1f0: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f4: 48 f7 d9                      negq    %rcx
// 1f7: 49 89 44 0e f0                movq    %rax, -0x10(%r14,%rcx)
// 1fc: b8 01 00 00 00                movl    $0x1, %eax
// 201: 29 d0                         subl    %edx, %eax
// 203: 48 98                         cltq
// 205: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 209: 48 83 c6 f0                   addq    $-0x10, %rsi
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _JIT_CONTINUE
// 217: 48 89 df                      movq    %rbx, %rdi
// 21a: 4c 89 fa                      movq    %r15, %rdx
// 21d: 48 83 c4 08                   addq    $0x8, %rsp
// 221: 5b                            popq    %rbx
// 222: 41 5c                         popq    %r12
// 224: 41 5d                         popq    %r13
// 226: 41 5e                         popq    %r14
// 228: 41 5f                         popq    %r15
// 22a: 5d                            popq    %rbp
// 22b: ff e0                         jmpq    *%rax
// 22d: 49 83 c6 e8                   addq    $-0x18, %r14
// 231: 4d 89 f4                      movq    %r14, %r12
// 234: 49 29 dc                      subq    %rbx, %r12
// 237: 49 83 c4 b8                   addq    $-0x48, %r12
// 23b: 49 c1 ec 03                   shrq    $0x3, %r12
// 23f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 243: 31 c0                         xorl    %eax, %eax
// 245: e9 10 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 24a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_LIST_code_body[587] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x8d, 0x24, 0x06, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x54, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x44, 0x0e, 0xf0, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x10, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_LIST_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_LIST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BUILD_MAP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BUILD_MAP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 71: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 e6                      movq    %r12, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 49 89 c7                      movq    %rax, %r15
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 ea                      movq    %r13, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 45 00                   movq    (%r13), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 4d 00                   decq    (%r13)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 85 ff                      testq   %r15, %r15
// 1a2: 0f 84 32 01 00 00             je      0x2da <_JIT_ENTRY+0x2da>
// 1a8: 4d 89 7e e8                   movq    %r15, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 e8                      movzwl  %ax, %ebp
// 1b9: 89 e9                         movl    %ebp, %ecx
// 1bb: f7 d9                         negl    %ecx
// 1bd: 01 c9                         addl    %ecx, %ecx
// 1bf: 48 63 c9                      movslq  %ecx, %rcx
// 1c2: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1c6: 49 83 c4 f0                   addq    $-0x10, %r12
// 1ca: 49 8d 54 ce f8                leaq    -0x8(%r14,%rcx,8), %rdx
// 1cf: 44 0f b7 c0                   movzwl  %ax, %r8d
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _PyDict_FromItems
// 1dd: be 02 00 00 00                movl    $0x2, %esi
// 1e2: b9 02 00 00 00                movl    $0x2, %ecx
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: ff d0                         callq   *%rax
// 1ec: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1f1: 01 ed                         addl    %ebp, %ebp
// 1f3: 85 ed                         testl   %ebp, %ebp
// 1f5: 0f 8e 84 00 00 00             jle     0x27f <_JIT_ENTRY+0x27f>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_OPARG
// 205: 0f b7 c0                      movzwl  %ax, %eax
// 208: 4c 8d 3c 00                   leaq    (%rax,%rax), %r15
// 20c: 49 ff c7                      incq    %r15
// 20f: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000211:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 219: eb 0e                         jmp     0x229 <_JIT_ENTRY+0x229>
// 21b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 220: 49 ff cf                      decq    %r15
// 223: 49 83 ff 01                   cmpq    $0x1, %r15
// 227: 7e 56                         jle     0x27f <_JIT_ENTRY+0x27f>
// 229: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 22d: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 231: 49 8b 45 00                   movq    (%r13), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 7e 06                         jle     0x240 <_JIT_ENTRY+0x240>
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 e2                         js      0x220 <_JIT_ENTRY+0x220>
// 23e: eb 26                         jmp     0x266 <_JIT_ENTRY+0x266>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 24f: 4c 89 ea                      movq    %r13, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 45 00                   movq    (%r13), %rax
// 262: 85 c0                         testl   %eax, %eax
// 264: 78 ba                         js      0x220 <_JIT_ENTRY+0x220>
// 266: ff d5                         callq   *%rbp
// 268: 49 ff 4d 00                   decq    (%r13)
// 26c: 75 b2                         jne     0x220 <_JIT_ENTRY+0x220>
// 26e: 4c 89 ef                      movq    %r13, %rdi
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: ff d0                         callq   *%rax
// 27d: eb a1                         jmp     0x220 <_JIT_ENTRY+0x220>
// 27f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 284: 48 85 d2                      testq   %rdx, %rdx
// 287: 74 58                         je      0x2e1 <_JIT_ENTRY+0x2e1>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_OPARG
// 293: 0f b7 c0                      movzwl  %ax, %eax
// 296: 89 c1                         movl    %eax, %ecx
// 298: f7 d9                         negl    %ecx
// 29a: 01 c9                         addl    %ecx, %ecx
// 29c: 48 63 c9                      movslq  %ecx, %rcx
// 29f: 49 89 54 ce f0                movq    %rdx, -0x10(%r14,%rcx,8)
// 2a4: 01 c0                         addl    %eax, %eax
// 2a6: b9 01 00 00 00                movl    $0x1, %ecx
// 2ab: 29 c1                         subl    %eax, %ecx
// 2ad: 48 63 c1                      movslq  %ecx, %rax
// 2b0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2b4: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _JIT_CONTINUE
// 2c2: 48 89 df                      movq    %rbx, %rdi
// 2c5: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2ca: 48 83 c4 18                   addq    $0x18, %rsp
// 2ce: 5b                            popq    %rbx
// 2cf: 41 5c                         popq    %r12
// 2d1: 41 5d                         popq    %r13
// 2d3: 41 5e                         popq    %r14
// 2d5: 41 5f                         popq    %r15
// 2d7: 5d                            popq    %rbp
// 2d8: ff e0                         jmpq    *%rax
// 2da: 49 83 c6 e8                   addq    $-0x18, %r14
// 2de: 4d 89 f4                      movq    %r14, %r12
// 2e1: 49 29 dc                      subq    %rbx, %r12
// 2e4: 49 83 c4 b8                   addq    $-0x48, %r12
// 2e8: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ec: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2f0: 31 c0                         xorl    %eax, %eax
// 2f2: e9 66 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 2f7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_MAP_code_body[760] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x32, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x89, 0xe9, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x24, 0xce, 0x49, 0x83, 0xc4, 0xf0, 0x49, 0x8d, 0x54, 0xce, 0xf8, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x01, 0xed, 0x85, 0xed, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x3c, 0x00, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x56, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x54, 0xce, 0xf0, 0x01, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x66, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_MAP_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_MAP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BUILD_SET
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BUILD_SET.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 71: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 e6                      movq    %r12, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 49 89 c5                      movq    %rax, %r13
// a8: 49 8b 07                      movq    (%r15), %rax
// ab: 48 85 c0                      testq   %rax, %rax
// ae: 7f 21                         jg      0xd1 <_JIT_ENTRY+0xd1>
// b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_NegativeRefcount
// c4: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c9: 4c 89 fa                      movq    %r15, %rdx
// cc: ff d0                         callq   *%rax
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 27                         js      0xfc <_JIT_ENTRY+0xfc>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0f                      decq    (%r15)
// e4: 75 16                         jne     0xfc <_JIT_ENTRY+0xfc>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  PySuper_Type
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_Dealloc
// fa: ff d0                         callq   *%rax
// fc: 48 8b 45 00                   movq    (%rbp), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7f 22                         jg      0x127 <_JIT_ENTRY+0x127>
// 105: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000107:  R_X86_64_64  .rodata.str1.1
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_NegativeRefcount
// 119: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11e: 48 89 ea                      movq    %rbp, %rdx
// 121: ff d0                         callq   *%rax
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 85 c0                         testl   %eax, %eax
// 129: 78 21                         js      0x14c <_JIT_ENTRY+0x14c>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 135: ff d0                         callq   *%rax
// 137: 48 ff 4d 00                   decq    (%rbp)
// 13b: 75 0f                         jne     0x14c <_JIT_ENTRY+0x14c>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_Dealloc
// 147: 48 89 ef                      movq    %rbp, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 04 24                   movq    (%r12), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 22                         jg      0x177 <_JIT_ENTRY+0x177>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16e: 4c 89 e2                      movq    %r12, %rdx
// 171: ff d0                         callq   *%rax
// 173: 49 8b 04 24                   movq    (%r12), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 21                         js      0x19c <_JIT_ENTRY+0x19c>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 49 ff 0c 24                   decq    (%r12)
// 18b: 75 0f                         jne     0x19c <_JIT_ENTRY+0x19c>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 e7                      movq    %r12, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 4d 85 ed                      testq   %r13, %r13
// 19f: 0f 84 16 01 00 00             je      0x2bb <_JIT_ENTRY+0x2bb>
// 1a5: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PySet_New
// 1b3: 31 ff                         xorl    %edi, %edi
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 85 c0                      testq   %rax, %rax
// 1ba: 0f 84 04 01 00 00             je      0x2c4 <_JIT_ENTRY+0x2c4>
// 1c0: 49 89 c7                      movq    %rax, %r15
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _JIT_OPARG
// 1cd: 66 85 c0                      testw   %ax, %ax
// 1d0: 0f 84 67 01 00 00             je      0x33d <_JIT_ENTRY+0x33d>
// 1d6: 4c 89 3c 24                   movq    %r15, (%rsp)
// 1da: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 1df: 0f b7 c0                      movzwl  %ax, %eax
// 1e2: 48 c1 e0 03                   shlq    $0x3, %rax
// 1e6: 48 f7 d8                      negq    %rax
// 1e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 0f b7 c9                      movzwl  %cx, %ecx
// 1f6: 83 f9 02                      cmpl    $0x2, %ecx
// 1f9: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 1ff: 44 0f 43 e1                   cmovael %ecx, %r12d
// 203: 4d 8d 2c 06                   leaq    (%r14,%rax), %r13
// 207: 49 83 c5 f0                   addq    $-0x10, %r13
// 20b: 31 db                         xorl    %ebx, %ebx
// 20d: 31 ed                         xorl    %ebp, %ebp
// 20f: eb 1b                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 211: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 220: 48 ff c3                      incq    %rbx
// 223: 49 39 dc                      cmpq    %rbx, %r12
// 226: 0f 84 a1 00 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 22c: 4d 8b 7c dd 00                movq    (%r13,%rbx,8), %r15
// 231: 85 ed                         testl   %ebp, %ebp
// 233: 74 1b                         je      0x250 <_JIT_ENTRY+0x250>
// 235: 49 8b 07                      movq    (%r15), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7e 30                         jle     0x26d <_JIT_ENTRY+0x26d>
// 23d: 85 c0                         testl   %eax, %eax
// 23f: 78 df                         js      0x220 <_JIT_ENTRY+0x220>
// 241: eb 4f                         jmp     0x292 <_JIT_ENTRY+0x292>
// 243: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 250: 48 8b 3c 24                   movq    (%rsp), %rdi
// 254: 4c 89 fe                      movq    %r15, %rsi
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  PySet_Add
// 261: ff d0                         callq   *%rax
// 263: 89 c5                         movl    %eax, %ebp
// 265: 49 8b 07                      movq    (%r15), %rax
// 268: 48 85 c0                      testq   %rax, %rax
// 26b: 7f d0                         jg      0x23d <_JIT_ENTRY+0x23d>
// 26d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026f:  R_X86_64_64  .rodata.str1.1
// 277: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 27c: 4c 89 fa                      movq    %r15, %rdx
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: ff d0                         callq   *%rax
// 28b: 49 8b 07                      movq    (%r15), %rax
// 28e: 85 c0                         testl   %eax, %eax
// 290: 78 8e                         js      0x220 <_JIT_ENTRY+0x220>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29c: ff d0                         callq   *%rax
// 29e: 49 ff 0f                      decq    (%r15)
// 2a1: 0f 85 79 ff ff ff             jne     0x220 <_JIT_ENTRY+0x220>
// 2a7: 4c 89 ff                      movq    %r15, %rdi
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_Dealloc
// 2b4: ff d0                         callq   *%rax
// 2b6: e9 65 ff ff ff                jmp     0x220 <_JIT_ENTRY+0x220>
// 2bb: 49 83 c6 e8                   addq    $-0x18, %r14
// 2bf: 4d 89 f5                      movq    %r14, %r13
// 2c2: eb 63                         jmp     0x327 <_JIT_ENTRY+0x327>
// 2c4: 49 83 c6 f0                   addq    $-0x10, %r14
// 2c8: 4d 89 f5                      movq    %r14, %r13
// 2cb: eb 5a                         jmp     0x327 <_JIT_ENTRY+0x327>
// 2cd: 85 ed                         testl   %ebp, %ebp
// 2cf: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2d4: 4c 8b 3c 24                   movq    (%rsp), %r15
// 2d8: 74 63                         je      0x33d <_JIT_ENTRY+0x33d>
// 2da: 49 8b 07                      movq    (%r15), %rax
// 2dd: 48 85 c0                      testq   %rax, %rax
// 2e0: 7f 21                         jg      0x303 <_JIT_ENTRY+0x303>
// 2e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e4:  R_X86_64_64  .rodata.str1.1
// 2ec: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 2f1: 4c 89 fa                      movq    %r15, %rdx
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_NegativeRefcount
// 2fe: ff d0                         callq   *%rax
// 300: 49 8b 07                      movq    (%r15), %rax
// 303: 85 c0                         testl   %eax, %eax
// 305: 78 20                         js      0x327 <_JIT_ENTRY+0x327>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 311: ff d0                         callq   *%rax
// 313: 49 ff 0f                      decq    (%r15)
// 316: 75 0f                         jne     0x327 <_JIT_ENTRY+0x327>
// 318: 4c 89 ff                      movq    %r15, %rdi
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_Dealloc
// 325: ff d0                         callq   *%rax
// 327: 49 29 dd                      subq    %rbx, %r13
// 32a: 49 83 c5 b8                   addq    $-0x48, %r13
// 32e: 49 c1 ed 03                   shrq    $0x3, %r13
// 332: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 336: 31 c0                         xorl    %eax, %eax
// 338: e9 20 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 33d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033f:  R_X86_64_64  _JIT_OPARG
// 347: 0f b7 c8                      movzwl  %ax, %ecx
// 34a: 0f b7 c0                      movzwl  %ax, %eax
// 34d: 48 c1 e0 03                   shlq    $0x3, %rax
// 351: 48 f7 d8                      negq    %rax
// 354: 4d 89 7c 06 f0                movq    %r15, -0x10(%r14,%rax)
// 359: b8 01 00 00 00                movl    $0x1, %eax
// 35e: 29 c8                         subl    %ecx, %eax
// 360: 48 98                         cltq
// 362: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 366: 48 83 c6 f0                   addq    $-0x10, %rsi
// 36a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036c:  R_X86_64_64  _JIT_CONTINUE
// 374: 48 89 df                      movq    %rbx, %rdi
// 377: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 37c: 48 83 c4 18                   addq    $0x18, %rsp
// 380: 5b                            popq    %rbx
// 381: 41 5c                         popq    %r12
// 383: 41 5d                         popq    %r13
// 385: 41 5e                         popq    %r14
// 387: 41 5f                         popq    %r15
// 389: 5d                            popq    %rbp
// 38a: ff e0                         jmpq    *%rax
// 38c: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_SET_code_body[909] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x67, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x83, 0xf9, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe1, 0x4d, 0x8d, 0x2c, 0x06, 0x49, 0x83, 0xc5, 0xf0, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdc, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x7c, 0xdd, 0x00, 0x85, 0xed, 0x74, 0x1b, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf5, 0xeb, 0x63, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0xeb, 0x5a, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x20, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x06, 0xf0, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_SET_code_holes[32] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_SET_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BUILD_SLICE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BUILD_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 71: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 e6                      movq    %r12, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 49 89 c5                      movq    %rax, %r13
// a8: 49 8b 07                      movq    (%r15), %rax
// ab: 48 85 c0                      testq   %rax, %rax
// ae: 7f 21                         jg      0xd1 <_JIT_ENTRY+0xd1>
// b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_NegativeRefcount
// c4: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c9: 4c 89 fa                      movq    %r15, %rdx
// cc: ff d0                         callq   *%rax
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 27                         js      0xfc <_JIT_ENTRY+0xfc>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0f                      decq    (%r15)
// e4: 75 16                         jne     0xfc <_JIT_ENTRY+0xfc>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  PySuper_Type
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_Dealloc
// fa: ff d0                         callq   *%rax
// fc: 48 8b 45 00                   movq    (%rbp), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7f 22                         jg      0x127 <_JIT_ENTRY+0x127>
// 105: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000107:  R_X86_64_64  .rodata.str1.1
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_NegativeRefcount
// 119: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11e: 48 89 ea                      movq    %rbp, %rdx
// 121: ff d0                         callq   *%rax
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 85 c0                         testl   %eax, %eax
// 129: 78 21                         js      0x14c <_JIT_ENTRY+0x14c>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 135: ff d0                         callq   *%rax
// 137: 48 ff 4d 00                   decq    (%rbp)
// 13b: 75 0f                         jne     0x14c <_JIT_ENTRY+0x14c>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_Dealloc
// 147: 48 89 ef                      movq    %rbp, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 04 24                   movq    (%r12), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 22                         jg      0x177 <_JIT_ENTRY+0x177>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16e: 4c 89 e2                      movq    %r12, %rdx
// 171: ff d0                         callq   *%rax
// 173: 49 8b 04 24                   movq    (%r12), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 21                         js      0x19c <_JIT_ENTRY+0x19c>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 49 ff 0c 24                   decq    (%r12)
// 18b: 75 0f                         jne     0x19c <_JIT_ENTRY+0x19c>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 e7                      movq    %r12, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a0: 4d 85 ed                      testq   %r13, %r13
// 1a3: 0f 84 9d 01 00 00             je      0x346 <_JIT_ENTRY+0x346>
// 1a9: 4c 89 28                      movq    %r13, (%rax)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 66 83 f8 03                   cmpw    $0x3, %ax
// 1ba: 75 10                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1bc: 31 c9                         xorl    %ecx, %ecx
// 1be: 66 83 f8 03                   cmpw    $0x3, %ax
// 1c2: 0f 95 c1                      setne   %cl
// 1c5: 4d 8b 64 ce e8                movq    -0x18(%r14,%rcx,8), %r12
// 1ca: eb 03                         jmp     0x1cf <_JIT_ENTRY+0x1cf>
// 1cc: 45 31 e4                      xorl    %r12d, %r12d
// 1cf: 31 c9                         xorl    %ecx, %ecx
// 1d1: 66 83 f8 03                   cmpw    $0x3, %ax
// 1d5: 0f 94 c1                      sete    %cl
// 1d8: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1dd: 29 c8                         subl    %ecx, %eax
// 1df: f7 d1                         notl    %ecx
// 1e1: 48 63 c9                      movslq  %ecx, %rcx
// 1e4: 48 89 0c 24                   movq    %rcx, (%rsp)
// 1e8: 49 8b 6c ce f0                movq    -0x10(%r14,%rcx,8), %rbp
// 1ed: 48 98                         cltq
// 1ef: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1f4: 4d 8b 7c c6 f0                movq    -0x10(%r14,%rax,8), %r15
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  PySlice_New
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: 48 89 ee                      movq    %rbp, %rsi
// 209: 4c 89 e2                      movq    %r12, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 49 89 c5                      movq    %rax, %r13
// 211: 49 8b 07                      movq    (%r15), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7f 21                         jg      0x23a <_JIT_ENTRY+0x23a>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 232: 4c 89 fa                      movq    %r15, %rdx
// 235: ff d0                         callq   *%rax
// 237: 49 8b 07                      movq    (%r15), %rax
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 20                         js      0x25e <_JIT_ENTRY+0x25e>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 248: ff d0                         callq   *%rax
// 24a: 49 ff 0f                      decq    (%r15)
// 24d: 75 0f                         jne     0x25e <_JIT_ENTRY+0x25e>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_Dealloc
// 259: 4c 89 ff                      movq    %r15, %rdi
// 25c: ff d0                         callq   *%rax
// 25e: 48 8b 45 00                   movq    (%rbp), %rax
// 262: 48 85 c0                      testq   %rax, %rax
// 265: 7f 22                         jg      0x289 <_JIT_ENTRY+0x289>
// 267: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000269:  R_X86_64_64  .rodata.str1.1
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_NegativeRefcount
// 27b: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 280: 48 89 ea                      movq    %rbp, %rdx
// 283: ff d0                         callq   *%rax
// 285: 48 8b 45 00                   movq    (%rbp), %rax
// 289: 85 c0                         testl   %eax, %eax
// 28b: 78 21                         js      0x2ae <_JIT_ENTRY+0x2ae>
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 297: ff d0                         callq   *%rax
// 299: 48 ff 4d 00                   decq    (%rbp)
// 29d: 75 0f                         jne     0x2ae <_JIT_ENTRY+0x2ae>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_Dealloc
// 2a9: 48 89 ef                      movq    %rbp, %rdi
// 2ac: ff d0                         callq   *%rax
// 2ae: 4d 85 e4                      testq   %r12, %r12
// 2b1: 74 50                         je      0x303 <_JIT_ENTRY+0x303>
// 2b3: 49 8b 04 24                   movq    (%r12), %rax
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 7f 22                         jg      0x2de <_JIT_ENTRY+0x2de>
// 2bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002be:  R_X86_64_64  .rodata.str1.1+0x39
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_NegativeRefcount
// 2d0: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 2d5: 4c 89 e2                      movq    %r12, %rdx
// 2d8: ff d0                         callq   *%rax
// 2da: 49 8b 04 24                   movq    (%r12), %rax
// 2de: 85 c0                         testl   %eax, %eax
// 2e0: 78 21                         js      0x303 <_JIT_ENTRY+0x303>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 ff 0c 24                   decq    (%r12)
// 2f2: 75 0f                         jne     0x303 <_JIT_ENTRY+0x303>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_Dealloc
// 2fe: 4c 89 e7                      movq    %r12, %rdi
// 301: ff d0                         callq   *%rax
// 303: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 308: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 30c: 48 83 c0 f0                   addq    $-0x10, %rax
// 310: 4d 85 ed                      testq   %r13, %r13
// 313: 74 31                         je      0x346 <_JIT_ENTRY+0x346>
// 315: 48 8b 0c 24                   movq    (%rsp), %rcx
// 319: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 31d: 48 83 c6 f0                   addq    $-0x10, %rsi
// 321: 4c 89 28                      movq    %r13, (%rax)
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _JIT_CONTINUE
// 32e: 48 89 df                      movq    %rbx, %rdi
// 331: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 336: 48 83 c4 18                   addq    $0x18, %rsp
// 33a: 5b                            popq    %rbx
// 33b: 41 5c                         popq    %r12
// 33d: 41 5d                         popq    %r13
// 33f: 41 5e                         popq    %r14
// 341: 41 5f                         popq    %r15
// 343: 5d                            popq    %rbp
// 344: ff e0                         jmpq    *%rax
// 346: 48 29 d8                      subq    %rbx, %rax
// 349: 48 83 c0 b8                   addq    $-0x48, %rax
// 34d: 48 c1 e8 03                   shrq    $0x3, %rax
// 351: 89 43 40                      movl    %eax, 0x40(%rbx)
// 354: 31 c0                         xorl    %eax, %eax
// 356: e9 02 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 35b: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_SLICE_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x9d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x10, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x95, 0xc1, 0x4d, 0x8b, 0x64, 0xce, 0xe8, 0xeb, 0x03, 0x45, 0x31, 0xe4, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x8b, 0x6c, 0xce, 0xf0, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x08, 0x4d, 0x8b, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0xf0, 0x4d, 0x85, 0xed, 0x74, 0x31, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x02, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_SLICE_code_holes[33] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_SLICE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BUILD_STRING
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BUILD_STRING.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 e6                      movq    %r12, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 ea                      movq    %r13, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 45 00                   movq    (%r13), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 4d 00                   decq    (%r13)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 0f 84 3b 01 00 00             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 1ad: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 1b2: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1b6: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001b8:  R_X86_64_64  _JIT_OPARG
// 1c0: 41 0f b7 d7                   movzwl  %r15w, %edx
// 1c4: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 1cc: 48 f7 d8                      negq    %rax
// 1cf: 4d 8d 24 06                   leaq    (%r14,%rax), %r12
// 1d3: 49 83 c4 f0                   addq    $-0x10, %r12
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _PyUnicode_JoinArray
// 1e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e3:  R_X86_64_64  _PyRuntime
// 1eb: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 1f2: 4c 89 e6                      movq    %r12, %rsi
// 1f5: ff d0                         callq   *%rax
// 1f7: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1fc: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 203: 0f 8e 86 00 00 00             jle     0x28f <_JIT_ENTRY+0x28f>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 44 0f b7 f8                   movzwl  %ax, %r15d
// 217: 49 ff c7                      incq    %r15
// 21a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000021c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 224: eb 13                         jmp     0x239 <_JIT_ENTRY+0x239>
// 226: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 230: 49 ff cf                      decq    %r15
// 233: 49 83 ff 01                   cmpq    $0x1, %r15
// 237: 7e 56                         jle     0x28f <_JIT_ENTRY+0x28f>
// 239: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 23d: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7e 06                         jle     0x250 <_JIT_ENTRY+0x250>
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 e2                         js      0x230 <_JIT_ENTRY+0x230>
// 24e: eb 26                         jmp     0x276 <_JIT_ENTRY+0x276>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 25f: 4c 89 ea                      movq    %r13, %rdx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 ba                         js      0x230 <_JIT_ENTRY+0x230>
// 276: ff d5                         callq   *%rbp
// 278: 49 ff 4d 00                   decq    (%r13)
// 27c: 75 b2                         jne     0x230 <_JIT_ENTRY+0x230>
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_Dealloc
// 28b: ff d0                         callq   *%rax
// 28d: eb a1                         jmp     0x230 <_JIT_ENTRY+0x230>
// 28f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 294: 48 85 d2                      testq   %rdx, %rdx
// 297: 74 56                         je      0x2ef <_JIT_ENTRY+0x2ef>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_OPARG
// 2a3: 0f b7 c8                      movzwl  %ax, %ecx
// 2a6: 0f b7 c0                      movzwl  %ax, %eax
// 2a9: 48 c1 e0 03                   shlq    $0x3, %rax
// 2ad: 48 f7 d8                      negq    %rax
// 2b0: 49 89 54 06 f0                movq    %rdx, -0x10(%r14,%rax)
// 2b5: b8 01 00 00 00                movl    $0x1, %eax
// 2ba: 29 c8                         subl    %ecx, %eax
// 2bc: 48 98                         cltq
// 2be: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c2: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _JIT_CONTINUE
// 2d0: 48 89 df                      movq    %rbx, %rdi
// 2d3: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2d8: 48 83 c4 18                   addq    $0x18, %rsp
// 2dc: 5b                            popq    %rbx
// 2dd: 41 5c                         popq    %r12
// 2df: 41 5d                         popq    %r13
// 2e1: 41 5e                         popq    %r14
// 2e3: 41 5f                         popq    %r15
// 2e5: 5d                            popq    %rbp
// 2e6: ff e0                         jmpq    *%rax
// 2e8: 49 83 c6 e8                   addq    $-0x18, %r14
// 2ec: 4d 89 f4                      movq    %r14, %r12
// 2ef: 49 29 dc                      subq    %rbx, %r12
// 2f2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2f6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2fa: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2fe: 31 c0                         xorl    %eax, %eax
// 300: e9 58 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 305: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_STRING_code_body[774] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x3b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x46, 0xe8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd7, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x8d, 0x24, 0x06, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x13, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x56, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xb2, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa1, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x49, 0x89, 0x54, 0x06, 0xf0, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x58, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_STRING_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_STRING_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_BUILD_TUPLE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_BUILD_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 04 24                   movq    (%rsp), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 0f 84 85 00 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 1a8: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 f0                      movzwl  %ax, %esi
// 1b9: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 1c1: 48 f7 d8                      negq    %rax
// 1c4: 4d 8d 24 06                   leaq    (%r14,%rax), %r12
// 1c8: 49 83 c4 f0                   addq    $-0x10, %r12
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _PyTuple_FromArraySteal
// 1d6: 4c 89 e7                      movq    %r12, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 74 54                         je      0x234 <_JIT_ENTRY+0x234>
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  _JIT_OPARG
// 1ea: 0f b7 d1                      movzwl  %cx, %edx
// 1ed: 0f b7 c9                      movzwl  %cx, %ecx
// 1f0: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f4: 48 f7 d9                      negq    %rcx
// 1f7: 49 89 44 0e f0                movq    %rax, -0x10(%r14,%rcx)
// 1fc: b8 01 00 00 00                movl    $0x1, %eax
// 201: 29 d0                         subl    %edx, %eax
// 203: 48 98                         cltq
// 205: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 209: 48 83 c6 f0                   addq    $-0x10, %rsi
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _JIT_CONTINUE
// 217: 48 89 df                      movq    %rbx, %rdi
// 21a: 4c 89 fa                      movq    %r15, %rdx
// 21d: 48 83 c4 08                   addq    $0x8, %rsp
// 221: 5b                            popq    %rbx
// 222: 41 5c                         popq    %r12
// 224: 41 5d                         popq    %r13
// 226: 41 5e                         popq    %r14
// 228: 41 5f                         popq    %r15
// 22a: 5d                            popq    %rbp
// 22b: ff e0                         jmpq    *%rax
// 22d: 49 83 c6 e8                   addq    $-0x18, %r14
// 231: 4d 89 f4                      movq    %r14, %r12
// 234: 49 29 dc                      subq    %rbx, %r12
// 237: 49 83 c4 b8                   addq    $-0x48, %r12
// 23b: 49 c1 ec 03                   shrq    $0x3, %r12
// 23f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 243: 31 c0                         xorl    %eax, %eax
// 245: e9 10 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 24a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_TUPLE_code_body[587] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x8d, 0x24, 0x06, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x54, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x44, 0x0e, 0xf0, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x10, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_TUPLE_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_BUILD_TUPLE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 0f 85 ab 02 00 00             jne     0x2d3 <_JIT_ENTRY+0x2d3>
// 28: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 96 02 00 00             je      0x2d3 <_JIT_ENTRY+0x2d3>
// 3d: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 42: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5d: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _PySuper_Lookup
// 6c: 48 89 ef                      movq    %rbp, %rdi
// 6f: 4c 89 e6                      movq    %r12, %rsi
// 72: 31 c9                         xorl    %ecx, %ecx
// 74: ff d0                         callq   *%rax
// 76: 49 89 c5                      movq    %rax, %r13
// 79: 49 8b 06                      movq    (%r14), %rax
// 7c: 48 85 c0                      testq   %rax, %rax
// 7f: 7f 21                         jg      0xa2 <_JIT_ENTRY+0xa2>
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9a: 4c 89 f2                      movq    %r14, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 06                      movq    (%r14), %rax
// a2: 85 c0                         testl   %eax, %eax
// a4: 78 27                         js      0xcd <_JIT_ENTRY+0xcd>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b0: ff d0                         callq   *%rax
// b2: 49 ff 0e                      decq    (%r14)
// b5: 75 16                         jne     0xcd <_JIT_ENTRY+0xcd>
// b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b9:  R_X86_64_64  PySuper_Type
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _Py_Dealloc
// cb: ff d0                         callq   *%rax
// cd: 48 8b 45 00                   movq    (%rbp), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7f 22                         jg      0xf8 <_JIT_ENTRY+0xf8>
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ef: 48 89 ea                      movq    %rbp, %rdx
// f2: ff d0                         callq   *%rax
// f4: 48 8b 45 00                   movq    (%rbp), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 ff 4d 00                   decq    (%rbp)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 48 89 ef                      movq    %rbp, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 7f 22                         jg      0x148 <_JIT_ENTRY+0x148>
// 126: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000128:  R_X86_64_64  .rodata.str1.1
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_NegativeRefcount
// 13a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13f: 4c 89 e2                      movq    %r12, %rdx
// 142: ff d0                         callq   *%rax
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 78 21                         js      0x16d <_JIT_ENTRY+0x16d>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 156: ff d0                         callq   *%rax
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 0f                         jne     0x16d <_JIT_ENTRY+0x16d>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 4d 85 ed                      testq   %r13, %r13
// 170: 0f 84 94 01 00 00             je      0x30a <_JIT_ENTRY+0x30a>
// 176: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 17a: 4d 89 6f e8                   movq    %r13, -0x18(%r15)
// 17e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000180:  R_X86_64_64  _JIT_OPARG
// 188: 0f b7 f2                      movzwl  %dx, %esi
// 18b: 89 f1                         movl    %esi, %ecx
// 18d: f7 d1                         notl    %ecx
// 18f: 4c 63 c9                      movslq  %ecx, %r9
// 192: 4b 8b 4c cf f0                movq    -0x10(%r15,%r9,8), %rcx
// 197: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 19c: 29 f7                         subl    %esi, %edi
// 19e: 4c 63 d7                      movslq  %edi, %r10
// 1a1: 0f b7 d2                      movzwl  %dx, %edx
// 1a4: 48 89 d7                      movq    %rdx, %rdi
// 1a7: 48 f7 df                      negq    %rdi
// 1aa: 44 8d 66 01                   leal    0x1(%rsi), %r12d
// 1ae: 48 85 c9                      testq   %rcx, %rcx
// 1b1: 48 f7 d2                      notq    %rdx
// 1b4: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1b8: 44 0f 44 e6                   cmovel  %esi, %r12d
// 1bc: 4b 8b 7c d7 f0                movq    -0x10(%r15,%r10,8), %rdi
// 1c1: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// 1c5: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 1cc: 0f 84 fe 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 1d2: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 1d9: 4d 85 c0                      testq   %r8, %r8
// 1dc: 0f 84 ee 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 1e2: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 1e7: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 1ec: 48 8d 2c d0                   leaq    (%rax,%rdx,8), %rbp
// 1f0: 48 85 c9                      testq   %rcx, %rcx
// 1f3: 41 0f 94 c6                   sete    %r14b
// 1f7: 44 89 e2                      movl    %r12d, %edx
// 1fa: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1ff: 48 89 ee                      movq    %rbp, %rsi
// 202: 31 c9                         xorl    %ecx, %ecx
// 204: 41 ff d0                      callq   *%r8
// 207: 48 89 04 24                   movq    %rax, (%rsp)
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_OPARG
// 215: 66 85 c0                      testw   %ax, %ax
// 218: 0f 94 c0                      sete    %al
// 21b: 41 84 c6                      testb   %al, %r14b
// 21e: 0f 84 ff 00 00 00             je      0x323 <_JIT_ENTRY+0x323>
// 224: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 229: 49 8b 45 00                   movq    (%r13), %rax
// 22d: 48 85 c0                      testq   %rax, %rax
// 230: 7f 22                         jg      0x254 <_JIT_ENTRY+0x254>
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_NegativeRefcount
// 246: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 24b: 4c 89 ea                      movq    %r13, %rdx
// 24e: ff d0                         callq   *%rax
// 250: 49 8b 45 00                   movq    (%r13), %rax
// 254: 85 c0                         testl   %eax, %eax
// 256: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 25b: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 260: 78 21                         js      0x283 <_JIT_ENTRY+0x283>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 4d 00                   decq    (%r13)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: ff d0                         callq   *%rax
// 283: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 288: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 28c: 48 83 c0 f0                   addq    $-0x10, %rax
// 290: 48 8b 0c 24                   movq    (%rsp), %rcx
// 294: 48 85 c9                      testq   %rcx, %rcx
// 297: 74 78                         je      0x311 <_JIT_ENTRY+0x311>
// 299: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 29d: 49 83 c6 f0                   addq    $-0x10, %r14
// 2a1: 48 89 08                      movq    %rcx, (%rax)
// 2a4: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 2a9: 48 8b 00                      movq    (%rax), %rax
// 2ac: 84 c0                         testb   %al, %al
// 2ae: 0f 84 f5 00 00 00             je      0x3a9 <_JIT_ENTRY+0x3a9>
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_HandlePending
// 2be: 4c 89 e7                      movq    %r12, %rdi
// 2c1: ff d0                         callq   *%rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 0f 84 de 00 00 00             je      0x3a9 <_JIT_ENTRY+0x3a9>
// 2cb: 4c 89 f0                      movq    %r14, %rax
// 2ce: eb 41                         jmp     0x311 <_JIT_ENTRY+0x311>
// 2d0: 49 89 c7                      movq    %rax, %r15
// 2d3: 49 29 df                      subq    %rbx, %r15
// 2d6: 49 83 c7 b8                   addq    $-0x48, %r15
// 2da: 49 c1 ef 03                   shrq    $0x3, %r15
// 2de: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2e2: 48 8b 03                      movq    (%rbx), %rax
// 2e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e7:  R_X86_64_64  _JIT_TARGET
// 2ef: 89 c9                         movl    %ecx, %ecx
// 2f1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2f5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2fb: 48 83 c4 28                   addq    $0x28, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: c3                            retq
// 30a: 49 83 c7 e8                   addq    $-0x18, %r15
// 30e: 4c 89 f8                      movq    %r15, %rax
// 311: 48 29 d8                      subq    %rbx, %rax
// 314: 48 83 c0 b8                   addq    $-0x48, %rax
// 318: 48 c1 e8 03                   shrq    $0x3, %rax
// 31c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 31f: 31 c0                         xorl    %eax, %eax
// 321: eb d8                         jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 323: 41 83 fc 02                   cmpl    $0x2, %r12d
// 327: 41 be 01 00 00 00             movl    $0x1, %r14d
// 32d: 45 0f 43 f4                   cmovael %r12d, %r14d
// 331: 45 31 e4                      xorl    %r12d, %r12d
// 334: eb 16                         jmp     0x34c <_JIT_ENTRY+0x34c>
// 336: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 340: 49 ff c4                      incq    %r12
// 343: 4d 39 e6                      cmpq    %r12, %r14
// 346: 0f 84 d8 fe ff ff             je      0x224 <_JIT_ENTRY+0x224>
// 34c: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 351: 49 8b 45 00                   movq    (%r13), %rax
// 355: 48 85 c0                      testq   %rax, %rax
// 358: 7e 06                         jle     0x360 <_JIT_ENTRY+0x360>
// 35a: 85 c0                         testl   %eax, %eax
// 35c: 78 e2                         js      0x340 <_JIT_ENTRY+0x340>
// 35e: eb 26                         jmp     0x386 <_JIT_ENTRY+0x386>
// 360: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000362:  R_X86_64_64  .rodata.str1.1
// 36a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 36f: 4c 89 ea                      movq    %r13, %rdx
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _Py_NegativeRefcount
// 37c: ff d0                         callq   *%rax
// 37e: 49 8b 45 00                   movq    (%r13), %rax
// 382: 85 c0                         testl   %eax, %eax
// 384: 78 ba                         js      0x340 <_JIT_ENTRY+0x340>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 390: ff d0                         callq   *%rax
// 392: 49 ff 4d 00                   decq    (%r13)
// 396: 75 a8                         jne     0x340 <_JIT_ENTRY+0x340>
// 398: 4c 89 ef                      movq    %r13, %rdi
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_Dealloc
// 3a5: ff d0                         callq   *%rax
// 3a7: eb 97                         jmp     0x340 <_JIT_ENTRY+0x340>
// 3a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ab:  R_X86_64_64  _JIT_CONTINUE
// 3b3: 48 89 df                      movq    %rbx, %rdi
// 3b6: 4c 89 f6                      movq    %r14, %rsi
// 3b9: 4c 89 e2                      movq    %r12, %rdx
// 3bc: 48 83 c4 28                   addq    $0x28, %rsp
// 3c0: 5b                            popq    %rbx
// 3c1: 41 5c                         popq    %r12
// 3c3: 41 5d                         popq    %r13
// 3c5: 41 5e                         popq    %r14
// 3c7: 41 5f                         popq    %r15
// 3c9: 5d                            popq    %rbp
// 3ca: ff e0                         jmpq    *%rax
// 3cc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_CLASS_code_body[973] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x0f, 0x85, 0xab, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x96, 0x02, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xcf, 0xf0, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x66, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xe6, 0x4b, 0x8b, 0x7c, 0xd7, 0xf0, 0x48, 0x8b, 0x77, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x8d, 0x2c, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc6, 0x44, 0x89, 0xe2, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x78, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xeb, 0x41, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xd8, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf4, 0x45, 0x31, 0xe4, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x0f, 0x84, 0xd8, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_CLASS_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_CLASS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 0f 85 b3 02 00 00             jne     0x2db <_JIT_ENTRY+0x2db>
// 28: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 9e 02 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 3d: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 42: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5d: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _PySuper_Lookup
// 6c: 48 89 ef                      movq    %rbp, %rdi
// 6f: 4c 89 e6                      movq    %r12, %rsi
// 72: 31 c9                         xorl    %ecx, %ecx
// 74: ff d0                         callq   *%rax
// 76: 49 89 c5                      movq    %rax, %r13
// 79: 49 8b 06                      movq    (%r14), %rax
// 7c: 48 85 c0                      testq   %rax, %rax
// 7f: 7f 21                         jg      0xa2 <_JIT_ENTRY+0xa2>
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9a: 4c 89 f2                      movq    %r14, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 06                      movq    (%r14), %rax
// a2: 85 c0                         testl   %eax, %eax
// a4: 78 27                         js      0xcd <_JIT_ENTRY+0xcd>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b0: ff d0                         callq   *%rax
// b2: 49 ff 0e                      decq    (%r14)
// b5: 75 16                         jne     0xcd <_JIT_ENTRY+0xcd>
// b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b9:  R_X86_64_64  PySuper_Type
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _Py_Dealloc
// cb: ff d0                         callq   *%rax
// cd: 48 8b 45 00                   movq    (%rbp), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7f 22                         jg      0xf8 <_JIT_ENTRY+0xf8>
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ef: 48 89 ea                      movq    %rbp, %rdx
// f2: ff d0                         callq   *%rax
// f4: 48 8b 45 00                   movq    (%rbp), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 ff 4d 00                   decq    (%rbp)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 48 89 ef                      movq    %rbp, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 7f 22                         jg      0x148 <_JIT_ENTRY+0x148>
// 126: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000128:  R_X86_64_64  .rodata.str1.1
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_NegativeRefcount
// 13a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13f: 4c 89 e2                      movq    %r12, %rdx
// 142: ff d0                         callq   *%rax
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 78 21                         js      0x16d <_JIT_ENTRY+0x16d>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 156: ff d0                         callq   *%rax
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 0f                         jne     0x16d <_JIT_ENTRY+0x16d>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 4d 85 ed                      testq   %r13, %r13
// 170: 0f 84 9c 01 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 176: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 17a: 4d 89 6f e8                   movq    %r13, -0x18(%r15)
// 17e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000180:  R_X86_64_64  _JIT_OPARG
// 188: 0f b7 f2                      movzwl  %dx, %esi
// 18b: 89 f1                         movl    %esi, %ecx
// 18d: f7 d1                         notl    %ecx
// 18f: 4c 63 c9                      movslq  %ecx, %r9
// 192: 4b 8b 4c cf f0                movq    -0x10(%r15,%r9,8), %rcx
// 197: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 19c: 29 f7                         subl    %esi, %edi
// 19e: 4c 63 d7                      movslq  %edi, %r10
// 1a1: 0f b7 d2                      movzwl  %dx, %edx
// 1a4: 48 89 d7                      movq    %rdx, %rdi
// 1a7: 48 f7 df                      negq    %rdi
// 1aa: 44 8d 66 01                   leal    0x1(%rsi), %r12d
// 1ae: 48 85 c9                      testq   %rcx, %rcx
// 1b1: 48 f7 d2                      notq    %rdx
// 1b4: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1b8: 44 0f 44 e6                   cmovel  %esi, %r12d
// 1bc: 4b 8b 7c d7 f0                movq    -0x10(%r15,%r10,8), %rdi
// 1c1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c3:  R_X86_64_64  PyCFunction_Type
// 1cb: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 1cf: 0f 85 03 01 00 00             jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 1d5: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 1d9: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 1e1: 0f 85 f1 00 00 00             jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 1e7: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 1ec: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 1f1: 48 8d 2c d0                   leaq    (%rax,%rdx,8), %rbp
// 1f5: 48 85 c9                      testq   %rcx, %rcx
// 1f8: 41 0f 94 c6                   sete    %r14b
// 1fc: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 201: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 205: 44 89 e2                      movl    %r12d, %edx
// 208: 48 89 ee                      movq    %rbp, %rsi
// 20b: 41 ff 50 08                   callq   *0x8(%r8)
// 20f: 48 89 04 24                   movq    %rax, (%rsp)
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_OPARG
// 21d: 66 85 c0                      testw   %ax, %ax
// 220: 0f 94 c0                      sete    %al
// 223: 41 84 c6                      testb   %al, %r14b
// 226: 0f 84 ff 00 00 00             je      0x32b <_JIT_ENTRY+0x32b>
// 22c: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 231: 49 8b 45 00                   movq    (%r13), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 7f 22                         jg      0x25c <_JIT_ENTRY+0x25c>
// 23a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023c:  R_X86_64_64  .rodata.str1.1
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_NegativeRefcount
// 24e: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 253: 4c 89 ea                      movq    %r13, %rdx
// 256: ff d0                         callq   *%rax
// 258: 49 8b 45 00                   movq    (%r13), %rax
// 25c: 85 c0                         testl   %eax, %eax
// 25e: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 263: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 268: 78 21                         js      0x28b <_JIT_ENTRY+0x28b>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 49 ff 4d 00                   decq    (%r13)
// 27a: 75 0f                         jne     0x28b <_JIT_ENTRY+0x28b>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_Dealloc
// 286: 4c 89 ef                      movq    %r13, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 290: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 294: 48 83 c0 f0                   addq    $-0x10, %rax
// 298: 48 8b 0c 24                   movq    (%rsp), %rcx
// 29c: 48 85 c9                      testq   %rcx, %rcx
// 29f: 74 78                         je      0x319 <_JIT_ENTRY+0x319>
// 2a1: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2a5: 49 83 c6 f0                   addq    $-0x10, %r14
// 2a9: 48 89 08                      movq    %rcx, (%rax)
// 2ac: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 2b1: 48 8b 00                      movq    (%rax), %rax
// 2b4: 84 c0                         testb   %al, %al
// 2b6: 0f 84 ed 00 00 00             je      0x3a9 <_JIT_ENTRY+0x3a9>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_HandlePending
// 2c6: 4c 89 e7                      movq    %r12, %rdi
// 2c9: ff d0                         callq   *%rax
// 2cb: 85 c0                         testl   %eax, %eax
// 2cd: 0f 84 d6 00 00 00             je      0x3a9 <_JIT_ENTRY+0x3a9>
// 2d3: 4c 89 f0                      movq    %r14, %rax
// 2d6: eb 41                         jmp     0x319 <_JIT_ENTRY+0x319>
// 2d8: 49 89 c7                      movq    %rax, %r15
// 2db: 49 29 df                      subq    %rbx, %r15
// 2de: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e2: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e6: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2ea: 48 8b 03                      movq    (%rbx), %rax
// 2ed: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ef:  R_X86_64_64  _JIT_TARGET
// 2f7: 89 c9                         movl    %ecx, %ecx
// 2f9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2fd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 303: 48 83 c4 28                   addq    $0x28, %rsp
// 307: 5b                            popq    %rbx
// 308: 41 5c                         popq    %r12
// 30a: 41 5d                         popq    %r13
// 30c: 41 5e                         popq    %r14
// 30e: 41 5f                         popq    %r15
// 310: 5d                            popq    %rbp
// 311: c3                            retq
// 312: 49 83 c7 e8                   addq    $-0x18, %r15
// 316: 4c 89 f8                      movq    %r15, %rax
// 319: 48 29 d8                      subq    %rbx, %rax
// 31c: 48 83 c0 b8                   addq    $-0x48, %rax
// 320: 48 c1 e8 03                   shrq    $0x3, %rax
// 324: 89 43 40                      movl    %eax, 0x40(%rbx)
// 327: 31 c0                         xorl    %eax, %eax
// 329: eb d8                         jmp     0x303 <_JIT_ENTRY+0x303>
// 32b: 41 83 fc 02                   cmpl    $0x2, %r12d
// 32f: 41 be 01 00 00 00             movl    $0x1, %r14d
// 335: 45 0f 43 f4                   cmovael %r12d, %r14d
// 339: 45 31 e4                      xorl    %r12d, %r12d
// 33c: eb 0e                         jmp     0x34c <_JIT_ENTRY+0x34c>
// 33e: 66 90                         nop
// 340: 49 ff c4                      incq    %r12
// 343: 4d 39 e6                      cmpq    %r12, %r14
// 346: 0f 84 e0 fe ff ff             je      0x22c <_JIT_ENTRY+0x22c>
// 34c: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 351: 49 8b 45 00                   movq    (%r13), %rax
// 355: 48 85 c0                      testq   %rax, %rax
// 358: 7e 06                         jle     0x360 <_JIT_ENTRY+0x360>
// 35a: 85 c0                         testl   %eax, %eax
// 35c: 78 e2                         js      0x340 <_JIT_ENTRY+0x340>
// 35e: eb 26                         jmp     0x386 <_JIT_ENTRY+0x386>
// 360: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000362:  R_X86_64_64  .rodata.str1.1
// 36a: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 36f: 4c 89 ea                      movq    %r13, %rdx
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _Py_NegativeRefcount
// 37c: ff d0                         callq   *%rax
// 37e: 49 8b 45 00                   movq    (%r13), %rax
// 382: 85 c0                         testl   %eax, %eax
// 384: 78 ba                         js      0x340 <_JIT_ENTRY+0x340>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 390: ff d0                         callq   *%rax
// 392: 49 ff 4d 00                   decq    (%r13)
// 396: 75 a8                         jne     0x340 <_JIT_ENTRY+0x340>
// 398: 4c 89 ef                      movq    %r13, %rdi
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_Dealloc
// 3a5: ff d0                         callq   *%rax
// 3a7: eb 97                         jmp     0x340 <_JIT_ENTRY+0x340>
// 3a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ab:  R_X86_64_64  _JIT_CONTINUE
// 3b3: 48 89 df                      movq    %rbx, %rdi
// 3b6: 4c 89 f6                      movq    %r14, %rsi
// 3b9: 4c 89 e2                      movq    %r12, %rdx
// 3bc: 48 83 c4 28                   addq    $0x28, %rsp
// 3c0: 5b                            popq    %rbx
// 3c1: 41 5c                         popq    %r12
// 3c3: 41 5d                         popq    %r13
// 3c5: 41 5e                         popq    %r14
// 3c7: 41 5f                         popq    %r15
// 3c9: 5d                            popq    %rbp
// 3ca: ff e0                         jmpq    *%rax
// 3cc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_code_body[973] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x0f, 0x85, 0xb3, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x9e, 0x02, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xcf, 0xf0, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x66, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xe6, 0x4b, 0x8b, 0x7c, 0xd7, 0xf0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x8d, 0x2c, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc6, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x78, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xeb, 0x41, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xd8, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf4, 0x45, 0x31, 0xe4, 0xeb, 0x0e, 0x66, 0x90, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x0f, 0x84, 0xe0, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 0f 85 b5 02 00 00             jne     0x2dd <_JIT_ENTRY+0x2dd>
// 28: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 a0 02 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 3d: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 42: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5d: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _PySuper_Lookup
// 6c: 48 89 ef                      movq    %rbp, %rdi
// 6f: 4c 89 e6                      movq    %r12, %rsi
// 72: 31 c9                         xorl    %ecx, %ecx
// 74: ff d0                         callq   *%rax
// 76: 49 89 c5                      movq    %rax, %r13
// 79: 49 8b 06                      movq    (%r14), %rax
// 7c: 48 85 c0                      testq   %rax, %rax
// 7f: 7f 21                         jg      0xa2 <_JIT_ENTRY+0xa2>
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9a: 4c 89 f2                      movq    %r14, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 06                      movq    (%r14), %rax
// a2: 85 c0                         testl   %eax, %eax
// a4: 78 27                         js      0xcd <_JIT_ENTRY+0xcd>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b0: ff d0                         callq   *%rax
// b2: 49 ff 0e                      decq    (%r14)
// b5: 75 16                         jne     0xcd <_JIT_ENTRY+0xcd>
// b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b9:  R_X86_64_64  PySuper_Type
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _Py_Dealloc
// cb: ff d0                         callq   *%rax
// cd: 48 8b 45 00                   movq    (%rbp), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7f 22                         jg      0xf8 <_JIT_ENTRY+0xf8>
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ef: 48 89 ea                      movq    %rbp, %rdx
// f2: ff d0                         callq   *%rax
// f4: 48 8b 45 00                   movq    (%rbp), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 ff 4d 00                   decq    (%rbp)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 48 89 ef                      movq    %rbp, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 7f 22                         jg      0x148 <_JIT_ENTRY+0x148>
// 126: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000128:  R_X86_64_64  .rodata.str1.1
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_NegativeRefcount
// 13a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13f: 4c 89 e2                      movq    %r12, %rdx
// 142: ff d0                         callq   *%rax
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 78 21                         js      0x16d <_JIT_ENTRY+0x16d>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 156: ff d0                         callq   *%rax
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 0f                         jne     0x16d <_JIT_ENTRY+0x16d>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 4d 85 ed                      testq   %r13, %r13
// 170: 0f 84 9e 01 00 00             je      0x314 <_JIT_ENTRY+0x314>
// 176: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 17a: 4d 89 6f e8                   movq    %r13, -0x18(%r15)
// 17e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000180:  R_X86_64_64  _JIT_OPARG
// 188: 0f b7 f2                      movzwl  %dx, %esi
// 18b: 89 f1                         movl    %esi, %ecx
// 18d: f7 d1                         notl    %ecx
// 18f: 4c 63 c9                      movslq  %ecx, %r9
// 192: 4b 8b 4c cf f0                movq    -0x10(%r15,%r9,8), %rcx
// 197: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 19c: 29 f7                         subl    %esi, %edi
// 19e: 4c 63 d7                      movslq  %edi, %r10
// 1a1: 0f b7 d2                      movzwl  %dx, %edx
// 1a4: 48 89 d7                      movq    %rdx, %rdi
// 1a7: 48 f7 df                      negq    %rdi
// 1aa: 44 8d 66 01                   leal    0x1(%rsi), %r12d
// 1ae: 48 85 c9                      testq   %rcx, %rcx
// 1b1: 48 f7 d2                      notq    %rdx
// 1b4: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1b8: 44 0f 44 e6                   cmovel  %esi, %r12d
// 1bc: 4b 8b 7c d7 f0                movq    -0x10(%r15,%r10,8), %rdi
// 1c1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c3:  R_X86_64_64  PyCFunction_Type
// 1cb: 48 39 77 08                   cmpq    %rsi, 0x8(%rdi)
// 1cf: 0f 85 05 01 00 00             jne     0x2da <_JIT_ENTRY+0x2da>
// 1d5: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 1d9: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 1e1: 0f 85 f3 00 00 00             jne     0x2da <_JIT_ENTRY+0x2da>
// 1e7: 4c 89 54 24 10                movq    %r10, 0x10(%rsp)
// 1ec: 4c 89 4c 24 18                movq    %r9, 0x18(%rsp)
// 1f1: 48 8d 2c d0                   leaq    (%rax,%rdx,8), %rbp
// 1f5: 48 85 c9                      testq   %rcx, %rcx
// 1f8: 41 0f 94 c6                   sete    %r14b
// 1fc: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 201: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 205: 44 89 e2                      movl    %r12d, %edx
// 208: 48 89 ee                      movq    %rbp, %rsi
// 20b: 31 c9                         xorl    %ecx, %ecx
// 20d: 41 ff 50 08                   callq   *0x8(%r8)
// 211: 48 89 04 24                   movq    %rax, (%rsp)
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_OPARG
// 21f: 66 85 c0                      testw   %ax, %ax
// 222: 0f 94 c0                      sete    %al
// 225: 41 84 c6                      testb   %al, %r14b
// 228: 0f 84 ff 00 00 00             je      0x32d <_JIT_ENTRY+0x32d>
// 22e: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 233: 49 8b 45 00                   movq    (%r13), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 255: 4c 89 ea                      movq    %r13, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 45 00                   movq    (%r13), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 4c 8b 64 24 20                movq    0x20(%rsp), %r12
// 265: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 26a: 78 21                         js      0x28d <_JIT_ENTRY+0x28d>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 276: ff d0                         callq   *%rax
// 278: 49 ff 4d 00                   decq    (%r13)
// 27c: 75 0f                         jne     0x28d <_JIT_ENTRY+0x28d>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_Dealloc
// 288: 4c 89 ef                      movq    %r13, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 292: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 296: 48 83 c0 f0                   addq    $-0x10, %rax
// 29a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 29e: 48 85 c9                      testq   %rcx, %rcx
// 2a1: 74 78                         je      0x31b <_JIT_ENTRY+0x31b>
// 2a3: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2a7: 49 83 c6 f0                   addq    $-0x10, %r14
// 2ab: 48 89 08                      movq    %rcx, (%rax)
// 2ae: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 2b3: 48 8b 00                      movq    (%rax), %rax
// 2b6: 84 c0                         testb   %al, %al
// 2b8: 0f 84 eb 00 00 00             je      0x3a9 <_JIT_ENTRY+0x3a9>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_HandlePending
// 2c8: 4c 89 e7                      movq    %r12, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 85 c0                         testl   %eax, %eax
// 2cf: 0f 84 d4 00 00 00             je      0x3a9 <_JIT_ENTRY+0x3a9>
// 2d5: 4c 89 f0                      movq    %r14, %rax
// 2d8: eb 41                         jmp     0x31b <_JIT_ENTRY+0x31b>
// 2da: 49 89 c7                      movq    %rax, %r15
// 2dd: 49 29 df                      subq    %rbx, %r15
// 2e0: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e4: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2ec: 48 8b 03                      movq    (%rbx), %rax
// 2ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f1:  R_X86_64_64  _JIT_TARGET
// 2f9: 89 c9                         movl    %ecx, %ecx
// 2fb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ff: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 305: 48 83 c4 28                   addq    $0x28, %rsp
// 309: 5b                            popq    %rbx
// 30a: 41 5c                         popq    %r12
// 30c: 41 5d                         popq    %r13
// 30e: 41 5e                         popq    %r14
// 310: 41 5f                         popq    %r15
// 312: 5d                            popq    %rbp
// 313: c3                            retq
// 314: 49 83 c7 e8                   addq    $-0x18, %r15
// 318: 4c 89 f8                      movq    %r15, %rax
// 31b: 48 29 d8                      subq    %rbx, %rax
// 31e: 48 83 c0 b8                   addq    $-0x48, %rax
// 322: 48 c1 e8 03                   shrq    $0x3, %rax
// 326: 89 43 40                      movl    %eax, 0x40(%rbx)
// 329: 31 c0                         xorl    %eax, %eax
// 32b: eb d8                         jmp     0x305 <_JIT_ENTRY+0x305>
// 32d: 41 83 fc 02                   cmpl    $0x2, %r12d
// 331: 41 be 01 00 00 00             movl    $0x1, %r14d
// 337: 45 0f 43 f4                   cmovael %r12d, %r14d
// 33b: 45 31 e4                      xorl    %r12d, %r12d
// 33e: eb 0c                         jmp     0x34c <_JIT_ENTRY+0x34c>
// 340: 49 ff c4                      incq    %r12
// 343: 4d 39 e6                      cmpq    %r12, %r14
// 346: 0f 84 e2 fe ff ff             je      0x22e <_JIT_ENTRY+0x22e>
// 34c: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 351: 49 8b 45 00                   movq    (%r13), %rax
// 355: 48 85 c0                      testq   %rax, %rax
// 358: 7e 06                         jle     0x360 <_JIT_ENTRY+0x360>
// 35a: 85 c0                         testl   %eax, %eax
// 35c: 78 e2                         js      0x340 <_JIT_ENTRY+0x340>
// 35e: eb 26                         jmp     0x386 <_JIT_ENTRY+0x386>
// 360: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000362:  R_X86_64_64  .rodata.str1.1
// 36a: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 36f: 4c 89 ea                      movq    %r13, %rdx
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _Py_NegativeRefcount
// 37c: ff d0                         callq   *%rax
// 37e: 49 8b 45 00                   movq    (%r13), %rax
// 382: 85 c0                         testl   %eax, %eax
// 384: 78 ba                         js      0x340 <_JIT_ENTRY+0x340>
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 390: ff d0                         callq   *%rax
// 392: 49 ff 4d 00                   decq    (%r13)
// 396: 75 a8                         jne     0x340 <_JIT_ENTRY+0x340>
// 398: 4c 89 ef                      movq    %r13, %rdi
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_Dealloc
// 3a5: ff d0                         callq   *%rax
// 3a7: eb 97                         jmp     0x340 <_JIT_ENTRY+0x340>
// 3a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ab:  R_X86_64_64  _JIT_CONTINUE
// 3b3: 48 89 df                      movq    %rbx, %rdi
// 3b6: 4c 89 f6                      movq    %r14, %rsi
// 3b9: 4c 89 e2                      movq    %r12, %rdx
// 3bc: 48 83 c4 28                   addq    $0x28, %rsp
// 3c0: 5b                            popq    %rbx
// 3c1: 41 5c                         popq    %r12
// 3c3: 41 5d                         popq    %r13
// 3c5: 41 5e                         popq    %r14
// 3c7: 41 5f                         popq    %r15
// 3c9: 5d                            popq    %rbp
// 3ca: ff e0                         jmpq    *%rax
// 3cc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[973] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x0f, 0x85, 0xb5, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xa0, 0x02, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x9e, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xcf, 0xf0, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x66, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xe6, 0x4b, 0x8b, 0x7c, 0xd7, 0xf0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x77, 0x08, 0x0f, 0x85, 0x05, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x8d, 0x2c, 0xd0, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc6, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x78, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xeb, 0x41, 0x49, 0x89, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xd8, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf4, 0x45, 0x31, 0xe4, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x0f, 0x84, 0xe2, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_O
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_O.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 0f 85 fc 01 00 00             jne     0x224 <_JIT_ENTRY+0x224>
// 28: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 e7 01 00 00             je      0x224 <_JIT_ENTRY+0x224>
// 3d: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 42: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5d: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _PySuper_Lookup
// 6c: 48 89 ef                      movq    %rbp, %rdi
// 6f: 4c 89 e6                      movq    %r12, %rsi
// 72: 31 c9                         xorl    %ecx, %ecx
// 74: ff d0                         callq   *%rax
// 76: 49 89 c5                      movq    %rax, %r13
// 79: 49 8b 07                      movq    (%r15), %rax
// 7c: 48 85 c0                      testq   %rax, %rax
// 7f: 7f 21                         jg      0xa2 <_JIT_ENTRY+0xa2>
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9a: 4c 89 fa                      movq    %r15, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 07                      movq    (%r15), %rax
// a2: 85 c0                         testl   %eax, %eax
// a4: 78 27                         js      0xcd <_JIT_ENTRY+0xcd>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b0: ff d0                         callq   *%rax
// b2: 49 ff 0f                      decq    (%r15)
// b5: 75 16                         jne     0xcd <_JIT_ENTRY+0xcd>
// b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b9:  R_X86_64_64  PySuper_Type
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _Py_Dealloc
// cb: ff d0                         callq   *%rax
// cd: 48 8b 45 00                   movq    (%rbp), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7f 22                         jg      0xf8 <_JIT_ENTRY+0xf8>
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ef: 48 89 ea                      movq    %rbp, %rdx
// f2: ff d0                         callq   *%rax
// f4: 48 8b 45 00                   movq    (%rbp), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 ff 4d 00                   decq    (%rbp)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 48 89 ef                      movq    %rbp, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 7f 22                         jg      0x148 <_JIT_ENTRY+0x148>
// 126: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000128:  R_X86_64_64  .rodata.str1.1
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_NegativeRefcount
// 13a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13f: 4c 89 e2                      movq    %r12, %rdx
// 142: ff d0                         callq   *%rax
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 78 21                         js      0x16d <_JIT_ENTRY+0x16d>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 156: ff d0                         callq   *%rax
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 0f                         jne     0x16d <_JIT_ENTRY+0x16d>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 4d 85 ed                      testq   %r13, %r13
// 170: 0f 84 e5 00 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// 176: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 17a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017c:  R_X86_64_64  _JIT_OPARG
// 184: 0f b7 c1                      movzwl  %cx, %eax
// 187: 89 c2                         movl    %eax, %edx
// 189: f7 d2                         notl    %edx
// 18b: 48 63 ea                      movslq  %edx, %rbp
// 18e: 44 0f b7 f9                   movzwl  %cx, %r15d
// 192: 4c 89 f9                      movq    %r15, %rcx
// 195: 48 f7 d9                      negq    %rcx
// 198: 31 d2                         xorl    %edx, %edx
// 19a: 66 45 85 ff                   testw   %r15w, %r15w
// 19e: 0f 94 c2                      sete    %dl
// 1a1: 31 f6                         xorl    %esi, %esi
// 1a3: 66 41 83 ff 01                cmpw    $0x1, %r15w
// 1a8: 40 0f 94 c6                   sete    %sil
// 1ac: 49 83 7c ee f0 00             cmpq    $0x0, -0x10(%r14,%rbp,8)
// 1b2: 49 f7 d7                      notq    %r15
// 1b5: 4c 0f 44 f9                   cmoveq  %rcx, %r15
// 1b9: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 1bd: 0f 44 d6                      cmovel  %esi, %edx
// 1c0: 80 fa 01                      cmpb    $0x1, %dl
// 1c3: 75 5c                         jne     0x221 <_JIT_ENTRY+0x221>
// 1c5: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ca: 29 c1                         subl    %eax, %ecx
// 1cc: 4c 63 e1                      movslq  %ecx, %r12
// 1cf: 4b 8b 7c e6 f0                movq    -0x10(%r14,%r12,8), %rdi
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  PyCFunction_Type
// 1de: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1e2: 75 3d                         jne     0x221 <_JIT_ENTRY+0x221>
// 1e4: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1e8: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 1ec: 75 33                         jne     0x221 <_JIT_ENTRY+0x221>
// 1ee: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 1f2: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 1f7: 8b 4e 2c                      movl    0x2c(%rsi), %ecx
// 1fa: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 1fd: 89 56 2c                      movl    %edx, 0x2c(%rsi)
// 200: 85 c9                         testl   %ecx, %ecx
// 202: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 207: 7e 6c                         jle     0x275 <_JIT_ENTRY+0x275>
// 209: 4b 8b 4c fd 00                movq    (%r13,%r15,8), %rcx
// 20e: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 212: 0f 85 9c 00 00 00             jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 218: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 21c: e9 95 00 00 00                jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 221: 4d 89 ee                      movq    %r13, %r14
// 224: 49 29 de                      subq    %rbx, %r14
// 227: 49 83 c6 b8                   addq    $-0x48, %r14
// 22b: 49 c1 ee 03                   shrq    $0x3, %r14
// 22f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 233: 48 8b 03                      movq    (%rbx), %rax
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  _JIT_TARGET
// 240: 89 c9                         movl    %ecx, %ecx
// 242: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 246: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 24c: 48 83 c4 18                   addq    $0x18, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: c3                            retq
// 25b: 49 83 c6 e8                   addq    $-0x18, %r14
// 25f: 4d 89 f5                      movq    %r14, %r13
// 262: 49 29 dd                      subq    %rbx, %r13
// 265: 49 83 c5 b8                   addq    $-0x48, %r13
// 269: 49 c1 ed 03                   shrq    $0x3, %r13
// 26d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 271: 31 c0                         xorl    %eax, %eax
// 273: eb d7                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 275: 4c 89 04 24                   movq    %r8, (%rsp)
// 279: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1+0x39
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_CheckRecursiveCall
// 28d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 292: ff d0                         callq   *%rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 75 ca                         jne     0x262 <_JIT_ENTRY+0x262>
// 298: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 29d: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 2a1: 4c 8b 04 24                   movq    (%rsp), %r8
// 2a5: 4b 8b 4c fd 00                movq    (%r13,%r15,8), %rcx
// 2aa: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 2ae: 0f 84 64 ff ff ff             je      0x218 <_JIT_ENTRY+0x218>
// 2b4: 31 ff                         xorl    %edi, %edi
// 2b6: 4f 8d 2c e6                   leaq    (%r14,%r12,8), %r13
// 2ba: 49 83 c5 f0                   addq    $-0x10, %r13
// 2be: 49 89 cc                      movq    %rcx, %r12
// 2c1: 48 89 ce                      movq    %rcx, %rsi
// 2c4: 41 ff d0                      callq   *%r8
// 2c7: 48 89 04 24                   movq    %rax, (%rsp)
// 2cb: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2d0: 41 ff 47 2c                   incl    0x2c(%r15)
// 2d4: bf 02 0b 00 00                movl    $0xb02, %edi            # imm = 0xB02
// 2d9: 4c 89 e6                      movq    %r12, %rsi
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  .text+0x360
// 2e6: ff d0                         callq   *%rax
// 2e8: bf 03 0b 00 00                movl    $0xb03, %edi            # imm = 0xB03
// 2ed: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  .text+0x360
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 8b 04 24                   movq    (%rsp), %rax
// 302: 48 85 c0                      testq   %rax, %rax
// 305: 0f 84 57 ff ff ff             je      0x262 <_JIT_ENTRY+0x262>
// 30b: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 30f: 49 83 c6 f0                   addq    $-0x10, %r14
// 313: 49 89 45 00                   movq    %rax, (%r13)
// 317: 49 8b 47 10                   movq    0x10(%r15), %rax
// 31b: 48 8b 00                      movq    (%rax), %rax
// 31e: 84 c0                         testb   %al, %al
// 320: 74 17                         je      0x339 <_JIT_ENTRY+0x339>
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_HandlePending
// 32c: 4c 89 ff                      movq    %r15, %rdi
// 32f: ff d0                         callq   *%rax
// 331: 85 c0                         testl   %eax, %eax
// 333: 0f 85 26 ff ff ff             jne     0x25f <_JIT_ENTRY+0x25f>
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _JIT_CONTINUE
// 343: 48 89 df                      movq    %rbx, %rdi
// 346: 4c 89 f6                      movq    %r14, %rsi
// 349: 4c 89 fa                      movq    %r15, %rdx
// 34c: 48 83 c4 18                   addq    $0x18, %rsp
// 350: 5b                            popq    %rbx
// 351: 41 5c                         popq    %r12
// 353: 41 5d                         popq    %r13
// 355: 41 5e                         popq    %r14
// 357: 41 5f                         popq    %r15
// 359: 5d                            popq    %rbp
// 35a: ff e0                         jmpq    *%rax
// 35c: 0f 1f 40 00                   nopl    (%rax)
// 
// 0000000000000360 <Py_DECREF>:
// 360: 53                            pushq   %rbx
// 361: 48 89 f3                      movq    %rsi, %rbx
// 364: 48 8b 06                      movq    (%rsi), %rax
// 367: 48 85 c0                      testq   %rax, %rax
// 36a: 7e 06                         jle     0x372 <Py_DECREF+0x12>
// 36c: 85 c0                         testl   %eax, %eax
// 36e: 79 24                         jns     0x394 <Py_DECREF+0x34>
// 370: eb 33                         jmp     0x3a5 <Py_DECREF+0x45>
// 372: 89 fe                         movl    %edi, %esi
// 374: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000376:  R_X86_64_64  .rodata.str1.1
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_NegativeRefcount
// 388: 48 89 da                      movq    %rbx, %rdx
// 38b: ff d0                         callq   *%rax
// 38d: 48 8b 03                      movq    (%rbx), %rax
// 390: 85 c0                         testl   %eax, %eax
// 392: 78 11                         js      0x3a5 <Py_DECREF+0x45>
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39e: ff d0                         callq   *%rax
// 3a0: 48 ff 0b                      decq    (%rbx)
// 3a3: 74 02                         je      0x3a7 <Py_DECREF+0x47>
// 3a5: 5b                            popq    %rbx
// 3a6: c3                            retq
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_Dealloc
// 3b1: 48 89 df                      movq    %rbx, %rdi
// 3b4: 5b                            popq    %rbx
// 3b5: ff e0                         jmpq    *%rax
// 3b7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_O_code_body[952] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x0f, 0x85, 0xfc, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xe7, 0x01, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x44, 0x0f, 0xb7, 0xf9, 0x4c, 0x89, 0xf9, 0x48, 0xf7, 0xd9, 0x31, 0xd2, 0x66, 0x45, 0x85, 0xff, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x41, 0x83, 0xff, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x49, 0x83, 0x7c, 0xee, 0xf0, 0x00, 0x49, 0xf7, 0xd7, 0x4c, 0x0f, 0x44, 0xf9, 0x4d, 0x8d, 0x6e, 0xf0, 0x0f, 0x44, 0xd6, 0x80, 0xfa, 0x01, 0x75, 0x5c, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x4c, 0x63, 0xe1, 0x4b, 0x8b, 0x7c, 0xe6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x3d, 0x48, 0x8b, 0x47, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x33, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x8b, 0x4e, 0x2c, 0x8d, 0x51, 0xff, 0x89, 0x56, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x7e, 0x6c, 0x4b, 0x8b, 0x4c, 0xfd, 0x00, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x9c, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7f, 0x18, 0xe9, 0x95, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0xd7, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0xca, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x4b, 0x8b, 0x4c, 0xfd, 0x00, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0x64, 0xff, 0xff, 0xff, 0x31, 0xff, 0x4f, 0x8d, 0x2c, 0xe6, 0x49, 0x83, 0xc5, 0xf0, 0x49, 0x89, 0xcc, 0x48, 0x89, 0xce, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x41, 0xff, 0x47, 0x2c, 0xbf, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x03, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x57, 0xff, 0xff, 0xff, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x26, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x40, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_O_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x360},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x360},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_O_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_1
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_1.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 0f 84 ab 00 00 00             je      0x257 <_JIT_ENTRY+0x257>
// 1ac: 49 89 6d 00                   movq    %rbp, (%r13)
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c8                      movzwl  %ax, %ecx
// 1bd: 48 c1 e1 04                   shlq    $0x4, %rcx
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 1cb: 4c 89 ff                      movq    %r15, %rdi
// 1ce: 48 89 ee                      movq    %rbp, %rsi
// 1d1: ff 14 01                      callq   *(%rcx,%rax)
// 1d4: 49 89 c4                      movq    %rax, %r12
// 1d7: 48 8b 45 00                   movq    (%rbp), %rax
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 7f 22                         jg      0x202 <_JIT_ENTRY+0x202>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_NegativeRefcount
// 1f4: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 1f9: 48 89 ea                      movq    %rbp, %rdx
// 1fc: ff d0                         callq   *%rax
// 1fe: 48 8b 45 00                   movq    (%rbp), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 21                         js      0x227 <_JIT_ENTRY+0x227>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 48 ff 4d 00                   decq    (%rbp)
// 216: 75 0f                         jne     0x227 <_JIT_ENTRY+0x227>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_Dealloc
// 222: 48 89 ef                      movq    %rbp, %rdi
// 225: ff d0                         callq   *%rax
// 227: 4d 85 e4                      testq   %r12, %r12
// 22a: 74 2b                         je      0x257 <_JIT_ENTRY+0x257>
// 22c: 49 83 c6 f0                   addq    $-0x10, %r14
// 230: 4d 89 65 00                   movq    %r12, (%r13)
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _JIT_CONTINUE
// 23e: 48 89 df                      movq    %rbx, %rdi
// 241: 4c 89 f6                      movq    %r14, %rsi
// 244: 4c 89 fa                      movq    %r15, %rdx
// 247: 48 83 c4 08                   addq    $0x8, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: ff e0                         jmpq    *%rax
// 257: 49 29 dd                      subq    %rbx, %r13
// 25a: 49 83 c5 b8                   addq    $-0x48, %r13
// 25e: 49 c1 ed 03                   shrq    $0x3, %r13
// 262: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 266: 31 c0                         xorl    %eax, %eax
// 268: e9 ed fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 26d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_1_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xed, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_1_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_1_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_2
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_2.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 85 ed                      testq   %rbp, %rbp
// 1a2: 0f 84 02 01 00 00             je      0x2aa <_JIT_ENTRY+0x2aa>
// 1a8: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 1ac: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c8                      movzwl  %ax, %ecx
// 1bd: 48 c1 e1 04                   shlq    $0x4, %rcx
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 1cb: 4c 89 ff                      movq    %r15, %rdi
// 1ce: 4c 89 e6                      movq    %r12, %rsi
// 1d1: 48 89 ea                      movq    %rbp, %rdx
// 1d4: ff 14 01                      callq   *(%rcx,%rax)
// 1d7: 49 89 c5                      movq    %rax, %r13
// 1da: 49 8b 04 24                   movq    (%r12), %rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 7f 22                         jg      0x205 <_JIT_ENTRY+0x205>
// 1e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NegativeRefcount
// 1f7: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 1fc: 4c 89 e2                      movq    %r12, %rdx
// 1ff: ff d0                         callq   *%rax
// 201: 49 8b 04 24                   movq    (%r12), %rax
// 205: 85 c0                         testl   %eax, %eax
// 207: 78 21                         js      0x22a <_JIT_ENTRY+0x22a>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 213: ff d0                         callq   *%rax
// 215: 49 ff 0c 24                   decq    (%r12)
// 219: 75 0f                         jne     0x22a <_JIT_ENTRY+0x22a>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: 4c 89 e7                      movq    %r12, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 45 00                   movq    (%rbp), %rax
// 22e: 48 85 c0                      testq   %rax, %rax
// 231: 7f 22                         jg      0x255 <_JIT_ENTRY+0x255>
// 233: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000235:  R_X86_64_64  .rodata.str1.1
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_NegativeRefcount
// 247: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 24c: 48 89 ea                      movq    %rbp, %rdx
// 24f: ff d0                         callq   *%rax
// 251: 48 8b 45 00                   movq    (%rbp), %rax
// 255: 85 c0                         testl   %eax, %eax
// 257: 78 21                         js      0x27a <_JIT_ENTRY+0x27a>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 263: ff d0                         callq   *%rax
// 265: 48 ff 4d 00                   decq    (%rbp)
// 269: 75 0f                         jne     0x27a <_JIT_ENTRY+0x27a>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: 48 89 ef                      movq    %rbp, %rdi
// 278: ff d0                         callq   *%rax
// 27a: 4d 85 ed                      testq   %r13, %r13
// 27d: 74 34                         je      0x2b3 <_JIT_ENTRY+0x2b3>
// 27f: 4d 89 6e e0                   movq    %r13, -0x20(%r14)
// 283: 49 83 c6 e8                   addq    $-0x18, %r14
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 4c 89 f6                      movq    %r14, %rsi
// 297: 4c 89 fa                      movq    %r15, %rdx
// 29a: 48 83 c4 08                   addq    $0x8, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: ff e0                         jmpq    *%rax
// 2aa: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 2b1: eb 07                         jmp     0x2ba <_JIT_ENTRY+0x2ba>
// 2b3: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 2ba: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2be: 48 29 d8                      subq    %rbx, %rax
// 2c1: 48 83 c0 a8                   addq    $-0x58, %rax
// 2c5: 48 c1 e8 03                   shrq    $0x3, %rax
// 2c9: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2cc: 31 c0                         xorl    %eax, %eax
// 2ce: e9 87 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2d3: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_2_code_body[724] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x8b, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x4d, 0x89, 0x6e, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x87, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_2_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_2_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_ISINSTANCE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_ISINSTANCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 0f 85 c1 01 00 00             jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 28: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 ac 01 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 3d: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 42: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5d: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _PySuper_Lookup
// 6c: 48 89 ef                      movq    %rbp, %rdi
// 6f: 4c 89 e6                      movq    %r12, %rsi
// 72: 31 c9                         xorl    %ecx, %ecx
// 74: ff d0                         callq   *%rax
// 76: 49 89 c5                      movq    %rax, %r13
// 79: 49 8b 07                      movq    (%r15), %rax
// 7c: 48 85 c0                      testq   %rax, %rax
// 7f: 7f 21                         jg      0xa2 <_JIT_ENTRY+0xa2>
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9a: 4c 89 fa                      movq    %r15, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 07                      movq    (%r15), %rax
// a2: 85 c0                         testl   %eax, %eax
// a4: 78 27                         js      0xcd <_JIT_ENTRY+0xcd>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b0: ff d0                         callq   *%rax
// b2: 49 ff 0f                      decq    (%r15)
// b5: 75 16                         jne     0xcd <_JIT_ENTRY+0xcd>
// b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b9:  R_X86_64_64  PySuper_Type
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _Py_Dealloc
// cb: ff d0                         callq   *%rax
// cd: 48 8b 45 00                   movq    (%rbp), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7f 22                         jg      0xf8 <_JIT_ENTRY+0xf8>
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ef: 48 89 ea                      movq    %rbp, %rdx
// f2: ff d0                         callq   *%rax
// f4: 48 8b 45 00                   movq    (%rbp), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 ff 4d 00                   decq    (%rbp)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 48 89 ef                      movq    %rbp, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 7f 22                         jg      0x148 <_JIT_ENTRY+0x148>
// 126: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000128:  R_X86_64_64  .rodata.str1.1
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_NegativeRefcount
// 13a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13f: 4c 89 e2                      movq    %r12, %rdx
// 142: ff d0                         callq   *%rax
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 78 21                         js      0x16d <_JIT_ENTRY+0x16d>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 156: ff d0                         callq   *%rax
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 0f                         jne     0x16d <_JIT_ENTRY+0x16d>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 4d 85 ed                      testq   %r13, %r13
// 170: 0f 84 aa 00 00 00             je      0x220 <_JIT_ENTRY+0x220>
// 176: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _JIT_OPARG
// 184: 0f b7 c8                      movzwl  %ax, %ecx
// 187: 89 ca                         movl    %ecx, %edx
// 189: f7 d2                         notl    %edx
// 18b: 4c 63 ea                      movslq  %edx, %r13
// 18e: 0f b7 c0                      movzwl  %ax, %eax
// 191: 48 89 c2                      movq    %rax, %rdx
// 194: 48 f7 da                      negq    %rdx
// 197: 31 f6                         xorl    %esi, %esi
// 199: 66 83 f8 01                   cmpw    $0x1, %ax
// 19d: 40 0f 94 c6                   sete    %sil
// 1a1: 31 ff                         xorl    %edi, %edi
// 1a3: 66 83 f8 02                   cmpw    $0x2, %ax
// 1a7: 40 0f 94 c7                   sete    %dil
// 1ab: 4b 83 7c ee f0 00             cmpq    $0x0, -0x10(%r14,%r13,8)
// 1b1: 48 f7 d0                      notq    %rax
// 1b4: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1b8: 49 8d 6e f0                   leaq    -0x10(%r14), %rbp
// 1bc: 0f 44 f7                      cmovel  %edi, %esi
// 1bf: 40 80 fe 01                   cmpb    $0x1, %sil
// 1c3: 75 21                         jne     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c5: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1ca: 29 ca                         subl    %ecx, %edx
// 1cc: 48 63 d2                      movslq  %edx, %rdx
// 1cf: 4d 8b 64 d6 f0                movq    -0x10(%r14,%rdx,8), %r12
// 1d4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1d9: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1dd: 4c 3b a1 b8 54 06 00          cmpq    0x654b8(%rcx), %r12
// 1e4: 74 53                         je      0x239 <_JIT_ENTRY+0x239>
// 1e6: 49 89 ee                      movq    %rbp, %r14
// 1e9: 49 29 de                      subq    %rbx, %r14
// 1ec: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f8: 48 8b 03                      movq    (%rbx), %rax
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  _JIT_TARGET
// 205: 89 c9                         movl    %ecx, %ecx
// 207: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 211: 48 83 c4 28                   addq    $0x28, %rsp
// 215: 5b                            popq    %rbx
// 216: 41 5c                         popq    %r12
// 218: 41 5d                         popq    %r13
// 21a: 41 5e                         popq    %r14
// 21c: 41 5f                         popq    %r15
// 21e: 5d                            popq    %rbp
// 21f: c3                            retq
// 220: 49 83 c6 e8                   addq    $-0x18, %r14
// 224: 4c 89 f5                      movq    %r14, %rbp
// 227: 48 29 dd                      subq    %rbx, %rbp
// 22a: 48 83 c5 b8                   addq    $-0x48, %rbp
// 22e: 48 c1 ed 03                   shrq    $0x3, %rbp
// 232: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 235: 31 c0                         xorl    %eax, %eax
// 237: eb d8                         jmp     0x211 <_JIT_ENTRY+0x211>
// 239: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 23e: 4c 8b 7c c5 00                movq    (%rbp,%rax,8), %r15
// 243: 48 8b 74 c5 08                movq    0x8(%rbp,%rax,8), %rsi
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  PyObject_IsInstance
// 252: 4c 89 ff                      movq    %r15, %rdi
// 255: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 25a: ff d0                         callq   *%rax
// 25c: 85 c0                         testl   %eax, %eax
// 25e: 78 c7                         js      0x227 <_JIT_ENTRY+0x227>
// 260: 89 c7                         movl    %eax, %edi
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyBool_FromLong
// 26c: ff d0                         callq   *%rax
// 26e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 273: 49 8b 07                      movq    (%r15), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 7f 21                         jg      0x29c <_JIT_ENTRY+0x29c>
// 27b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_NegativeRefcount
// 28f: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 294: 4c 89 fa                      movq    %r15, %rdx
// 297: ff d0                         callq   *%rax
// 299: 49 8b 07                      movq    (%r15), %rax
// 29c: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000029e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a6: 85 c0                         testl   %eax, %eax
// 2a8: 78 16                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 2aa: ff d5                         callq   *%rbp
// 2ac: 49 ff 0f                      decq    (%r15)
// 2af: 75 0f                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 4c 89 ff                      movq    %r15, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 2c5: 49 8b 07                      movq    (%r15), %rax
// 2c8: 48 85 c0                      testq   %rax, %rax
// 2cb: 7f 21                         jg      0x2ee <_JIT_ENTRY+0x2ee>
// 2cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cf:  R_X86_64_64  .rodata.str1.1
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_NegativeRefcount
// 2e1: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 2e6: 4c 89 fa                      movq    %r15, %rdx
// 2e9: ff d0                         callq   *%rax
// 2eb: 49 8b 07                      movq    (%r15), %rax
// 2ee: 85 c0                         testl   %eax, %eax
// 2f0: 78 16                         js      0x308 <_JIT_ENTRY+0x308>
// 2f2: ff d5                         callq   *%rbp
// 2f4: 49 ff 0f                      decq    (%r15)
// 2f7: 75 0f                         jne     0x308 <_JIT_ENTRY+0x308>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_Dealloc
// 303: 4c 89 ff                      movq    %r15, %rdi
// 306: ff d0                         callq   *%rax
// 308: 49 8b 04 24                   movq    (%r12), %rax
// 30c: 48 85 c0                      testq   %rax, %rax
// 30f: 7f 22                         jg      0x333 <_JIT_ENTRY+0x333>
// 311: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000313:  R_X86_64_64  .rodata.str1.1
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_NegativeRefcount
// 325: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 32a: 4c 89 e2                      movq    %r12, %rdx
// 32d: ff d0                         callq   *%rax
// 32f: 49 8b 04 24                   movq    (%r12), %rax
// 333: 85 c0                         testl   %eax, %eax
// 335: 78 17                         js      0x34e <_JIT_ENTRY+0x34e>
// 337: ff d5                         callq   *%rbp
// 339: 49 ff 0c 24                   decq    (%r12)
// 33d: 75 0f                         jne     0x34e <_JIT_ENTRY+0x34e>
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _Py_Dealloc
// 349: 4c 89 e7                      movq    %r12, %rdi
// 34c: ff d0                         callq   *%rax
// 34e: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 353: 49 8d 2c c6                   leaq    (%r14,%rax,8), %rbp
// 357: 48 83 c5 f0                   addq    $-0x10, %rbp
// 35b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 360: 48 85 c0                      testq   %rax, %rax
// 363: 0f 84 be fe ff ff             je      0x227 <_JIT_ENTRY+0x227>
// 369: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 36d: 48 83 c6 f0                   addq    $-0x10, %rsi
// 371: 48 89 45 00                   movq    %rax, (%rbp)
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _JIT_CONTINUE
// 37f: 48 89 df                      movq    %rbx, %rdi
// 382: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 387: 48 83 c4 28                   addq    $0x28, %rsp
// 38b: 5b                            popq    %rbx
// 38c: 41 5c                         popq    %r12
// 38e: 41 5d                         popq    %r13
// 390: 41 5e                         popq    %r14
// 392: 41 5f                         popq    %r15
// 394: 5d                            popq    %rbp
// 395: ff e0                         jmpq    *%rax
// 397: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_ISINSTANCE_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x0f, 0x85, 0xc1, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xac, 0x01, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x7c, 0xee, 0xf0, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x49, 0x8d, 0x6e, 0xf0, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x21, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x4d, 0x8b, 0x64, 0xd6, 0xf0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x49, 0x10, 0x4c, 0x3b, 0xa1, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x53, 0x49, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x4c, 0x89, 0xf5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0xd8, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x74, 0xc5, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0x74, 0x24, 0x18, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc7, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x16, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x16, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xc6, 0x48, 0x83, 0xc5, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbe, 0xfe, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_ISINSTANCE_code_holes[32] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_ISINSTANCE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_LEN
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_LEN.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 0f 85 be 01 00 00             jne     0x1e6 <_JIT_ENTRY+0x1e6>
// 28: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 a9 01 00 00             je      0x1e6 <_JIT_ENTRY+0x1e6>
// 3d: 48 89 14 24                   movq    %rdx, (%rsp)
// 41: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 45: 48 8b 03                      movq    (%rbx), %rax
// 48: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 61: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000063:  R_X86_64_64  _PySuper_Lookup
// 6b: 48 89 ef                      movq    %rbp, %rdi
// 6e: 4c 89 e6                      movq    %r12, %rsi
// 71: 31 c9                         xorl    %ecx, %ecx
// 73: ff d0                         callq   *%rax
// 75: 49 89 c5                      movq    %rax, %r13
// 78: 49 8b 07                      movq    (%r15), %rax
// 7b: 48 85 c0                      testq   %rax, %rax
// 7e: 7f 21                         jg      0xa1 <_JIT_ENTRY+0xa1>
// 80: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000082:  R_X86_64_64  .rodata.str1.1
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_NegativeRefcount
// 94: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 99: 4c 89 fa                      movq    %r15, %rdx
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 07                      movq    (%r15), %rax
// a1: 85 c0                         testl   %eax, %eax
// a3: 78 27                         js      0xcc <_JIT_ENTRY+0xcc>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// af: ff d0                         callq   *%rax
// b1: 49 ff 0f                      decq    (%r15)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 4d 85 ed                      testq   %r13, %r13
// 16f: 0f 84 a8 00 00 00             je      0x21d <_JIT_ENTRY+0x21d>
// 175: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _JIT_OPARG
// 183: 0f b7 c8                      movzwl  %ax, %ecx
// 186: 89 ca                         movl    %ecx, %edx
// 188: f7 d2                         notl    %edx
// 18a: 4c 63 fa                      movslq  %edx, %r15
// 18d: 0f b7 c0                      movzwl  %ax, %eax
// 190: 48 89 c2                      movq    %rax, %rdx
// 193: 48 f7 da                      negq    %rdx
// 196: 31 f6                         xorl    %esi, %esi
// 198: 66 85 c0                      testw   %ax, %ax
// 19b: 40 0f 94 c6                   sete    %sil
// 19f: 31 ff                         xorl    %edi, %edi
// 1a1: 66 83 f8 01                   cmpw    $0x1, %ax
// 1a5: 40 0f 94 c7                   sete    %dil
// 1a9: 4b 83 7c fe f0 00             cmpq    $0x0, -0x10(%r14,%r15,8)
// 1af: 48 f7 d0                      notq    %rax
// 1b2: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1b6: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 1ba: 0f 44 f7                      cmovel  %edi, %esi
// 1bd: 40 80 fe 01                   cmpb    $0x1, %sil
// 1c1: 75 20                         jne     0x1e3 <_JIT_ENTRY+0x1e3>
// 1c3: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1c8: 29 ca                         subl    %ecx, %edx
// 1ca: 4c 63 ea                      movslq  %edx, %r13
// 1cd: 4b 8b 6c ee f0                movq    -0x10(%r14,%r13,8), %rbp
// 1d2: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1d6: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1da: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 1e1: 74 54                         je      0x237 <_JIT_ENTRY+0x237>
// 1e3: 4d 89 e6                      movq    %r12, %r14
// 1e6: 49 29 de                      subq    %rbx, %r14
// 1e9: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ed: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f5: 48 8b 03                      movq    (%rbx), %rax
// 1f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fa:  R_X86_64_64  _JIT_TARGET
// 202: 89 c9                         movl    %ecx, %ecx
// 204: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 208: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 20e: 48 83 c4 18                   addq    $0x18, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: c3                            retq
// 21d: 49 83 c6 e8                   addq    $-0x18, %r14
// 221: 4d 89 f4                      movq    %r14, %r12
// 224: 49 29 dc                      subq    %rbx, %r12
// 227: 49 83 c4 b8                   addq    $-0x48, %r12
// 22b: 49 c1 ec 03                   shrq    $0x3, %r12
// 22f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 233: 31 c0                         xorl    %eax, %eax
// 235: eb d7                         jmp     0x20e <_JIT_ENTRY+0x20e>
// 237: 49 8b 3c c4                   movq    (%r12,%rax,8), %rdi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  PyObject_Size
// 245: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 24a: ff d0                         callq   *%rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 78 d3                         js      0x224 <_JIT_ENTRY+0x224>
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  PyLong_FromSsize_t
// 25b: 48 89 c7                      movq    %rax, %rdi
// 25e: ff d1                         callq   *%rcx
// 260: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 265: 48 8b 45 00                   movq    (%rbp), %rax
// 269: 48 85 c0                      testq   %rax, %rax
// 26c: 7f 22                         jg      0x290 <_JIT_ENTRY+0x290>
// 26e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000270:  R_X86_64_64  .rodata.str1.1
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_NegativeRefcount
// 282: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 287: 48 89 ea                      movq    %rbp, %rdx
// 28a: ff d0                         callq   *%rax
// 28c: 48 8b 45 00                   movq    (%rbp), %rax
// 290: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000292:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 18                         js      0x2b6 <_JIT_ENTRY+0x2b6>
// 29e: 41 ff d4                      callq   *%r12
// 2a1: 48 ff 4d 00                   decq    (%rbp)
// 2a5: 75 0f                         jne     0x2b6 <_JIT_ENTRY+0x2b6>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_Dealloc
// 2b1: 48 89 ef                      movq    %rbp, %rdi
// 2b4: ff d0                         callq   *%rax
// 2b6: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 2bb: 48 8b 45 00                   movq    (%rbp), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 7f 22                         jg      0x2e6 <_JIT_ENTRY+0x2e6>
// 2c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c6:  R_X86_64_64  .rodata.str1.1
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_NegativeRefcount
// 2d8: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 2dd: 48 89 ea                      movq    %rbp, %rdx
// 2e0: ff d0                         callq   *%rax
// 2e2: 48 8b 45 00                   movq    (%rbp), %rax
// 2e6: 85 c0                         testl   %eax, %eax
// 2e8: 78 18                         js      0x302 <_JIT_ENTRY+0x302>
// 2ea: 41 ff d4                      callq   *%r12
// 2ed: 48 ff 4d 00                   decq    (%rbp)
// 2f1: 75 0f                         jne     0x302 <_JIT_ENTRY+0x302>
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_Dealloc
// 2fd: 48 89 ef                      movq    %rbp, %rdi
// 300: ff d0                         callq   *%rax
// 302: 4f 8d 24 ee                   leaq    (%r14,%r13,8), %r12
// 306: 49 83 c4 f0                   addq    $-0x10, %r12
// 30a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 30f: 48 85 c0                      testq   %rax, %rax
// 312: 0f 84 0c ff ff ff             je      0x224 <_JIT_ENTRY+0x224>
// 318: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 31c: 48 83 c6 f0                   addq    $-0x10, %rsi
// 320: 49 89 04 24                   movq    %rax, (%r12)
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _JIT_CONTINUE
// 32e: 48 89 df                      movq    %rbx, %rdi
// 331: 48 8b 14 24                   movq    (%rsp), %rdx
// 335: 48 83 c4 18                   addq    $0x18, %rsp
// 339: 5b                            popq    %rbx
// 33a: 41 5c                         popq    %r12
// 33c: 41 5d                         popq    %r13
// 33e: 41 5e                         popq    %r14
// 340: 41 5f                         popq    %r15
// 342: 5d                            popq    %rbp
// 343: ff e0                         jmpq    *%rax
// 345: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_LEN_code_body[838] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x0f, 0x85, 0xbe, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xa9, 0x01, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xfa, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x7c, 0xfe, 0xf0, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4d, 0x8d, 0x66, 0xf0, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x20, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4b, 0x8b, 0x6c, 0xee, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x54, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0xd7, 0x49, 0x8b, 0x3c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0xd3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xee, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x0c, 0xff, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_LEN_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_LEN_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 28                   addq    $0x28, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 73: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 77: 48 8b 03                      movq    (%rbx), %rax
// 7a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000080:  R_X86_64_64  _JIT_OPARG
// 88: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8e: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _PySuper_Lookup
// 9d: 48 89 ef                      movq    %rbp, %rdi
// a0: 4c 89 e6                      movq    %r12, %rsi
// a3: 31 c9                         xorl    %ecx, %ecx
// a5: ff d0                         callq   *%rax
// a7: 49 89 c5                      movq    %rax, %r13
// aa: 49 8b 06                      movq    (%r14), %rax
// ad: 48 85 c0                      testq   %rax, %rax
// b0: 7f 21                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b4:  R_X86_64_64  .rodata.str1.1
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _Py_NegativeRefcount
// c6: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: ff d0                         callq   *%rax
// d0: 49 8b 06                      movq    (%r14), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 27                         js      0xfe <_JIT_ENTRY+0xfe>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0e                      decq    (%r14)
// e6: 75 16                         jne     0xfe <_JIT_ENTRY+0xfe>
// e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ea:  R_X86_64_64  PySuper_Type
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: ff d0                         callq   *%rax
// fe: 48 8b 45 00                   movq    (%rbp), %rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 7f 22                         jg      0x129 <_JIT_ENTRY+0x129>
// 107: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000109:  R_X86_64_64  .rodata.str1.1
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_NegativeRefcount
// 11b: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 120: 48 89 ea                      movq    %rbp, %rdx
// 123: ff d0                         callq   *%rax
// 125: 48 8b 45 00                   movq    (%rbp), %rax
// 129: 85 c0                         testl   %eax, %eax
// 12b: 78 21                         js      0x14e <_JIT_ENTRY+0x14e>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 137: ff d0                         callq   *%rax
// 139: 48 ff 4d 00                   decq    (%rbp)
// 13d: 75 0f                         jne     0x14e <_JIT_ENTRY+0x14e>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_Dealloc
// 149: 48 89 ef                      movq    %rbp, %rdi
// 14c: ff d0                         callq   *%rax
// 14e: 49 8b 04 24                   movq    (%r12), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 22                         jg      0x179 <_JIT_ENTRY+0x179>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 170: 4c 89 e2                      movq    %r12, %rdx
// 173: ff d0                         callq   *%rax
// 175: 49 8b 04 24                   movq    (%r12), %rax
// 179: 85 c0                         testl   %eax, %eax
// 17b: 78 21                         js      0x19e <_JIT_ENTRY+0x19e>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 187: ff d0                         callq   *%rax
// 189: 49 ff 0c 24                   decq    (%r12)
// 18d: 75 0f                         jne     0x19e <_JIT_ENTRY+0x19e>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 4c 89 e7                      movq    %r12, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 4d 85 ed                      testq   %r13, %r13
// 1a1: 0f 84 71 01 00 00             je      0x318 <_JIT_ENTRY+0x318>
// 1a7: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1ab: 4d 89 6f e8                   movq    %r13, -0x18(%r15)
// 1af: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 f2                      movzwl  %dx, %esi
// 1bc: 89 f1                         movl    %esi, %ecx
// 1be: f7 d1                         notl    %ecx
// 1c0: 4c 63 c9                      movslq  %ecx, %r9
// 1c3: 4b 8b 4c cf f0                movq    -0x10(%r15,%r9,8), %rcx
// 1c8: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1cd: 29 f7                         subl    %esi, %edi
// 1cf: 4c 63 d7                      movslq  %edi, %r10
// 1d2: 0f b7 d2                      movzwl  %dx, %edx
// 1d5: 48 89 d7                      movq    %rdx, %rdi
// 1d8: 48 f7 df                      negq    %rdi
// 1db: 44 8d 6e 01                   leal    0x1(%rsi), %r13d
// 1df: 48 85 c9                      testq   %rcx, %rcx
// 1e2: 48 f7 d2                      notq    %rdx
// 1e5: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1e9: 44 0f 44 ee                   cmovel  %esi, %r13d
// 1ed: 4f 8b 64 d7 f0                movq    -0x10(%r15,%r10,8), %r12
// 1f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001f4:  R_X86_64_64  PyMethodDescr_Type
// 1fc: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 201: 0f 85 31 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 207: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 20c: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 214: 0f 85 1e fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 21a: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 21e: 48 8b 3e                      movq    (%rsi), %rdi
// 221: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 225: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 22a: 0f 85 08 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 230: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 235: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 23a: 48 85 c9                      testq   %rcx, %rcx
// 23d: 40 0f 94 c5                   sete    %bpl
// 241: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 245: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 24a: 48 83 c6 08                   addq    $0x8, %rsi
// 24e: 48 63 d0                      movslq  %eax, %rdx
// 251: 41 ff 50 08                   callq   *0x8(%r8)
// 255: 48 89 04 24                   movq    %rax, (%rsp)
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_OPARG
// 263: 66 85 c0                      testw   %ax, %ax
// 266: 0f 94 c0                      sete    %al
// 269: 40 84 c5                      testb   %al, %bpl
// 26c: 0f 84 c2 00 00 00             je      0x334 <_JIT_ENTRY+0x334>
// 272: 49 8b 04 24                   movq    (%r12), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 7f 22                         jg      0x29d <_JIT_ENTRY+0x29d>
// 27b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_NegativeRefcount
// 28f: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 294: 4c 89 e2                      movq    %r12, %rdx
// 297: ff d0                         callq   *%rax
// 299: 49 8b 04 24                   movq    (%r12), %rax
// 29d: 85 c0                         testl   %eax, %eax
// 29f: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 2a4: 78 21                         js      0x2c7 <_JIT_ENTRY+0x2c7>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 0c 24                   decq    (%r12)
// 2b6: 75 0f                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 e7                      movq    %r12, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2cc: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2d0: 48 83 c0 f0                   addq    $-0x10, %rax
// 2d4: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2d8: 48 85 c9                      testq   %rcx, %rcx
// 2db: 74 42                         je      0x31f <_JIT_ENTRY+0x31f>
// 2dd: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2e1: 49 83 c6 f0                   addq    $-0x10, %r14
// 2e5: 48 89 08                      movq    %rcx, (%rax)
// 2e8: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2ed: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2f1: 48 8b 00                      movq    (%rax), %rax
// 2f4: 84 c0                         testb   %al, %al
// 2f6: 0f 84 b2 00 00 00             je      0x3ae <_JIT_ENTRY+0x3ae>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_HandlePending
// 306: 4c 89 ff                      movq    %r15, %rdi
// 309: ff d0                         callq   *%rax
// 30b: 85 c0                         testl   %eax, %eax
// 30d: 0f 84 9b 00 00 00             je      0x3ae <_JIT_ENTRY+0x3ae>
// 313: 4c 89 f0                      movq    %r14, %rax
// 316: eb 07                         jmp     0x31f <_JIT_ENTRY+0x31f>
// 318: 49 83 c7 e8                   addq    $-0x18, %r15
// 31c: 4c 89 f8                      movq    %r15, %rax
// 31f: 48 29 d8                      subq    %rbx, %rax
// 322: 48 83 c0 b8                   addq    $-0x48, %rax
// 326: 48 c1 e8 03                   shrq    $0x3, %rax
// 32a: 89 43 40                      movl    %eax, 0x40(%rbx)
// 32d: 31 c0                         xorl    %eax, %eax
// 32f: e9 2b fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 334: 41 83 fd 02                   cmpl    $0x2, %r13d
// 338: 41 be 01 00 00 00             movl    $0x1, %r14d
// 33e: 45 0f 43 f5                   cmovael %r13d, %r14d
// 342: 45 31 ed                      xorl    %r13d, %r13d
// 345: eb 0c                         jmp     0x353 <_JIT_ENTRY+0x353>
// 347: 49 ff c5                      incq    %r13
// 34a: 4d 39 ee                      cmpq    %r13, %r14
// 34d: 0f 84 1f ff ff ff             je      0x272 <_JIT_ENTRY+0x272>
// 353: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 358: 4a 8b 2c e8                   movq    (%rax,%r13,8), %rbp
// 35c: 48 8b 45 00                   movq    (%rbp), %rax
// 360: 48 85 c0                      testq   %rax, %rax
// 363: 7f 22                         jg      0x387 <_JIT_ENTRY+0x387>
// 365: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000367:  R_X86_64_64  .rodata.str1.1
// 36f: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 374: 48 89 ea                      movq    %rbp, %rdx
// 377: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000379:  R_X86_64_64  _Py_NegativeRefcount
// 381: ff d0                         callq   *%rax
// 383: 48 8b 45 00                   movq    (%rbp), %rax
// 387: 85 c0                         testl   %eax, %eax
// 389: 78 bc                         js      0x347 <_JIT_ENTRY+0x347>
// 38b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 395: ff d0                         callq   *%rax
// 397: 48 ff 4d 00                   decq    (%rbp)
// 39b: 75 aa                         jne     0x347 <_JIT_ENTRY+0x347>
// 39d: 48 89 ef                      movq    %rbp, %rdi
// 3a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a2:  R_X86_64_64  _Py_Dealloc
// 3aa: ff d0                         callq   *%rax
// 3ac: eb 99                         jmp     0x347 <_JIT_ENTRY+0x347>
// 3ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b0:  R_X86_64_64  _JIT_CONTINUE
// 3b8: 48 89 df                      movq    %rbx, %rdi
// 3bb: 4c 89 f6                      movq    %r14, %rsi
// 3be: 4c 89 fa                      movq    %r15, %rdx
// 3c1: 48 83 c4 28                   addq    $0x28, %rsp
// 3c5: 5b                            popq    %rbx
// 3c6: 41 5c                         popq    %r12
// 3c8: 41 5d                         popq    %r13
// 3ca: 41 5e                         popq    %r14
// 3cc: 41 5f                         popq    %r15
// 3ce: 5d                            popq    %rbp
// 3cf: ff e0                         jmpq    *%rax
// 3d1: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[978] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x71, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xcf, 0xf0, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x44, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x44, 0x0f, 0x44, 0xee, 0x4f, 0x8b, 0x64, 0xd7, 0xf0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x0f, 0x85, 0x31, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x1e, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x85, 0x08, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x42, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xeb, 0x07, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x2b, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x45, 0x31, 0xed, 0xeb, 0x0c, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xee, 0x0f, 0x84, 0x1f, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4a, 0x8b, 0x2c, 0xe8, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xaa, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 28                   addq    $0x28, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 73: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 77: 48 8b 03                      movq    (%rbx), %rax
// 7a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000080:  R_X86_64_64  _JIT_OPARG
// 88: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8e: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _PySuper_Lookup
// 9d: 48 89 ef                      movq    %rbp, %rdi
// a0: 4c 89 e6                      movq    %r12, %rsi
// a3: 31 c9                         xorl    %ecx, %ecx
// a5: ff d0                         callq   *%rax
// a7: 49 89 c5                      movq    %rax, %r13
// aa: 49 8b 06                      movq    (%r14), %rax
// ad: 48 85 c0                      testq   %rax, %rax
// b0: 7f 21                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b4:  R_X86_64_64  .rodata.str1.1
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _Py_NegativeRefcount
// c6: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: ff d0                         callq   *%rax
// d0: 49 8b 06                      movq    (%r14), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 27                         js      0xfe <_JIT_ENTRY+0xfe>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0e                      decq    (%r14)
// e6: 75 16                         jne     0xfe <_JIT_ENTRY+0xfe>
// e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ea:  R_X86_64_64  PySuper_Type
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: ff d0                         callq   *%rax
// fe: 48 8b 45 00                   movq    (%rbp), %rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 7f 22                         jg      0x129 <_JIT_ENTRY+0x129>
// 107: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000109:  R_X86_64_64  .rodata.str1.1
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_NegativeRefcount
// 11b: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 120: 48 89 ea                      movq    %rbp, %rdx
// 123: ff d0                         callq   *%rax
// 125: 48 8b 45 00                   movq    (%rbp), %rax
// 129: 85 c0                         testl   %eax, %eax
// 12b: 78 21                         js      0x14e <_JIT_ENTRY+0x14e>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 137: ff d0                         callq   *%rax
// 139: 48 ff 4d 00                   decq    (%rbp)
// 13d: 75 0f                         jne     0x14e <_JIT_ENTRY+0x14e>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_Dealloc
// 149: 48 89 ef                      movq    %rbp, %rdi
// 14c: ff d0                         callq   *%rax
// 14e: 49 8b 04 24                   movq    (%r12), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 22                         jg      0x179 <_JIT_ENTRY+0x179>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 170: 4c 89 e2                      movq    %r12, %rdx
// 173: ff d0                         callq   *%rax
// 175: 49 8b 04 24                   movq    (%r12), %rax
// 179: 85 c0                         testl   %eax, %eax
// 17b: 78 21                         js      0x19e <_JIT_ENTRY+0x19e>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 187: ff d0                         callq   *%rax
// 189: 49 ff 0c 24                   decq    (%r12)
// 18d: 75 0f                         jne     0x19e <_JIT_ENTRY+0x19e>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 4c 89 e7                      movq    %r12, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 4d 85 ed                      testq   %r13, %r13
// 1a1: 0f 84 70 01 00 00             je      0x317 <_JIT_ENTRY+0x317>
// 1a7: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1ab: 4d 89 6f e8                   movq    %r13, -0x18(%r15)
// 1af: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 f2                      movzwl  %dx, %esi
// 1bc: 89 f1                         movl    %esi, %ecx
// 1be: f7 d1                         notl    %ecx
// 1c0: 4c 63 c9                      movslq  %ecx, %r9
// 1c3: 4b 8b 4c cf f0                movq    -0x10(%r15,%r9,8), %rcx
// 1c8: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1cd: 29 f7                         subl    %esi, %edi
// 1cf: 4c 63 d7                      movslq  %edi, %r10
// 1d2: 0f b7 d2                      movzwl  %dx, %edx
// 1d5: 48 89 d7                      movq    %rdx, %rdi
// 1d8: 48 f7 df                      negq    %rdi
// 1db: 8d 6e 01                      leal    0x1(%rsi), %ebp
// 1de: 48 85 c9                      testq   %rcx, %rcx
// 1e1: 48 f7 d2                      notq    %rdx
// 1e4: 48 0f 44 d7                   cmoveq  %rdi, %rdx
// 1e8: 0f 44 ee                      cmovel  %esi, %ebp
// 1eb: 4f 8b 64 d7 f0                movq    -0x10(%r15,%r10,8), %r12
// 1f0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001f2:  R_X86_64_64  PyMethodDescr_Type
// 1fa: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 1ff: 0f 85 33 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 205: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 20a: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 212: 0f 85 20 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 218: 48 8d 34 d0                   leaq    (%rax,%rdx,8), %rsi
// 21c: 48 8b 3e                      movq    (%rsi), %rdi
// 21f: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 223: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 228: 0f 85 0a fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 22e: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 233: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 238: 48 85 c9                      testq   %rcx, %rcx
// 23b: 41 0f 94 c6                   sete    %r14b
// 23f: 8d 45 ff                      leal    -0x1(%rbp), %eax
// 242: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 247: 48 83 c6 08                   addq    $0x8, %rsi
// 24b: 48 63 d0                      movslq  %eax, %rdx
// 24e: 31 c9                         xorl    %ecx, %ecx
// 250: 41 ff 50 08                   callq   *0x8(%r8)
// 254: 48 89 04 24                   movq    %rax, (%rsp)
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_OPARG
// 262: 66 85 c0                      testw   %ax, %ax
// 265: 0f 94 c0                      sete    %al
// 268: 41 84 c6                      testb   %al, %r14b
// 26b: 0f 84 c2 00 00 00             je      0x333 <_JIT_ENTRY+0x333>
// 271: 49 8b 04 24                   movq    (%r12), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 27d: 7f 22                         jg      0x2a1 <_JIT_ENTRY+0x2a1>
// 27f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000281:  R_X86_64_64  .rodata.str1.1
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_NegativeRefcount
// 293: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 298: 4c 89 e2                      movq    %r12, %rdx
// 29b: ff d0                         callq   *%rax
// 29d: 49 8b 04 24                   movq    (%r12), %rax
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 78 21                         js      0x2c6 <_JIT_ENTRY+0x2c6>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2af: ff d0                         callq   *%rax
// 2b1: 49 ff 0c 24                   decq    (%r12)
// 2b5: 75 0f                         jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_Dealloc
// 2c1: 4c 89 e7                      movq    %r12, %rdi
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2cb: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 2cf: 48 83 c0 f0                   addq    $-0x10, %rax
// 2d3: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2d7: 48 85 c9                      testq   %rcx, %rcx
// 2da: 74 42                         je      0x31e <_JIT_ENTRY+0x31e>
// 2dc: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2e0: 49 83 c6 f0                   addq    $-0x10, %r14
// 2e4: 48 89 08                      movq    %rcx, (%rax)
// 2e7: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2ec: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2f0: 48 8b 00                      movq    (%rax), %rax
// 2f3: 84 c0                         testb   %al, %al
// 2f5: 0f 84 b1 00 00 00             je      0x3ac <_JIT_ENTRY+0x3ac>
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_HandlePending
// 305: 4c 89 ff                      movq    %r15, %rdi
// 308: ff d0                         callq   *%rax
// 30a: 85 c0                         testl   %eax, %eax
// 30c: 0f 84 9a 00 00 00             je      0x3ac <_JIT_ENTRY+0x3ac>
// 312: 4c 89 f0                      movq    %r14, %rax
// 315: eb 07                         jmp     0x31e <_JIT_ENTRY+0x31e>
// 317: 49 83 c7 e8                   addq    $-0x18, %r15
// 31b: 4c 89 f8                      movq    %r15, %rax
// 31e: 48 29 d8                      subq    %rbx, %rax
// 321: 48 83 c0 b8                   addq    $-0x48, %rax
// 325: 48 c1 e8 03                   shrq    $0x3, %rax
// 329: 89 43 40                      movl    %eax, 0x40(%rbx)
// 32c: 31 c0                         xorl    %eax, %eax
// 32e: e9 2c fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 333: 83 fd 02                      cmpl    $0x2, %ebp
// 336: 41 be 01 00 00 00             movl    $0x1, %r14d
// 33c: 44 0f 43 f5                   cmovael %ebp, %r14d
// 340: 45 31 ed                      xorl    %r13d, %r13d
// 343: eb 0c                         jmp     0x351 <_JIT_ENTRY+0x351>
// 345: 49 ff c5                      incq    %r13
// 348: 4d 39 ee                      cmpq    %r13, %r14
// 34b: 0f 84 20 ff ff ff             je      0x271 <_JIT_ENTRY+0x271>
// 351: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 356: 4a 8b 2c e8                   movq    (%rax,%r13,8), %rbp
// 35a: 48 8b 45 00                   movq    (%rbp), %rax
// 35e: 48 85 c0                      testq   %rax, %rax
// 361: 7f 22                         jg      0x385 <_JIT_ENTRY+0x385>
// 363: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000365:  R_X86_64_64  .rodata.str1.1
// 36d: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 372: 48 89 ea                      movq    %rbp, %rdx
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _Py_NegativeRefcount
// 37f: ff d0                         callq   *%rax
// 381: 48 8b 45 00                   movq    (%rbp), %rax
// 385: 85 c0                         testl   %eax, %eax
// 387: 78 bc                         js      0x345 <_JIT_ENTRY+0x345>
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 393: ff d0                         callq   *%rax
// 395: 48 ff 4d 00                   decq    (%rbp)
// 399: 75 aa                         jne     0x345 <_JIT_ENTRY+0x345>
// 39b: 48 89 ef                      movq    %rbp, %rdi
// 39e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a0:  R_X86_64_64  _Py_Dealloc
// 3a8: ff d0                         callq   *%rax
// 3aa: eb 99                         jmp     0x345 <_JIT_ENTRY+0x345>
// 3ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ae:  R_X86_64_64  _JIT_CONTINUE
// 3b6: 48 89 df                      movq    %rbx, %rdi
// 3b9: 4c 89 f6                      movq    %r14, %rsi
// 3bc: 4c 89 fa                      movq    %r15, %rdx
// 3bf: 48 83 c4 28                   addq    $0x28, %rsp
// 3c3: 5b                            popq    %rbx
// 3c4: 41 5c                         popq    %r12
// 3c6: 41 5d                         popq    %r13
// 3c8: 41 5e                         popq    %r14
// 3ca: 41 5f                         popq    %r15
// 3cc: 5d                            popq    %rbp
// 3cd: ff e0                         jmpq    *%rax
// 3cf: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[976] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x70, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xc9, 0x4b, 0x8b, 0x4c, 0xcf, 0xf0, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xf7, 0x4c, 0x63, 0xd7, 0x0f, 0xb7, 0xd2, 0x48, 0x89, 0xd7, 0x48, 0xf7, 0xdf, 0x8d, 0x6e, 0x01, 0x48, 0x85, 0xc9, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd7, 0x0f, 0x44, 0xee, 0x4f, 0x8b, 0x64, 0xd7, 0xf0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x0f, 0x85, 0x33, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x20, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x34, 0xd0, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x85, 0x0a, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x41, 0x0f, 0x94, 0xc6, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x42, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xeb, 0x07, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x2c, 0xfd, 0xff, 0xff, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf5, 0x45, 0x31, 0xed, 0xeb, 0x0c, 0x49, 0xff, 0xc5, 0x4d, 0x39, 0xee, 0x0f, 0x84, 0x20, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4a, 0x8b, 0x2c, 0xe8, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xaa, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 0f 85 a2 02 00 00             jne     0x2ca <_JIT_ENTRY+0x2ca>
// 28: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 8d 02 00 00             je      0x2ca <_JIT_ENTRY+0x2ca>
// 3d: 48 89 14 24                   movq    %rdx, (%rsp)
// 41: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 45: 48 8b 03                      movq    (%rbx), %rax
// 48: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 61: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000063:  R_X86_64_64  _PySuper_Lookup
// 6b: 48 89 ef                      movq    %rbp, %rdi
// 6e: 4c 89 e6                      movq    %r12, %rsi
// 71: 31 c9                         xorl    %ecx, %ecx
// 73: ff d0                         callq   *%rax
// 75: 49 89 c5                      movq    %rax, %r13
// 78: 49 8b 07                      movq    (%r15), %rax
// 7b: 48 85 c0                      testq   %rax, %rax
// 7e: 7f 21                         jg      0xa1 <_JIT_ENTRY+0xa1>
// 80: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000082:  R_X86_64_64  .rodata.str1.1
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_NegativeRefcount
// 94: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 99: 4c 89 fa                      movq    %r15, %rdx
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 07                      movq    (%r15), %rax
// a1: 85 c0                         testl   %eax, %eax
// a3: 78 27                         js      0xcc <_JIT_ENTRY+0xcc>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// af: ff d0                         callq   *%rax
// b1: 49 ff 0f                      decq    (%r15)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 4d 85 ed                      testq   %r13, %r13
// 16f: 0f 84 8c 01 00 00             je      0x301 <_JIT_ENTRY+0x301>
// 175: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _JIT_OPARG
// 183: 0f b7 c8                      movzwl  %ax, %ecx
// 186: 89 ca                         movl    %ecx, %edx
// 188: f7 d2                         notl    %edx
// 18a: 4c 63 ea                      movslq  %edx, %r13
// 18d: 0f b7 c0                      movzwl  %ax, %eax
// 190: 48 89 c2                      movq    %rax, %rdx
// 193: 48 f7 da                      negq    %rdx
// 196: 31 f6                         xorl    %esi, %esi
// 198: 66 85 c0                      testw   %ax, %ax
// 19b: 40 0f 94 c6                   sete    %sil
// 19f: 31 ff                         xorl    %edi, %edi
// 1a1: 66 83 f8 01                   cmpw    $0x1, %ax
// 1a5: 40 0f 94 c7                   sete    %dil
// 1a9: 4b 83 7c ee f0 00             cmpq    $0x0, -0x10(%r14,%r13,8)
// 1af: 48 f7 d0                      notq    %rax
// 1b2: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1b6: 49 8d 6e f0                   leaq    -0x10(%r14), %rbp
// 1ba: 0f 44 f7                      cmovel  %edi, %esi
// 1bd: 40 80 fe 01                   cmpb    $0x1, %sil
// 1c1: 0f 85 00 01 00 00             jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 1c7: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1cc: 29 ca                         subl    %ecx, %edx
// 1ce: 4c 63 e2                      movslq  %edx, %r12
// 1d1: 4f 8b 7c e6 f0                movq    -0x10(%r14,%r12,8), %r15
// 1d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d8:  R_X86_64_64  PyMethodDescr_Type
// 1e0: 49 39 4f 08                   cmpq    %rcx, 0x8(%r15)
// 1e4: 0f 85 dd 00 00 00             jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 1ea: 48 8b 7c c5 00                movq    (%rbp,%rax,8), %rdi
// 1ef: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 1f3: 49 3b 47 10                   cmpq    0x10(%r15), %rax
// 1f7: 0f 85 ca 00 00 00             jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 1fd: 49 8b 47 28                   movq    0x28(%r15), %rax
// 201: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 205: 0f 85 bc 00 00 00             jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 20b: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 20f: 48 8b 14 24                   movq    (%rsp), %rdx
// 213: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 216: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 219: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 0f 8e f6 00 00 00             jle     0x31a <_JIT_ENTRY+0x31a>
// 224: 4b 8d 2c e6                   leaq    (%r14,%r12,8), %rbp
// 228: 48 83 c5 f0                   addq    $-0x10, %rbp
// 22c: 49 89 fc                      movq    %rdi, %r12
// 22f: 31 f6                         xorl    %esi, %esi
// 231: 41 ff d0                      callq   *%r8
// 234: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 239: 48 8b 04 24                   movq    (%rsp), %rax
// 23d: ff 40 2c                      incl    0x2c(%rax)
// 240: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 245: 4c 89 e6                      movq    %r12, %rsi
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  .text+0x360
// 252: ff d0                         callq   *%rax
// 254: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 259: 4c 89 fe                      movq    %r15, %rsi
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  .text+0x360
// 266: ff d0                         callq   *%rax
// 268: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 0f 84 92 00 00 00             je      0x308 <_JIT_ENTRY+0x308>
// 276: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 27a: 49 83 c6 f0                   addq    $-0x10, %r14
// 27e: 48 89 45 00                   movq    %rax, (%rbp)
// 282: 4c 8b 3c 24                   movq    (%rsp), %r15
// 286: 49 8b 47 10                   movq    0x10(%r15), %rax
// 28a: 48 8b 00                      movq    (%rax), %rax
// 28d: 84 c0                         testb   %al, %al
// 28f: 74 13                         je      0x2a4 <_JIT_ENTRY+0x2a4>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_HandlePending
// 29b: 4c 89 ff                      movq    %r15, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 85 c0                         testl   %eax, %eax
// 2a2: 75 61                         jne     0x305 <_JIT_ENTRY+0x305>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 48 89 df                      movq    %rbx, %rdi
// 2b1: 4c 89 f6                      movq    %r14, %rsi
// 2b4: 4c 89 fa                      movq    %r15, %rdx
// 2b7: 48 83 c4 18                   addq    $0x18, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 49 89 ee                      movq    %rbp, %r14
// 2ca: 49 29 de                      subq    %rbx, %r14
// 2cd: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d1: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2d9: 48 8b 03                      movq    (%rbx), %rax
// 2dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002de:  R_X86_64_64  _JIT_TARGET
// 2e6: 89 c9                         movl    %ecx, %ecx
// 2e8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ec: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2f2: 48 83 c4 18                   addq    $0x18, %rsp
// 2f6: 5b                            popq    %rbx
// 2f7: 41 5c                         popq    %r12
// 2f9: 41 5d                         popq    %r13
// 2fb: 41 5e                         popq    %r14
// 2fd: 41 5f                         popq    %r15
// 2ff: 5d                            popq    %rbp
// 300: c3                            retq
// 301: 49 83 c6 e8                   addq    $-0x18, %r14
// 305: 4c 89 f5                      movq    %r14, %rbp
// 308: 48 29 dd                      subq    %rbx, %rbp
// 30b: 48 83 c5 b8                   addq    $-0x48, %rbp
// 30f: 48 c1 ed 03                   shrq    $0x3, %rbp
// 313: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 316: 31 c0                         xorl    %eax, %eax
// 318: eb d8                         jmp     0x2f2 <_JIT_ENTRY+0x2f2>
// 31a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000031c:  R_X86_64_64  .rodata.str1.1+0x39
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_CheckRecursiveCall
// 32e: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 333: 48 8b 3c 24                   movq    (%rsp), %rdi
// 337: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 33c: ff d0                         callq   *%rax
// 33e: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 343: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 348: 85 c0                         testl   %eax, %eax
// 34a: 75 bc                         jne     0x308 <_JIT_ENTRY+0x308>
// 34c: e9 d3 fe ff ff                jmp     0x224 <_JIT_ENTRY+0x224>
// 351: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 
// 0000000000000360 <Py_DECREF>:
// 360: 53                            pushq   %rbx
// 361: 48 89 f3                      movq    %rsi, %rbx
// 364: 48 8b 06                      movq    (%rsi), %rax
// 367: 48 85 c0                      testq   %rax, %rax
// 36a: 7e 06                         jle     0x372 <Py_DECREF+0x12>
// 36c: 85 c0                         testl   %eax, %eax
// 36e: 79 24                         jns     0x394 <Py_DECREF+0x34>
// 370: eb 33                         jmp     0x3a5 <Py_DECREF+0x45>
// 372: 89 fe                         movl    %edi, %esi
// 374: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000376:  R_X86_64_64  .rodata.str1.1
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_NegativeRefcount
// 388: 48 89 da                      movq    %rbx, %rdx
// 38b: ff d0                         callq   *%rax
// 38d: 48 8b 03                      movq    (%rbx), %rax
// 390: 85 c0                         testl   %eax, %eax
// 392: 78 11                         js      0x3a5 <Py_DECREF+0x45>
// 394: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000396:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39e: ff d0                         callq   *%rax
// 3a0: 48 ff 0b                      decq    (%rbx)
// 3a3: 74 02                         je      0x3a7 <Py_DECREF+0x47>
// 3a5: 5b                            popq    %rbx
// 3a6: c3                            retq
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_Dealloc
// 3b1: 48 89 df                      movq    %rbx, %rdi
// 3b4: 5b                            popq    %rbx
// 3b5: ff e0                         jmpq    *%rax
// 3b7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[952] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x0f, 0x85, 0xa2, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x7c, 0xee, 0xf0, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x49, 0x8d, 0x6e, 0xf0, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xe2, 0x4f, 0x8b, 0x7c, 0xe6, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4f, 0x08, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x47, 0x10, 0x0f, 0x85, 0xca, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0xbc, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0xf6, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xe6, 0x48, 0x83, 0xc5, 0xf0, 0x49, 0x89, 0xfc, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0xff, 0x40, 0x2c, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x45, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x61, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x4c, 0x89, 0xf5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0xd8, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x75, 0xbc, 0xe9, 0xd3, 0xfe, 0xff, 0xff, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x360},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x360},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_O.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 0f 85 da 01 00 00             jne     0x202 <_JIT_ENTRY+0x202>
// 28: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 2c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 37: 0f 84 c5 01 00 00             je      0x202 <_JIT_ENTRY+0x202>
// 3d: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 42: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5d: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _PySuper_Lookup
// 6c: 48 89 ef                      movq    %rbp, %rdi
// 6f: 4c 89 e6                      movq    %r12, %rsi
// 72: 31 c9                         xorl    %ecx, %ecx
// 74: ff d0                         callq   *%rax
// 76: 49 89 c5                      movq    %rax, %r13
// 79: 49 8b 07                      movq    (%r15), %rax
// 7c: 48 85 c0                      testq   %rax, %rax
// 7f: 7f 21                         jg      0xa2 <_JIT_ENTRY+0xa2>
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9a: 4c 89 fa                      movq    %r15, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 07                      movq    (%r15), %rax
// a2: 85 c0                         testl   %eax, %eax
// a4: 78 27                         js      0xcd <_JIT_ENTRY+0xcd>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b0: ff d0                         callq   *%rax
// b2: 49 ff 0f                      decq    (%r15)
// b5: 75 16                         jne     0xcd <_JIT_ENTRY+0xcd>
// b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b9:  R_X86_64_64  PySuper_Type
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _Py_Dealloc
// cb: ff d0                         callq   *%rax
// cd: 48 8b 45 00                   movq    (%rbp), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7f 22                         jg      0xf8 <_JIT_ENTRY+0xf8>
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ef: 48 89 ea                      movq    %rbp, %rdx
// f2: ff d0                         callq   *%rax
// f4: 48 8b 45 00                   movq    (%rbp), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 48 ff 4d 00                   decq    (%rbp)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 48 89 ef                      movq    %rbp, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 7f 22                         jg      0x148 <_JIT_ENTRY+0x148>
// 126: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000128:  R_X86_64_64  .rodata.str1.1
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_NegativeRefcount
// 13a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13f: 4c 89 e2                      movq    %r12, %rdx
// 142: ff d0                         callq   *%rax
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 85 c0                         testl   %eax, %eax
// 14a: 78 21                         js      0x16d <_JIT_ENTRY+0x16d>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 156: ff d0                         callq   *%rax
// 158: 49 ff 0c 24                   decq    (%r12)
// 15c: 75 0f                         jne     0x16d <_JIT_ENTRY+0x16d>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 4d 85 ed                      testq   %r13, %r13
// 170: 0f 84 c3 00 00 00             je      0x239 <_JIT_ENTRY+0x239>
// 176: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _JIT_OPARG
// 184: 0f b7 c8                      movzwl  %ax, %ecx
// 187: 89 ca                         movl    %ecx, %edx
// 189: f7 d2                         notl    %edx
// 18b: 48 63 ea                      movslq  %edx, %rbp
// 18e: 0f b7 c0                      movzwl  %ax, %eax
// 191: 48 89 c2                      movq    %rax, %rdx
// 194: 48 f7 da                      negq    %rdx
// 197: 31 f6                         xorl    %esi, %esi
// 199: 66 83 f8 01                   cmpw    $0x1, %ax
// 19d: 40 0f 94 c6                   sete    %sil
// 1a1: 31 ff                         xorl    %edi, %edi
// 1a3: 66 83 f8 02                   cmpw    $0x2, %ax
// 1a7: 40 0f 94 c7                   sete    %dil
// 1ab: 49 83 7c ee f0 00             cmpq    $0x0, -0x10(%r14,%rbp,8)
// 1b1: 48 f7 d0                      notq    %rax
// 1b4: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1b8: 4d 8d 7e f0                   leaq    -0x10(%r14), %r15
// 1bc: 0f 44 f7                      cmovel  %edi, %esi
// 1bf: 40 80 fe 01                   cmpb    $0x1, %sil
// 1c3: 75 3a                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1c5: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1ca: 29 ca                         subl    %ecx, %edx
// 1cc: 4c 63 ea                      movslq  %edx, %r13
// 1cf: 4f 8b 64 ee f0                movq    -0x10(%r14,%r13,8), %r12
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  PyMethodDescr_Type
// 1de: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1e3: 75 1a                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1e5: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 1ea: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 1ee: 75 0f                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1f0: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1f4: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 1f8: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 1fd: 74 54                         je      0x253 <_JIT_ENTRY+0x253>
// 1ff: 4d 89 fe                      movq    %r15, %r14
// 202: 49 29 de                      subq    %rbx, %r14
// 205: 49 83 c6 b8                   addq    $-0x48, %r14
// 209: 49 c1 ee 03                   shrq    $0x3, %r14
// 20d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 211: 48 8b 03                      movq    (%rbx), %rax
// 214: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000216:  R_X86_64_64  _JIT_TARGET
// 21e: 89 c9                         movl    %ecx, %ecx
// 220: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 224: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22a: 48 83 c4 28                   addq    $0x28, %rsp
// 22e: 5b                            popq    %rbx
// 22f: 41 5c                         popq    %r12
// 231: 41 5d                         popq    %r13
// 233: 41 5e                         popq    %r14
// 235: 41 5f                         popq    %r15
// 237: 5d                            popq    %rbp
// 238: c3                            retq
// 239: 49 83 c6 e8                   addq    $-0x18, %r14
// 23d: 4d 89 f7                      movq    %r14, %r15
// 240: 49 29 df                      subq    %rbx, %r15
// 243: 49 83 c7 b8                   addq    $-0x48, %r15
// 247: 49 c1 ef 03                   shrq    $0x3, %r15
// 24b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 24f: 31 c0                         xorl    %eax, %eax
// 251: eb d7                         jmp     0x22a <_JIT_ENTRY+0x22a>
// 253: 49 8b 74 c7 08                movq    0x8(%r15,%rax,8), %rsi
// 258: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 25c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 261: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 264: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 267: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 271: 0f 8e b4 00 00 00             jle     0x32b <_JIT_ENTRY+0x32b>
// 277: 4f 8d 3c ee                   leaq    (%r14,%r13,8), %r15
// 27b: 49 83 c7 f0                   addq    $-0x10, %r15
// 27f: 49 89 fd                      movq    %rdi, %r13
// 282: 41 ff d0                      callq   *%r8
// 285: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 28a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 28f: ff 40 2c                      incl    0x2c(%rax)
// 292: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 297: 4c 89 ee                      movq    %r13, %rsi
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  .text+0x370
// 2a4: ff d0                         callq   *%rax
// 2a6: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 2ab: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 2b0: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000002b2:  R_X86_64_64  .text+0x370
// 2ba: 41 ff d5                      callq   *%r13
// 2bd: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 2c2: 4c 89 e6                      movq    %r12, %rsi
// 2c5: 41 ff d5                      callq   *%r13
// 2c8: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2cd: 48 85 c0                      testq   %rax, %rax
// 2d0: 0f 84 6a ff ff ff             je      0x240 <_JIT_ENTRY+0x240>
// 2d6: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 2da: 49 83 c6 f0                   addq    $-0x10, %r14
// 2de: 49 89 07                      movq    %rax, (%r15)
// 2e1: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2e6: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2ea: 48 8b 00                      movq    (%rax), %rax
// 2ed: 84 c0                         testb   %al, %al
// 2ef: 74 17                         je      0x308 <_JIT_ENTRY+0x308>
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_HandlePending
// 2fb: 4c 89 ff                      movq    %r15, %rdi
// 2fe: ff d0                         callq   *%rax
// 300: 85 c0                         testl   %eax, %eax
// 302: 0f 85 35 ff ff ff             jne     0x23d <_JIT_ENTRY+0x23d>
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _JIT_CONTINUE
// 312: 48 89 df                      movq    %rbx, %rdi
// 315: 4c 89 f6                      movq    %r14, %rsi
// 318: 4c 89 fa                      movq    %r15, %rdx
// 31b: 48 83 c4 28                   addq    $0x28, %rsp
// 31f: 5b                            popq    %rbx
// 320: 41 5c                         popq    %r12
// 322: 41 5d                         popq    %r13
// 324: 41 5e                         popq    %r14
// 326: 41 5f                         popq    %r15
// 328: 5d                            popq    %rbp
// 329: ff e0                         jmpq    *%rax
// 32b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000032d:  R_X86_64_64  .rodata.str1.1+0x39
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_CheckRecursiveCall
// 33f: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 344: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 349: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// 34e: ff d0                         callq   *%rax
// 350: 4c 8b 44 24 20                movq    0x20(%rsp), %r8
// 355: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 35a: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 35f: 85 c0                         testl   %eax, %eax
// 361: 0f 85 d9 fe ff ff             jne     0x240 <_JIT_ENTRY+0x240>
// 367: e9 0b ff ff ff                jmp     0x277 <_JIT_ENTRY+0x277>
// 36c: 0f 1f 40 00                   nopl    (%rax)
// 
// 0000000000000370 <Py_DECREF>:
// 370: 53                            pushq   %rbx
// 371: 48 89 f3                      movq    %rsi, %rbx
// 374: 48 8b 06                      movq    (%rsi), %rax
// 377: 48 85 c0                      testq   %rax, %rax
// 37a: 7e 06                         jle     0x382 <Py_DECREF+0x12>
// 37c: 85 c0                         testl   %eax, %eax
// 37e: 79 24                         jns     0x3a4 <Py_DECREF+0x34>
// 380: eb 33                         jmp     0x3b5 <Py_DECREF+0x45>
// 382: 89 fe                         movl    %edi, %esi
// 384: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000386:  R_X86_64_64  .rodata.str1.1
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_NegativeRefcount
// 398: 48 89 da                      movq    %rbx, %rdx
// 39b: ff d0                         callq   *%rax
// 39d: 48 8b 03                      movq    (%rbx), %rax
// 3a0: 85 c0                         testl   %eax, %eax
// 3a2: 78 11                         js      0x3b5 <Py_DECREF+0x45>
// 3a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ae: ff d0                         callq   *%rax
// 3b0: 48 ff 0b                      decq    (%rbx)
// 3b3: 74 02                         je      0x3b7 <Py_DECREF+0x47>
// 3b5: 5b                            popq    %rbx
// 3b6: c3                            retq
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_Dealloc
// 3c1: 48 89 df                      movq    %rbx, %rdi
// 3c4: 5b                            popq    %rbx
// 3c5: ff e0                         jmpq    *%rax
// 3c7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_O_code_body[968] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x0f, 0x85, 0xda, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc5, 0x01, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x7c, 0xee, 0xf0, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x4d, 0x8d, 0x7e, 0xf0, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x3a, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4f, 0x8b, 0x64, 0xee, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1a, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x0f, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x54, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0xd7, 0x49, 0x8b, 0x74, 0xc7, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x74, 0x24, 0x18, 0x0f, 0x8e, 0xb4, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x3c, 0xee, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x89, 0xfd, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xff, 0x40, 0x2c, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6a, 0xff, 0xff, 0xff, 0x4d, 0x8d, 0x34, 0xee, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x07, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x35, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x20, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x85, 0xc0, 0x0f, 0x85, 0xd9, 0xfe, 0xff, 0xff, 0xe9, 0x0b, 0xff, 0xff, 0xff, 0x0f, 0x1f, 0x40, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_O_code_holes[30] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x370},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x370},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_STR_1
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_STR_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 18                   addq    $0x18, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 73: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 77: 48 8b 03                      movq    (%rbx), %rax
// 7a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000080:  R_X86_64_64  _JIT_OPARG
// 88: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8e: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _PySuper_Lookup
// 9d: 48 89 ef                      movq    %rbp, %rdi
// a0: 4c 89 e6                      movq    %r12, %rsi
// a3: 31 c9                         xorl    %ecx, %ecx
// a5: ff d0                         callq   *%rax
// a7: 49 89 c5                      movq    %rax, %r13
// aa: 49 8b 06                      movq    (%r14), %rax
// ad: 48 85 c0                      testq   %rax, %rax
// b0: 7f 21                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b4:  R_X86_64_64  .rodata.str1.1
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _Py_NegativeRefcount
// c6: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: ff d0                         callq   *%rax
// d0: 49 8b 06                      movq    (%r14), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 27                         js      0xfe <_JIT_ENTRY+0xfe>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0e                      decq    (%r14)
// e6: 75 16                         jne     0xfe <_JIT_ENTRY+0xfe>
// e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ea:  R_X86_64_64  PySuper_Type
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: ff d0                         callq   *%rax
// fe: 48 8b 45 00                   movq    (%rbp), %rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 7f 22                         jg      0x129 <_JIT_ENTRY+0x129>
// 107: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000109:  R_X86_64_64  .rodata.str1.1
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_NegativeRefcount
// 11b: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 120: 48 89 ea                      movq    %rbp, %rdx
// 123: ff d0                         callq   *%rax
// 125: 48 8b 45 00                   movq    (%rbp), %rax
// 129: 85 c0                         testl   %eax, %eax
// 12b: 78 21                         js      0x14e <_JIT_ENTRY+0x14e>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 137: ff d0                         callq   *%rax
// 139: 48 ff 4d 00                   decq    (%rbp)
// 13d: 75 0f                         jne     0x14e <_JIT_ENTRY+0x14e>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_Dealloc
// 149: 48 89 ef                      movq    %rbp, %rdi
// 14c: ff d0                         callq   *%rax
// 14e: 49 8b 04 24                   movq    (%r12), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 22                         jg      0x179 <_JIT_ENTRY+0x179>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 170: 4c 89 e2                      movq    %r12, %rdx
// 173: ff d0                         callq   *%rax
// 175: 49 8b 04 24                   movq    (%r12), %rax
// 179: 85 c0                         testl   %eax, %eax
// 17b: 78 21                         js      0x19e <_JIT_ENTRY+0x19e>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 187: ff d0                         callq   *%rax
// 189: 49 ff 0c 24                   decq    (%r12)
// 18d: 75 0f                         jne     0x19e <_JIT_ENTRY+0x19e>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 4c 89 e7                      movq    %r12, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 4d 85 ed                      testq   %r13, %r13
// 1a1: 0f 84 5f 01 00 00             je      0x306 <_JIT_ENTRY+0x306>
// 1a7: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1ab: 4d 89 6f e8                   movq    %r13, -0x18(%r15)
// 1af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 c9                      movzwl  %cx, %ecx
// 1bc: 89 ca                         movl    %ecx, %edx
// 1be: f7 d2                         notl    %edx
// 1c0: 4c 63 ea                      movslq  %edx, %r13
// 1c3: 4b 83 7c ef f0 00             cmpq    $0x0, -0x10(%r15,%r13,8)
// 1c9: 0f 85 69 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1cf: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1d4: 29 ca                         subl    %ecx, %edx
// 1d6: 48 63 ca                      movslq  %edx, %rcx
// 1d9: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 1dd: 48 83 c5 f0                   addq    $-0x10, %rbp
// 1e1: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001e3:  R_X86_64_64  PyUnicode_Type
// 1eb: 4c 39 65 00                   cmpq    %r12, (%rbp)
// 1ef: 0f 85 43 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _JIT_OPARG
// 1ff: 0f b7 c0                      movzwl  %ax, %eax
// 202: 48 c1 e0 03                   shlq    $0x3, %rax
// 206: 4c 89 f9                      movq    %r15, %rcx
// 209: 48 29 c1                      subq    %rax, %rcx
// 20c: 4c 8b 71 f0                   movq    -0x10(%rcx), %r14
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  PyObject_Str
// 21a: 4c 89 f7                      movq    %r14, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 224: 49 8b 06                      movq    (%r14), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7f 21                         jg      0x24d <_JIT_ENTRY+0x24d>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 245: 4c 89 f2                      movq    %r14, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 06                      movq    (%r14), %rax
// 24d: 85 c0                         testl   %eax, %eax
// 24f: 78 20                         js      0x271 <_JIT_ENTRY+0x271>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25b: ff d0                         callq   *%rax
// 25d: 49 ff 0e                      decq    (%r14)
// 260: 75 0f                         jne     0x271 <_JIT_ENTRY+0x271>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_Dealloc
// 26c: 4c 89 f7                      movq    %r14, %rdi
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 04 24                   movq    (%r12), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 7f 22                         jg      0x29c <_JIT_ENTRY+0x29c>
// 27a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027c:  R_X86_64_64  .rodata.str1.1
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_NegativeRefcount
// 28e: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 293: 4c 89 e2                      movq    %r12, %rdx
// 296: ff d0                         callq   *%rax
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 78 28                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 ff 0c 24                   decq    (%r12)
// 2b0: 75 16                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b4:  R_X86_64_64  PyUnicode_Type
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_Dealloc
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2cd: 48 85 c0                      testq   %rax, %rax
// 2d0: 74 3b                         je      0x30d <_JIT_ENTRY+0x30d>
// 2d2: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 2d6: 49 83 c6 f0                   addq    $-0x10, %r14
// 2da: 48 89 45 00                   movq    %rax, (%rbp)
// 2de: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2e3: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2e7: 48 8b 00                      movq    (%rax), %rax
// 2ea: 84 c0                         testb   %al, %al
// 2ec: 74 34                         je      0x322 <_JIT_ENTRY+0x322>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_HandlePending
// 2f8: 4c 89 ff                      movq    %r15, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 85 c0                         testl   %eax, %eax
// 2ff: 74 21                         je      0x322 <_JIT_ENTRY+0x322>
// 301: 4c 89 f5                      movq    %r14, %rbp
// 304: eb 07                         jmp     0x30d <_JIT_ENTRY+0x30d>
// 306: 49 83 c7 e8                   addq    $-0x18, %r15
// 30a: 4c 89 fd                      movq    %r15, %rbp
// 30d: 48 29 dd                      subq    %rbx, %rbp
// 310: 48 83 c5 b8                   addq    $-0x48, %rbp
// 314: 48 c1 ed 03                   shrq    $0x3, %rbp
// 318: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 31b: 31 c0                         xorl    %eax, %eax
// 31d: e9 3d fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _JIT_CONTINUE
// 32c: 48 89 df                      movq    %rbx, %rdi
// 32f: 4c 89 f6                      movq    %r14, %rsi
// 332: 4c 89 fa                      movq    %r15, %rdx
// 335: 48 83 c4 18                   addq    $0x18, %rsp
// 339: 5b                            popq    %rbx
// 33a: 41 5c                         popq    %r12
// 33c: 41 5d                         popq    %r13
// 33e: 41 5e                         popq    %r14
// 340: 41 5f                         popq    %r15
// 342: 5d                            popq    %rbp
// 343: ff e0                         jmpq    *%rax
// 345: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_STR_1_code_body[838] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x4b, 0x83, 0x7c, 0xef, 0xf0, 0x00, 0x0f, 0x85, 0x69, 0xfe, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x83, 0xc5, 0xf0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x65, 0x00, 0x0f, 0x85, 0x43, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x71, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x3b, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x45, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x21, 0x4c, 0x89, 0xf5, 0xeb, 0x07, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xfd, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x3d, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_STR_1_code_holes[33] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_STR_1_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_TUPLE_1
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_TUPLE_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 18                   addq    $0x18, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 73: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 77: 48 8b 03                      movq    (%rbx), %rax
// 7a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000080:  R_X86_64_64  _JIT_OPARG
// 88: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8e: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _PySuper_Lookup
// 9d: 48 89 ef                      movq    %rbp, %rdi
// a0: 4c 89 e6                      movq    %r12, %rsi
// a3: 31 c9                         xorl    %ecx, %ecx
// a5: ff d0                         callq   *%rax
// a7: 49 89 c5                      movq    %rax, %r13
// aa: 49 8b 06                      movq    (%r14), %rax
// ad: 48 85 c0                      testq   %rax, %rax
// b0: 7f 21                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b4:  R_X86_64_64  .rodata.str1.1
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _Py_NegativeRefcount
// c6: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: ff d0                         callq   *%rax
// d0: 49 8b 06                      movq    (%r14), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 27                         js      0xfe <_JIT_ENTRY+0xfe>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0e                      decq    (%r14)
// e6: 75 16                         jne     0xfe <_JIT_ENTRY+0xfe>
// e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ea:  R_X86_64_64  PySuper_Type
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: ff d0                         callq   *%rax
// fe: 48 8b 45 00                   movq    (%rbp), %rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 7f 22                         jg      0x129 <_JIT_ENTRY+0x129>
// 107: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000109:  R_X86_64_64  .rodata.str1.1
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_NegativeRefcount
// 11b: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 120: 48 89 ea                      movq    %rbp, %rdx
// 123: ff d0                         callq   *%rax
// 125: 48 8b 45 00                   movq    (%rbp), %rax
// 129: 85 c0                         testl   %eax, %eax
// 12b: 78 21                         js      0x14e <_JIT_ENTRY+0x14e>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 137: ff d0                         callq   *%rax
// 139: 48 ff 4d 00                   decq    (%rbp)
// 13d: 75 0f                         jne     0x14e <_JIT_ENTRY+0x14e>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_Dealloc
// 149: 48 89 ef                      movq    %rbp, %rdi
// 14c: ff d0                         callq   *%rax
// 14e: 49 8b 04 24                   movq    (%r12), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 22                         jg      0x179 <_JIT_ENTRY+0x179>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 170: 4c 89 e2                      movq    %r12, %rdx
// 173: ff d0                         callq   *%rax
// 175: 49 8b 04 24                   movq    (%r12), %rax
// 179: 85 c0                         testl   %eax, %eax
// 17b: 78 21                         js      0x19e <_JIT_ENTRY+0x19e>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 187: ff d0                         callq   *%rax
// 189: 49 ff 0c 24                   decq    (%r12)
// 18d: 75 0f                         jne     0x19e <_JIT_ENTRY+0x19e>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 4c 89 e7                      movq    %r12, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 4d 85 ed                      testq   %r13, %r13
// 1a1: 0f 84 5f 01 00 00             je      0x306 <_JIT_ENTRY+0x306>
// 1a7: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1ab: 4d 89 6f e8                   movq    %r13, -0x18(%r15)
// 1af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 c9                      movzwl  %cx, %ecx
// 1bc: 89 ca                         movl    %ecx, %edx
// 1be: f7 d2                         notl    %edx
// 1c0: 4c 63 ea                      movslq  %edx, %r13
// 1c3: 4b 83 7c ef f0 00             cmpq    $0x0, -0x10(%r15,%r13,8)
// 1c9: 0f 85 69 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1cf: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1d4: 29 ca                         subl    %ecx, %edx
// 1d6: 48 63 ca                      movslq  %edx, %rcx
// 1d9: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 1dd: 48 83 c5 f0                   addq    $-0x10, %rbp
// 1e1: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001e3:  R_X86_64_64  PyTuple_Type
// 1eb: 4c 39 65 00                   cmpq    %r12, (%rbp)
// 1ef: 0f 85 43 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _JIT_OPARG
// 1ff: 0f b7 c0                      movzwl  %ax, %eax
// 202: 48 c1 e0 03                   shlq    $0x3, %rax
// 206: 4c 89 f9                      movq    %r15, %rcx
// 209: 48 29 c1                      subq    %rax, %rcx
// 20c: 4c 8b 71 f0                   movq    -0x10(%rcx), %r14
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  PySequence_Tuple
// 21a: 4c 89 f7                      movq    %r14, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 224: 49 8b 06                      movq    (%r14), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7f 21                         jg      0x24d <_JIT_ENTRY+0x24d>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 245: 4c 89 f2                      movq    %r14, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 06                      movq    (%r14), %rax
// 24d: 85 c0                         testl   %eax, %eax
// 24f: 78 20                         js      0x271 <_JIT_ENTRY+0x271>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25b: ff d0                         callq   *%rax
// 25d: 49 ff 0e                      decq    (%r14)
// 260: 75 0f                         jne     0x271 <_JIT_ENTRY+0x271>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_Dealloc
// 26c: 4c 89 f7                      movq    %r14, %rdi
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 04 24                   movq    (%r12), %rax
// 275: 48 85 c0                      testq   %rax, %rax
// 278: 7f 22                         jg      0x29c <_JIT_ENTRY+0x29c>
// 27a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027c:  R_X86_64_64  .rodata.str1.1
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_NegativeRefcount
// 28e: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 293: 4c 89 e2                      movq    %r12, %rdx
// 296: ff d0                         callq   *%rax
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 78 28                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 ff 0c 24                   decq    (%r12)
// 2b0: 75 16                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b4:  R_X86_64_64  PyTuple_Type
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_Dealloc
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2cd: 48 85 c0                      testq   %rax, %rax
// 2d0: 74 3b                         je      0x30d <_JIT_ENTRY+0x30d>
// 2d2: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 2d6: 49 83 c6 f0                   addq    $-0x10, %r14
// 2da: 48 89 45 00                   movq    %rax, (%rbp)
// 2de: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2e3: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2e7: 48 8b 00                      movq    (%rax), %rax
// 2ea: 84 c0                         testb   %al, %al
// 2ec: 74 34                         je      0x322 <_JIT_ENTRY+0x322>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_HandlePending
// 2f8: 4c 89 ff                      movq    %r15, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 85 c0                         testl   %eax, %eax
// 2ff: 74 21                         je      0x322 <_JIT_ENTRY+0x322>
// 301: 4c 89 f5                      movq    %r14, %rbp
// 304: eb 07                         jmp     0x30d <_JIT_ENTRY+0x30d>
// 306: 49 83 c7 e8                   addq    $-0x18, %r15
// 30a: 4c 89 fd                      movq    %r15, %rbp
// 30d: 48 29 dd                      subq    %rbx, %rbp
// 310: 48 83 c5 b8                   addq    $-0x48, %rbp
// 314: 48 c1 ed 03                   shrq    $0x3, %rbp
// 318: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 31b: 31 c0                         xorl    %eax, %eax
// 31d: e9 3d fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _JIT_CONTINUE
// 32c: 48 89 df                      movq    %rbx, %rdi
// 32f: 4c 89 f6                      movq    %r14, %rsi
// 332: 4c 89 fa                      movq    %r15, %rdx
// 335: 48 83 c4 18                   addq    $0x18, %rsp
// 339: 5b                            popq    %rbx
// 33a: 41 5c                         popq    %r12
// 33c: 41 5d                         popq    %r13
// 33e: 41 5e                         popq    %r14
// 340: 41 5f                         popq    %r15
// 342: 5d                            popq    %rbp
// 343: ff e0                         jmpq    *%rax
// 345: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_TUPLE_1_code_body[838] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x4b, 0x83, 0x7c, 0xef, 0xf0, 0x00, 0x0f, 0x85, 0x69, 0xfe, 0xff, 0xff, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x83, 0xc5, 0xf0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x65, 0x00, 0x0f, 0x85, 0x43, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x71, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x3b, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x45, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x21, 0x4c, 0x89, 0xf5, 0xeb, 0x07, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xfd, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x3d, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_TUPLE_1_code_holes[33] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_TUPLE_1_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CALL_TYPE_1
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CALL_TYPE_1.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 39                         jne     0x6b <_JIT_ENTRY+0x6b>
// 32: 4c 89 f0                      movq    %r14, %rax
// 35: 48 29 d8                      subq    %rbx, %rax
// 38: 48 83 c0 b8                   addq    $-0x48, %rax
// 3c: 48 c1 e8 03                   shrq    $0x3, %rax
// 40: 89 43 40                      movl    %eax, 0x40(%rbx)
// 43: 48 8b 03                      movq    (%rbx), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 56: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5c: 48 83 c4 08                   addq    $0x8, %rsp
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5d                         popq    %r13
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: 5d                            popq    %rbp
// 6a: c3                            retq
// 6b: 48 89 14 24                   movq    %rdx, (%rsp)
// 6f: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 e6                      movq    %r12, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 49 89 c5                      movq    %rax, %r13
// a6: 49 8b 07                      movq    (%r15), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f 21                         jg      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c7: 4c 89 fa                      movq    %r15, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 07                      movq    (%r15), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 27                         js      0xfa <_JIT_ENTRY+0xfa>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0f                      decq    (%r15)
// e2: 75 16                         jne     0xfa <_JIT_ENTRY+0xfa>
// e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e6:  R_X86_64_64  PySuper_Type
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: ff d0                         callq   *%rax
// fa: 48 8b 45 00                   movq    (%rbp), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f 22                         jg      0x125 <_JIT_ENTRY+0x125>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11c: 48 89 ea                      movq    %rbp, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 21                         js      0x14a <_JIT_ENTRY+0x14a>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 48 ff 4d 00                   decq    (%rbp)
// 139: 75 0f                         jne     0x14a <_JIT_ENTRY+0x14a>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: 48 89 ef                      movq    %rbp, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 04 24                   movq    (%r12), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7f 22                         jg      0x175 <_JIT_ENTRY+0x175>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16c: 4c 89 e2                      movq    %r12, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 49 8b 04 24                   movq    (%r12), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 78 21                         js      0x19a <_JIT_ENTRY+0x19a>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 183: ff d0                         callq   *%rax
// 185: 49 ff 0c 24                   decq    (%r12)
// 189: 75 0f                         jne     0x19a <_JIT_ENTRY+0x19a>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 4c 89 e7                      movq    %r12, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 4d 85 ed                      testq   %r13, %r13
// 19d: 0f 84 8a 00 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 1a3: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 1a7: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 1ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ad:  R_X86_64_64  _JIT_OPARG
// 1b5: f7 d1                         notl    %ecx
// 1b7: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1bd: 48 63 e9                      movslq  %ecx, %rbp
// 1c0: 49 83 7c ee f0 00             cmpq    $0x0, -0x10(%r14,%rbp,8)
// 1c6: 0f 85 69 fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  _JIT_OPARG
// 1d6: 0f b7 c9                      movzwl  %cx, %ecx
// 1d9: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1de: 29 ca                         subl    %ecx, %edx
// 1e0: 48 63 ca                      movslq  %edx, %rcx
// 1e3: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001e5:  R_X86_64_64  PyType_Type
// 1ed: 4d 39 64 ce f0                cmpq    %r12, -0x10(%r14,%rcx,8)
// 1f2: 0f 85 3d fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_OPARG
// 202: 0f b7 c0                      movzwl  %ax, %eax
// 205: 48 c1 e0 03                   shlq    $0x3, %rax
// 209: 4c 89 f1                      movq    %r14, %rcx
// 20c: 48 29 c1                      subq    %rax, %rcx
// 20f: 4c 8b 79 f0                   movq    -0x10(%rcx), %r15
// 213: 4d 8b 6f 08                   movq    0x8(%r15), %r13
// 217: 41 8b 45 00                   movl    (%r13), %eax
// 21b: ff c0                         incl    %eax
// 21d: 75 28                         jne     0x247 <_JIT_ENTRY+0x247>
// 21f: 49 8b 07                      movq    (%r15), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 7e 38                         jle     0x25f <_JIT_ENTRY+0x25f>
// 227: 85 c0                         testl   %eax, %eax
// 229: 79 59                         jns     0x284 <_JIT_ENTRY+0x284>
// 22b: eb 77                         jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 22d: 49 83 c6 e8                   addq    $-0x18, %r14
// 231: 49 29 de                      subq    %rbx, %r14
// 234: 49 83 c6 b8                   addq    $-0x48, %r14
// 238: 49 c1 ee 03                   shrq    $0x3, %r14
// 23c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 240: 31 c0                         xorl    %eax, %eax
// 242: e9 15 fe ff ff                jmp     0x5c <_JIT_ENTRY+0x5c>
// 247: 41 89 45 00                   movl    %eax, (%r13)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 255: ff d0                         callq   *%rax
// 257: 49 8b 07                      movq    (%r15), %rax
// 25a: 48 85 c0                      testq   %rax, %rax
// 25d: 7f c8                         jg      0x227 <_JIT_ENTRY+0x227>
// 25f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000261:  R_X86_64_64  .rodata.str1.1
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_NegativeRefcount
// 273: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 278: 4c 89 fa                      movq    %r15, %rdx
// 27b: ff d0                         callq   *%rax
// 27d: 49 8b 07                      movq    (%r15), %rax
// 280: 85 c0                         testl   %eax, %eax
// 282: 78 20                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 0f                      decq    (%r15)
// 293: 75 0f                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 4c 89 ff                      movq    %r15, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8b 04 24                   movq    (%r12), %rax
// 2a8: 48 85 c0                      testq   %rax, %rax
// 2ab: 7f 22                         jg      0x2cf <_JIT_ENTRY+0x2cf>
// 2ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002af:  R_X86_64_64  .rodata.str1.1
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_NegativeRefcount
// 2c1: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 2c6: 4c 89 e2                      movq    %r12, %rdx
// 2c9: ff d0                         callq   *%rax
// 2cb: 49 8b 04 24                   movq    (%r12), %rax
// 2cf: 4d 8d 3c ee                   leaq    (%r14,%rbp,8), %r15
// 2d3: 49 83 c7 f0                   addq    $-0x10, %r15
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 78 28                         js      0x303 <_JIT_ENTRY+0x303>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e5: ff d0                         callq   *%rax
// 2e7: 49 ff 0c 24                   decq    (%r12)
// 2eb: 75 16                         jne     0x303 <_JIT_ENTRY+0x303>
// 2ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ef:  R_X86_64_64  PyType_Type
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: ff d0                         callq   *%rax
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  _JIT_OPARG
// 30d: 0f b7 c0                      movzwl  %ax, %eax
// 310: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 315: 29 c1                         subl    %eax, %ecx
// 317: 48 63 c1                      movslq  %ecx, %rax
// 31a: 4d 89 6c c6 f0                movq    %r13, -0x10(%r14,%rax,8)
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _JIT_CONTINUE
// 329: 48 89 df                      movq    %rbx, %rdi
// 32c: 4c 89 fe                      movq    %r15, %rsi
// 32f: 48 8b 14 24                   movq    (%rsp), %rdx
// 333: 48 83 c4 08                   addq    $0x8, %rsp
// 337: 5b                            popq    %rbx
// 338: 41 5c                         popq    %r12
// 33a: 41 5d                         popq    %r13
// 33c: 41 5e                         popq    %r14
// 33e: 41 5f                         popq    %r15
// 340: 5d                            popq    %rbp
// 341: ff e0                         jmpq    *%rax
// 343: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_TYPE_1_code_body[836] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x89, 0x6e, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe9, 0x49, 0x83, 0x7c, 0xee, 0xf0, 0x00, 0x0f, 0x85, 0x69, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x64, 0xce, 0xf0, 0x0f, 0x85, 0x3d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x79, 0xf0, 0x4d, 0x8b, 0x6f, 0x08, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x28, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x59, 0xeb, 0x77, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x15, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xc8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x3c, 0xee, 0x49, 0x83, 0xc7, 0xf0, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_TYPE_1_code_holes[34] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CALL_TYPE_1_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_CLASS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 a1 01 00 00             jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 8c 01 00 00             je      0x1c6 <_JIT_ENTRY+0x1c6>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 0f 84 80 00 00 00             je      0x1fd <_JIT_ENTRY+0x1fd>
// 17d: 49 83 c6 f0                   addq    $-0x10, %r14
// 181: 48 89 08                      movq    %rcx, (%rax)
// 184: 48 8b 41 08                   movq    0x8(%rcx), %rax
// 188: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 18f: 74 35                         je      0x1c6 <_JIT_ENTRY+0x1c6>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPERAND
// 19b: 39 81 80 01 00 00             cmpl    %eax, 0x180(%rcx)
// 1a1: 75 23                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _JIT_CONTINUE
// 1ad: 48 89 df                      movq    %rbx, %rdi
// 1b0: 4c 89 f6                      movq    %r14, %rsi
// 1b3: 4c 89 fa                      movq    %r15, %rdx
// 1b6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: 5d                            popq    %rbp
// 1c4: ff e0                         jmpq    *%rax
// 1c6: 49 29 de                      subq    %rbx, %r14
// 1c9: 49 83 c6 b8                   addq    $-0x48, %r14
// 1cd: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1d5: 48 8b 03                      movq    (%rbx), %rax
// 1d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001da:  R_X86_64_64  _JIT_TARGET
// 1e2: 89 c9                         movl    %ecx, %ecx
// 1e4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ee: 48 83 c4 08                   addq    $0x8, %rsp
// 1f2: 5b                            popq    %rbx
// 1f3: 41 5c                         popq    %r12
// 1f5: 41 5d                         popq    %r13
// 1f7: 41 5e                         popq    %r14
// 1f9: 41 5f                         popq    %r15
// 1fb: 5d                            popq    %rbp
// 1fc: c3                            retq
// 1fd: 48 29 d8                      subq    %rbx, %rax
// 200: 48 83 c0 b8                   addq    $-0x48, %rax
// 204: 48 c1 e8 03                   shrq    $0x3, %rax
// 208: 89 43 40                      movl    %eax, 0x40(%rbx)
// 20b: 31 c0                         xorl    %eax, %eax
// 20d: eb df                         jmp     0x1ee <_JIT_ENTRY+0x1ee>
// 20f: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_CLASS_code_body[528] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xa1, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x41, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x81, 0x80, 0x01, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_CLASS_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_CLASS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_METHOD_LAZY_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 6d 01 00 00             jne     0x192 <_JIT_ENTRY+0x192>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 58 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 50                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 48 8b 41 08                   movq    0x8(%rcx), %rax
// 184: 48 8b 80 20 01 00 00          movq    0x120(%rax), %rax
// 18b: 48 83 3c 01 00                cmpq    $0x0, (%rcx,%rax)
// 190: 74 49                         je      0x1db <_JIT_ENTRY+0x1db>
// 192: 49 29 de                      subq    %rbx, %r14
// 195: 49 83 c6 b8                   addq    $-0x48, %r14
// 199: 49 c1 ee 03                   shrq    $0x3, %r14
// 19d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a1: 48 8b 03                      movq    (%rbx), %rax
// 1a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a6:  R_X86_64_64  _JIT_TARGET
// 1ae: 89 c9                         movl    %ecx, %ecx
// 1b0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ba: 48 83 c4 08                   addq    $0x8, %rsp
// 1be: 5b                            popq    %rbx
// 1bf: 41 5c                         popq    %r12
// 1c1: 41 5d                         popq    %r13
// 1c3: 41 5e                         popq    %r14
// 1c5: 41 5f                         popq    %r15
// 1c7: 5d                            popq    %rbp
// 1c8: c3                            retq
// 1c9: 48 29 d8                      subq    %rbx, %rax
// 1cc: 48 83 c0 b8                   addq    $-0x48, %rax
// 1d0: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1d7: 31 c0                         xorl    %eax, %eax
// 1d9: eb df                         jmp     0x1ba <_JIT_ENTRY+0x1ba>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_CONTINUE
// 1e5: 48 89 df                      movq    %rbx, %rdi
// 1e8: 4c 89 f6                      movq    %r14, %rsi
// 1eb: 4c 89 fa                      movq    %r15, %rdx
// 1ee: 48 83 c4 08                   addq    $0x8, %rsp
// 1f2: 5b                            popq    %rbx
// 1f3: 41 5c                         popq    %r12
// 1f5: 41 5d                         popq    %r13
// 1f7: 41 5e                         popq    %r14
// 1f9: 41 5f                         popq    %r15
// 1fb: 5d                            popq    %rbp
// 1fc: ff e0                         jmpq    *%rax
// 1fe: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[511] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x6d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x58, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x50, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x80, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x01, 0x00, 0x74, 0x49, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_MODULE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_MODULE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 a9 01 00 00             jne     0x1ce <_JIT_ENTRY+0x1ce>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 94 01 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 0f 84 88 00 00 00             je      0x205 <_JIT_ENTRY+0x205>
// 17d: 49 83 c6 f0                   addq    $-0x10, %r14
// 181: 48 89 08                      movq    %rcx, (%rax)
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  PyModule_Type
// 18e: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 192: 75 3a                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 194: 48 8b 41 10                   movq    0x10(%rcx), %rax
// 198: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  _JIT_OPERAND
// 1a6: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1a9: 75 23                         jne     0x1ce <_JIT_ENTRY+0x1ce>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _JIT_CONTINUE
// 1b5: 48 89 df                      movq    %rbx, %rdi
// 1b8: 4c 89 f6                      movq    %r14, %rsi
// 1bb: 4c 89 fa                      movq    %r15, %rdx
// 1be: 48 83 c4 08                   addq    $0x8, %rsp
// 1c2: 5b                            popq    %rbx
// 1c3: 41 5c                         popq    %r12
// 1c5: 41 5d                         popq    %r13
// 1c7: 41 5e                         popq    %r14
// 1c9: 41 5f                         popq    %r15
// 1cb: 5d                            popq    %rbp
// 1cc: ff e0                         jmpq    *%rax
// 1ce: 49 29 de                      subq    %rbx, %r14
// 1d1: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d5: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1dd: 48 8b 03                      movq    (%rbx), %rax
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  _JIT_TARGET
// 1ea: 89 c9                         movl    %ecx, %ecx
// 1ec: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f6: 48 83 c4 08                   addq    $0x8, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: c3                            retq
// 205: 48 29 d8                      subq    %rbx, %rax
// 208: 48 83 c0 b8                   addq    $-0x48, %rax
// 20c: 48 c1 e8 03                   shrq    $0x3, %rax
// 210: 89 43 40                      movl    %eax, 0x40(%rbx)
// 213: 31 c0                         xorl    %eax, %eax
// 215: eb df                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 217: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_MODULE_code_body[536] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xa9, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x3a, 0x48, 0x8b, 0x41, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_MODULE_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_MODULE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_WITH_HINT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 3f                         je      0x1e7 <_JIT_ENTRY+0x1e7>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 8b 41 e8                   movq    -0x18(%rcx), %rax
// 1b3: a8 01                         testb   $0x1, %al
// 1b5: 0f 85 77 fe ff ff             jne     0x32 <_JIT_ENTRY+0x32>
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 0f 84 6e fe ff ff             je      0x32 <_JIT_ENTRY+0x32>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_CONTINUE
// 1ce: 48 89 df                      movq    %rbx, %rdi
// 1d1: 4c 89 f6                      movq    %r14, %rsi
// 1d4: 4c 89 fa                      movq    %r15, %rdx
// 1d7: 48 83 c4 08                   addq    $0x8, %rsp
// 1db: 5b                            popq    %rbx
// 1dc: 41 5c                         popq    %r12
// 1de: 41 5d                         popq    %r13
// 1e0: 41 5e                         popq    %r14
// 1e2: 41 5f                         popq    %r15
// 1e4: 5d                            popq    %rbp
// 1e5: ff e0                         jmpq    *%rax
// 1e7: 48 29 d8                      subq    %rbx, %rax
// 1ea: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ee: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f2: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f5: 31 c0                         xorl    %eax, %eax
// 1f7: e9 5e fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1fc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_WITH_HINT_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x3f, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x41, 0xe8, 0xa8, 0x01, 0x0f, 0x85, 0x77, 0xfe, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x5e, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_WITH_HINT_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 a6 01 00 00             jne     0x1cb <_JIT_ENTRY+0x1cb>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 91 01 00 00             je      0x1cb <_JIT_ENTRY+0x1cb>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 48 8b 04 24                   movq    (%rsp), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 0f 84 89 00 00 00             je      0x202 <_JIT_ENTRY+0x202>
// 179: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 17d: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: f7 d0                         notl    %eax
// 18d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 192: 48 98                         cltq
// 194: 49 83 7c c6 f0 00             cmpq    $0x0, -0x10(%r14,%rax,8)
// 19a: 75 2c                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: 0f b7 c0                      movzwl  %ax, %eax
// 1a9: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ae: 29 c1                         subl    %eax, %ecx
// 1b0: 48 63 c1                      movslq  %ecx, %rax
// 1b3: 49 8b 44 c6 f0                movq    -0x10(%r14,%rax,8), %rax
// 1b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ba:  R_X86_64_64  PyMethod_Type
// 1c2: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1c6: 74 51                         je      0x219 <_JIT_ENTRY+0x219>
// 1c8: 49 89 f6                      movq    %rsi, %r14
// 1cb: 49 29 de                      subq    %rbx, %r14
// 1ce: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1d6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1da: 48 8b 03                      movq    (%rbx), %rax
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_TARGET
// 1e7: 89 c9                         movl    %ecx, %ecx
// 1e9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ed: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f3: 48 83 c4 08                   addq    $0x8, %rsp
// 1f7: 5b                            popq    %rbx
// 1f8: 41 5c                         popq    %r12
// 1fa: 41 5d                         popq    %r13
// 1fc: 41 5e                         popq    %r14
// 1fe: 41 5f                         popq    %r15
// 200: 5d                            popq    %rbp
// 201: c3                            retq
// 202: 49 83 c6 e8                   addq    $-0x18, %r14
// 206: 49 29 de                      subq    %rbx, %r14
// 209: 49 83 c6 b8                   addq    $-0x48, %r14
// 20d: 49 c1 ee 03                   shrq    $0x3, %r14
// 211: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 215: 31 c0                         xorl    %eax, %eax
// 217: eb da                         jmp     0x1f3 <_JIT_ENTRY+0x1f3>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_CONTINUE
// 223: 48 89 df                      movq    %rbx, %rdi
// 226: 4c 89 fa                      movq    %r15, %rdx
// 229: 48 83 c4 08                   addq    $0x8, %rsp
// 22d: 5b                            popq    %rbx
// 22e: 41 5c                         popq    %r12
// 230: 41 5d                         popq    %r13
// 232: 41 5e                         popq    %r14
// 234: 41 5f                         popq    %r15
// 236: 5d                            popq    %rbp
// 237: ff e0                         jmpq    *%rax
// 239: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[570] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xa6, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x91, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x83, 0x7c, 0xc6, 0xf0, 0x00, 0x75, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x44, 0xc6, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x51, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_EG_MATCH
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_EG_MATCH.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 71: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 49 89 c4                      movq    %rax, %r12
// a8: 49 8b 07                      movq    (%r15), %rax
// ab: 48 85 c0                      testq   %rax, %rax
// ae: 7f 21                         jg      0xd1 <_JIT_ENTRY+0xd1>
// b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_NegativeRefcount
// c4: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c9: 4c 89 fa                      movq    %r15, %rdx
// cc: ff d0                         callq   *%rax
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 27                         js      0xfc <_JIT_ENTRY+0xfc>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0f                      decq    (%r15)
// e4: 75 16                         jne     0xfc <_JIT_ENTRY+0xfc>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  PySuper_Type
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_Dealloc
// fa: ff d0                         callq   *%rax
// fc: 48 8b 45 00                   movq    (%rbp), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7f 22                         jg      0x127 <_JIT_ENTRY+0x127>
// 105: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000107:  R_X86_64_64  .rodata.str1.1
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_NegativeRefcount
// 119: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11e: 48 89 ea                      movq    %rbp, %rdx
// 121: ff d0                         callq   *%rax
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 85 c0                         testl   %eax, %eax
// 129: 4d 89 e7                      movq    %r12, %r15
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 15b: 7f 22                         jg      0x17f <_JIT_ENTRY+0x17f>
// 15d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015f:  R_X86_64_64  .rodata.str1.1
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_NegativeRefcount
// 171: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 176: 4c 89 ea                      movq    %r13, %rdx
// 179: ff d0                         callq   *%rax
// 17b: 49 8b 45 00                   movq    (%r13), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 4d 00                   decq    (%r13)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 ef                      movq    %r13, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 4d 85 ff                      testq   %r15, %r15
// 1a7: 0f 84 54 01 00 00             je      0x301 <_JIT_ENTRY+0x301>
// 1ad: 4d 89 7e e8                   movq    %r15, -0x18(%r14)
// 1b1: 4d 8b 6e e0                   movq    -0x20(%r14), %r13
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 1bf: 4c 89 e7                      movq    %r12, %rdi
// 1c2: 4c 89 fe                      movq    %r15, %rsi
// 1c5: ff d0                         callq   *%rax
// 1c7: 85 c0                         testl   %eax, %eax
// 1c9: 0f 88 3e 01 00 00             js      0x30d <_JIT_ENTRY+0x30d>
// 1cf: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 1d7: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 1ea: 48 89 e2                      movq    %rsp, %rdx
// 1ed: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 1f2: 4c 89 ef                      movq    %r13, %rdi
// 1f5: 4c 89 fe                      movq    %r15, %rsi
// 1f8: ff d0                         callq   *%rax
// 1fa: 89 c5                         movl    %eax, %ebp
// 1fc: 49 8b 45 00                   movq    (%r13), %rax
// 200: 48 85 c0                      testq   %rax, %rax
// 203: 7f 22                         jg      0x227 <_JIT_ENTRY+0x227>
// 205: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000207:  R_X86_64_64  .rodata.str1.1
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_NegativeRefcount
// 219: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 21e: 4c 89 ea                      movq    %r13, %rdx
// 221: ff d0                         callq   *%rax
// 223: 49 8b 45 00                   movq    (%r13), %rax
// 227: 85 c0                         testl   %eax, %eax
// 229: 78 21                         js      0x24c <_JIT_ENTRY+0x24c>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 235: ff d0                         callq   *%rax
// 237: 49 ff 4d 00                   decq    (%r13)
// 23b: 75 0f                         jne     0x24c <_JIT_ENTRY+0x24c>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_Dealloc
// 247: 4c 89 ef                      movq    %r13, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 49 8b 07                      movq    (%r15), %rax
// 24f: 48 85 c0                      testq   %rax, %rax
// 252: 7f 21                         jg      0x275 <_JIT_ENTRY+0x275>
// 254: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000256:  R_X86_64_64  .rodata.str1.1
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_NegativeRefcount
// 268: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 26d: 4c 89 fa                      movq    %r15, %rdx
// 270: ff d0                         callq   *%rax
// 272: 49 8b 07                      movq    (%r15), %rax
// 275: 85 c0                         testl   %eax, %eax
// 277: 78 20                         js      0x299 <_JIT_ENTRY+0x299>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 283: ff d0                         callq   *%rax
// 285: 49 ff 0f                      decq    (%r15)
// 288: 75 0f                         jne     0x299 <_JIT_ENTRY+0x299>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 ff                      movq    %r15, %rdi
// 297: ff d0                         callq   *%rax
// 299: 85 ed                         testl   %ebp, %ebp
// 29b: 0f 88 09 01 00 00             js      0x3aa <_JIT_ENTRY+0x3aa>
// 2a1: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2a5: 48 85 ff                      testq   %rdi, %rdi
// 2a8: 0f 84 fc 00 00 00             je      0x3aa <_JIT_ENTRY+0x3aa>
// 2ae: 4d 8d 7e f0                   leaq    -0x10(%r14), %r15
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NoneStruct
// 2bc: 48 39 c7                      cmpq    %rax, %rdi
// 2bf: 74 10                         je      0x2d1 <_JIT_ENTRY+0x2d1>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  PyErr_SetHandledException
// 2cb: ff d0                         callq   *%rax
// 2cd: 48 8b 04 24                   movq    (%rsp), %rax
// 2d1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2d6: 49 89 4e e0                   movq    %rcx, -0x20(%r14)
// 2da: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _JIT_CONTINUE
// 2e8: 48 89 df                      movq    %rbx, %rdi
// 2eb: 4c 89 fe                      movq    %r15, %rsi
// 2ee: 4c 89 e2                      movq    %r12, %rdx
// 2f1: 48 83 c4 18                   addq    $0x18, %rsp
// 2f5: 5b                            popq    %rbx
// 2f6: 41 5c                         popq    %r12
// 2f8: 41 5d                         popq    %r13
// 2fa: 41 5e                         popq    %r14
// 2fc: 41 5f                         popq    %r15
// 2fe: 5d                            popq    %rbp
// 2ff: ff e0                         jmpq    *%rax
// 301: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 308: e9 a4 00 00 00                jmp     0x3b1 <_JIT_ENTRY+0x3b1>
// 30d: 49 8b 45 00                   movq    (%r13), %rax
// 311: 48 85 c0                      testq   %rax, %rax
// 314: 7f 22                         jg      0x338 <_JIT_ENTRY+0x338>
// 316: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000318:  R_X86_64_64  .rodata.str1.1
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_NegativeRefcount
// 32a: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 32f: 4c 89 ea                      movq    %r13, %rdx
// 332: ff d0                         callq   *%rax
// 334: 49 8b 45 00                   movq    (%r13), %rax
// 338: 85 c0                         testl   %eax, %eax
// 33a: 78 21                         js      0x35d <_JIT_ENTRY+0x35d>
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 346: ff d0                         callq   *%rax
// 348: 49 ff 4d 00                   decq    (%r13)
// 34c: 75 0f                         jne     0x35d <_JIT_ENTRY+0x35d>
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_Dealloc
// 358: 4c 89 ef                      movq    %r13, %rdi
// 35b: ff d0                         callq   *%rax
// 35d: 49 8b 07                      movq    (%r15), %rax
// 360: 48 85 c0                      testq   %rax, %rax
// 363: 7f 21                         jg      0x386 <_JIT_ENTRY+0x386>
// 365: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000367:  R_X86_64_64  .rodata.str1.1
// 36f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000371:  R_X86_64_64  _Py_NegativeRefcount
// 379: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 37e: 4c 89 fa                      movq    %r15, %rdx
// 381: ff d0                         callq   *%rax
// 383: 49 8b 07                      movq    (%r15), %rax
// 386: 85 c0                         testl   %eax, %eax
// 388: 78 20                         js      0x3aa <_JIT_ENTRY+0x3aa>
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 394: ff d0                         callq   *%rax
// 396: 49 ff 0f                      decq    (%r15)
// 399: 75 0f                         jne     0x3aa <_JIT_ENTRY+0x3aa>
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_Dealloc
// 3a5: 4c 89 ff                      movq    %r15, %rdi
// 3a8: ff d0                         callq   *%rax
// 3aa: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 3b1: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 3b5: 48 29 d8                      subq    %rbx, %rax
// 3b8: 48 83 c0 a8                   addq    $-0x58, %rax
// 3bc: 48 c1 e8 03                   shrq    $0x3, %rax
// 3c0: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3c3: 31 c0                         xorl    %eax, %eax
// 3c5: e9 93 fc ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 3ca: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_EG_MATCH_code_body[971] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4d, 0x89, 0xe7, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x7e, 0xe8, 0x4d, 0x8b, 0x6e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x3e, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x88, 0x09, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xe0, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe9, 0xa4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x93, 0xfc, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_EG_MATCH_code_holes[39] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_EG_MATCH_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_EXC_MATCH
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_EXC_MATCH.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 0f 84 25 01 00 00             je      0x2d1 <_JIT_ENTRY+0x2d1>
// 1ac: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 1b0: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 1be: 4c 89 ff                      movq    %r15, %rdi
// 1c1: 48 89 ee                      movq    %rbp, %rsi
// 1c4: ff d0                         callq   *%rax
// 1c6: 85 c0                         testl   %eax, %eax
// 1c8: 0f 88 b3 00 00 00             js      0x281 <_JIT_ENTRY+0x281>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyErr_GivenExceptionMatches
// 1d8: 4c 89 e7                      movq    %r12, %rdi
// 1db: 48 89 ee                      movq    %rbp, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 89 e9                      movq    %rbp, %rcx
// 1e3: 89 c5                         movl    %eax, %ebp
// 1e5: 48 8b 01                      movq    (%rcx), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7f 26                         jg      0x213 <_JIT_ENTRY+0x213>
// 1ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ef:  R_X86_64_64  .rodata.str1.1
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_NegativeRefcount
// 201: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 206: 4c 8b 24 24                   movq    (%rsp), %r12
// 20a: 4c 89 e2                      movq    %r12, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 04 24                   movq    (%r12), %rax
// 213: 49 83 c6 f0                   addq    $-0x10, %r14
// 217: 85 c0                         testl   %eax, %eax
// 219: 78 25                         js      0x240 <_JIT_ENTRY+0x240>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 225: ff d0                         callq   *%rax
// 227: 48 8b 04 24                   movq    (%rsp), %rax
// 22b: 48 ff 08                      decq    (%rax)
// 22e: 75 10                         jne     0x240 <_JIT_ENTRY+0x240>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_Dealloc
// 23a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 23e: ff d0                         callq   *%rax
// 240: 85 ed                         testl   %ebp, %ebp
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_FalseStruct
// 24c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024e:  R_X86_64_64  _Py_TrueStruct
// 256: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 25a: 49 89 4d 00                   movq    %rcx, (%r13)
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _JIT_CONTINUE
// 268: 48 89 df                      movq    %rbx, %rdi
// 26b: 4c 89 f6                      movq    %r14, %rsi
// 26e: 4c 89 fa                      movq    %r15, %rdx
// 271: 48 83 c4 08                   addq    $0x8, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: ff e0                         jmpq    *%rax
// 281: 48 8b 45 00                   movq    (%rbp), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7f 22                         jg      0x2ac <_JIT_ENTRY+0x2ac>
// 28a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028c:  R_X86_64_64  .rodata.str1.1
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_NegativeRefcount
// 29e: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 2a3: 48 89 ea                      movq    %rbp, %rdx
// 2a6: ff d0                         callq   *%rax
// 2a8: 48 8b 45 00                   movq    (%rbp), %rax
// 2ac: 85 c0                         testl   %eax, %eax
// 2ae: 78 21                         js      0x2d1 <_JIT_ENTRY+0x2d1>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ba: ff d0                         callq   *%rax
// 2bc: 48 ff 4d 00                   decq    (%rbp)
// 2c0: 75 0f                         jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 48 89 ef                      movq    %rbp, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 29 dd                      subq    %rbx, %r13
// 2d4: 49 83 c5 b8                   addq    $-0x48, %r13
// 2d8: 49 c1 ed 03                   shrq    $0x3, %r13
// 2dc: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2e0: 31 c0                         xorl    %eax, %eax
// 2e2: e9 73 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2e7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_EXC_MATCH_code_body[744] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x25, 0x01, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x8b, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0xe9, 0x89, 0xc5, 0x48, 0x8b, 0x01, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x73, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_EXC_MATCH_code_holes[31] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_EXC_MATCH_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_FUNCTION_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 e0 01 00 00             jne     0x205 <_JIT_ENTRY+0x205>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 cb 01 00 00             je      0x205 <_JIT_ENTRY+0x205>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 48 8b 04 24                   movq    (%rsp), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 0f 84 c3 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 179: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 17d: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 c0                      movzwl  %ax, %eax
// 18e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 193: 29 c1                         subl    %eax, %ecx
// 195: 48 63 c9                      movslq  %ecx, %rcx
// 198: 49 8b 4c ce f0                movq    -0x10(%r14,%rcx,8), %rcx
// 19d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000019f:  R_X86_64_64  PyFunction_Type
// 1a7: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 1ab: 75 55                         jne     0x202 <_JIT_ENTRY+0x202>
// 1ad: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001af:  R_X86_64_64  _JIT_OPERAND
// 1b7: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// 1bd: 75 43                         jne     0x202 <_JIT_ENTRY+0x202>
// 1bf: f7 d0                         notl    %eax
// 1c1: 48 98                         cltq
// 1c3: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 1c7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c9:  R_X86_64_64  _JIT_OPARG
// 1d1: 0f b7 d2                      movzwl  %dx, %edx
// 1d4: 49 83 7c c6 f0 01             cmpq    $0x1, -0x10(%r14,%rax,8)
// 1da: 83 da ff                      sbbl    $-0x1, %edx
// 1dd: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 1e0: 75 20                         jne     0x202 <_JIT_ENTRY+0x202>
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 48 89 df                      movq    %rbx, %rdi
// 1ef: 4c 89 fa                      movq    %r15, %rdx
// 1f2: 48 83 c4 08                   addq    $0x8, %rsp
// 1f6: 5b                            popq    %rbx
// 1f7: 41 5c                         popq    %r12
// 1f9: 41 5d                         popq    %r13
// 1fb: 41 5e                         popq    %r14
// 1fd: 41 5f                         popq    %r15
// 1ff: 5d                            popq    %rbp
// 200: ff e0                         jmpq    *%rax
// 202: 49 89 f6                      movq    %rsi, %r14
// 205: 49 29 de                      subq    %rbx, %r14
// 208: 49 83 c6 b8                   addq    $-0x48, %r14
// 20c: 49 c1 ee 03                   shrq    $0x3, %r14
// 210: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 214: 48 8b 03                      movq    (%rbx), %rax
// 217: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000219:  R_X86_64_64  _JIT_TARGET
// 221: 89 c9                         movl    %ecx, %ecx
// 223: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 227: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22d: 48 83 c4 08                   addq    $0x8, %rsp
// 231: 5b                            popq    %rbx
// 232: 41 5c                         popq    %r12
// 234: 41 5d                         popq    %r13
// 236: 41 5e                         popq    %r14
// 238: 41 5f                         popq    %r15
// 23a: 5d                            popq    %rbp
// 23b: c3                            retq
// 23c: 49 83 c6 e8                   addq    $-0x18, %r14
// 240: 49 29 de                      subq    %rbx, %r14
// 243: 49 83 c6 b8                   addq    $-0x48, %r14
// 247: 49 c1 ee 03                   shrq    $0x3, %r14
// 24b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24f: 31 c0                         xorl    %eax, %eax
// 251: eb da                         jmp     0x22d <_JIT_ENTRY+0x22d>
// 253: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_FUNCTION_EXACT_ARGS_code_body[596] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xe0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xcb, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0xf0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x55, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x43, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x7c, 0xc6, 0xf0, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xda};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 e4                      testq   %r12, %r12
// 1a6: 74 50                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 4c 89 20                      movq    %r12, (%rax)
// 1af: 41 f6 44 24 e8 01             testb   $0x1, -0x18(%r12)
// 1b5: 75 1e                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1b7: 4c 89 e6                      movq    %r12, %rsi
// 1ba: 48 83 c6 e8                   addq    $-0x18, %rsi
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 1c8: 4c 89 e7                      movq    %r12, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 84 c0                         testb   %al, %al
// 1cf: 0f 84 5d fe ff ff             je      0x32 <_JIT_ENTRY+0x32>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_CONTINUE
// 1df: 48 89 df                      movq    %rbx, %rdi
// 1e2: 4c 89 f6                      movq    %r14, %rsi
// 1e5: 4c 89 fa                      movq    %r15, %rdx
// 1e8: 48 83 c4 08                   addq    $0x8, %rsp
// 1ec: 5b                            popq    %rbx
// 1ed: 41 5c                         popq    %r12
// 1ef: 41 5d                         popq    %r13
// 1f1: 41 5e                         popq    %r14
// 1f3: 41 5f                         popq    %r15
// 1f5: 5d                            popq    %rbp
// 1f6: ff e0                         jmpq    *%rax
// 1f8: 48 29 d8                      subq    %rbx, %rax
// 1fb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ff: 48 c1 e8 03                   shrq    $0x3, %rax
// 203: 89 43 40                      movl    %eax, 0x40(%rbx)
// 206: 31 c0                         xorl    %eax, %eax
// 208: e9 4d fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 20d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[526] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x41, 0xf6, 0x44, 0x24, 0xe8, 0x01, 0x75, 0x1e, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x84, 0xc0, 0x0f, 0x84, 0x5d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x4d, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_PEP_523
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_PEP_523.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 69 01 00 00             jne     0x18e <_JIT_ENTRY+0x18e>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 54 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 4c                         je      0x1c5 <_JIT_ENTRY+0x1c5>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 49 8b 47 10                   movq    0x10(%r15), %rax
// 184: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 18c: 74 49                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 18e: 49 29 de                      subq    %rbx, %r14
// 191: 49 83 c6 b8                   addq    $-0x48, %r14
// 195: 49 c1 ee 03                   shrq    $0x3, %r14
// 199: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19d: 48 8b 03                      movq    (%rbx), %rax
// 1a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a2:  R_X86_64_64  _JIT_TARGET
// 1aa: 89 c9                         movl    %ecx, %ecx
// 1ac: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: 5d                            popq    %rbp
// 1c4: c3                            retq
// 1c5: 48 29 d8                      subq    %rbx, %rax
// 1c8: 48 83 c0 b8                   addq    $-0x48, %rax
// 1cc: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d0: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1d3: 31 c0                         xorl    %eax, %eax
// 1d5: eb df                         jmp     0x1b6 <_JIT_ENTRY+0x1b6>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_CONTINUE
// 1e1: 48 89 df                      movq    %rbx, %rdi
// 1e4: 4c 89 f6                      movq    %r14, %rsi
// 1e7: 4c 89 fa                      movq    %r15, %rdx
// 1ea: 48 83 c4 08                   addq    $0x8, %rsp
// 1ee: 5b                            popq    %rbx
// 1ef: 41 5c                         popq    %r12
// 1f1: 41 5d                         popq    %r13
// 1f3: 41 5e                         popq    %r14
// 1f5: 41 5f                         popq    %r15
// 1f7: 5d                            popq    %rbp
// 1f8: ff e0                         jmpq    *%rax
// 1fa: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_PEP_523_code_body[507] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x4c, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x49, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_PEP_523_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_PEP_523_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_STACK_SPACE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_STACK_SPACE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 ac 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 97 01 00 00             je      0x1d1 <_JIT_ENTRY+0x1d1>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 0f 84 8b 00 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 17d: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 181: 48 89 08                      movq    %rcx, (%rax)
// 184: 49 8b 87 00 01 00 00          movq    0x100(%r15), %rax
// 18b: 48 85 c0                      testq   %rax, %rax
// 18e: 74 3e                         je      0x1ce <_JIT_ENTRY+0x1ce>
// 190: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c9                      movzwl  %cx, %ecx
// 19d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a2: 29 ca                         subl    %ecx, %edx
// 1a4: 48 63 ca                      movslq  %edx, %rcx
// 1a7: 49 8b 4c ce f0                movq    -0x10(%r14,%rcx,8), %rcx
// 1ac: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 1b0: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 1b4: 49 8b 97 08 01 00 00          movq    0x108(%r15), %rdx
// 1bb: 48 29 c2                      subq    %rax, %rdx
// 1be: 48 c1 fa 03                   sarq    $0x3, %rdx
// 1c2: 48 39 ca                      cmpq    %rcx, %rdx
// 1c5: 7e 07                         jle     0x1ce <_JIT_ENTRY+0x1ce>
// 1c7: 41 83 7f 24 02                cmpl    $0x2, 0x24(%r15)
// 1cc: 7d 4c                         jge     0x21a <_JIT_ENTRY+0x21a>
// 1ce: 49 89 f6                      movq    %rsi, %r14
// 1d1: 49 29 de                      subq    %rbx, %r14
// 1d4: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d8: 49 c1 ee 03                   shrq    $0x3, %r14
// 1dc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e0: 48 8b 03                      movq    (%rbx), %rax
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_TARGET
// 1ed: 89 c9                         movl    %ecx, %ecx
// 1ef: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: c3                            retq
// 208: 48 29 d8                      subq    %rbx, %rax
// 20b: 48 83 c0 b8                   addq    $-0x48, %rax
// 20f: 48 c1 e8 03                   shrq    $0x3, %rax
// 213: 89 43 40                      movl    %eax, 0x40(%rbx)
// 216: 31 c0                         xorl    %eax, %eax
// 218: eb df                         jmp     0x1f9 <_JIT_ENTRY+0x1f9>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _JIT_CONTINUE
// 224: 48 89 df                      movq    %rbx, %rdi
// 227: 4c 89 fa                      movq    %r15, %rdx
// 22a: 48 83 c4 08                   addq    $0x8, %rsp
// 22e: 5b                            popq    %rbx
// 22f: 41 5c                         popq    %r12
// 231: 41 5d                         popq    %r13
// 233: 41 5e                         popq    %r14
// 235: 41 5f                         popq    %r15
// 237: 5d                            popq    %rbp
// 238: ff e0                         jmpq    *%rax
// 23a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_STACK_SPACE_code_body[571] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xac, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x97, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x76, 0xf0, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x87, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x3e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x8b, 0x4c, 0xce, 0xf0, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x97, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83, 0x7f, 0x24, 0x02, 0x7d, 0x4c, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_STACK_SPACE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_STACK_SPACE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CHECK_VALIDITY
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CHECK_VALIDITY.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 3e                         je      0x1e6 <_JIT_ENTRY+0x1e6>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_EXECUTOR
// 1b9: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1bd: 0f 84 6f fe ff ff             je      0x32 <_JIT_ENTRY+0x32>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _JIT_CONTINUE
// 1cd: 48 89 df                      movq    %rbx, %rdi
// 1d0: 4c 89 f6                      movq    %r14, %rsi
// 1d3: 4c 89 fa                      movq    %r15, %rdx
// 1d6: 48 83 c4 08                   addq    $0x8, %rsp
// 1da: 5b                            popq    %rbx
// 1db: 41 5c                         popq    %r12
// 1dd: 41 5d                         popq    %r13
// 1df: 41 5e                         popq    %r14
// 1e1: 41 5f                         popq    %r15
// 1e3: 5d                            popq    %rbp
// 1e4: ff e0                         jmpq    *%rax
// 1e6: 48 29 d8                      subq    %rbx, %rax
// 1e9: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ed: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f1: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f4: 31 c0                         xorl    %eax, %eax
// 1f6: e9 5f fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1fb: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_VALIDITY_code_body[508] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x0f, 0x84, 0x6f, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x5f, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_VALIDITY_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CHECK_VALIDITY_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 0f 84 91 01 00 00             je      0x332 <_JIT_ENTRY+0x332>
// 1a1: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a5: 4d 8b 7e e0                   movq    -0x20(%r14), %r15
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _JIT_OPARG
// 1b3: 0f b7 d0                      movzwl  %ax, %edx
// 1b6: c1 ea 05                      shrl    $0x5, %edx
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  PyObject_RichCompare
// 1c3: 4c 89 ff                      movq    %r15, %rdi
// 1c6: 4c 89 e6                      movq    %r12, %rsi
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 89 c5                      movq    %rax, %r13
// 1ce: 49 8b 07                      movq    (%r15), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f 21                         jg      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 1ef: 4c 89 fa                      movq    %r15, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 8b 07                      movq    (%r15), %rax
// 1f7: 85 c0                         testl   %eax, %eax
// 1f9: 78 20                         js      0x21b <_JIT_ENTRY+0x21b>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 205: ff d0                         callq   *%rax
// 207: 49 ff 0f                      decq    (%r15)
// 20a: 75 0f                         jne     0x21b <_JIT_ENTRY+0x21b>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 ff                      movq    %r15, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 49 8b 04 24                   movq    (%r12), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 7f 22                         jg      0x246 <_JIT_ENTRY+0x246>
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 23d: 4c 89 e2                      movq    %r12, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 04 24                   movq    (%r12), %rax
// 246: 85 c0                         testl   %eax, %eax
// 248: 78 21                         js      0x26b <_JIT_ENTRY+0x26b>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 254: ff d0                         callq   *%rax
// 256: 49 ff 0c 24                   decq    (%r12)
// 25a: 75 0f                         jne     0x26b <_JIT_ENTRY+0x26b>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_Dealloc
// 266: 4c 89 e7                      movq    %r12, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 49 c7 c7 fe ff ff ff          movq    $-0x2, %r15
// 272: 4d 85 ed                      testq   %r13, %r13
// 275: 0f 84 be 00 00 00             je      0x339 <_JIT_ENTRY+0x339>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_OPARG
// 285: a8 10                         testb   $0x10, %al
// 287: 74 7d                         je      0x306 <_JIT_ENTRY+0x306>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  PyObject_IsTrue
// 293: 4c 89 ef                      movq    %r13, %rdi
// 296: ff d0                         callq   *%rax
// 298: 89 c5                         movl    %eax, %ebp
// 29a: 49 8b 45 00                   movq    (%r13), %rax
// 29e: 48 85 c0                      testq   %rax, %rax
// 2a1: 7f 22                         jg      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a5:  R_X86_64_64  .rodata.str1.1
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_NegativeRefcount
// 2b7: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 2bc: 4c 89 ea                      movq    %r13, %rdx
// 2bf: ff d0                         callq   *%rax
// 2c1: 49 8b 45 00                   movq    (%r13), %rax
// 2c5: 85 c0                         testl   %eax, %eax
// 2c7: 78 21                         js      0x2ea <_JIT_ENTRY+0x2ea>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d3: ff d0                         callq   *%rax
// 2d5: 49 ff 4d 00                   decq    (%r13)
// 2d9: 75 0f                         jne     0x2ea <_JIT_ENTRY+0x2ea>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: 4c 89 ef                      movq    %r13, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_FalseStruct
// 2f4: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000002f6:  R_X86_64_64  _Py_TrueStruct
// 2fe: 85 ed                         testl   %ebp, %ebp
// 300: 4c 0f 44 e8                   cmoveq  %rax, %r13
// 304: 78 33                         js      0x339 <_JIT_ENTRY+0x339>
// 306: 4d 89 6e e0                   movq    %r13, -0x20(%r14)
// 30a: 49 83 c6 e8                   addq    $-0x18, %r14
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _JIT_CONTINUE
// 318: 48 89 df                      movq    %rbx, %rdi
// 31b: 4c 89 f6                      movq    %r14, %rsi
// 31e: 48 8b 14 24                   movq    (%rsp), %rdx
// 322: 48 83 c4 08                   addq    $0x8, %rsp
// 326: 5b                            popq    %rbx
// 327: 41 5c                         popq    %r12
// 329: 41 5d                         popq    %r13
// 32b: 41 5e                         popq    %r14
// 32d: 41 5f                         popq    %r15
// 32f: 5d                            popq    %rbp
// 330: ff e0                         jmpq    *%rax
// 332: 49 c7 c7 ff ff ff ff          movq    $-0x1, %r15
// 339: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 33d: 48 29 d8                      subq    %rbx, %rax
// 340: 48 83 c0 a8                   addq    $-0x58, %rax
// 344: 48 c1 e8 03                   shrq    $0x3, %rax
// 348: 89 43 40                      movl    %eax, 0x40(%rbx)
// 34b: 31 c0                         xorl    %eax, %eax
// 34d: e9 08 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 352: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_code_body[851] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x91, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x7e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xc7, 0xc7, 0xfe, 0xff, 0xff, 0xff, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe8, 0x78, 0x33, 0x4d, 0x89, 0x6e, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0xff, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x08, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_code_holes[37] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_FLOAT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 18                   addq    $0x18, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 49 89 d6                      movq    %rdx, %r14
// 71: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 48 89 04 24                   movq    %rax, (%rsp)
// a9: 49 8b 04 24                   movq    (%r12), %rax
// ad: 48 85 c0                      testq   %rax, %rax
// b0: 7f 22                         jg      0xd4 <_JIT_ENTRY+0xd4>
// b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b4:  R_X86_64_64  .rodata.str1.1
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _Py_NegativeRefcount
// c6: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cb: 4c 89 e2                      movq    %r12, %rdx
// ce: ff d0                         callq   *%rax
// d0: 49 8b 04 24                   movq    (%r12), %rax
// d4: 85 c0                         testl   %eax, %eax
// d6: 78 28                         js      0x100 <_JIT_ENTRY+0x100>
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e2: ff d0                         callq   *%rax
// e4: 49 ff 0c 24                   decq    (%r12)
// e8: 75 16                         jne     0x100 <_JIT_ENTRY+0x100>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  PySuper_Type
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_Dealloc
// fe: ff d0                         callq   *%rax
// 100: 48 8b 45 00                   movq    (%rbp), %rax
// 104: 48 85 c0                      testq   %rax, %rax
// 107: 7f 22                         jg      0x12b <_JIT_ENTRY+0x12b>
// 109: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010b:  R_X86_64_64  .rodata.str1.1
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_NegativeRefcount
// 11d: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 122: 48 89 ea                      movq    %rbp, %rdx
// 125: ff d0                         callq   *%rax
// 127: 48 8b 45 00                   movq    (%rbp), %rax
// 12b: 85 c0                         testl   %eax, %eax
// 12d: 78 21                         js      0x150 <_JIT_ENTRY+0x150>
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 139: ff d0                         callq   *%rax
// 13b: 48 ff 4d 00                   decq    (%rbp)
// 13f: 75 0f                         jne     0x150 <_JIT_ENTRY+0x150>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_Dealloc
// 14b: 48 89 ef                      movq    %rbp, %rdi
// 14e: ff d0                         callq   *%rax
// 150: 49 8b 45 00                   movq    (%r13), %rax
// 154: 48 85 c0                      testq   %rax, %rax
// 157: 7f 22                         jg      0x17b <_JIT_ENTRY+0x17b>
// 159: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015b:  R_X86_64_64  .rodata.str1.1
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_NegativeRefcount
// 16d: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 172: 4c 89 ea                      movq    %r13, %rdx
// 175: ff d0                         callq   *%rax
// 177: 49 8b 45 00                   movq    (%r13), %rax
// 17b: 85 c0                         testl   %eax, %eax
// 17d: 48 8b 2c 24                   movq    (%rsp), %rbp
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 4d 00                   decq    (%r13)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 ef                      movq    %r13, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 1a8: 48 85 ed                      testq   %rbp, %rbp
// 1ab: 0f 84 0b 01 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 1b1: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1b5: 49 89 6f e8                   movq    %rbp, -0x18(%r15)
// 1b9: 4d 8b 67 e0                   movq    -0x20(%r15), %r12
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  PyFloat_Type
// 1c7: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1cc: 0f 85 66 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1d2: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 1d6: 0f 85 5c fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1dc: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 1e3: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 1e9: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 1ee: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 1f4: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1fa: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001fc:  R_X86_64_64  PyInterpreterState_Get
// 204: 75 1e                         jne     0x224 <_JIT_ENTRY+0x224>
// 206: ff d5                         callq   *%rbp
// 208: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 20f: 49 ff 0c 24                   decq    (%r12)
// 213: 75 0f                         jne     0x224 <_JIT_ENTRY+0x224>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _PyFloat_ExactDealloc
// 21f: 4c 89 e7                      movq    %r12, %rdi
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 24 24                   movq    (%rsp), %r12
// 228: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 22e: 75 1e                         jne     0x24e <_JIT_ENTRY+0x24e>
// 230: ff d5                         callq   *%rbp
// 232: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 239: 49 ff 0c 24                   decq    (%r12)
// 23d: 75 0f                         jne     0x24e <_JIT_ENTRY+0x24e>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _PyFloat_ExactDealloc
// 249: 4c 89 e7                      movq    %r12, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 31 c0                         xorl    %eax, %eax
// 250: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0       # xmm0 = mem[0],zero
// 256: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
// 25c: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 260: 0f 93 c0                      setae   %al
// 263: 01 c0                         addl    %eax, %eax
// 265: 31 c9                         xorl    %ecx, %ecx
// 267: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 26b: 0f 93 c1                      setae   %cl
// 26e: 09 c1                         orl     %eax, %ecx
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _JIT_OPARG
// 27a: 0f a3 c8                      btl     %ecx, %eax
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_FalseStruct
// 287: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000289:  R_X86_64_64  _Py_TrueStruct
// 291: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 295: 49 89 4f e0                   movq    %rcx, -0x20(%r15)
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 4c 89 ee                      movq    %r13, %rsi
// 2a9: 4c 89 f2                      movq    %r14, %rdx
// 2ac: 48 83 c4 18                   addq    $0x18, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 49 29 dd                      subq    %rbx, %r13
// 2bf: 49 83 c5 b8                   addq    $-0x48, %r13
// 2c3: 49 c1 ed 03                   shrq    $0x3, %r13
// 2c7: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2cb: 31 c0                         xorl    %eax, %eax
// 2cd: e9 8d fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 2d2: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_FLOAT_code_body[723] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x49, 0x89, 0x6f, 0xe8, 0x4d, 0x8b, 0x67, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x66, 0xfe, 0xff, 0xff, 0x48, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x5c, 0xfe, 0xff, 0xff, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x08, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4f, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x8d, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_FLOAT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_FLOAT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 28                   addq    $0x28, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 49 89 d6                      movq    %rdx, %r14
// 71: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 48 85 c0                      testq   %rax, %rax
// b1: 7f 22                         jg      0xd5 <_JIT_ENTRY+0xd5>
// b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b5:  R_X86_64_64  .rodata.str1.1
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_NegativeRefcount
// c7: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cc: 4c 89 e2                      movq    %r12, %rdx
// cf: ff d0                         callq   *%rax
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 85 c0                         testl   %eax, %eax
// d7: 78 28                         js      0x101 <_JIT_ENTRY+0x101>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e3: ff d0                         callq   *%rax
// e5: 49 ff 0c 24                   decq    (%r12)
// e9: 75 16                         jne     0x101 <_JIT_ENTRY+0x101>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  PySuper_Type
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f 22                         jg      0x12c <_JIT_ENTRY+0x12c>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 123: 48 89 ea                      movq    %rbp, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 45 00                   movq    (%rbp), %rax
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 21                         js      0x151 <_JIT_ENTRY+0x151>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 4d 00                   decq    (%rbp)
// 140: 75 0f                         jne     0x151 <_JIT_ENTRY+0x151>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_Dealloc
// 14c: 48 89 ef                      movq    %rbp, %rdi
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 45 00                   movq    (%r13), %rax
// 155: 48 85 c0                      testq   %rax, %rax
// 158: 7f 22                         jg      0x17c <_JIT_ENTRY+0x17c>
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_NegativeRefcount
// 16e: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 173: 4c 89 ea                      movq    %r13, %rdx
// 176: ff d0                         callq   *%rax
// 178: 49 8b 45 00                   movq    (%r13), %rax
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 183: 78 21                         js      0x1a6 <_JIT_ENTRY+0x1a6>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18f: ff d0                         callq   *%rax
// 191: 49 ff 4d 00                   decq    (%r13)
// 195: 75 0f                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 4c 89 ef                      movq    %r13, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 1aa: 48 85 ed                      testq   %rbp, %rbp
// 1ad: 0f 84 71 01 00 00             je      0x324 <_JIT_ENTRY+0x324>
// 1b3: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1b7: 49 89 6f e8                   movq    %rbp, -0x18(%r15)
// 1bb: 4d 8b 67 e0                   movq    -0x20(%r15), %r12
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  PyLong_Type
// 1c9: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1ce: 0f 85 64 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1d4: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 1d8: 0f 85 5a fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1de: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 1e3: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 1e7: 0f 87 4b fe ff ff             ja      0x38 <_JIT_ENTRY+0x38>
// 1ed: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f2: 48 8b 51 10                   movq    0x10(%rcx), %rdx
// 1f6: 48 83 fa 0f                   cmpq    $0xf, %rdx
// 1fa: 0f 87 38 fe ff ff             ja      0x38 <_JIT_ENTRY+0x38>
// 200: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 205: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 20a: 8b 41 18                      movl    0x18(%rcx), %eax
// 20d: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 212: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 218: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021a:  R_X86_64_64  PyInterpreterState_Get
// 222: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 227: 75 46                         jne     0x26f <_JIT_ENTRY+0x26f>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyInterpreterState_Get
// 233: ff d0                         callq   *%rax
// 235: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 23a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  PyInterpreterState_Get
// 24b: 49 ff 0c 24                   decq    (%r12)
// 24f: 75 1e                         jne     0x26f <_JIT_ENTRY+0x26f>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  PyObject_Free
// 25b: 4c 89 e7                      movq    %r12, %rdi
// 25e: ff d0                         callq   *%rax
// 260: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000262:  R_X86_64_64  PyInterpreterState_Get
// 26a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 26f: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 274: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 27a: 75 28                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 27c: ff d1                         callq   *%rcx
// 27e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 283: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28a: 49 ff 0c 24                   decq    (%r12)
// 28e: 75 14                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  PyObject_Free
// 29a: 4c 89 e7                      movq    %r12, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a4: 83 e5 03                      andl    $0x3, %ebp
// 2a7: b8 01 00 00 00                movl    $0x1, %eax
// 2ac: b9 01 00 00 00                movl    $0x1, %ecx
// 2b1: 48 29 e9                      subq    %rbp, %rcx
// 2b4: 48 0f af 4c 24 18             imulq   0x18(%rsp), %rcx
// 2ba: 83 e2 03                      andl    $0x3, %edx
// 2bd: 48 29 d0                      subq    %rdx, %rax
// 2c0: 48 0f af 44 24 20             imulq   0x20(%rsp), %rax
// 2c6: 31 d2                         xorl    %edx, %edx
// 2c8: 31 f6                         xorl    %esi, %esi
// 2ca: 48 39 c1                      cmpq    %rax, %rcx
// 2cd: 0f 9d c2                      setge   %dl
// 2d0: 40 0f 9e c6                   setle   %sil
// 2d4: 01 d2                         addl    %edx, %edx
// 2d6: 09 d6                         orl     %edx, %esi
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _JIT_OPARG
// 2e2: 0f a3 f0                      btl     %esi, %eax
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_FalseStruct
// 2ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f1:  R_X86_64_64  _Py_TrueStruct
// 2f9: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 2fd: 49 89 4f e0                   movq    %rcx, -0x20(%r15)
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _JIT_CONTINUE
// 30b: 48 89 df                      movq    %rbx, %rdi
// 30e: 4c 89 ee                      movq    %r13, %rsi
// 311: 4c 89 f2                      movq    %r14, %rdx
// 314: 48 83 c4 28                   addq    $0x28, %rsp
// 318: 5b                            popq    %rbx
// 319: 41 5c                         popq    %r12
// 31b: 41 5d                         popq    %r13
// 31d: 41 5e                         popq    %r14
// 31f: 41 5f                         popq    %r15
// 321: 5d                            popq    %rbp
// 322: ff e0                         jmpq    *%rax
// 324: 49 29 dd                      subq    %rbx, %r13
// 327: 49 83 c5 b8                   addq    $-0x48, %r13
// 32b: 49 c1 ed 03                   shrq    $0x3, %r13
// 32f: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 333: 31 c0                         xorl    %eax, %eax
// 335: e9 25 fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 33a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_INT_code_body[827] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x71, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x49, 0x89, 0x6f, 0xe8, 0x4d, 0x8b, 0x67, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x64, 0xfe, 0xff, 0xff, 0x48, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x5a, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x0f, 0x87, 0x4b, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x51, 0x10, 0x48, 0x83, 0xfa, 0x0f, 0x0f, 0x87, 0x38, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x89, 0x44, 0x24, 0x18, 0x8b, 0x41, 0x18, 0x48, 0x89, 0x44, 0x24, 0x20, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x08, 0x75, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0xff, 0xd1, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x83, 0xe5, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xe9, 0x48, 0x0f, 0xaf, 0x4c, 0x24, 0x18, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x20, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4f, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x25, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_INT_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_STR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_STR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 39                         jne     0x6b <_JIT_ENTRY+0x6b>
// 32: 4c 89 f8                      movq    %r15, %rax
// 35: 48 29 d8                      subq    %rbx, %rax
// 38: 48 83 c0 b8                   addq    $-0x48, %rax
// 3c: 48 c1 e8 03                   shrq    $0x3, %rax
// 40: 89 43 40                      movl    %eax, 0x40(%rbx)
// 43: 48 8b 03                      movq    (%rbx), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 56: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5c: 48 83 c4 08                   addq    $0x8, %rsp
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5d                         popq    %r13
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: 5d                            popq    %rbp
// 6a: c3                            retq
// 6b: 49 89 d6                      movq    %rdx, %r14
// 6e: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 72: 48 8b 03                      movq    (%rbx), %rax
// 75: 48 8b 40 20                   movq    0x20(%rax), %rax
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  _JIT_OPARG
// 83: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 89: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _PySuper_Lookup
// 98: 48 89 ef                      movq    %rbp, %rdi
// 9b: 4c 89 ee                      movq    %r13, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: ff d0                         callq   *%rax
// a2: 48 89 04 24                   movq    %rax, (%rsp)
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 48 85 c0                      testq   %rax, %rax
// ad: 7f 22                         jg      0xd1 <_JIT_ENTRY+0xd1>
// af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b1:  R_X86_64_64  .rodata.str1.1
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_NegativeRefcount
// c3: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c8: 4c 89 e2                      movq    %r12, %rdx
// cb: ff d0                         callq   *%rax
// cd: 49 8b 04 24                   movq    (%r12), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 28                         js      0xfd <_JIT_ENTRY+0xfd>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0c 24                   decq    (%r12)
// e5: 75 16                         jne     0xfd <_JIT_ENTRY+0xfd>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  PySuper_Type
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_Dealloc
// fb: ff d0                         callq   *%rax
// fd: 48 8b 45 00                   movq    (%rbp), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f 22                         jg      0x128 <_JIT_ENTRY+0x128>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11f: 48 89 ea                      movq    %rbp, %rdx
// 122: ff d0                         callq   *%rax
// 124: 48 8b 45 00                   movq    (%rbp), %rax
// 128: 85 c0                         testl   %eax, %eax
// 12a: 78 21                         js      0x14d <_JIT_ENTRY+0x14d>
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 136: ff d0                         callq   *%rax
// 138: 48 ff 4d 00                   decq    (%rbp)
// 13c: 75 0f                         jne     0x14d <_JIT_ENTRY+0x14d>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_Dealloc
// 148: 48 89 ef                      movq    %rbp, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 49 8b 45 00                   movq    (%r13), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 22                         jg      0x178 <_JIT_ENTRY+0x178>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16f: 4c 89 ea                      movq    %r13, %rdx
// 172: ff d0                         callq   *%rax
// 174: 49 8b 45 00                   movq    (%r13), %rax
// 178: 85 c0                         testl   %eax, %eax
// 17a: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17e: 78 21                         js      0x1a1 <_JIT_ENTRY+0x1a1>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: ff d0                         callq   *%rax
// 18c: 49 ff 4d 00                   decq    (%r13)
// 190: 75 0f                         jne     0x1a1 <_JIT_ENTRY+0x1a1>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_Dealloc
// 19c: 4c 89 ef                      movq    %r13, %rdi
// 19f: ff d0                         callq   *%rax
// 1a1: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 1a5: 48 85 ed                      testq   %rbp, %rbp
// 1a8: 0f 84 06 01 00 00             je      0x2b4 <_JIT_ENTRY+0x2b4>
// 1ae: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1b2: 49 89 6f e8                   movq    %rbp, -0x18(%r15)
// 1b6: 4d 8b 67 e0                   movq    -0x20(%r15), %r12
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  PyUnicode_Type
// 1c4: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1c9: 0f 85 66 fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1cf: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 1d3: 0f 85 5c fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _PyUnicode_Equal
// 1e3: 4c 89 e7                      movq    %r12, %rdi
// 1e6: 48 89 ee                      movq    %rbp, %rsi
// 1e9: ff d0                         callq   *%rax
// 1eb: 89 c5                         movl    %eax, %ebp
// 1ed: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f5:  R_X86_64_64  PyInterpreterState_Get
// 1fd: 75 3c                         jne     0x23b <_JIT_ENTRY+0x23b>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  PyInterpreterState_Get
// 209: ff d0                         callq   *%rax
// 20b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 212: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000214:  R_X86_64_64  PyInterpreterState_Get
// 21c: 49 ff 0c 24                   decq    (%r12)
// 220: 75 19                         jne     0x23b <_JIT_ENTRY+0x23b>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _PyUnicode_ExactDealloc
// 22c: 4c 89 e7                      movq    %r12, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000233:  R_X86_64_64  PyInterpreterState_Get
// 23b: 4c 8b 24 24                   movq    (%rsp), %r12
// 23f: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 245: 75 1e                         jne     0x265 <_JIT_ENTRY+0x265>
// 247: ff d1                         callq   *%rcx
// 249: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 250: 49 ff 0c 24                   decq    (%r12)
// 254: 75 0f                         jne     0x265 <_JIT_ENTRY+0x265>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _PyUnicode_ExactDealloc
// 260: 4c 89 e7                      movq    %r12, %rdi
// 263: ff d0                         callq   *%rax
// 265: 83 c5 07                      addl    $0x7, %ebp
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: 66 85 e8                      testw   %bp, %ax
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_FalseStruct
// 27f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000281:  R_X86_64_64  _Py_TrueStruct
// 289: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 28d: 49 89 4f e0                   movq    %rcx, -0x20(%r15)
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _JIT_CONTINUE
// 29b: 48 89 df                      movq    %rbx, %rdi
// 29e: 4c 89 ee                      movq    %r13, %rsi
// 2a1: 4c 89 f2                      movq    %r14, %rdx
// 2a4: 48 83 c4 08                   addq    $0x8, %rsp
// 2a8: 5b                            popq    %rbx
// 2a9: 41 5c                         popq    %r12
// 2ab: 41 5d                         popq    %r13
// 2ad: 41 5e                         popq    %r14
// 2af: 41 5f                         popq    %r15
// 2b1: 5d                            popq    %rbp
// 2b2: ff e0                         jmpq    *%rax
// 2b4: 49 29 dd                      subq    %rbx, %r13
// 2b7: 49 83 c5 b8                   addq    $-0x48, %r13
// 2bb: 49 c1 ed 03                   shrq    $0x3, %r13
// 2bf: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2c3: 31 c0                         xorl    %eax, %eax
// 2c5: e9 92 fd ff ff                jmp     0x5c <_JIT_ENTRY+0x5c>
// 2ca: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_STR_code_body[715] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x06, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x49, 0x89, 0x6f, 0xe8, 0x4d, 0x8b, 0x67, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x66, 0xfe, 0xff, 0xff, 0x48, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x5c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4f, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x92, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_STR_code_holes[30] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_STR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CONTAINS_OP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CONTAINS_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 0f 84 0d 01 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 1a1: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a5: 4d 8b 7e e0                   movq    -0x20(%r14), %r15
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PySequence_Contains
// 1b3: 4c 89 e7                      movq    %r12, %rdi
// 1b6: 4c 89 fe                      movq    %r15, %rsi
// 1b9: ff d0                         callq   *%rax
// 1bb: 89 c5                         movl    %eax, %ebp
// 1bd: 49 8b 07                      movq    (%r15), %rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 7f 21                         jg      0x1e6 <_JIT_ENTRY+0x1e6>
// 1c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c7:  R_X86_64_64  .rodata.str1.1
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_NegativeRefcount
// 1d9: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 1de: 4c 89 fa                      movq    %r15, %rdx
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 8b 07                      movq    (%r15), %rax
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 78 20                         js      0x20a <_JIT_ENTRY+0x20a>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 ff 0f                      decq    (%r15)
// 1f9: 75 0f                         jne     0x20a <_JIT_ENTRY+0x20a>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 ff                      movq    %r15, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 49 8b 04 24                   movq    (%r12), %rax
// 20e: 48 85 c0                      testq   %rax, %rax
// 211: 7f 22                         jg      0x235 <_JIT_ENTRY+0x235>
// 213: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000215:  R_X86_64_64  .rodata.str1.1
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_NegativeRefcount
// 227: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 22c: 4c 89 e2                      movq    %r12, %rdx
// 22f: ff d0                         callq   *%rax
// 231: 49 8b 04 24                   movq    (%r12), %rax
// 235: 85 c0                         testl   %eax, %eax
// 237: 78 21                         js      0x25a <_JIT_ENTRY+0x25a>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 243: ff d0                         callq   *%rax
// 245: 49 ff 0c 24                   decq    (%r12)
// 249: 75 0f                         jne     0x25a <_JIT_ENTRY+0x25a>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: 4c 89 e7                      movq    %r12, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 85 ed                         testl   %ebp, %ebp
// 25c: 78 59                         js      0x2b7 <_JIT_ENTRY+0x2b7>
// 25e: 49 8d 76 e8                   leaq    -0x18(%r14), %rsi
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_OPARG
// 26c: 0f b7 c0                      movzwl  %ax, %eax
// 26f: 39 c5                         cmpl    %eax, %ebp
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_FalseStruct
// 27b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027d:  R_X86_64_64  _Py_TrueStruct
// 285: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 289: 49 89 4e e0                   movq    %rcx, -0x20(%r14)
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_CONTINUE
// 297: 48 89 df                      movq    %rbx, %rdi
// 29a: 48 8b 14 24                   movq    (%rsp), %rdx
// 29e: 48 83 c4 08                   addq    $0x8, %rsp
// 2a2: 5b                            popq    %rbx
// 2a3: 41 5c                         popq    %r12
// 2a5: 41 5d                         popq    %r13
// 2a7: 41 5e                         popq    %r14
// 2a9: 41 5f                         popq    %r15
// 2ab: 5d                            popq    %rbp
// 2ac: ff e0                         jmpq    *%rax
// 2ae: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 2b5: eb 07                         jmp     0x2be <_JIT_ENTRY+0x2be>
// 2b7: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 2be: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2c2: 48 29 d8                      subq    %rbx, %rax
// 2c5: 48 83 c0 a8                   addq    $-0x58, %rax
// 2c9: 48 c1 e8 03                   shrq    $0x3, %rax
// 2cd: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2d0: 31 c0                         xorl    %eax, %eax
// 2d2: e9 83 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2d7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CONTAINS_OP_code_body[728] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x7e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x78, 0x59, 0x49, 0x8d, 0x76, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x39, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CONTAINS_OP_code_holes[31] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CONTAINS_OP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_CONVERT_VALUE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_CONVERT_VALUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 a5 00 00 00             je      0x24a <_JIT_ENTRY+0x24a>
// 1a5: 4d 89 65 00                   movq    %r12, (%r13)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _JIT_OPARG
// 1b3: 0f b7 c0                      movzwl  %ax, %eax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  .rodata
// 1c0: 4c 89 e7                      movq    %r12, %rdi
// 1c3: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1c6: 49 89 c7                      movq    %rax, %r15
// 1c9: 49 8b 04 24                   movq    (%r12), %rax
// 1cd: 48 85 c0                      testq   %rax, %rax
// 1d0: 7f 22                         jg      0x1f4 <_JIT_ENTRY+0x1f4>
// 1d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d4:  R_X86_64_64  .rodata.str1.1
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_NegativeRefcount
// 1e6: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 1eb: 4c 89 e2                      movq    %r12, %rdx
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 8b 04 24                   movq    (%r12), %rax
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 78 21                         js      0x219 <_JIT_ENTRY+0x219>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 202: ff d0                         callq   *%rax
// 204: 49 ff 0c 24                   decq    (%r12)
// 208: 75 0f                         jne     0x219 <_JIT_ENTRY+0x219>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 e7                      movq    %r12, %rdi
// 217: ff d0                         callq   *%rax
// 219: 4d 85 ff                      testq   %r15, %r15
// 21c: 74 2c                         je      0x24a <_JIT_ENTRY+0x24a>
// 21e: 49 83 c6 f0                   addq    $-0x10, %r14
// 222: 4d 89 7d 00                   movq    %r15, (%r13)
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_CONTINUE
// 230: 48 89 df                      movq    %rbx, %rdi
// 233: 4c 89 f6                      movq    %r14, %rsi
// 236: 48 8b 14 24                   movq    (%rsp), %rdx
// 23a: 48 83 c4 08                   addq    $0x8, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 49 29 dd                      subq    %rbx, %r13
// 24d: 49 83 c5 b8                   addq    $-0x48, %r13
// 251: 49 c1 ed 03                   shrq    $0x3, %r13
// 255: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 259: 31 c0                         xorl    %eax, %eax
// 25b: e9 fa fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 260: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CONVERT_VALUE_code_body[609] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x2c, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x7d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CONVERT_VALUE_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _LOAD_SUPER_ATTR_ATTRplus_COPY
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_COPY.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 04 24                   movq    (%rsp), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 74 60                         je      0x204 <_JIT_ENTRY+0x204>
// 1a4: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1a8: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 48 c1 e0 03                   shlq    $0x3, %rax
// 1bd: 48 f7 d8                      negq    %rax
// 1c0: 4d 8b 6c 06 f0                movq    -0x10(%r14,%rax), %r13
// 1c5: 41 8b 45 00                   movl    (%r13), %eax
// 1c9: ff c0                         incl    %eax
// 1cb: 74 10                         je      0x1dd <_JIT_ENTRY+0x1dd>
// 1cd: 41 89 45 00                   movl    %eax, (%r13)
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1db: ff d0                         callq   *%rax
// 1dd: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_CONTINUE
// 1eb: 48 89 df                      movq    %rbx, %rdi
// 1ee: 4c 89 e6                      movq    %r12, %rsi
// 1f1: 4c 89 fa                      movq    %r15, %rdx
// 1f4: 48 83 c4 08                   addq    $0x8, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: ff e0                         jmpq    *%rax
// 204: 49 83 c6 e8                   addq    $-0x18, %r14
// 208: 49 29 de                      subq    %rbx, %r14
// 20b: 49 83 c6 b8                   addq    $-0x48, %r14
// 20f: 49 c1 ee 03                   shrq    $0x3, %r14
// 213: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 217: 31 c0                         xorl    %eax, %eax
// 219: e9 3c fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 21e: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COPY_code_body[543] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x60, 0x4d, 0x8d, 0x66, 0xf8, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x06, 0xf0, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x3c, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COPY_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COPY_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_COPY_FREE_VARS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_COPY_FREE_VARS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 e6                      movq    %r12, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 ea                      movq    %r13, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 45 00                   movq    (%r13), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 4d 00                   decq    (%r13)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 0c 24                   decq    (%r12)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 e7                      movq    %r12, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1ad: 48 85 c9                      testq   %rcx, %rcx
// 1b0: 0f 84 a8 00 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 1b6: 48 89 1c 24                   movq    %rbx, (%rsp)
// 1ba: 49 83 c6 f0                   addq    $-0x10, %r14
// 1be: 48 89 08                      movq    %rcx, (%rax)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 66 85 c0                      testw   %ax, %ax
// 1ce: 74 68                         je      0x238 <_JIT_ENTRY+0x238>
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1d8: 4c 8b 60 48                   movq    0x48(%rax), %r12
// 1dc: 48 8b 02                      movq    (%rdx), %rax
// 1df: 8b 40 48                      movl    0x48(%rax), %eax
// 1e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e4:  R_X86_64_64  _JIT_OPARG
// 1ec: 0f b7 c9                      movzwl  %cx, %ecx
// 1ef: 29 c8                         subl    %ecx, %eax
// 1f1: 83 f9 02                      cmpl    $0x2, %ecx
// 1f4: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 1fa: 44 0f 43 e9                   cmovael %ecx, %r13d
// 1fe: 48 98                         cltq
// 200: 48 8d 2c c2                   leaq    (%rdx,%rax,8), %rbp
// 204: 48 83 c5 48                   addq    $0x48, %rbp
// 208: 45 31 ff                      xorl    %r15d, %r15d
// 20b: eb 10                         jmp     0x21d <_JIT_ENTRY+0x21d>
// 20d: 0f 1f 00                      nopl    (%rax)
// 210: 4a 89 5c fd 00                movq    %rbx, (%rbp,%r15,8)
// 215: 49 ff c7                      incq    %r15
// 218: 4d 39 fd                      cmpq    %r15, %r13
// 21b: 74 1b                         je      0x238 <_JIT_ENTRY+0x238>
// 21d: 4b 8b 5c fc 18                movq    0x18(%r12,%r15,8), %rbx
// 222: 8b 03                         movl    (%rbx), %eax
// 224: ff c0                         incl    %eax
// 226: 74 e8                         je      0x210 <_JIT_ENTRY+0x210>
// 228: 89 03                         movl    %eax, (%rbx)
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 234: ff d0                         callq   *%rax
// 236: eb d8                         jmp     0x210 <_JIT_ENTRY+0x210>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_CONTINUE
// 242: 48 8b 3c 24                   movq    (%rsp), %rdi
// 246: 4c 89 f6                      movq    %r14, %rsi
// 249: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 24e: 48 83 c4 18                   addq    $0x18, %rsp
// 252: 5b                            popq    %rbx
// 253: 41 5c                         popq    %r12
// 255: 41 5d                         popq    %r13
// 257: 41 5e                         popq    %r14
// 259: 41 5f                         popq    %r15
// 25b: 5d                            popq    %rbp
// 25c: ff e0                         jmpq    *%rax
// 25e: 48 29 d8                      subq    %rbx, %rax
// 261: 48 83 c0 b8                   addq    $-0x48, %rax
// 265: 48 c1 e8 03                   shrq    $0x3, %rax
// 269: 89 43 40                      movl    %eax, 0x40(%rbx)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: e9 ea fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 273: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COPY_FREE_VARS_code_body[628] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x68, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x42, 0x10, 0x4c, 0x8b, 0x60, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe9, 0x48, 0x98, 0x48, 0x8d, 0x2c, 0xc2, 0x48, 0x83, 0xc5, 0x48, 0x45, 0x31, 0xff, 0xeb, 0x10, 0x0f, 0x1f, 0x00, 0x4a, 0x89, 0x5c, 0xfd, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfd, 0x74, 0x1b, 0x4b, 0x8b, 0x5c, 0xfc, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0xe8, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xd8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xea, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COPY_FREE_VARS_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_COPY_FREE_VARS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_DELETE_ATTR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_DELETE_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 71: 49 8b 06                      movq    (%r14), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 48 83 c3 e8                   addq    $-0x18, %rbx
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 81 00 00 00             je      0x226 <_JIT_ENTRY+0x226>
// 1a5: 4c 89 23                      movq    %r12, (%rbx)
// 1a8: 49 8b 06                      movq    (%r14), %rax
// 1ab: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 c9                      movzwl  %cx, %ecx
// 1bc: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyObject_DelAttr
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 89 c5                         movl    %eax, %ebp
// 1d2: 49 8b 04 24                   movq    (%r12), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 22                         jg      0x1fd <_JIT_ENTRY+0x1fd>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 1f4: 4c 89 e2                      movq    %r12, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 04 24                   movq    (%r12), %rax
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 78 21                         js      0x222 <_JIT_ENTRY+0x222>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 ff 0c 24                   decq    (%r12)
// 211: 75 0f                         jne     0x222 <_JIT_ENTRY+0x222>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_Dealloc
// 21d: 4c 89 e7                      movq    %r12, %rdi
// 220: ff d0                         callq   *%rax
// 222: 85 ed                         testl   %ebp, %ebp
// 224: 74 16                         je      0x23c <_JIT_ENTRY+0x23c>
// 226: 4c 29 f3                      subq    %r14, %rbx
// 229: 48 83 c3 b8                   addq    $-0x48, %rbx
// 22d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 231: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 235: 31 c0                         xorl    %eax, %eax
// 237: e9 1e fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _JIT_CONTINUE
// 246: 4c 89 f7                      movq    %r14, %rdi
// 249: 48 89 de                      movq    %rbx, %rsi
// 24c: 48 8b 14 24                   movq    (%rsp), %rdx
// 250: 48 83 c4 08                   addq    $0x8, %rsp
// 254: 5b                            popq    %rbx
// 255: 41 5c                         popq    %r12
// 257: 41 5d                         popq    %r13
// 259: 41 5e                         popq    %r14
// 25b: 41 5f                         popq    %r15
// 25d: 5d                            popq    %rbp
// 25e: ff e0                         jmpq    *%rax
// 260: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_ATTR_code_body[609] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x8b, 0x6b, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x23, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x16, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x1e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_ATTR_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_ATTR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_DELETE_DEREF
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_DELETE_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 0f 84 a1 00 00 00             je      0x24d <_JIT_ENTRY+0x24d>
// 1ac: 49 83 c6 f0                   addq    $-0x10, %r14
// 1b0: 48 89 08                      movq    %rcx, (%rax)
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_OPARG
// 1bd: 0f b7 c0                      movzwl  %ax, %eax
// 1c0: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 1c5: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1c9: 4d 85 e4                      testq   %r12, %r12
// 1cc: 0f 84 80 00 00 00             je      0x252 <_JIT_ENTRY+0x252>
// 1d2: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 1da: 49 8b 04 24                   movq    (%r12), %rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 7f 22                         jg      0x205 <_JIT_ENTRY+0x205>
// 1e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NegativeRefcount
// 1f7: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 1fc: 4c 89 e2                      movq    %r12, %rdx
// 1ff: ff d0                         callq   *%rax
// 201: 49 8b 04 24                   movq    (%r12), %rax
// 205: 85 c0                         testl   %eax, %eax
// 207: 78 21                         js      0x22a <_JIT_ENTRY+0x22a>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 213: ff d0                         callq   *%rax
// 215: 49 ff 0c 24                   decq    (%r12)
// 219: 75 0f                         jne     0x22a <_JIT_ENTRY+0x22a>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: 4c 89 e7                      movq    %r12, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_CONTINUE
// 234: 48 89 df                      movq    %rbx, %rdi
// 237: 4c 89 f6                      movq    %r14, %rsi
// 23a: 4c 89 fa                      movq    %r15, %rdx
// 23d: 48 83 c4 08                   addq    $0x8, %rsp
// 241: 5b                            popq    %rbx
// 242: 41 5c                         popq    %r12
// 244: 41 5d                         popq    %r13
// 246: 41 5e                         popq    %r14
// 248: 41 5f                         popq    %r15
// 24a: 5d                            popq    %rbp
// 24b: ff e0                         jmpq    *%rax
// 24d: 49 89 c6                      movq    %rax, %r14
// 250: eb 1f                         jmp     0x271 <_JIT_ENTRY+0x271>
// 252: 48 8b 33                      movq    (%rbx), %rsi
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_OPARG
// 25f: 0f b7 d0                      movzwl  %ax, %edx
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _PyEval_FormatExcUnbound
// 26c: 4c 89 ff                      movq    %r15, %rdi
// 26f: ff d0                         callq   *%rax
// 271: 49 29 de                      subq    %rbx, %r14
// 274: 49 83 c6 b8                   addq    $-0x48, %r14
// 278: 49 c1 ee 03                   shrq    $0x3, %r14
// 27c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 280: 31 c0                         xorl    %eax, %eax
// 282: e9 d3 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 287: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_DEREF_code_body[648] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x1f, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd3, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_DEREF_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_DEREF_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_DELETE_FAST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_DELETE_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 0f 84 ab 00 00 00             je      0x257 <_JIT_ENTRY+0x257>
// 1ac: 49 83 c6 f0                   addq    $-0x10, %r14
// 1b0: 48 89 08                      movq    %rcx, (%rax)
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_OPARG
// 1bd: 0f b7 c0                      movzwl  %ax, %eax
// 1c0: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// 1c5: 4d 85 e4                      testq   %r12, %r12
// 1c8: 0f 84 8e 00 00 00             je      0x25c <_JIT_ENTRY+0x25c>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c0                      movzwl  %ax, %eax
// 1db: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 1e4: 49 8b 04 24                   movq    (%r12), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7f 22                         jg      0x20f <_JIT_ENTRY+0x20f>
// 1ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ef:  R_X86_64_64  .rodata.str1.1+0x83
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_NegativeRefcount
// 201: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 206: 4c 89 e2                      movq    %r12, %rdx
// 209: ff d0                         callq   *%rax
// 20b: 49 8b 04 24                   movq    (%r12), %rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 78 21                         js      0x234 <_JIT_ENTRY+0x234>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21d: ff d0                         callq   *%rax
// 21f: 49 ff 0c 24                   decq    (%r12)
// 223: 75 0f                         jne     0x234 <_JIT_ENTRY+0x234>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_Dealloc
// 22f: 4c 89 e7                      movq    %r12, %rdi
// 232: ff d0                         callq   *%rax
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _JIT_CONTINUE
// 23e: 48 89 df                      movq    %rbx, %rdi
// 241: 4c 89 f6                      movq    %r14, %rsi
// 244: 4c 89 fa                      movq    %r15, %rdx
// 247: 48 83 c4 08                   addq    $0x8, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: ff e0                         jmpq    *%rax
// 257: 49 89 c6                      movq    %rax, %r14
// 25a: eb 4d                         jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  PyExc_UnboundLocalError
// 266: 4c 8b 20                      movq    (%rax), %r12
// 269: 48 8b 03                      movq    (%rbx), %rax
// 26c: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _JIT_OPARG
// 27a: 0f b7 f0                      movzwl  %ax, %esi
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  PyTuple_GetItem
// 287: ff d0                         callq   *%rax
// 289: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000028b:  R_X86_64_64  .rodata.str1.1+0x39
// 293: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000295:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 29d: 4c 89 ff                      movq    %r15, %rdi
// 2a0: 4c 89 e6                      movq    %r12, %rsi
// 2a3: 48 89 c1                      movq    %rax, %rcx
// 2a6: 41 ff d0                      callq   *%r8
// 2a9: 49 29 de                      subq    %rbx, %r14
// 2ac: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b0: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2b8: 31 c0                         xorl    %eax, %eax
// 2ba: e9 9b fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2bf: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_FAST_code_body[704] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x9b, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_FAST_code_holes[30] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_FAST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_DELETE_GLOBAL
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_DELETE_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 0f 84 82 00 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 1ac: 49 83 c6 f0                   addq    $-0x10, %r14
// 1b0: 48 89 08                      movq    %rcx, (%rax)
// 1b3: 48 8b 03                      movq    (%rbx), %rax
// 1b6: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1ba: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c0:  R_X86_64_64  _JIT_OPARG
// 1c8: 0f b7 c9                      movzwl  %cx, %ecx
// 1cb: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  PyDict_DelItem
// 1da: 4c 89 e6                      movq    %r12, %rsi
// 1dd: ff d0                         callq   *%rax
// 1df: 85 c0                         testl   %eax, %eax
// 1e1: 74 64                         je      0x247 <_JIT_ENTRY+0x247>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  PyExc_KeyError
// 1ed: 48 8b 30                      movq    (%rax), %rsi
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _PyErr_ExceptionMatches
// 1fa: 4c 89 ff                      movq    %r15, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 2e                         je      0x231 <_JIT_ENTRY+0x231>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyExc_NameError
// 20d: 48 8b 30                      movq    (%rax), %rsi
// 210: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000212:  R_X86_64_64  .rodata.str1.1+0x39
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 224: 4c 89 ff                      movq    %r15, %rdi
// 227: 4c 89 e1                      movq    %r12, %rcx
// 22a: ff d0                         callq   *%rax
// 22c: eb 03                         jmp     0x231 <_JIT_ENTRY+0x231>
// 22e: 49 89 c6                      movq    %rax, %r14
// 231: 49 29 de                      subq    %rbx, %r14
// 234: 49 83 c6 b8                   addq    $-0x48, %r14
// 238: 49 c1 ee 03                   shrq    $0x3, %r14
// 23c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 240: 31 c0                         xorl    %eax, %eax
// 242: e9 13 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _JIT_CONTINUE
// 251: 48 89 df                      movq    %rbx, %rdi
// 254: 4c 89 f6                      movq    %r14, %rsi
// 257: 4c 89 fa                      movq    %r15, %rdx
// 25a: 48 83 c4 08                   addq    $0x8, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: ff e0                         jmpq    *%rax
// 26a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_GLOBAL_code_body[619] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x64, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x03, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x13, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_GLOBAL_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_GLOBAL_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_DELETE_NAME
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_DELETE_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 67                         je      0x20f <_JIT_ENTRY+0x20f>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 8b 03                      movq    (%rbx), %rax
// 1b2: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1b6: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  _JIT_OPARG
// 1c4: 0f b7 c9                      movzwl  %cx, %ecx
// 1c7: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1cc: 48 85 ff                      testq   %rdi, %rdi
// 1cf: 74 43                         je      0x214 <_JIT_ENTRY+0x214>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  PyObject_DelItem
// 1db: 4c 89 e6                      movq    %r12, %rsi
// 1de: ff d0                         callq   *%rax
// 1e0: 85 c0                         testl   %eax, %eax
// 1e2: 74 72                         je      0x256 <_JIT_ENTRY+0x256>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  PyExc_NameError
// 1ee: 48 8b 30                      movq    (%rax), %rsi
// 1f1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1+0x54
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 205: 4c 89 ff                      movq    %r15, %rdi
// 208: 4c 89 e1                      movq    %r12, %rcx
// 20b: ff d0                         callq   *%rax
// 20d: eb 31                         jmp     0x240 <_JIT_ENTRY+0x240>
// 20f: 49 89 c6                      movq    %rax, %r14
// 212: eb 2c                         jmp     0x240 <_JIT_ENTRY+0x240>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  PyExc_SystemError
// 21e: 48 8b 30                      movq    (%rax), %rsi
// 221: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000223:  R_X86_64_64  .rodata.str1.1+0x39
// 22b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000022d:  R_X86_64_64  _PyErr_Format
// 235: 4c 89 ff                      movq    %r15, %rdi
// 238: 4c 89 e1                      movq    %r12, %rcx
// 23b: 31 c0                         xorl    %eax, %eax
// 23d: 41 ff d0                      callq   *%r8
// 240: 49 29 de                      subq    %rbx, %r14
// 243: 49 83 c6 b8                   addq    $-0x48, %r14
// 247: 49 c1 ee 03                   shrq    $0x3, %r14
// 24b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24f: 31 c0                         xorl    %eax, %eax
// 251: e9 04 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _JIT_CONTINUE
// 260: 48 89 df                      movq    %rbx, %rdi
// 263: 4c 89 f6                      movq    %r14, %rsi
// 266: 4c 89 fa                      movq    %r15, %rdx
// 269: 48 83 c4 08                   addq    $0x8, %rsp
// 26d: 5b                            popq    %rbx
// 26e: 41 5c                         popq    %r12
// 270: 41 5d                         popq    %r13
// 272: 41 5e                         popq    %r14
// 274: 41 5f                         popq    %r15
// 276: 5d                            popq    %rbp
// 277: ff e0                         jmpq    *%rax
// 279: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_NAME_code_body[634] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x67, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x31, 0x49, 0x89, 0xc6, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x04, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_NAME_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_NAME_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_DELETE_SUBSCR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_DELETE_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 0f 84 ec 00 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 1a1: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a5: 4d 8b 7e e0                   movq    -0x20(%r14), %r15
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyObject_DelItem
// 1b3: 4c 89 ff                      movq    %r15, %rdi
// 1b6: 4c 89 e6                      movq    %r12, %rsi
// 1b9: ff d0                         callq   *%rax
// 1bb: 89 c5                         movl    %eax, %ebp
// 1bd: 49 8b 07                      movq    (%r15), %rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 7f 21                         jg      0x1e6 <_JIT_ENTRY+0x1e6>
// 1c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c7:  R_X86_64_64  .rodata.str1.1
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_NegativeRefcount
// 1d9: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 1de: 4c 89 fa                      movq    %r15, %rdx
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 8b 07                      movq    (%r15), %rax
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 78 20                         js      0x20a <_JIT_ENTRY+0x20a>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 ff 0f                      decq    (%r15)
// 1f9: 75 0f                         jne     0x20a <_JIT_ENTRY+0x20a>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 ff                      movq    %r15, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 49 8b 04 24                   movq    (%r12), %rax
// 20e: 48 85 c0                      testq   %rax, %rax
// 211: 7f 22                         jg      0x235 <_JIT_ENTRY+0x235>
// 213: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000215:  R_X86_64_64  .rodata.str1.1
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_NegativeRefcount
// 227: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 22c: 4c 89 e2                      movq    %r12, %rdx
// 22f: ff d0                         callq   *%rax
// 231: 49 8b 04 24                   movq    (%r12), %rax
// 235: 85 c0                         testl   %eax, %eax
// 237: 78 21                         js      0x25a <_JIT_ENTRY+0x25a>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 243: ff d0                         callq   *%rax
// 245: 49 ff 0c 24                   decq    (%r12)
// 249: 75 0f                         jne     0x25a <_JIT_ENTRY+0x25a>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: 4c 89 e7                      movq    %r12, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 261: 85 ed                         testl   %ebp, %ebp
// 263: 75 2f                         jne     0x294 <_JIT_ENTRY+0x294>
// 265: 49 83 c6 e0                   addq    $-0x20, %r14
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _JIT_CONTINUE
// 273: 48 89 df                      movq    %rbx, %rdi
// 276: 4c 89 f6                      movq    %r14, %rsi
// 279: 48 8b 14 24                   movq    (%rsp), %rdx
// 27d: 48 83 c4 08                   addq    $0x8, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: ff e0                         jmpq    *%rax
// 28d: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 294: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 298: 48 29 d8                      subq    %rbx, %rax
// 29b: 48 83 c0 a8                   addq    $-0x58, %rax
// 29f: 48 c1 e8 03                   shrq    $0x3, %rax
// 2a3: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2a6: 31 c0                         xorl    %eax, %eax
// 2a8: e9 ad fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2ad: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_SUBSCR_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x7e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x85, 0xed, 0x75, 0x2f, 0x49, 0x83, 0xc6, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_SUBSCR_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DELETE_SUBSCR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_DICT_MERGE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_DICT_MERGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f4                      movq    %rsi, %r12
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 12                         jne     0x33 <_JIT_ENTRY+0x33>
// 21: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 26: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 31: 75 37                         jne     0x6a <_JIT_ENTRY+0x6a>
// 33: 49 29 dc                      subq    %rbx, %r12
// 36: 49 83 c4 b8                   addq    $-0x48, %r12
// 3a: 49 c1 ec 03                   shrq    $0x3, %r12
// 3e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 42: 48 8b 03                      movq    (%rbx), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  _JIT_TARGET
// 4f: 89 c9                         movl    %ecx, %ecx
// 51: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 55: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5b: 48 83 c4 08                   addq    $0x8, %rsp
// 5f: 5b                            popq    %rbx
// 60: 41 5c                         popq    %r12
// 62: 41 5d                         popq    %r13
// 64: 41 5e                         popq    %r14
// 66: 41 5f                         popq    %r15
// 68: 5d                            popq    %rbp
// 69: c3                            retq
// 6a: 49 89 d6                      movq    %rdx, %r14
// 6d: 4d 8b 6c 24 f8                movq    -0x8(%r12), %r13
// 72: 48 8b 03                      movq    (%rbx), %rax
// 75: 48 8b 40 20                   movq    0x20(%rax), %rax
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  _JIT_OPARG
// 83: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 89: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _PySuper_Lookup
// 98: 48 89 ef                      movq    %rbp, %rdi
// 9b: 4c 89 ee                      movq    %r13, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: ff d0                         callq   *%rax
// a2: 48 89 04 24                   movq    %rax, (%rsp)
// a6: 49 8b 07                      movq    (%r15), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f 21                         jg      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c7: 4c 89 fa                      movq    %r15, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 07                      movq    (%r15), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 27                         js      0xfa <_JIT_ENTRY+0xfa>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0f                      decq    (%r15)
// e2: 75 16                         jne     0xfa <_JIT_ENTRY+0xfa>
// e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e6:  R_X86_64_64  PySuper_Type
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: ff d0                         callq   *%rax
// fa: 48 8b 45 00                   movq    (%rbp), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f 22                         jg      0x125 <_JIT_ENTRY+0x125>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11c: 48 89 ea                      movq    %rbp, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 21                         js      0x14a <_JIT_ENTRY+0x14a>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 48 ff 4d 00                   decq    (%rbp)
// 139: 75 0f                         jne     0x14a <_JIT_ENTRY+0x14a>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: 48 89 ef                      movq    %rbp, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 45 00                   movq    (%r13), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7f 22                         jg      0x175 <_JIT_ENTRY+0x175>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16c: 4c 89 ea                      movq    %r13, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 49 8b 45 00                   movq    (%r13), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17b: 78 21                         js      0x19e <_JIT_ENTRY+0x19e>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 187: ff d0                         callq   *%rax
// 189: 49 ff 4d 00                   decq    (%r13)
// 18d: 75 0f                         jne     0x19e <_JIT_ENTRY+0x19e>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 4c 89 ef                      movq    %r13, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 4d 8d 6c 24 e8                leaq    -0x18(%r12), %r13
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 0f 84 1a 01 00 00             je      0x2c6 <_JIT_ENTRY+0x2c6>
// 1ac: 49 89 6c 24 e8                movq    %rbp, -0x18(%r12)
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _JIT_OPARG
// 1bb: 0f b7 c0                      movzwl  %ax, %eax
// 1be: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 1c3: 29 c1                         subl    %eax, %ecx
// 1c5: f7 d0                         notl    %eax
// 1c7: 48 98                         cltq
// 1c9: 49 8b 7c c4 f0                movq    -0x10(%r12,%rax,8), %rdi
// 1ce: 48 63 c1                      movslq  %ecx, %rax
// 1d1: 4d 8b 7c c4 f0                movq    -0x10(%r12,%rax,8), %r15
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _PyDict_MergeEx
// 1e0: 48 89 ee                      movq    %rbp, %rsi
// 1e3: ba 02 00 00 00                movl    $0x2, %edx
// 1e8: ff d0                         callq   *%rax
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 73                         js      0x261 <_JIT_ENTRY+0x261>
// 1ee: 48 8b 45 00                   movq    (%rbp), %rax
// 1f2: 48 85 c0                      testq   %rax, %rax
// 1f5: 7f 22                         jg      0x219 <_JIT_ENTRY+0x219>
// 1f7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f9:  R_X86_64_64  .rodata.str1.1
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_NegativeRefcount
// 20b: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 210: 48 89 ea                      movq    %rbp, %rdx
// 213: ff d0                         callq   *%rax
// 215: 48 8b 45 00                   movq    (%rbp), %rax
// 219: 85 c0                         testl   %eax, %eax
// 21b: 78 21                         js      0x23e <_JIT_ENTRY+0x23e>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 227: ff d0                         callq   *%rax
// 229: 48 ff 4d 00                   decq    (%rbp)
// 22d: 75 0f                         jne     0x23e <_JIT_ENTRY+0x23e>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_Dealloc
// 239: 48 89 ef                      movq    %rbp, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_CONTINUE
// 248: 48 89 df                      movq    %rbx, %rdi
// 24b: 4c 89 ee                      movq    %r13, %rsi
// 24e: 4c 89 f2                      movq    %r14, %rdx
// 251: 48 83 c4 08                   addq    $0x8, %rsp
// 255: 5b                            popq    %rbx
// 256: 41 5c                         popq    %r12
// 258: 41 5d                         popq    %r13
// 25a: 41 5e                         popq    %r14
// 25c: 41 5f                         popq    %r15
// 25e: 5d                            popq    %rbp
// 25f: ff e0                         jmpq    *%rax
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _PyEval_FormatKwargsError
// 26b: 4c 89 f7                      movq    %r14, %rdi
// 26e: 4c 89 fe                      movq    %r15, %rsi
// 271: 48 89 ea                      movq    %rbp, %rdx
// 274: ff d0                         callq   *%rax
// 276: 48 8b 45 00                   movq    (%rbp), %rax
// 27a: 48 85 c0                      testq   %rax, %rax
// 27d: 7f 22                         jg      0x2a1 <_JIT_ENTRY+0x2a1>
// 27f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000281:  R_X86_64_64  .rodata.str1.1
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_NegativeRefcount
// 293: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 298: 48 89 ea                      movq    %rbp, %rdx
// 29b: ff d0                         callq   *%rax
// 29d: 48 8b 45 00                   movq    (%rbp), %rax
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 78 21                         js      0x2c6 <_JIT_ENTRY+0x2c6>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2af: ff d0                         callq   *%rax
// 2b1: 48 ff 4d 00                   decq    (%rbp)
// 2b5: 75 0f                         jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_Dealloc
// 2c1: 48 89 ef                      movq    %rbp, %rdi
// 2c4: ff d0                         callq   *%rax
// 2c6: 49 29 dd                      subq    %rbx, %r13
// 2c9: 49 83 c5 b8                   addq    $-0x48, %r13
// 2cd: 49 c1 ed 03                   shrq    $0x3, %r13
// 2d1: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2d5: 31 c0                         xorl    %eax, %eax
// 2d7: e9 7f fd ff ff                jmp     0x5b <_JIT_ENTRY+0x5b>
// 2dc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DICT_MERGE_code_body[733] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x12, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6c, 0x24, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6c, 0x24, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x1a, 0x01, 0x00, 0x00, 0x49, 0x89, 0x6c, 0x24, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc4, 0xf0, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x7c, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x73, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x7f, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DICT_MERGE_code_holes[30] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DICT_MERGE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_DICT_UPDATE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_DICT_UPDATE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f4                      movq    %rsi, %r12
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 1f: 75 12                         jne     0x33 <_JIT_ENTRY+0x33>
// 21: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 26: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 31: 75 37                         jne     0x6a <_JIT_ENTRY+0x6a>
// 33: 49 29 dc                      subq    %rbx, %r12
// 36: 49 83 c4 b8                   addq    $-0x48, %r12
// 3a: 49 c1 ec 03                   shrq    $0x3, %r12
// 3e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 42: 48 8b 03                      movq    (%rbx), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  _JIT_TARGET
// 4f: 89 c9                         movl    %ecx, %ecx
// 51: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 55: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5b: 48 83 c4 08                   addq    $0x8, %rsp
// 5f: 5b                            popq    %rbx
// 60: 41 5c                         popq    %r12
// 62: 41 5d                         popq    %r13
// 64: 41 5e                         popq    %r14
// 66: 41 5f                         popq    %r15
// 68: 5d                            popq    %rbp
// 69: c3                            retq
// 6a: 48 89 14 24                   movq    %rdx, (%rsp)
// 6e: 4d 8b 6c 24 f8                movq    -0x8(%r12), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 49 89 c7                      movq    %rax, %r15
// a6: 49 8b 06                      movq    (%r14), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f 21                         jg      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c7: 4c 89 f2                      movq    %r14, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 06                      movq    (%r14), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 27                         js      0xfa <_JIT_ENTRY+0xfa>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0e                      decq    (%r14)
// e2: 75 16                         jne     0xfa <_JIT_ENTRY+0xfa>
// e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e6:  R_X86_64_64  PySuper_Type
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: ff d0                         callq   *%rax
// fa: 48 8b 45 00                   movq    (%rbp), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f 22                         jg      0x125 <_JIT_ENTRY+0x125>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11c: 48 89 ea                      movq    %rbp, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 4d 89 fe                      movq    %r15, %r14
// 12a: 78 21                         js      0x14d <_JIT_ENTRY+0x14d>
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 136: ff d0                         callq   *%rax
// 138: 48 ff 4d 00                   decq    (%rbp)
// 13c: 75 0f                         jne     0x14d <_JIT_ENTRY+0x14d>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_Dealloc
// 148: 48 89 ef                      movq    %rbp, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 49 8b 45 00                   movq    (%r13), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 22                         jg      0x178 <_JIT_ENTRY+0x178>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16f: 4c 89 ea                      movq    %r13, %rdx
// 172: ff d0                         callq   *%rax
// 174: 49 8b 45 00                   movq    (%r13), %rax
// 178: 85 c0                         testl   %eax, %eax
// 17a: 78 21                         js      0x19d <_JIT_ENTRY+0x19d>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 186: ff d0                         callq   *%rax
// 188: 49 ff 4d 00                   decq    (%r13)
// 18c: 75 0f                         jne     0x19d <_JIT_ENTRY+0x19d>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: 4c 89 ef                      movq    %r13, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 4d 8d 6c 24 e8                leaq    -0x18(%r12), %r13
// 1a2: 4d 85 f6                      testq   %r14, %r14
// 1a5: 0f 84 43 01 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 1ab: 4d 89 74 24 e8                movq    %r14, -0x18(%r12)
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: f7 d0                         notl    %eax
// 1bc: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1c1: 48 98                         cltq
// 1c3: 49 8b 7c c4 f0                movq    -0x10(%r12,%rax,8), %rdi
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  PyDict_Update
// 1d2: 4c 89 f6                      movq    %r14, %rsi
// 1d5: ff d0                         callq   *%rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 71                         js      0x24c <_JIT_ENTRY+0x24c>
// 1db: 49 8b 06                      movq    (%r14), %rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 7f 21                         jg      0x204 <_JIT_ENTRY+0x204>
// 1e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NegativeRefcount
// 1f7: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 1fc: 4c 89 f2                      movq    %r14, %rdx
// 1ff: ff d0                         callq   *%rax
// 201: 49 8b 06                      movq    (%r14), %rax
// 204: 85 c0                         testl   %eax, %eax
// 206: 78 20                         js      0x228 <_JIT_ENTRY+0x228>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 212: ff d0                         callq   *%rax
// 214: 49 ff 0e                      decq    (%r14)
// 217: 75 0f                         jne     0x228 <_JIT_ENTRY+0x228>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _Py_Dealloc
// 223: 4c 89 f7                      movq    %r14, %rdi
// 226: ff d0                         callq   *%rax
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_CONTINUE
// 232: 48 89 df                      movq    %rbx, %rdi
// 235: 4c 89 ee                      movq    %r13, %rsi
// 238: 48 8b 14 24                   movq    (%rsp), %rdx
// 23c: 48 83 c4 08                   addq    $0x8, %rsp
// 240: 5b                            popq    %rbx
// 241: 41 5c                         popq    %r12
// 243: 41 5d                         popq    %r13
// 245: 41 5e                         popq    %r14
// 247: 41 5f                         popq    %r15
// 249: 5d                            popq    %rbp
// 24a: ff e0                         jmpq    *%rax
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  PyExc_AttributeError
// 256: 48 8b 30                      movq    (%rax), %rsi
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _PyErr_ExceptionMatches
// 263: 4c 8b 3c 24                   movq    (%rsp), %r15
// 267: 4c 89 ff                      movq    %r15, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 74 31                         je      0x2a1 <_JIT_ENTRY+0x2a1>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  PyExc_TypeError
// 27a: 48 8b 30                      movq    (%rax), %rsi
// 27d: 49 8b 46 08                   movq    0x8(%r14), %rax
// 281: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 285: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000287:  R_X86_64_64  .rodata.str1.1+0x39
// 28f: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000291:  R_X86_64_64  _PyErr_Format
// 299: 4c 89 ff                      movq    %r15, %rdi
// 29c: 31 c0                         xorl    %eax, %eax
// 29e: 41 ff d0                      callq   *%r8
// 2a1: 49 8b 06                      movq    (%r14), %rax
// 2a4: 48 85 c0                      testq   %rax, %rax
// 2a7: 7f 21                         jg      0x2ca <_JIT_ENTRY+0x2ca>
// 2a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ab:  R_X86_64_64  .rodata.str1.1
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_NegativeRefcount
// 2bd: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 2c2: 4c 89 f2                      movq    %r14, %rdx
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 8b 06                      movq    (%r14), %rax
// 2ca: 85 c0                         testl   %eax, %eax
// 2cc: 78 20                         js      0x2ee <_JIT_ENTRY+0x2ee>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d8: ff d0                         callq   *%rax
// 2da: 49 ff 0e                      decq    (%r14)
// 2dd: 75 0f                         jne     0x2ee <_JIT_ENTRY+0x2ee>
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_Dealloc
// 2e9: 4c 89 f7                      movq    %r14, %rdi
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 29 dd                      subq    %rbx, %r13
// 2f1: 49 83 c5 b8                   addq    $-0x48, %r13
// 2f5: 49 c1 ed 03                   shrq    $0x3, %r13
// 2f9: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2fd: 31 c0                         xorl    %eax, %eax
// 2ff: e9 57 fd ff ff                jmp     0x5b <_JIT_ENTRY+0x5b>
// 304: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DICT_UPDATE_code_body[773] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x12, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6c, 0x24, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4d, 0x89, 0xfe, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6c, 0x24, 0xe8, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x74, 0x24, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x71, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x46, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x57, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DICT_UPDATE_code_holes[34] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_DICT_UPDATE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_END_SEND
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_END_SEND.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 74 7f                         je      0x227 <_JIT_ENTRY+0x227>
// 1a8: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 1ac: 4d 8b 6e e0                   movq    -0x20(%r14), %r13
// 1b0: 49 8b 45 00                   movq    (%r13), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7f 22                         jg      0x1db <_JIT_ENTRY+0x1db>
// 1b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_NegativeRefcount
// 1cd: be 66 00 00 00                movl    $0x66, %esi
// 1d2: 4c 89 ea                      movq    %r13, %rdx
// 1d5: ff d0                         callq   *%rax
// 1d7: 49 8b 45 00                   movq    (%r13), %rax
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 78 21                         js      0x200 <_JIT_ENTRY+0x200>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 ff 4d 00                   decq    (%r13)
// 1ef: 75 0f                         jne     0x200 <_JIT_ENTRY+0x200>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 ef                      movq    %r13, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 49 89 6e e0                   movq    %rbp, -0x20(%r14)
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _JIT_CONTINUE
// 20e: 48 89 df                      movq    %rbx, %rdi
// 211: 4c 89 e6                      movq    %r12, %rsi
// 214: 4c 89 fa                      movq    %r15, %rdx
// 217: 48 83 c4 08                   addq    $0x8, %rsp
// 21b: 5b                            popq    %rbx
// 21c: 41 5c                         popq    %r12
// 21e: 41 5d                         popq    %r13
// 220: 41 5e                         popq    %r14
// 222: 41 5f                         popq    %r15
// 224: 5d                            popq    %rbp
// 225: ff e0                         jmpq    *%rax
// 227: 49 29 dc                      subq    %rbx, %r12
// 22a: 49 83 c4 b8                   addq    $-0x48, %r12
// 22e: 49 c1 ec 03                   shrq    $0x3, %r12
// 232: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 236: 31 c0                         xorl    %eax, %eax
// 238: e9 1d fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 23d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_END_SEND_code_body[574] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x7f, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x8b, 0x6e, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x1d, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_END_SEND_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_END_SEND_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_EXIT_INIT_CHECK
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_EXIT_INIT_CHECK.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 76 e8                   leaq    -0x18(%r14), %rsi
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 46                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 1a8: 48 89 0e                      movq    %rcx, (%rsi)
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_NoneStruct
// 1b5: 48 39 c1                      cmpq    %rax, %rcx
// 1b8: 74 49                         je      0x203 <_JIT_ENTRY+0x203>
// 1ba: 49 83 c6 f0                   addq    $-0x10, %r14
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyExc_TypeError
// 1c8: 48 8b 38                      movq    (%rax), %rdi
// 1cb: 48 8b 41 08                   movq    0x8(%rcx), %rax
// 1cf: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1d3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1+0x39
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  PyErr_Format
// 1e7: 31 c0                         xorl    %eax, %eax
// 1e9: ff d1                         callq   *%rcx
// 1eb: 4c 89 f6                      movq    %r14, %rsi
// 1ee: 48 29 de                      subq    %rbx, %rsi
// 1f1: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1f5: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1f9: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1fc: 31 c0                         xorl    %eax, %eax
// 1fe: e9 57 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _JIT_CONTINUE
// 20d: 48 89 df                      movq    %rbx, %rdi
// 210: 4c 89 fa                      movq    %r15, %rdx
// 213: 48 83 c4 08                   addq    $0x8, %rsp
// 217: 5b                            popq    %rbx
// 218: 41 5c                         popq    %r12
// 21a: 41 5d                         popq    %r13
// 21c: 41 5e                         popq    %r14
// 21e: 41 5f                         popq    %r15
// 220: 5d                            popq    %rbp
// 221: ff e0                         jmpq    *%rax
// 223: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_EXIT_INIT_CHECK_code_body[548] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x46, 0x48, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc1, 0x74, 0x49, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x48, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x4c, 0x89, 0xf6, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x57, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_EXIT_INIT_CHECK_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_EXIT_INIT_CHECK_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_EXIT_TRACE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_EXIT_TRACE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 48 39 6e e8                   cmpq    %rbp, -0x18(%rsi)
// 1f: 0f 85 50 01 00 00             jne     0x175 <_JIT_ENTRY+0x175>
// 25: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 29: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 3b 01 00 00             je      0x175 <_JIT_ENTRY+0x175>
// 3a: 4d 8b 7e f8                   movq    -0x8(%r14), %r15
// 3e: 48 8b 03                      movq    (%rbx), %rax
// 41: 48 8b 40 20                   movq    0x20(%rax), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  _JIT_OPARG
// 4f: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 55: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _PySuper_Lookup
// 64: 4c 89 ef                      movq    %r13, %rdi
// 67: 4c 89 fe                      movq    %r15, %rsi
// 6a: 31 c9                         xorl    %ecx, %ecx
// 6c: ff d0                         callq   *%rax
// 6e: 49 89 c4                      movq    %rax, %r12
// 71: 48 8b 45 00                   movq    (%rbp), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7f 22                         jg      0x9c <_JIT_ENTRY+0x9c>
// 7a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 93: 48 89 ea                      movq    %rbp, %rdx
// 96: ff d0                         callq   *%rax
// 98: 48 8b 45 00                   movq    (%rbp), %rax
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 28                         js      0xc8 <_JIT_ENTRY+0xc8>
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// aa: ff d0                         callq   *%rax
// ac: 48 ff 4d 00                   decq    (%rbp)
// b0: 75 16                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b4:  R_X86_64_64  PySuper_Type
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _Py_Dealloc
// c6: ff d0                         callq   *%rax
// c8: 49 8b 45 00                   movq    (%r13), %rax
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 7f 22                         jg      0xf3 <_JIT_ENTRY+0xf3>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 21                         js      0x118 <_JIT_ENTRY+0x118>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 75 0f                         jne     0x118 <_JIT_ENTRY+0x118>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: 4c 89 ef                      movq    %r13, %rdi
// 116: ff d0                         callq   *%rax
// 118: 49 8b 07                      movq    (%r15), %rax
// 11b: 48 85 c0                      testq   %rax, %rax
// 11e: 7f 21                         jg      0x141 <_JIT_ENTRY+0x141>
// 120: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000122:  R_X86_64_64  .rodata.str1.1
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 49 8b 07                      movq    (%r15), %rax
// 141: 85 c0                         testl   %eax, %eax
// 143: 78 20                         js      0x165 <_JIT_ENTRY+0x165>
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14f: ff d0                         callq   *%rax
// 151: 49 ff 0f                      decq    (%r15)
// 154: 75 0f                         jne     0x165 <_JIT_ENTRY+0x165>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_Dealloc
// 160: 4c 89 ff                      movq    %r15, %rdi
// 163: ff d0                         callq   *%rax
// 165: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 169: 4d 85 e4                      testq   %r12, %r12
// 16c: 74 3e                         je      0x1ac <_JIT_ENTRY+0x1ac>
// 16e: 49 83 c6 f0                   addq    $-0x10, %r14
// 172: 4c 89 20                      movq    %r12, (%rax)
// 175: 49 29 de                      subq    %rbx, %r14
// 178: 49 83 c6 b8                   addq    $-0x48, %r14
// 17c: 49 c1 ee 03                   shrq    $0x3, %r14
// 180: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 184: 48 8b 03                      movq    (%rbx), %rax
// 187: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000189:  R_X86_64_64  _JIT_TARGET
// 191: 89 c9                         movl    %ecx, %ecx
// 193: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 197: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19d: 48 83 c4 08                   addq    $0x8, %rsp
// 1a1: 5b                            popq    %rbx
// 1a2: 41 5c                         popq    %r12
// 1a4: 41 5d                         popq    %r13
// 1a6: 41 5e                         popq    %r14
// 1a8: 41 5f                         popq    %r15
// 1aa: 5d                            popq    %rbp
// 1ab: c3                            retq
// 1ac: 48 29 d8                      subq    %rbx, %rax
// 1af: 48 83 c0 b8                   addq    $-0x48, %rax
// 1b3: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ba: 31 c0                         xorl    %eax, %eax
// 1bc: eb df                         jmp     0x19d <_JIT_ENTRY+0x19d>
// 1be: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_EXIT_TRACE_code_body[447] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x50, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf0, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x3b, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x7e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_EXIT_TRACE_code_holes[18] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_EXIT_TRACE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_FORMAT_SIMPLE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_FORMAT_SIMPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 ad 00 00 00             je      0x252 <_JIT_ENTRY+0x252>
// 1a5: 4d 89 65 00                   movq    %r12, (%r13)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyUnicode_Type
// 1b3: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1b8: 74 6c                         je      0x226 <_JIT_ENTRY+0x226>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  PyObject_Format
// 1c4: 4c 89 e7                      movq    %r12, %rdi
// 1c7: 31 f6                         xorl    %esi, %esi
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 89 c7                      movq    %rax, %r15
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 7f 22                         jg      0x1f9 <_JIT_ENTRY+0x1f9>
// 1d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d9:  R_X86_64_64  .rodata.str1.1
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_NegativeRefcount
// 1eb: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 1f0: 4c 89 e2                      movq    %r12, %rdx
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 8b 04 24                   movq    (%r12), %rax
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 21                         js      0x21e <_JIT_ENTRY+0x21e>
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 207: ff d0                         callq   *%rax
// 209: 49 ff 0c 24                   decq    (%r12)
// 20d: 75 0f                         jne     0x21e <_JIT_ENTRY+0x21e>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_Dealloc
// 219: 4c 89 e7                      movq    %r12, %rdi
// 21c: ff d0                         callq   *%rax
// 21e: 4d 89 fc                      movq    %r15, %r12
// 221: 4d 85 ff                      testq   %r15, %r15
// 224: 74 2c                         je      0x252 <_JIT_ENTRY+0x252>
// 226: 49 83 c6 f0                   addq    $-0x10, %r14
// 22a: 4d 89 65 00                   movq    %r12, (%r13)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_CONTINUE
// 238: 48 89 df                      movq    %rbx, %rdi
// 23b: 4c 89 f6                      movq    %r14, %rsi
// 23e: 48 8b 14 24                   movq    (%rsp), %rdx
// 242: 48 83 c4 08                   addq    $0x8, %rsp
// 246: 5b                            popq    %rbx
// 247: 41 5c                         popq    %r12
// 249: 41 5d                         popq    %r13
// 24b: 41 5e                         popq    %r14
// 24d: 41 5f                         popq    %r15
// 24f: 5d                            popq    %rbp
// 250: ff e0                         jmpq    *%rax
// 252: 49 29 dd                      subq    %rbx, %r13
// 255: 49 83 c5 b8                   addq    $-0x48, %r13
// 259: 49 c1 ed 03                   shrq    $0x3, %r13
// 25d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 261: 31 c0                         xorl    %eax, %eax
// 263: e9 f2 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 268: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_FORMAT_SIMPLE_code_body[617] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4d, 0x85, 0xff, 0x74, 0x2c, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xf2, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_FORMAT_SIMPLE_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_FORMAT_SIMPLE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_FORMAT_WITH_SPEC
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_FORMAT_WITH_SPEC.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 85 ed                      testq   %rbp, %rbp
// 1a2: 0f 84 ed 00 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 1a8: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 1ac: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  PyObject_Format
// 1ba: 4c 89 e7                      movq    %r12, %rdi
// 1bd: 48 89 ee                      movq    %rbp, %rsi
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 89 c5                      movq    %rax, %r13
// 1c5: 49 8b 04 24                   movq    (%r12), %rax
// 1c9: 48 85 c0                      testq   %rax, %rax
// 1cc: 7f 22                         jg      0x1f0 <_JIT_ENTRY+0x1f0>
// 1ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d0:  R_X86_64_64  .rodata.str1.1
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_NegativeRefcount
// 1e2: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 1e7: 4c 89 e2                      movq    %r12, %rdx
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 8b 04 24                   movq    (%r12), %rax
// 1f0: 85 c0                         testl   %eax, %eax
// 1f2: 78 21                         js      0x215 <_JIT_ENTRY+0x215>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 49 ff 0c 24                   decq    (%r12)
// 204: 75 0f                         jne     0x215 <_JIT_ENTRY+0x215>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_Dealloc
// 210: 4c 89 e7                      movq    %r12, %rdi
// 213: ff d0                         callq   *%rax
// 215: 48 8b 45 00                   movq    (%rbp), %rax
// 219: 48 85 c0                      testq   %rax, %rax
// 21c: 7f 22                         jg      0x240 <_JIT_ENTRY+0x240>
// 21e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000220:  R_X86_64_64  .rodata.str1.1
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_NegativeRefcount
// 232: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 237: 48 89 ea                      movq    %rbp, %rdx
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 45 00                   movq    (%rbp), %rax
// 240: 85 c0                         testl   %eax, %eax
// 242: 78 21                         js      0x265 <_JIT_ENTRY+0x265>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24e: ff d0                         callq   *%rax
// 250: 48 ff 4d 00                   decq    (%rbp)
// 254: 75 0f                         jne     0x265 <_JIT_ENTRY+0x265>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_Dealloc
// 260: 48 89 ef                      movq    %rbp, %rdi
// 263: ff d0                         callq   *%rax
// 265: 4d 85 ed                      testq   %r13, %r13
// 268: 74 34                         je      0x29e <_JIT_ENTRY+0x29e>
// 26a: 4d 89 6e e0                   movq    %r13, -0x20(%r14)
// 26e: 49 83 c6 e8                   addq    $-0x18, %r14
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _JIT_CONTINUE
// 27c: 48 89 df                      movq    %rbx, %rdi
// 27f: 4c 89 f6                      movq    %r14, %rsi
// 282: 4c 89 fa                      movq    %r15, %rdx
// 285: 48 83 c4 08                   addq    $0x8, %rsp
// 289: 5b                            popq    %rbx
// 28a: 41 5c                         popq    %r12
// 28c: 41 5d                         popq    %r13
// 28e: 41 5e                         popq    %r14
// 290: 41 5f                         popq    %r15
// 292: 5d                            popq    %rbp
// 293: ff e0                         jmpq    *%rax
// 295: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 29c: eb 07                         jmp     0x2a5 <_JIT_ENTRY+0x2a5>
// 29e: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 2a5: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2a9: 48 29 d8                      subq    %rbx, %rax
// 2ac: 48 83 c0 a8                   addq    $-0x58, %rax
// 2b0: 48 c1 e8 03                   shrq    $0x3, %rax
// 2b4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2b7: 31 c0                         xorl    %eax, %eax
// 2b9: e9 9c fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2be: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_FORMAT_WITH_SPEC_code_body[703] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x8b, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x34, 0x4d, 0x89, 0x6e, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x07, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x9c, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_FORMAT_WITH_SPEC_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_FORMAT_WITH_SPEC_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_FOR_ITER_TIER_TWO.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f4                      movq    %rsi, %r12
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 12                         jne     0x33 <_JIT_ENTRY+0x33>
// 21: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 26: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 31: 75 3a                         jne     0x6d <_JIT_ENTRY+0x6d>
// 33: 4d 89 e7                      movq    %r12, %r15
// 36: 49 29 df                      subq    %rbx, %r15
// 39: 49 83 c7 b8                   addq    $-0x48, %r15
// 3d: 49 c1 ef 03                   shrq    $0x3, %r15
// 41: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 45: 48 8b 03                      movq    (%rbx), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_TARGET
// 52: 89 c9                         movl    %ecx, %ecx
// 54: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 58: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5e: 48 83 c4 08                   addq    $0x8, %rsp
// 62: 5b                            popq    %rbx
// 63: 41 5c                         popq    %r12
// 65: 41 5d                         popq    %r13
// 67: 41 5e                         popq    %r14
// 69: 41 5f                         popq    %r15
// 6b: 5d                            popq    %rbp
// 6c: c3                            retq
// 6d: 49 89 d6                      movq    %rdx, %r14
// 70: 4d 8b 6c 24 f8                movq    -0x8(%r12), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 48 89 04 24                   movq    %rax, (%rsp)
// a9: 49 8b 07                      movq    (%r15), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 21                         jg      0xd2 <_JIT_ENTRY+0xd2>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 fa                      movq    %r15, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 07                      movq    (%r15), %rax
// d2: 85 c0                         testl   %eax, %eax
// d4: 78 27                         js      0xfd <_JIT_ENTRY+0xfd>
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e0: ff d0                         callq   *%rax
// e2: 49 ff 0f                      decq    (%r15)
// e5: 75 16                         jne     0xfd <_JIT_ENTRY+0xfd>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  PySuper_Type
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_Dealloc
// fb: ff d0                         callq   *%rax
// fd: 48 8b 45 00                   movq    (%rbp), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f 22                         jg      0x128 <_JIT_ENTRY+0x128>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11f: 48 89 ea                      movq    %rbp, %rdx
// 122: ff d0                         callq   *%rax
// 124: 48 8b 45 00                   movq    (%rbp), %rax
// 128: 85 c0                         testl   %eax, %eax
// 12a: 78 21                         js      0x14d <_JIT_ENTRY+0x14d>
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 136: ff d0                         callq   *%rax
// 138: 48 ff 4d 00                   decq    (%rbp)
// 13c: 75 0f                         jne     0x14d <_JIT_ENTRY+0x14d>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_Dealloc
// 148: 48 89 ef                      movq    %rbp, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 49 8b 45 00                   movq    (%r13), %rax
// 151: 48 85 c0                      testq   %rax, %rax
// 154: 7f 22                         jg      0x178 <_JIT_ENTRY+0x178>
// 156: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000158:  R_X86_64_64  .rodata.str1.1
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_NegativeRefcount
// 16a: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16f: 4c 89 ea                      movq    %r13, %rdx
// 172: ff d0                         callq   *%rax
// 174: 49 8b 45 00                   movq    (%r13), %rax
// 178: 85 c0                         testl   %eax, %eax
// 17a: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17e: 78 21                         js      0x1a1 <_JIT_ENTRY+0x1a1>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: ff d0                         callq   *%rax
// 18c: 49 ff 4d 00                   decq    (%r13)
// 190: 75 0f                         jne     0x1a1 <_JIT_ENTRY+0x1a1>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_Dealloc
// 19c: 4c 89 ef                      movq    %r13, %rdi
// 19f: ff d0                         callq   *%rax
// 1a1: 4d 8d 7c 24 e8                leaq    -0x18(%r12), %r15
// 1a6: 48 85 ed                      testq   %rbp, %rbp
// 1a9: 74 45                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 1ab: 4d 8d 6c 24 f0                leaq    -0x10(%r12), %r13
// 1b0: 49 89 2f                      movq    %rbp, (%r15)
// 1b3: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1b7: 48 89 ef                      movq    %rbp, %rdi
// 1ba: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 74 44                         je      0x209 <_JIT_ENTRY+0x209>
// 1c5: 49 83 c4 f8                   addq    $-0x8, %r12
// 1c9: 49 89 45 00                   movq    %rax, (%r13)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_CONTINUE
// 1d7: 48 89 df                      movq    %rbx, %rdi
// 1da: 4c 89 e6                      movq    %r12, %rsi
// 1dd: 4c 89 f2                      movq    %r14, %rdx
// 1e0: 48 83 c4 08                   addq    $0x8, %rsp
// 1e4: 5b                            popq    %rbx
// 1e5: 41 5c                         popq    %r12
// 1e7: 41 5d                         popq    %r13
// 1e9: 41 5e                         popq    %r14
// 1eb: 41 5f                         popq    %r15
// 1ed: 5d                            popq    %rbp
// 1ee: ff e0                         jmpq    *%rax
// 1f0: 4d 89 fd                      movq    %r15, %r13
// 1f3: 49 29 dd                      subq    %rbx, %r13
// 1f6: 49 83 c5 b8                   addq    $-0x48, %r13
// 1fa: 49 c1 ed 03                   shrq    $0x3, %r13
// 1fe: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 202: 31 c0                         xorl    %eax, %eax
// 204: e9 55 fe ff ff                jmp     0x5e <_JIT_ENTRY+0x5e>
// 209: 49 8b 46 68                   movq    0x68(%r14), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 74 36                         je      0x248 <_JIT_ENTRY+0x248>
// 212: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 217: 74 2f                         je      0x248 <_JIT_ENTRY+0x248>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  PyExc_StopIteration
// 223: 48 8b 30                      movq    (%rax), %rsi
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _PyErr_ExceptionMatches
// 230: 4c 89 f7                      movq    %r14, %rdi
// 233: ff d0                         callq   *%rax
// 235: 85 c0                         testl   %eax, %eax
// 237: 74 ba                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _PyErr_Clear
// 243: 4c 89 f7                      movq    %r14, %rdi
// 246: ff d0                         callq   *%rax
// 248: 48 8b 45 00                   movq    (%rbp), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 7f 22                         jg      0x273 <_JIT_ENTRY+0x273>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 26a: 48 89 ea                      movq    %rbp, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 48 8b 45 00                   movq    (%rbp), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 0f 88 bb fd ff ff             js      0x36 <_JIT_ENTRY+0x36>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 285: ff d0                         callq   *%rax
// 287: 48 ff 4d 00                   decq    (%rbp)
// 28b: 0f 85 a5 fd ff ff             jne     0x36 <_JIT_ENTRY+0x36>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_Dealloc
// 29b: 48 89 ef                      movq    %rbp, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: e9 91 fd ff ff                jmp     0x36 <_JIT_ENTRY+0x36>
// 2a5: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_FOR_ITER_TIER_TWO_code_body[678] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x12, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x3a, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6c, 0x24, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x7c, 0x24, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x45, 0x4d, 0x8d, 0x6c, 0x24, 0xf0, 0x49, 0x89, 0x2f, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x89, 0xef, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x44, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x55, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xbb, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xa5, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x91, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_FOR_ITER_TIER_TWO_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_FOR_ITER_TIER_TWO_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GET_AITER
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GET_AITER.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 df                      subq    %rbx, %r15
// 35: 49 83 c7 b8                   addq    $-0x48, %r15
// 39: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d6                      movq    %rdx, %r14
// 6c: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 0f 84 c6 01 00 00             je      0x372 <_JIT_ENTRY+0x372>
// 1ac: 49 89 2c 24                   movq    %rbp, (%r12)
// 1b0: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1b4: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1b8: 48 85 c9                      testq   %rcx, %rcx
// 1bb: 0f 84 b5 00 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 1c1: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1c5: 48 85 c9                      testq   %rcx, %rcx
// 1c8: 0f 84 a8 00 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 1ce: 48 89 ef                      movq    %rbp, %rdi
// 1d1: ff d1                         callq   *%rcx
// 1d3: 49 89 c5                      movq    %rax, %r13
// 1d6: 48 8b 45 00                   movq    (%rbp), %rax
// 1da: 48 85 c0                      testq   %rax, %rax
// 1dd: 7f 22                         jg      0x201 <_JIT_ENTRY+0x201>
// 1df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e1:  R_X86_64_64  .rodata.str1.1
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_NegativeRefcount
// 1f3: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 1f8: 48 89 ea                      movq    %rbp, %rdx
// 1fb: ff d0                         callq   *%rax
// 1fd: 48 8b 45 00                   movq    (%rbp), %rax
// 201: 85 c0                         testl   %eax, %eax
// 203: 78 21                         js      0x226 <_JIT_ENTRY+0x226>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20f: ff d0                         callq   *%rax
// 211: 48 ff 4d 00                   decq    (%rbp)
// 215: 75 0f                         jne     0x226 <_JIT_ENTRY+0x226>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 48 89 ef                      movq    %rbp, %rdi
// 224: ff d0                         callq   *%rax
// 226: 4d 85 ed                      testq   %r13, %r13
// 229: 0f 84 43 01 00 00             je      0x372 <_JIT_ENTRY+0x372>
// 22f: 49 8b 45 08                   movq    0x8(%r13), %rax
// 233: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 237: 48 85 c9                      testq   %rcx, %rcx
// 23a: 0f 84 bd 00 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 240: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 245: 0f 84 b2 00 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 24b: 49 83 c7 f0                   addq    $-0x10, %r15
// 24f: 4d 89 2c 24                   movq    %r13, (%r12)
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _JIT_CONTINUE
// 25d: 48 89 df                      movq    %rbx, %rdi
// 260: 4c 89 fe                      movq    %r15, %rsi
// 263: 4c 89 f2                      movq    %r14, %rdx
// 266: 48 83 c4 08                   addq    $0x8, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: ff e0                         jmpq    *%rax
// 276: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000278:  R_X86_64_64  PyExc_TypeError
// 280: 48 8b 31                      movq    (%rcx), %rsi
// 283: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 287: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000289:  R_X86_64_64  .rodata.str1.1+0x39
// 291: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000293:  R_X86_64_64  _PyErr_Format
// 29b: 4c 89 f7                      movq    %r14, %rdi
// 29e: 31 c0                         xorl    %eax, %eax
// 2a0: 41 ff d0                      callq   *%r8
// 2a3: 48 8b 45 00                   movq    (%rbp), %rax
// 2a7: 48 85 c0                      testq   %rax, %rax
// 2aa: 7f 22                         jg      0x2ce <_JIT_ENTRY+0x2ce>
// 2ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ae:  R_X86_64_64  .rodata.str1.1
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_NegativeRefcount
// 2c0: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 2c5: 48 89 ea                      movq    %rbp, %rdx
// 2c8: ff d0                         callq   *%rax
// 2ca: 48 8b 45 00                   movq    (%rbp), %rax
// 2ce: 85 c0                         testl   %eax, %eax
// 2d0: 0f 88 9c 00 00 00             js      0x372 <_JIT_ENTRY+0x372>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e0: ff d0                         callq   *%rax
// 2e2: 48 ff 4d 00                   decq    (%rbp)
// 2e6: 0f 85 86 00 00 00             jne     0x372 <_JIT_ENTRY+0x372>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_Dealloc
// 2f6: 48 89 ef                      movq    %rbp, %rdi
// 2f9: ff d0                         callq   *%rax
// 2fb: eb 75                         jmp     0x372 <_JIT_ENTRY+0x372>
// 2fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ff:  R_X86_64_64  PyExc_TypeError
// 307: 48 8b 31                      movq    (%rcx), %rsi
// 30a: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 30e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000310:  R_X86_64_64  .rodata.str1.1+0x7a
// 318: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000031a:  R_X86_64_64  _PyErr_Format
// 322: 4c 89 f7                      movq    %r14, %rdi
// 325: 31 c0                         xorl    %eax, %eax
// 327: 41 ff d0                      callq   *%r8
// 32a: 49 8b 45 00                   movq    (%r13), %rax
// 32e: 48 85 c0                      testq   %rax, %rax
// 331: 7f 22                         jg      0x355 <_JIT_ENTRY+0x355>
// 333: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000335:  R_X86_64_64  .rodata.str1.1
// 33d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033f:  R_X86_64_64  _Py_NegativeRefcount
// 347: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 34c: 4c 89 ea                      movq    %r13, %rdx
// 34f: ff d0                         callq   *%rax
// 351: 49 8b 45 00                   movq    (%r13), %rax
// 355: 85 c0                         testl   %eax, %eax
// 357: 78 19                         js      0x372 <_JIT_ENTRY+0x372>
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 363: ff d0                         callq   *%rax
// 365: 49 ff 4d 00                   decq    (%r13)
// 369: 4c 89 ed                      movq    %r13, %rbp
// 36c: 0f 84 7a ff ff ff             je      0x2ec <_JIT_ENTRY+0x2ec>
// 372: 49 29 dc                      subq    %rbx, %r12
// 375: 49 83 c4 b8                   addq    $-0x48, %r12
// 379: 49 c1 ec 03                   shrq    $0x3, %r12
// 37d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 381: 31 c0                         xorl    %eax, %eax
// 383: e9 d2 fc ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 388: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_AITER_code_body[905] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xc6, 0x01, 0x00, 0x00, 0x49, 0x89, 0x2c, 0x24, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x75, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x4c, 0x89, 0xed, 0x0f, 0x84, 0x7a, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xd2, 0xfc, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_AITER_code_holes[36] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_AITER_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GET_ANEXT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GET_ANEXT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 df                      subq    %rbx, %r15
// 35: 49 83 c7 b8                   addq    $-0x48, %r15
// 39: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 06                      movq    (%r14), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 f2                      movq    %r14, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 06                      movq    (%r14), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0e                      decq    (%r14)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8d 47 e8                   leaq    -0x18(%r15), %rax
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 b7 00 00 00             je      0x25c <_JIT_ENTRY+0x25c>
// 1a5: 4d 8d 6f f0                   leaq    -0x10(%r15), %r13
// 1a9: 4c 89 20                      movq    %r12, (%rax)
// 1ac: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b3:  R_X86_64_64  PyAsyncGen_Type
// 1bb: 48 39 c8                      cmpq    %rcx, %rax
// 1be: 0f 84 d3 00 00 00             je      0x297 <_JIT_ENTRY+0x297>
// 1c4: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1c8: 48 85 c9                      testq   %rcx, %rcx
// 1cb: 0f 84 93 00 00 00             je      0x264 <_JIT_ENTRY+0x264>
// 1d1: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 0f 84 86 00 00 00             je      0x264 <_JIT_ENTRY+0x264>
// 1de: 4c 89 e7                      movq    %r12, %rdi
// 1e1: ff d1                         callq   *%rcx
// 1e3: 48 85 c0                      testq   %rax, %rax
// 1e6: 0f 84 2b 01 00 00             je      0x317 <_JIT_ENTRY+0x317>
// 1ec: 49 89 c4                      movq    %rax, %r12
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1f9: 4c 89 e7                      movq    %r12, %rdi
// 1fc: ff d0                         callq   *%rax
// 1fe: 48 85 c0                      testq   %rax, %rax
// 201: 0f 84 ce 00 00 00             je      0x2d5 <_JIT_ENTRY+0x2d5>
// 207: 49 89 c6                      movq    %rax, %r14
// 20a: 49 8b 04 24                   movq    (%r12), %rax
// 20e: 48 85 c0                      testq   %rax, %rax
// 211: 7f 22                         jg      0x235 <_JIT_ENTRY+0x235>
// 213: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000215:  R_X86_64_64  .rodata.str1.1
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_NegativeRefcount
// 227: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 22c: 4c 89 e2                      movq    %r12, %rdx
// 22f: ff d0                         callq   *%rax
// 231: 49 8b 04 24                   movq    (%r12), %rax
// 235: 85 c0                         testl   %eax, %eax
// 237: 78 70                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 243: ff d0                         callq   *%rax
// 245: 49 ff 0c 24                   decq    (%r12)
// 249: 75 5e                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: 4c 89 e7                      movq    %r12, %rdi
// 258: ff d0                         callq   *%rax
// 25a: eb 4d                         jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 25c: 49 89 c5                      movq    %rax, %r13
// 25f: e9 b3 00 00 00                jmp     0x317 <_JIT_ENTRY+0x317>
// 264: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000266:  R_X86_64_64  PyExc_TypeError
// 26e: 48 8b 31                      movq    (%rcx), %rsi
// 271: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 275: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000277:  R_X86_64_64  .rodata.str1.1+0x39
// 27f: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000281:  R_X86_64_64  _PyErr_Format
// 289: 48 8b 3c 24                   movq    (%rsp), %rdi
// 28d: 31 c0                         xorl    %eax, %eax
// 28f: 41 ff d0                      callq   *%r8
// 292: e9 80 00 00 00                jmp     0x317 <_JIT_ENTRY+0x317>
// 297: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 29b: 4c 89 e7                      movq    %r12, %rdi
// 29e: ff 50 10                      callq   *0x10(%rax)
// 2a1: 49 89 c6                      movq    %rax, %r14
// 2a4: 48 85 c0                      testq   %rax, %rax
// 2a7: 74 6e                         je      0x317 <_JIT_ENTRY+0x317>
// 2a9: 49 83 c7 f8                   addq    $-0x8, %r15
// 2ad: 4d 89 75 00                   movq    %r14, (%r13)
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _JIT_CONTINUE
// 2bb: 48 89 df                      movq    %rbx, %rdi
// 2be: 4c 89 fe                      movq    %r15, %rsi
// 2c1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c5: 48 83 c4 08                   addq    $0x8, %rsp
// 2c9: 5b                            popq    %rbx
// 2ca: 41 5c                         popq    %r12
// 2cc: 41 5d                         popq    %r13
// 2ce: 41 5e                         popq    %r14
// 2d0: 41 5f                         popq    %r15
// 2d2: 5d                            popq    %rbp
// 2d3: ff e0                         jmpq    *%rax
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  PyExc_TypeError
// 2df: 48 8b 38                      movq    (%rax), %rdi
// 2e2: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2e7: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 2eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ed:  R_X86_64_64  .rodata.str1.1+0x7c
// 2f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f7:  R_X86_64_64  _PyErr_FormatFromCause
// 2ff: 31 c0                         xorl    %eax, %eax
// 301: ff d1                         callq   *%rcx
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  .text+0x330
// 30d: bf f8 02 00 00                movl    $0x2f8, %edi            # imm = 0x2F8
// 312: 4c 89 e6                      movq    %r12, %rsi
// 315: ff d0                         callq   *%rax
// 317: 49 29 dd                      subq    %rbx, %r13
// 31a: 49 83 c5 b8                   addq    $-0x48, %r13
// 31e: 49 c1 ed 03                   shrq    $0x3, %r13
// 322: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 326: 31 c0                         xorl    %eax, %eax
// 328: e9 2d fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 32d: 0f 1f 00                      nopl    (%rax)
// 
// 0000000000000330 <Py_DECREF>:
// 330: 53                            pushq   %rbx
// 331: 48 89 f3                      movq    %rsi, %rbx
// 334: 48 8b 06                      movq    (%rsi), %rax
// 337: 48 85 c0                      testq   %rax, %rax
// 33a: 7e 06                         jle     0x342 <Py_DECREF+0x12>
// 33c: 85 c0                         testl   %eax, %eax
// 33e: 79 24                         jns     0x364 <Py_DECREF+0x34>
// 340: eb 33                         jmp     0x375 <Py_DECREF+0x45>
// 342: 89 fe                         movl    %edi, %esi
// 344: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000346:  R_X86_64_64  .rodata.str1.1
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_NegativeRefcount
// 358: 48 89 da                      movq    %rbx, %rdx
// 35b: ff d0                         callq   *%rax
// 35d: 48 8b 03                      movq    (%rbx), %rax
// 360: 85 c0                         testl   %eax, %eax
// 362: 78 11                         js      0x375 <Py_DECREF+0x45>
// 364: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000366:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 36e: ff d0                         callq   *%rax
// 370: 48 ff 0b                      decq    (%rbx)
// 373: 74 02                         je      0x377 <Py_DECREF+0x47>
// 375: 5b                            popq    %rbx
// 376: c3                            retq
// 377: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000379:  R_X86_64_64  _Py_Dealloc
// 381: 48 89 df                      movq    %rbx, %rdi
// 384: 5b                            popq    %rbx
// 385: ff e0                         jmpq    *%rax
// 387: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_ANEXT_code_body[904] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6f, 0xf0, 0x4c, 0x89, 0x20, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xd3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x2b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x4d, 0x49, 0x89, 0xc5, 0xe9, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0x4c, 0x89, 0xe7, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc6, 0x48, 0x85, 0xc0, 0x74, 0x6e, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x89, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x2d, 0xfd, 0xff, 0xff, 0x0f, 0x1f, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_ANEXT_code_holes[36] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x330},
    {0x346, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_ANEXT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GET_AWAITABLE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GET_AWAITABLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 df                      subq    %rbx, %r15
// 35: 49 83 c7 b8                   addq    $-0x48, %r15
// 39: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 06                      movq    (%r14), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 f2                      movq    %r14, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 06                      movq    (%r14), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0e                      decq    (%r14)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8d 6f e8                   leaq    -0x18(%r15), %rbp
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 b4 01 00 00             je      0x359 <_JIT_ENTRY+0x359>
// 1a5: 4c 89 65 00                   movq    %r12, (%rbp)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1b3: 4c 89 e7                      movq    %r12, %rdi
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 89 c5                      movq    %rax, %r13
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 74 0f                         je      0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 49 8b 04 24                   movq    (%r12), %rax
// 1c4: 48 85 c0                      testq   %rax, %rax
// 1c7: 7e 31                         jle     0x1fa <_JIT_ENTRY+0x1fa>
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 79 53                         jns     0x220 <_JIT_ENTRY+0x220>
// 1cd: eb 72                         jmp     0x241 <_JIT_ENTRY+0x241>
// 1cf: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 d0                      movzwl  %ax, %edx
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _PyEval_FormatAwaitableError
// 1eb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ef: ff d0                         callq   *%rax
// 1f1: 49 8b 04 24                   movq    (%r12), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7f cf                         jg      0x1c9 <_JIT_ENTRY+0x1c9>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_NegativeRefcount
// 20e: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 213: 4c 89 e2                      movq    %r12, %rdx
// 216: ff d0                         callq   *%rax
// 218: 49 8b 04 24                   movq    (%r12), %rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 21                         js      0x241 <_JIT_ENTRY+0x241>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 0c 24                   decq    (%r12)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 e7                      movq    %r12, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 4d 85 ed                      testq   %r13, %r13
// 244: 0f 84 0f 01 00 00             je      0x359 <_JIT_ENTRY+0x359>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  PyCoro_Type
// 254: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 258: 74 2c                         je      0x286 <_JIT_ENTRY+0x286>
// 25a: 49 83 c7 f0                   addq    $-0x10, %r15
// 25e: 4c 89 6d 00                   movq    %r13, (%rbp)
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_CONTINUE
// 26c: 48 89 df                      movq    %rbx, %rdi
// 26f: 4c 89 fe                      movq    %r15, %rsi
// 272: 48 8b 14 24                   movq    (%rsp), %rdx
// 276: 48 83 c4 08                   addq    $0x8, %rsp
// 27a: 5b                            popq    %rbx
// 27b: 41 5c                         popq    %r12
// 27d: 41 5d                         popq    %r13
// 27f: 41 5e                         popq    %r14
// 281: 41 5f                         popq    %r15
// 283: 5d                            popq    %rbp
// 284: ff e0                         jmpq    *%rax
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _PyGen_yf
// 290: 4c 89 ef                      movq    %r13, %rdi
// 293: ff d0                         callq   *%rax
// 295: 48 85 c0                      testq   %rax, %rax
// 298: 74 c0                         je      0x25a <_JIT_ENTRY+0x25a>
// 29a: 49 89 c6                      movq    %rax, %r14
// 29d: 48 8b 00                      movq    (%rax), %rax
// 2a0: 48 85 c0                      testq   %rax, %rax
// 2a3: 7f 21                         jg      0x2c6 <_JIT_ENTRY+0x2c6>
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_NegativeRefcount
// 2b9: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 2be: 4c 89 f2                      movq    %r14, %rdx
// 2c1: ff d0                         callq   *%rax
// 2c3: 49 8b 06                      movq    (%r14), %rax
// 2c6: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: 85 c0                         testl   %eax, %eax
// 2d2: 78 17                         js      0x2eb <_JIT_ENTRY+0x2eb>
// 2d4: 41 ff d7                      callq   *%r15
// 2d7: 49 ff 0e                      decq    (%r14)
// 2da: 75 0f                         jne     0x2eb <_JIT_ENTRY+0x2eb>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_Dealloc
// 2e6: 4c 89 f7                      movq    %r14, %rdi
// 2e9: ff d0                         callq   *%rax
// 2eb: 49 8b 45 00                   movq    (%r13), %rax
// 2ef: 48 85 c0                      testq   %rax, %rax
// 2f2: 7f 22                         jg      0x316 <_JIT_ENTRY+0x316>
// 2f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f6:  R_X86_64_64  .rodata.str1.1
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_NegativeRefcount
// 308: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 30d: 4c 89 ea                      movq    %r13, %rdx
// 310: ff d0                         callq   *%rax
// 312: 49 8b 45 00                   movq    (%r13), %rax
// 316: 85 c0                         testl   %eax, %eax
// 318: 78 18                         js      0x332 <_JIT_ENTRY+0x332>
// 31a: 41 ff d7                      callq   *%r15
// 31d: 49 ff 4d 00                   decq    (%r13)
// 321: 75 0f                         jne     0x332 <_JIT_ENTRY+0x332>
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_Dealloc
// 32d: 4c 89 ef                      movq    %r13, %rdi
// 330: ff d0                         callq   *%rax
// 332: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000334:  R_X86_64_64  PyExc_RuntimeError
// 33c: 48 8b 30                      movq    (%rax), %rsi
// 33f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000341:  R_X86_64_64  .rodata.str1.1+0x39
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  _PyErr_SetString
// 353: 48 8b 3c 24                   movq    (%rsp), %rdi
// 357: ff d0                         callq   *%rax
// 359: 48 29 dd                      subq    %rbx, %rbp
// 35c: 48 83 c5 b8                   addq    $-0x48, %rbp
// 360: 48 c1 ed 03                   shrq    $0x3, %rbp
// 364: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 367: 31 c0                         xorl    %eax, %eax
// 369: e9 ec fc ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 36e: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_AWAITABLE_code_body[879] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x6f, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x31, 0x85, 0xc0, 0x79, 0x53, 0xeb, 0x72, 0x49, 0x8b, 0x74, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xcf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x2c, 0x49, 0x83, 0xc7, 0xf0, 0x4c, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xc0, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xec, 0xfc, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_AWAITABLE_code_holes[38] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_AWAITABLE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GET_ITER
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GET_ITER.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 97 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 1a5: 4d 89 65 00                   movq    %r12, (%r13)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyObject_GetIter
// 1b3: 4c 89 e7                      movq    %r12, %rdi
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 89 c7                      movq    %rax, %r15
// 1bb: 49 8b 04 24                   movq    (%r12), %rax
// 1bf: 48 85 c0                      testq   %rax, %rax
// 1c2: 7f 22                         jg      0x1e6 <_JIT_ENTRY+0x1e6>
// 1c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c6:  R_X86_64_64  .rodata.str1.1
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NegativeRefcount
// 1d8: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 1dd: 4c 89 e2                      movq    %r12, %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 8b 04 24                   movq    (%r12), %rax
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 78 21                         js      0x20b <_JIT_ENTRY+0x20b>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 ff 0c 24                   decq    (%r12)
// 1fa: 75 0f                         jne     0x20b <_JIT_ENTRY+0x20b>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 e7                      movq    %r12, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 4d 85 ff                      testq   %r15, %r15
// 20e: 74 2c                         je      0x23c <_JIT_ENTRY+0x23c>
// 210: 49 83 c6 f0                   addq    $-0x10, %r14
// 214: 4d 89 7d 00                   movq    %r15, (%r13)
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _JIT_CONTINUE
// 222: 48 89 df                      movq    %rbx, %rdi
// 225: 4c 89 f6                      movq    %r14, %rsi
// 228: 48 8b 14 24                   movq    (%rsp), %rdx
// 22c: 48 83 c4 08                   addq    $0x8, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 49 29 dd                      subq    %rbx, %r13
// 23f: 49 83 c5 b8                   addq    $-0x48, %r13
// 243: 49 c1 ed 03                   shrq    $0x3, %r13
// 247: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 08 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 252: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_ITER_code_body[595] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x2c, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x7d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x08, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_ITER_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_ITER_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GET_LEN
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GET_LEN.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 5d                         je      0x205 <_JIT_ENTRY+0x205>
// 1a8: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  PyObject_Size
// 1b9: 4c 89 ef                      movq    %r13, %rdi
// 1bc: ff d0                         callq   *%rax
// 1be: 48 85 c0                      testq   %rax, %rax
// 1c1: 78 3f                         js      0x202 <_JIT_ENTRY+0x202>
// 1c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c5:  R_X86_64_64  PyLong_FromSsize_t
// 1cd: 48 89 c7                      movq    %rax, %rdi
// 1d0: ff d1                         callq   *%rcx
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 74 2b                         je      0x202 <_JIT_ENTRY+0x202>
// 1d7: 49 83 c6 f8                   addq    $-0x8, %r14
// 1db: 49 89 04 24                   movq    %rax, (%r12)
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_CONTINUE
// 1e9: 48 89 df                      movq    %rbx, %rdi
// 1ec: 4c 89 f6                      movq    %r14, %rsi
// 1ef: 4c 89 fa                      movq    %r15, %rdx
// 1f2: 48 83 c4 08                   addq    $0x8, %rsp
// 1f6: 5b                            popq    %rbx
// 1f7: 41 5c                         popq    %r12
// 1f9: 41 5d                         popq    %r13
// 1fb: 41 5e                         popq    %r14
// 1fd: 41 5f                         popq    %r15
// 1ff: 5d                            popq    %rbp
// 200: ff e0                         jmpq    *%rax
// 202: 4c 89 e0                      movq    %r12, %rax
// 205: 48 29 d8                      subq    %rbx, %rax
// 208: 48 83 c0 b8                   addq    $-0x48, %rax
// 20c: 48 c1 e8 03                   shrq    $0x3, %rax
// 210: 89 43 40                      movl    %eax, 0x40(%rbx)
// 213: 31 c0                         xorl    %eax, %eax
// 215: e9 40 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 21a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_LEN_code_body[539] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x5d, 0x4d, 0x8d, 0x66, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x2b, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x40, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_LEN_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_LEN_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GET_YIELD_FROM_ITER.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 0f 84 9e 00 00 00             je      0x24a <_JIT_ENTRY+0x24a>
// 1ac: 49 83 c6 f0                   addq    $-0x10, %r14
// 1b0: 49 89 6d 00                   movq    %rbp, (%r13)
// 1b4: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ba:  R_X86_64_64  PyCoro_Type
// 1c2: 48 39 c8                      cmpq    %rcx, %rax
// 1c5: 0f 84 98 00 00 00             je      0x263 <_JIT_ENTRY+0x263>
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  PyGen_Type
// 1d5: 48 39 c8                      cmpq    %rcx, %rax
// 1d8: 0f 84 93 00 00 00             je      0x271 <_JIT_ENTRY+0x271>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyObject_GetIter
// 1e8: 48 89 ef                      movq    %rbp, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 74 5b                         je      0x24d <_JIT_ENTRY+0x24d>
// 1f2: 49 89 c4                      movq    %rax, %r12
// 1f5: 48 8b 45 00                   movq    (%rbp), %rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 7f 22                         jg      0x220 <_JIT_ENTRY+0x220>
// 1fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000200:  R_X86_64_64  .rodata.str1.1
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_NegativeRefcount
// 212: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 217: 48 89 ea                      movq    %rbp, %rdx
// 21a: ff d0                         callq   *%rax
// 21c: 48 8b 45 00                   movq    (%rbp), %rax
// 220: 85 c0                         testl   %eax, %eax
// 222: 78 21                         js      0x245 <_JIT_ENTRY+0x245>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22e: ff d0                         callq   *%rax
// 230: 48 ff 4d 00                   decq    (%rbp)
// 234: 75 0f                         jne     0x245 <_JIT_ENTRY+0x245>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_Dealloc
// 240: 48 89 ef                      movq    %rbp, %rdi
// 243: ff d0                         callq   *%rax
// 245: 4c 89 e5                      movq    %r12, %rbp
// 248: eb 27                         jmp     0x271 <_JIT_ENTRY+0x271>
// 24a: 4d 89 ee                      movq    %r13, %r14
// 24d: 49 29 de                      subq    %rbx, %r14
// 250: 49 83 c6 b8                   addq    $-0x48, %r14
// 254: 49 c1 ee 03                   shrq    $0x3, %r14
// 258: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 25c: 31 c0                         xorl    %eax, %eax
// 25e: e9 f7 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 263: 48 8b 03                      movq    (%rbx), %rax
// 266: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 26a: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 26f: 74 27                         je      0x298 <_JIT_ENTRY+0x298>
// 271: 49 89 6d 00                   movq    %rbp, (%r13)
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _JIT_CONTINUE
// 27f: 48 89 df                      movq    %rbx, %rdi
// 282: 4c 89 f6                      movq    %r14, %rsi
// 285: 4c 89 fa                      movq    %r15, %rdx
// 288: 48 83 c4 08                   addq    $0x8, %rsp
// 28c: 5b                            popq    %rbx
// 28d: 41 5c                         popq    %r12
// 28f: 41 5d                         popq    %r13
// 291: 41 5e                         popq    %r14
// 293: 41 5f                         popq    %r15
// 295: 5d                            popq    %rbp
// 296: ff e0                         jmpq    *%rax
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  PyExc_TypeError
// 2a2: 48 8b 30                      movq    (%rax), %rsi
// 2a5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x39
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _PyErr_SetString
// 2b9: 4c 89 ff                      movq    %r15, %rdi
// 2bc: ff d0                         callq   *%rax
// 2be: eb 8d                         jmp     0x24d <_JIT_ENTRY+0x24d>
// 2c0: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_YIELD_FROM_ITER_code_body[705] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x6d, 0x00, 0x48, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x5b, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x89, 0xe5, 0xeb, 0x27, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x27, 0x49, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x8d};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_YIELD_FROM_ITER_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GET_YIELD_FROM_ITER_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 75 01 00 00             jne     0x19a <_JIT_ENTRY+0x19a>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 60 01 00 00             je      0x19a <_JIT_ENTRY+0x19a>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 48 8b 14 24                   movq    (%rsp), %rdx
// 170: 48 85 d2                      testq   %rdx, %rdx
// 173: 74 5c                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 175: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 179: 49 89 56 e8                   movq    %rdx, -0x18(%r14)
// 17d: 49 8b 4e e0                   movq    -0x20(%r14), %rcx
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  PyFloat_Type
// 18b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 18f: 75 06                         jne     0x197 <_JIT_ENTRY+0x197>
// 191: 48 39 42 08                   cmpq    %rax, 0x8(%rdx)
// 195: 74 51                         je      0x1e8 <_JIT_ENTRY+0x1e8>
// 197: 49 89 f6                      movq    %rsi, %r14
// 19a: 49 29 de                      subq    %rbx, %r14
// 19d: 49 83 c6 b8                   addq    $-0x48, %r14
// 1a1: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a9: 48 8b 03                      movq    (%rbx), %rax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _JIT_TARGET
// 1b6: 89 c9                         movl    %ecx, %ecx
// 1b8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1bc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c2: 48 83 c4 08                   addq    $0x8, %rsp
// 1c6: 5b                            popq    %rbx
// 1c7: 41 5c                         popq    %r12
// 1c9: 41 5d                         popq    %r13
// 1cb: 41 5e                         popq    %r14
// 1cd: 41 5f                         popq    %r15
// 1cf: 5d                            popq    %rbp
// 1d0: c3                            retq
// 1d1: 49 83 c6 e8                   addq    $-0x18, %r14
// 1d5: 49 29 de                      subq    %rbx, %r14
// 1d8: 49 83 c6 b8                   addq    $-0x48, %r14
// 1dc: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e4: 31 c0                         xorl    %eax, %eax
// 1e6: eb da                         jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 fa                      movq    %r15, %rdx
// 1f8: 48 83 c4 08                   addq    $0x8, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_FLOAT_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x75, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x60, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x5c, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x89, 0x56, 0xe8, 0x49, 0x8b, 0x4e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x06, 0x48, 0x39, 0x42, 0x08, 0x74, 0x51, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_FLOAT_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_FLOAT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 75 01 00 00             jne     0x19a <_JIT_ENTRY+0x19a>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 60 01 00 00             je      0x19a <_JIT_ENTRY+0x19a>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 48 8b 14 24                   movq    (%rsp), %rdx
// 170: 48 85 d2                      testq   %rdx, %rdx
// 173: 74 5c                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 175: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 179: 49 89 56 e8                   movq    %rdx, -0x18(%r14)
// 17d: 49 8b 4e e0                   movq    -0x20(%r14), %rcx
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  PyLong_Type
// 18b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 18f: 75 06                         jne     0x197 <_JIT_ENTRY+0x197>
// 191: 48 39 42 08                   cmpq    %rax, 0x8(%rdx)
// 195: 74 51                         je      0x1e8 <_JIT_ENTRY+0x1e8>
// 197: 49 89 f6                      movq    %rsi, %r14
// 19a: 49 29 de                      subq    %rbx, %r14
// 19d: 49 83 c6 b8                   addq    $-0x48, %r14
// 1a1: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a9: 48 8b 03                      movq    (%rbx), %rax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _JIT_TARGET
// 1b6: 89 c9                         movl    %ecx, %ecx
// 1b8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1bc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c2: 48 83 c4 08                   addq    $0x8, %rsp
// 1c6: 5b                            popq    %rbx
// 1c7: 41 5c                         popq    %r12
// 1c9: 41 5d                         popq    %r13
// 1cb: 41 5e                         popq    %r14
// 1cd: 41 5f                         popq    %r15
// 1cf: 5d                            popq    %rbp
// 1d0: c3                            retq
// 1d1: 49 83 c6 e8                   addq    $-0x18, %r14
// 1d5: 49 29 de                      subq    %rbx, %r14
// 1d8: 49 83 c6 b8                   addq    $-0x48, %r14
// 1dc: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e4: 31 c0                         xorl    %eax, %eax
// 1e6: eb da                         jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 fa                      movq    %r15, %rdx
// 1f8: 48 83 c4 08                   addq    $0x8, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_INT_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x75, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x60, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x5c, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x89, 0x56, 0xe8, 0x49, 0x8b, 0x4e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x06, 0x48, 0x39, 0x42, 0x08, 0x74, 0x51, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_INT_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_UNICODE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 75 01 00 00             jne     0x19a <_JIT_ENTRY+0x19a>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 60 01 00 00             je      0x19a <_JIT_ENTRY+0x19a>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 48 8b 14 24                   movq    (%rsp), %rdx
// 170: 48 85 d2                      testq   %rdx, %rdx
// 173: 74 5c                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 175: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 179: 49 89 56 e8                   movq    %rdx, -0x18(%r14)
// 17d: 49 8b 4e e0                   movq    -0x20(%r14), %rcx
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  PyUnicode_Type
// 18b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 18f: 75 06                         jne     0x197 <_JIT_ENTRY+0x197>
// 191: 48 39 42 08                   cmpq    %rax, 0x8(%rdx)
// 195: 74 51                         je      0x1e8 <_JIT_ENTRY+0x1e8>
// 197: 49 89 f6                      movq    %rsi, %r14
// 19a: 49 29 de                      subq    %rbx, %r14
// 19d: 49 83 c6 b8                   addq    $-0x48, %r14
// 1a1: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a9: 48 8b 03                      movq    (%rbx), %rax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _JIT_TARGET
// 1b6: 89 c9                         movl    %ecx, %ecx
// 1b8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1bc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c2: 48 83 c4 08                   addq    $0x8, %rsp
// 1c6: 5b                            popq    %rbx
// 1c7: 41 5c                         popq    %r12
// 1c9: 41 5d                         popq    %r13
// 1cb: 41 5e                         popq    %r14
// 1cd: 41 5f                         popq    %r15
// 1cf: 5d                            popq    %rbp
// 1d0: c3                            retq
// 1d1: 49 83 c6 e8                   addq    $-0x18, %r14
// 1d5: 49 29 de                      subq    %rbx, %r14
// 1d8: 49 83 c6 b8                   addq    $-0x48, %r14
// 1dc: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e4: 31 c0                         xorl    %eax, %eax
// 1e6: eb da                         jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 fa                      movq    %r15, %rdx
// 1f8: 48 83 c4 08                   addq    $0x8, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_UNICODE_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x75, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x60, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x5c, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x89, 0x56, 0xe8, 0x49, 0x8b, 0x4e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x06, 0x48, 0x39, 0x42, 0x08, 0x74, 0x51, 0x49, 0x89, 0xf6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_UNICODE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_UNICODE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_BUILTINS_VERSION.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 ac 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 97 01 00 00             je      0x1d1 <_JIT_ENTRY+0x1d1>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 0f 84 8b 00 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 17d: 49 83 c6 f0                   addq    $-0x10, %r14
// 181: 48 89 08                      movq    %rcx, (%rax)
// 184: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 188: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018a:  R_X86_64_64  PyDict_Type
// 192: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 196: 75 39                         jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 198: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  _JIT_OPERAND
// 1a6: 0f b7 c9                      movzwl  %cx, %ecx
// 1a9: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1ac: 75 23                         jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _JIT_CONTINUE
// 1b8: 48 89 df                      movq    %rbx, %rdi
// 1bb: 4c 89 f6                      movq    %r14, %rsi
// 1be: 4c 89 fa                      movq    %r15, %rdx
// 1c1: 48 83 c4 08                   addq    $0x8, %rsp
// 1c5: 5b                            popq    %rbx
// 1c6: 41 5c                         popq    %r12
// 1c8: 41 5d                         popq    %r13
// 1ca: 41 5e                         popq    %r14
// 1cc: 41 5f                         popq    %r15
// 1ce: 5d                            popq    %rbp
// 1cf: ff e0                         jmpq    *%rax
// 1d1: 49 29 de                      subq    %rbx, %r14
// 1d4: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d8: 49 c1 ee 03                   shrq    $0x3, %r14
// 1dc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e0: 48 8b 03                      movq    (%rbx), %rax
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_TARGET
// 1ed: 89 c9                         movl    %ecx, %ecx
// 1ef: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: c3                            retq
// 208: 48 29 d8                      subq    %rbx, %rax
// 20b: 48 83 c0 b8                   addq    $-0x48, %rax
// 20f: 48 c1 e8 03                   shrq    $0x3, %rax
// 213: 89 43 40                      movl    %eax, 0x40(%rbx)
// 216: 31 c0                         xorl    %eax, %eax
// 218: eb df                         jmp     0x1f9 <_JIT_ENTRY+0x1f9>
// 21a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_BUILTINS_VERSION_code_body[539] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xac, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x97, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_BUILTINS_VERSION_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 61 01 00 00             jne     0x186 <_JIT_ENTRY+0x186>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 4c 01 00 00             je      0x186 <_JIT_ENTRY+0x186>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 44                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: f6 41 e8 01                   testb   $0x1, -0x18(%rcx)
// 184: 75 49                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 186: 49 29 de                      subq    %rbx, %r14
// 189: 49 83 c6 b8                   addq    $-0x48, %r14
// 18d: 49 c1 ee 03                   shrq    $0x3, %r14
// 191: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 195: 48 8b 03                      movq    (%rbx), %rax
// 198: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019a:  R_X86_64_64  _JIT_TARGET
// 1a2: 89 c9                         movl    %ecx, %ecx
// 1a4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ae: 48 83 c4 08                   addq    $0x8, %rsp
// 1b2: 5b                            popq    %rbx
// 1b3: 41 5c                         popq    %r12
// 1b5: 41 5d                         popq    %r13
// 1b7: 41 5e                         popq    %r14
// 1b9: 41 5f                         popq    %r15
// 1bb: 5d                            popq    %rbp
// 1bc: c3                            retq
// 1bd: 48 29 d8                      subq    %rbx, %rax
// 1c0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1c4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1cb: 31 c0                         xorl    %eax, %eax
// 1cd: eb df                         jmp     0x1ae <_JIT_ENTRY+0x1ae>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _JIT_CONTINUE
// 1d9: 48 89 df                      movq    %rbx, %rdi
// 1dc: 4c 89 f6                      movq    %r14, %rsi
// 1df: 4c 89 fa                      movq    %r15, %rdx
// 1e2: 48 83 c4 08                   addq    $0x8, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_code_body[499] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x61, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x4c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x44, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0xf6, 0x41, 0xe8, 0x01, 0x75, 0x49, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 e4                      testq   %r12, %r12
// 1a6: 74 50                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 4c 89 20                      movq    %r12, (%rax)
// 1af: 41 f6 44 24 e8 01             testb   $0x1, -0x18(%r12)
// 1b5: 75 1e                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1b7: 4c 89 e6                      movq    %r12, %rsi
// 1ba: 48 83 c6 e8                   addq    $-0x18, %rsi
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 1c8: 4c 89 e7                      movq    %r12, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 84 c0                         testb   %al, %al
// 1cf: 0f 84 5d fe ff ff             je      0x32 <_JIT_ENTRY+0x32>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_CONTINUE
// 1df: 48 89 df                      movq    %rbx, %rdi
// 1e2: 4c 89 f6                      movq    %r14, %rsi
// 1e5: 4c 89 fa                      movq    %r15, %rdx
// 1e8: 48 83 c4 08                   addq    $0x8, %rsp
// 1ec: 5b                            popq    %rbx
// 1ed: 41 5c                         popq    %r12
// 1ef: 41 5d                         popq    %r13
// 1f1: 41 5e                         popq    %r14
// 1f3: 41 5f                         popq    %r15
// 1f5: 5d                            popq    %rbp
// 1f6: ff e0                         jmpq    *%rax
// 1f8: 48 29 d8                      subq    %rbx, %rax
// 1fb: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ff: 48 c1 e8 03                   shrq    $0x3, %rax
// 203: 89 43 40                      movl    %eax, 0x40(%rbx)
// 206: 31 c0                         xorl    %eax, %eax
// 208: e9 4d fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 20d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[526] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0x20, 0x41, 0xf6, 0x44, 0x24, 0xe8, 0x01, 0x75, 0x1e, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x84, 0xc0, 0x0f, 0x84, 0x5d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x4d, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_GLOBALS_VERSION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 ac 01 00 00             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 97 01 00 00             je      0x1d1 <_JIT_ENTRY+0x1d1>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 0f 84 8b 00 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 17d: 49 83 c6 f0                   addq    $-0x10, %r14
// 181: 48 89 08                      movq    %rcx, (%rax)
// 184: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 188: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018a:  R_X86_64_64  PyDict_Type
// 192: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 196: 75 39                         jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 198: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  _JIT_OPERAND
// 1a6: 0f b7 c9                      movzwl  %cx, %ecx
// 1a9: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1ac: 75 23                         jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _JIT_CONTINUE
// 1b8: 48 89 df                      movq    %rbx, %rdi
// 1bb: 4c 89 f6                      movq    %r14, %rsi
// 1be: 4c 89 fa                      movq    %r15, %rdx
// 1c1: 48 83 c4 08                   addq    $0x8, %rsp
// 1c5: 5b                            popq    %rbx
// 1c6: 41 5c                         popq    %r12
// 1c8: 41 5d                         popq    %r13
// 1ca: 41 5e                         popq    %r14
// 1cc: 41 5f                         popq    %r15
// 1ce: 5d                            popq    %rbp
// 1cf: ff e0                         jmpq    *%rax
// 1d1: 49 29 de                      subq    %rbx, %r14
// 1d4: 49 83 c6 b8                   addq    $-0x48, %r14
// 1d8: 49 c1 ee 03                   shrq    $0x3, %r14
// 1dc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e0: 48 8b 03                      movq    (%rbx), %rax
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_TARGET
// 1ed: 89 c9                         movl    %ecx, %ecx
// 1ef: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: c3                            retq
// 208: 48 29 d8                      subq    %rbx, %rax
// 20b: 48 83 c0 b8                   addq    $-0x48, %rax
// 20f: 48 c1 e8 03                   shrq    $0x3, %rax
// 213: 89 43 40                      movl    %eax, 0x40(%rbx)
// 216: 31 c0                         xorl    %eax, %eax
// 218: eb df                         jmp     0x1f9 <_JIT_ENTRY+0x1f9>
// 21a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_GLOBALS_VERSION_code_body[539] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xac, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x97, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_GLOBALS_VERSION_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_FALSE_POP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 76 e8                   leaq    -0x18(%r14), %rsi
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 32                         je      0x1da <_JIT_ENTRY+0x1da>
// 1a8: 48 89 0e                      movq    %rcx, (%rsi)
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_TrueStruct
// 1b5: 48 39 c1                      cmpq    %rax, %rcx
// 1b8: 74 35                         je      0x1ef <_JIT_ENTRY+0x1ef>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 48 89 df                      movq    %rbx, %rdi
// 1c7: 4c 89 fa                      movq    %r15, %rdx
// 1ca: 48 83 c4 08                   addq    $0x8, %rsp
// 1ce: 5b                            popq    %rbx
// 1cf: 41 5c                         popq    %r12
// 1d1: 41 5d                         popq    %r13
// 1d3: 41 5e                         popq    %r14
// 1d5: 41 5f                         popq    %r15
// 1d7: 5d                            popq    %rbp
// 1d8: ff e0                         jmpq    *%rax
// 1da: 48 29 de                      subq    %rbx, %rsi
// 1dd: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1e1: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e5: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e8: 31 c0                         xorl    %eax, %eax
// 1ea: e9 6b fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1ef: 49 83 c6 f0                   addq    $-0x10, %r14
// 1f3: e9 3a fe ff ff                jmp     0x32 <_JIT_ENTRY+0x32>
// 1f8: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_FALSE_POP_code_body[505] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x32, 0x48, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc1, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6b, 0xfe, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf0, 0xe9, 0x3a, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_FALSE_POP_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_FALSE_POP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NONE_POP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NONE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 6a 01 00 00             jne     0x18f <_JIT_ENTRY+0x18f>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 55 01 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 76 e8                   leaq    -0x18(%r14), %rsi
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 4d                         je      0x1c6 <_JIT_ENTRY+0x1c6>
// 179: 48 89 0e                      movq    %rcx, (%rsi)
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_NoneStruct
// 186: 48 39 c1                      cmpq    %rax, %rcx
// 189: 74 4d                         je      0x1d8 <_JIT_ENTRY+0x1d8>
// 18b: 49 83 c6 f0                   addq    $-0x10, %r14
// 18f: 49 29 de                      subq    %rbx, %r14
// 192: 49 83 c6 b8                   addq    $-0x48, %r14
// 196: 49 c1 ee 03                   shrq    $0x3, %r14
// 19a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19e: 48 8b 03                      movq    (%rbx), %rax
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _JIT_TARGET
// 1ab: 89 c9                         movl    %ecx, %ecx
// 1ad: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b7: 48 83 c4 08                   addq    $0x8, %rsp
// 1bb: 5b                            popq    %rbx
// 1bc: 41 5c                         popq    %r12
// 1be: 41 5d                         popq    %r13
// 1c0: 41 5e                         popq    %r14
// 1c2: 41 5f                         popq    %r15
// 1c4: 5d                            popq    %rbp
// 1c5: c3                            retq
// 1c6: 48 29 de                      subq    %rbx, %rsi
// 1c9: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1cd: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1d1: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1d4: 31 c0                         xorl    %eax, %eax
// 1d6: eb df                         jmp     0x1b7 <_JIT_ENTRY+0x1b7>
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_CONTINUE
// 1e2: 48 89 df                      movq    %rbx, %rdi
// 1e5: 4c 89 fa                      movq    %r15, %rdx
// 1e8: 48 83 c4 08                   addq    $0x8, %rsp
// 1ec: 5b                            popq    %rbx
// 1ed: 41 5c                         popq    %r12
// 1ef: 41 5d                         popq    %r13
// 1f1: 41 5e                         popq    %r14
// 1f3: 41 5f                         popq    %r15
// 1f5: 5d                            popq    %rbp
// 1f6: ff e0                         jmpq    *%rax
// 1f8: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NONE_POP_code_body[505] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x6a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x4d, 0x48, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc1, 0x74, 0x4d, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NONE_POP_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NONE_POP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NOT_NONE_POP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 df                      subq    %rbx, %r15
// 35: 49 83 c7 b8                   addq    $-0x48, %r15
// 39: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d6                      movq    %rdx, %r14
// 6c: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 1a3: 4d 85 e4                      testq   %r12, %r12
// 1a6: 0f 84 8a 00 00 00             je      0x236 <_JIT_ENTRY+0x236>
// 1ac: 4d 89 65 00                   movq    %r12, (%r13)
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_NoneStruct
// 1ba: 49 39 c4                      cmpq    %rax, %r12
// 1bd: 0f 84 89 00 00 00             je      0x24c <_JIT_ENTRY+0x24c>
// 1c3: 49 8b 04 24                   movq    (%r12), %rax
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 7f 22                         jg      0x1ee <_JIT_ENTRY+0x1ee>
// 1cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ce:  R_X86_64_64  .rodata.str1.1
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_NegativeRefcount
// 1e0: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 1e5: 4c 89 e2                      movq    %r12, %rdx
// 1e8: ff d0                         callq   *%rax
// 1ea: 49 8b 04 24                   movq    (%r12), %rax
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 21                         js      0x213 <_JIT_ENTRY+0x213>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 ff 0c 24                   decq    (%r12)
// 202: 75 0f                         jne     0x213 <_JIT_ENTRY+0x213>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_Dealloc
// 20e: 4c 89 e7                      movq    %r12, %rdi
// 211: ff d0                         callq   *%rax
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 48 89 df                      movq    %rbx, %rdi
// 220: 4c 89 ee                      movq    %r13, %rsi
// 223: 4c 89 f2                      movq    %r14, %rdx
// 226: 48 83 c4 08                   addq    $0x8, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 49 29 dd                      subq    %rbx, %r13
// 239: 49 83 c5 b8                   addq    $-0x48, %r13
// 23d: 49 c1 ed 03                   shrq    $0x3, %r13
// 241: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 245: 31 c0                         xorl    %eax, %eax
// 247: e9 0e fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 24c: 49 83 c7 f0                   addq    $-0x10, %r15
// 250: e9 dd fd ff ff                jmp     0x32 <_JIT_ENTRY+0x32>
// 255: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NOT_NONE_POP_code_body[598] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x0e, 0xfe, 0xff, 0xff, 0x49, 0x83, 0xc7, 0xf0, 0xe9, 0xdd, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NOT_NONE_POP_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_TRUE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 76 e8                   leaq    -0x18(%r14), %rsi
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 32                         je      0x1da <_JIT_ENTRY+0x1da>
// 1a8: 48 89 0e                      movq    %rcx, (%rsi)
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_FalseStruct
// 1b5: 48 39 c1                      cmpq    %rax, %rcx
// 1b8: 74 35                         je      0x1ef <_JIT_ENTRY+0x1ef>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 48 89 df                      movq    %rbx, %rdi
// 1c7: 4c 89 fa                      movq    %r15, %rdx
// 1ca: 48 83 c4 08                   addq    $0x8, %rsp
// 1ce: 5b                            popq    %rbx
// 1cf: 41 5c                         popq    %r12
// 1d1: 41 5d                         popq    %r13
// 1d3: 41 5e                         popq    %r14
// 1d5: 41 5f                         popq    %r15
// 1d7: 5d                            popq    %rbp
// 1d8: ff e0                         jmpq    *%rax
// 1da: 48 29 de                      subq    %rbx, %rsi
// 1dd: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1e1: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e5: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e8: 31 c0                         xorl    %eax, %eax
// 1ea: e9 6b fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1ef: 49 83 c6 f0                   addq    $-0x10, %r14
// 1f3: e9 3a fe ff ff                jmp     0x32 <_JIT_ENTRY+0x32>
// 1f8: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_TRUE_POP_code_body[505] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x32, 0x48, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc1, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6b, 0xfe, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf0, 0xe9, 0x3a, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_TRUE_POP_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_TRUE_POP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_KEYS_VERSION
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_KEYS_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 98 01 00 00             jne     0x1bd <_JIT_ENTRY+0x1bd>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 83 01 00 00             je      0x1bd <_JIT_ENTRY+0x1bd>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 7b                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 48 8b 41 08                   movq    0x8(%rcx), %rax
// 184: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 18b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018d:  R_X86_64_64  _JIT_OPERAND
// 195: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 198: 75 23                         jne     0x1bd <_JIT_ENTRY+0x1bd>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _JIT_CONTINUE
// 1a4: 48 89 df                      movq    %rbx, %rdi
// 1a7: 4c 89 f6                      movq    %r14, %rsi
// 1aa: 4c 89 fa                      movq    %r15, %rdx
// 1ad: 48 83 c4 08                   addq    $0x8, %rsp
// 1b1: 5b                            popq    %rbx
// 1b2: 41 5c                         popq    %r12
// 1b4: 41 5d                         popq    %r13
// 1b6: 41 5e                         popq    %r14
// 1b8: 41 5f                         popq    %r15
// 1ba: 5d                            popq    %rbp
// 1bb: ff e0                         jmpq    *%rax
// 1bd: 49 29 de                      subq    %rbx, %r14
// 1c0: 49 83 c6 b8                   addq    $-0x48, %r14
// 1c4: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1cc: 48 8b 03                      movq    (%rbx), %rax
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  _JIT_TARGET
// 1d9: 89 c9                         movl    %ecx, %ecx
// 1db: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1df: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e5: 48 83 c4 08                   addq    $0x8, %rsp
// 1e9: 5b                            popq    %rbx
// 1ea: 41 5c                         popq    %r12
// 1ec: 41 5d                         popq    %r13
// 1ee: 41 5e                         popq    %r14
// 1f0: 41 5f                         popq    %r15
// 1f2: 5d                            popq    %rbp
// 1f3: c3                            retq
// 1f4: 48 29 d8                      subq    %rbx, %rax
// 1f7: 48 83 c0 b8                   addq    $-0x48, %rax
// 1fb: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ff: 89 43 40                      movl    %eax, 0x40(%rbx)
// 202: 31 c0                         xorl    %eax, %eax
// 204: eb df                         jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// 206: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_KEYS_VERSION_code_body[519] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x98, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x83, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x7b, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_KEYS_VERSION_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_KEYS_VERSION_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 45                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 8b 41 18                   movq    0x18(%rcx), %rax
// 1b3: 48 85 c0                      testq   %rax, %rax
// 1b6: 0f 84 76 fe ff ff             je      0x32 <_JIT_ENTRY+0x32>
// 1bc: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1c0: 48 3b 48 10                   cmpq    0x10(%rax), %rcx
// 1c4: 0f 8d 68 fe ff ff             jge     0x32 <_JIT_ENTRY+0x32>
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_CONTINUE
// 1d4: 48 89 df                      movq    %rbx, %rdi
// 1d7: 4c 89 f6                      movq    %r14, %rsi
// 1da: 4c 89 fa                      movq    %r15, %rdx
// 1dd: 48 83 c4 08                   addq    $0x8, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 48 29 d8                      subq    %rbx, %rax
// 1f0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1fb: 31 c0                         xorl    %eax, %eax
// 1fd: e9 58 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 202: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_LIST_code_body[515] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x45, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x41, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x76, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0x48, 0x10, 0x0f, 0x8d, 0x68, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x58, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 35                         je      0x1dd <_JIT_ENTRY+0x1dd>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 83 79 20 00                cmpq    $0x0, 0x20(%rcx)
// 1b4: 0f 8e 78 fe ff ff             jle     0x32 <_JIT_ENTRY+0x32>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 48 89 df                      movq    %rbx, %rdi
// 1c7: 4c 89 f6                      movq    %r14, %rsi
// 1ca: 4c 89 fa                      movq    %r15, %rdx
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 48 29 d8                      subq    %rbx, %rax
// 1e0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1e8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1eb: 31 c0                         xorl    %eax, %eax
// 1ed: e9 68 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1f2: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[499] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x35, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x83, 0x79, 0x20, 0x00, 0x0f, 0x8e, 0x78, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x68, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 45                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 8b 41 18                   movq    0x18(%rcx), %rax
// 1b3: 48 85 c0                      testq   %rax, %rax
// 1b6: 0f 84 76 fe ff ff             je      0x32 <_JIT_ENTRY+0x32>
// 1bc: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1c0: 48 3b 48 10                   cmpq    0x10(%rax), %rcx
// 1c4: 0f 8d 68 fe ff ff             jge     0x32 <_JIT_ENTRY+0x32>
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_CONTINUE
// 1d4: 48 89 df                      movq    %rbx, %rdi
// 1d7: 4c 89 f6                      movq    %r14, %rsi
// 1da: 4c 89 fa                      movq    %r15, %rdx
// 1dd: 48 83 c4 08                   addq    $0x8, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 48 29 d8                      subq    %rbx, %rax
// 1f0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1fb: 31 c0                         xorl    %eax, %eax
// 1fd: e9 58 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 202: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[515] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x45, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x41, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x76, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0x48, 0x10, 0x0f, 0x8d, 0x68, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x58, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_GUARD_TYPE_VERSION
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_GUARD_TYPE_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 94 01 00 00             jne     0x1b9 <_JIT_ENTRY+0x1b9>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 7f 01 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 77                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 48 8b 41 08                   movq    0x8(%rcx), %rax
// 184: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000186:  R_X86_64_64  _JIT_OPERAND
// 18e: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 194: 75 23                         jne     0x1b9 <_JIT_ENTRY+0x1b9>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _JIT_CONTINUE
// 1a0: 48 89 df                      movq    %rbx, %rdi
// 1a3: 4c 89 f6                      movq    %r14, %rsi
// 1a6: 4c 89 fa                      movq    %r15, %rdx
// 1a9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ad: 5b                            popq    %rbx
// 1ae: 41 5c                         popq    %r12
// 1b0: 41 5d                         popq    %r13
// 1b2: 41 5e                         popq    %r14
// 1b4: 41 5f                         popq    %r15
// 1b6: 5d                            popq    %rbp
// 1b7: ff e0                         jmpq    *%rax
// 1b9: 49 29 de                      subq    %rbx, %r14
// 1bc: 49 83 c6 b8                   addq    $-0x48, %r14
// 1c0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1c8: 48 8b 03                      movq    (%rbx), %rax
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  _JIT_TARGET
// 1d5: 89 c9                         movl    %ecx, %ecx
// 1d7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1db: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e1: 48 83 c4 08                   addq    $0x8, %rsp
// 1e5: 5b                            popq    %rbx
// 1e6: 41 5c                         popq    %r12
// 1e8: 41 5d                         popq    %r13
// 1ea: 41 5e                         popq    %r14
// 1ec: 41 5f                         popq    %r15
// 1ee: 5d                            popq    %rbp
// 1ef: c3                            retq
// 1f0: 48 29 d8                      subq    %rbx, %rax
// 1f3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1fb: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1fe: 31 c0                         xorl    %eax, %eax
// 200: eb df                         jmp     0x1e1 <_JIT_ENTRY+0x1e1>
// 202: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_TYPE_VERSION_code_body[515] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x94, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x77, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x41, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_TYPE_VERSION_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_GUARD_TYPE_VERSION_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 04 24                   movq    (%rsp), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 0f 84 2d 01 00 00             je      0x2d5 <_JIT_ENTRY+0x2d5>
// 1a8: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1be: 29 c1                         subl    %eax, %ecx
// 1c0: 48 63 c1                      movslq  %ecx, %rax
// 1c3: 4d 8b 64 c6 f0                movq    -0x10(%r14,%rax,8), %r12
// 1c8: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 1cd: 8b 45 00                      movl    (%rbp), %eax
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1da: ff c0                         incl    %eax
// 1dc: 74 0b                         je      0x1e9 <_JIT_ENTRY+0x1e9>
// 1de: 89 45 00                      movl    %eax, (%rbp)
// 1e1: 49 89 cd                      movq    %rcx, %r13
// 1e4: ff d1                         callq   *%rcx
// 1e6: 4c 89 e9                      movq    %r13, %rcx
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 49 89 6c c6 f0                movq    %rbp, -0x10(%r14,%rax,8)
// 201: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 206: 41 8b 45 00                   movl    (%r13), %eax
// 20a: ff c0                         incl    %eax
// 20c: 74 06                         je      0x214 <_JIT_ENTRY+0x214>
// 20e: 41 89 45 00                   movl    %eax, (%r13)
// 212: ff d1                         callq   *%rcx
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: 0f b7 c0                      movzwl  %ax, %eax
// 221: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 226: 29 c1                         subl    %eax, %ecx
// 228: 48 63 c1                      movslq  %ecx, %rax
// 22b: 4d 89 6c c6 f0                movq    %r13, -0x10(%r14,%rax,8)
// 230: 49 8b 04 24                   movq    (%r12), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 7f 22                         jg      0x25b <_JIT_ENTRY+0x25b>
// 239: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023b:  R_X86_64_64  .rodata.str1.1
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_NegativeRefcount
// 24d: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 252: 4c 89 e2                      movq    %r12, %rdx
// 255: ff d0                         callq   *%rax
// 257: 49 8b 04 24                   movq    (%r12), %rax
// 25b: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 2d                         js      0x290 <_JIT_ENTRY+0x290>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: 48 89 34 24                   movq    %rsi, (%rsp)
// 271: ff d0                         callq   *%rax
// 273: 48 8b 34 24                   movq    (%rsp), %rsi
// 277: 49 ff 0c 24                   decq    (%r12)
// 27b: 75 13                         jne     0x290 <_JIT_ENTRY+0x290>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_Dealloc
// 287: 4c 89 e7                      movq    %r12, %rdi
// 28a: ff d0                         callq   *%rax
// 28c: 48 8b 34 24                   movq    (%rsp), %rsi
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _JIT_OPARG
// 29a: 0f b7 c0                      movzwl  %ax, %eax
// 29d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 2a2: 29 c1                         subl    %eax, %ecx
// 2a4: 48 63 c9                      movslq  %ecx, %rcx
// 2a7: 4d 89 6c ce f0                movq    %r13, -0x10(%r14,%rcx,8)
// 2ac: f7 d0                         notl    %eax
// 2ae: 48 98                         cltq
// 2b0: 49 89 6c c6 f0                movq    %rbp, -0x10(%r14,%rax,8)
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _JIT_CONTINUE
// 2bf: 48 89 df                      movq    %rbx, %rdi
// 2c2: 4c 89 fa                      movq    %r15, %rdx
// 2c5: 48 83 c4 08                   addq    $0x8, %rsp
// 2c9: 5b                            popq    %rbx
// 2ca: 41 5c                         popq    %r12
// 2cc: 41 5d                         popq    %r13
// 2ce: 41 5e                         popq    %r14
// 2d0: 41 5f                         popq    %r15
// 2d2: 5d                            popq    %rbp
// 2d3: ff e0                         jmpq    *%rax
// 2d5: 49 83 c6 e8                   addq    $-0x18, %r14
// 2d9: 49 29 de                      subq    %rbx, %r14
// 2dc: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e0: 49 c1 ee 03                   shrq    $0x3, %r14
// 2e4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e8: 31 c0                         xorl    %eax, %eax
// 2ea: e9 6b fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2ef: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[752] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x2d, 0x01, 0x00, 0x00, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x64, 0xc6, 0xf0, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x0b, 0x89, 0x45, 0x00, 0x49, 0x89, 0xcd, 0xff, 0xd1, 0x4c, 0x89, 0xe9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf0, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x6c, 0xc6, 0xf0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x76, 0xf0, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x34, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x6c, 0xce, 0xf0, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6b, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_PY_EXACT_ARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 e6                      movq    %r12, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c5                      movq    %rax, %r13
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 04 24                   movq    (%r12), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 e2                      movq    %r12, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 0c 24                   decq    (%r12)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 e7                      movq    %r12, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 ed                      testq   %r13, %r13
// 19b: 0f 84 27 01 00 00             je      0x2c8 <_JIT_ENTRY+0x2c8>
// 1a1: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _JIT_OPARG
// 1af: 0f b7 c0                      movzwl  %ax, %eax
// 1b2: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1b7: 29 c1                         subl    %eax, %ecx
// 1b9: f7 d0                         notl    %eax
// 1bb: 48 63 d0                      movslq  %eax, %rdx
// 1be: 48 63 c1                      movslq  %ecx, %rax
// 1c1: 49 8b 6c c6 f0                movq    -0x10(%r14,%rax,8), %rbp
// 1c6: 49 8b 4c d6 f0                movq    -0x10(%r14,%rdx,8), %rcx
// 1cb: 4c 8b 6d 30                   movq    0x30(%rbp), %r13
// 1cf: 48 8b 34 24                   movq    (%rsp), %rsi
// 1d3: 4c 8b be 00 01 00 00          movq    0x100(%rsi), %r15
// 1da: 49 63 45 4c                   movslq  0x4c(%r13), %rax
// 1de: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1e2: 48 89 86 00 01 00 00          movq    %rax, 0x100(%rsi)
// 1e9: 49 89 6f 10                   movq    %rbp, 0x10(%r15)
// 1ed: 41 8b 45 00                   movl    (%r13), %eax
// 1f1: ff c0                         incl    %eax
// 1f3: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 1f7: 49 83 c4 f0                   addq    $-0x10, %r12
// 1fb: 48 85 c9                      testq   %rcx, %rcx
// 1fe: 0f 84 de 00 00 00             je      0x2e2 <_JIT_ENTRY+0x2e2>
// 204: 85 c0                         testl   %eax, %eax
// 206: 74 10                         je      0x218 <_JIT_ENTRY+0x218>
// 208: 41 89 45 00                   movl    %eax, (%r13)
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 216: ff d0                         callq   *%rax
// 218: 4d 89 2f                      movq    %r13, (%r15)
// 21b: 0f 10 45 10                   movups  0x10(%rbp), %xmm0
// 21f: 41 0f 11 47 18                movups  %xmm0, 0x18(%r15)
// 224: 49 c7 47 28 00 00 00 00       movq    $0x0, 0x28(%r15)
// 22c: 41 8b 4d 48                   movl    0x48(%r13), %ecx
// 230: 41 89 4f 40                   movl    %ecx, 0x40(%r15)
// 234: 49 c7 47 30 00 00 00 00       movq    $0x0, 0x30(%r15)
// 23c: 49 81 c5 c8 00 00 00          addq    $0xc8, %r13
// 243: 4d 89 6f 38                   movq    %r13, 0x38(%r15)
// 247: 66 41 c7 47 44 00 00          movw    $0x0, 0x44(%r15)
// 24e: 41 c6 47 46 00                movb    $0x0, 0x46(%r15)
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _JIT_OPARG
// 25d: 44 0f b7 e8                   movzwl  %ax, %r13d
// 261: 41 ff c5                      incl    %r13d
// 264: 45 85 ed                      testl   %r13d, %r13d
// 267: 0f 9f c2                      setg    %dl
// 26a: 44 39 e9                      cmpl    %r13d, %ecx
// 26d: 0f 8e 1c 01 00 00             jle     0x38f <_JIT_ENTRY+0x38f>
// 273: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000275:  R_X86_64_64  _JIT_OPARG
// 27d: 44 0f b7 ed                   movzwl  %bp, %r13d
// 281: 41 ff c5                      incl    %r13d
// 284: 4b 8d 3c ef                   leaq    (%r15,%r13,8), %rdi
// 288: 48 83 c7 48                   addq    $0x48, %rdi
// 28c: 44 89 e8                      movl    %r13d, %eax
// 28f: f7 d0                         notl    %eax
// 291: 01 c1                         addl    %eax, %ecx
// 293: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  memset
// 2a5: 31 f6                         xorl    %esi, %esi
// 2a7: ff d0                         callq   *%rax
// 2a9: 45 85 ed                      testl   %r13d, %r13d
// 2ac: 0f 8e c5 01 00 00             jle     0x477 <_JIT_ENTRY+0x477>
// 2b2: 0f b7 cd                      movzwl  %bp, %ecx
// 2b5: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2b9: 4c 89 f0                      movq    %r14, %rax
// 2bc: 48 29 c8                      subq    %rcx, %rax
// 2bf: 48 83 c0 e8                   addq    $-0x18, %rax
// 2c3: e9 f0 00 00 00                jmp     0x3b8 <_JIT_ENTRY+0x3b8>
// 2c8: 49 83 c6 e8                   addq    $-0x18, %r14
// 2cc: 49 29 de                      subq    %rbx, %r14
// 2cf: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d3: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2db: 31 c0                         xorl    %eax, %eax
// 2dd: e9 78 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 74 10                         je      0x2f6 <_JIT_ENTRY+0x2f6>
// 2e6: 41 89 45 00                   movl    %eax, (%r13)
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2f4: ff d0                         callq   *%rax
// 2f6: 4d 89 2f                      movq    %r13, (%r15)
// 2f9: 0f 10 45 10                   movups  0x10(%rbp), %xmm0
// 2fd: 41 0f 11 47 18                movups  %xmm0, 0x18(%r15)
// 302: 49 c7 47 28 00 00 00 00       movq    $0x0, 0x28(%r15)
// 30a: 41 8b 45 48                   movl    0x48(%r13), %eax
// 30e: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 312: 49 c7 47 30 00 00 00 00       movq    $0x0, 0x30(%r15)
// 31a: 49 81 c5 c8 00 00 00          addq    $0xc8, %r13
// 321: 4d 89 6f 38                   movq    %r13, 0x38(%r15)
// 325: 66 41 c7 47 44 00 00          movw    $0x0, 0x44(%r15)
// 32c: 41 c6 47 46 00                movb    $0x0, 0x46(%r15)
// 331: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000333:  R_X86_64_64  _JIT_OPARG
// 33b: 44 0f b7 e9                   movzwl  %cx, %r13d
// 33f: 45 85 ed                      testl   %r13d, %r13d
// 342: 0f 9f c2                      setg    %dl
// 345: 44 39 e8                      cmpl    %r13d, %eax
// 348: 7e 57                         jle     0x3a1 <_JIT_ENTRY+0x3a1>
// 34a: 0f b7 e9                      movzwl  %cx, %ebp
// 34d: 49 8d 3c ef                   leaq    (%r15,%rbp,8), %rdi
// 351: 48 83 c7 48                   addq    $0x48, %rdi
// 355: 44 0f b7 e9                   movzwl  %cx, %r13d
// 359: 44 89 e9                      movl    %r13d, %ecx
// 35c: f7 d1                         notl    %ecx
// 35e: 01 c8                         addl    %ecx, %eax
// 360: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  memset
// 372: 31 f6                         xorl    %esi, %esi
// 374: ff d0                         callq   *%rax
// 376: 45 85 ed                      testl   %r13d, %r13d
// 379: 0f 8e f8 00 00 00             jle     0x477 <_JIT_ENTRY+0x477>
// 37f: 48 c1 e5 03                   shlq    $0x3, %rbp
// 383: 4c 89 f0                      movq    %r14, %rax
// 386: 48 29 e8                      subq    %rbp, %rax
// 389: 48 83 c0 f0                   addq    $-0x10, %rax
// 38d: eb 29                         jmp     0x3b8 <_JIT_ENTRY+0x3b8>
// 38f: f7 d0                         notl    %eax
// 391: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 397: f6 c2 01                      testb   $0x1, %dl
// 39a: 75 14                         jne     0x3b0 <_JIT_ENTRY+0x3b0>
// 39c: e9 d6 00 00 00                jmp     0x477 <_JIT_ENTRY+0x477>
// 3a1: 0f b7 c1                      movzwl  %cx, %eax
// 3a4: 48 f7 d8                      negq    %rax
// 3a7: f6 c2 01                      testb   $0x1, %dl
// 3aa: 0f 84 c7 00 00 00             je      0x477 <_JIT_ENTRY+0x477>
// 3b0: 49 8d 4e f0                   leaq    -0x10(%r14), %rcx
// 3b4: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 3b8: 41 83 fd 02                   cmpl    $0x2, %r13d
// 3bc: b9 01 00 00 00                movl    $0x1, %ecx
// 3c1: 41 0f 4d cd                   cmovgel %r13d, %ecx
// 3c5: 83 f9 08                      cmpl    $0x8, %ecx
// 3c8: 72 10                         jb      0x3da <_JIT_ENTRY+0x3da>
// 3ca: 4c 89 fa                      movq    %r15, %rdx
// 3cd: 48 29 c2                      subq    %rax, %rdx
// 3d0: 48 83 c2 48                   addq    $0x48, %rdx
// 3d4: 48 83 fa 20                   cmpq    $0x20, %rdx
// 3d8: 73 68                         jae     0x442 <_JIT_ENTRY+0x442>
// 3da: 31 d2                         xorl    %edx, %edx
// 3dc: 48 89 d6                      movq    %rdx, %rsi
// 3df: 48 f7 d6                      notq    %rsi
// 3e2: 48 01 ce                      addq    %rcx, %rsi
// 3e5: 48 89 cf                      movq    %rcx, %rdi
// 3e8: 48 83 e7 03                   andq    $0x3, %rdi
// 3ec: 74 13                         je      0x401 <_JIT_ENTRY+0x401>
// 3ee: 66 90                         nop
// 3f0: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 3f4: 4d 89 44 d7 48                movq    %r8, 0x48(%r15,%rdx,8)
// 3f9: 48 ff c2                      incq    %rdx
// 3fc: 48 ff cf                      decq    %rdi
// 3ff: 75 ef                         jne     0x3f0 <_JIT_ENTRY+0x3f0>
// 401: 48 83 fe 03                   cmpq    $0x3, %rsi
// 405: 72 70                         jb      0x477 <_JIT_ENTRY+0x477>
// 407: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 410: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 414: 49 89 74 d7 48                movq    %rsi, 0x48(%r15,%rdx,8)
// 419: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 41e: 49 89 74 d7 50                movq    %rsi, 0x50(%r15,%rdx,8)
// 423: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 428: 49 89 74 d7 58                movq    %rsi, 0x58(%r15,%rdx,8)
// 42d: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 432: 49 89 74 d7 60                movq    %rsi, 0x60(%r15,%rdx,8)
// 437: 48 83 c2 04                   addq    $0x4, %rdx
// 43b: 48 39 d1                      cmpq    %rdx, %rcx
// 43e: 75 d0                         jne     0x410 <_JIT_ENTRY+0x410>
// 440: eb 35                         jmp     0x477 <_JIT_ENTRY+0x477>
// 442: 89 ca                         movl    %ecx, %edx
// 444: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 44a: 31 f6                         xorl    %esi, %esi
// 44c: 0f 1f 40 00                   nopl    (%rax)
// 450: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 454: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 459: 41 0f 11 44 f7 48             movups  %xmm0, 0x48(%r15,%rsi,8)
// 45f: 41 0f 11 4c f7 58             movups  %xmm1, 0x58(%r15,%rsi,8)
// 465: 48 83 c6 04                   addq    $0x4, %rsi
// 469: 48 39 f2                      cmpq    %rsi, %rdx
// 46c: 75 e2                         jne     0x450 <_JIT_ENTRY+0x450>
// 46e: 48 39 ca                      cmpq    %rcx, %rdx
// 471: 0f 85 65 ff ff ff             jne     0x3dc <_JIT_ENTRY+0x3dc>
// 477: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000479:  R_X86_64_64  _JIT_OPARG
// 481: 0f b7 c0                      movzwl  %ax, %eax
// 484: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 489: 29 c1                         subl    %eax, %ecx
// 48b: 48 63 c1                      movslq  %ecx, %rax
// 48e: 4d 89 7c c6 f0                movq    %r15, -0x10(%r14,%rax,8)
// 493: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000495:  R_X86_64_64  _JIT_CONTINUE
// 49d: 48 89 df                      movq    %rbx, %rdi
// 4a0: 4c 89 e6                      movq    %r12, %rsi
// 4a3: 48 8b 14 24                   movq    (%rsp), %rdx
// 4a7: 48 83 c4 08                   addq    $0x8, %rsp
// 4ab: 5b                            popq    %rbx
// 4ac: 41 5c                         popq    %r12
// 4ae: 41 5d                         popq    %r13
// 4b0: 41 5e                         popq    %r14
// 4b2: 41 5f                         popq    %r15
// 4b4: 5d                            popq    %rbp
// 4b5: ff e0                         jmpq    *%rax
// 4b7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_PY_EXACT_ARGS_code_body[1208] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x6c, 0xc6, 0xf0, 0x49, 0x8b, 0x4c, 0xd6, 0xf0, 0x4c, 0x8b, 0x6d, 0x30, 0x48, 0x8b, 0x34, 0x24, 0x4c, 0x8b, 0xbe, 0x00, 0x01, 0x00, 0x00, 0x49, 0x63, 0x45, 0x4c, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x89, 0x86, 0x00, 0x01, 0x00, 0x00, 0x49, 0x89, 0x6f, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x4d, 0x8d, 0x24, 0xd6, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2f, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x47, 0x18, 0x49, 0xc7, 0x47, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4d, 0x48, 0x41, 0x89, 0x4f, 0x40, 0x49, 0xc7, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0x38, 0x66, 0x41, 0xc7, 0x47, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x47, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x41, 0xff, 0xc5, 0x45, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe9, 0x0f, 0x8e, 0x1c, 0x01, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xed, 0x41, 0xff, 0xc5, 0x4b, 0x8d, 0x3c, 0xef, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0xc5, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xcd, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xe8, 0xe9, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x78, 0xfd, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2f, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x47, 0x18, 0x49, 0xc7, 0x47, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x48, 0x41, 0x89, 0x47, 0x40, 0x49, 0xc7, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0x38, 0x66, 0x41, 0xc7, 0x47, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x47, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe9, 0x45, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe8, 0x7e, 0x57, 0x0f, 0xb7, 0xe9, 0x49, 0x8d, 0x3c, 0xef, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x0f, 0xb7, 0xe9, 0x44, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xc1, 0xe5, 0x03, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xf0, 0xeb, 0x29, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x75, 0x14, 0xe9, 0xd6, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x4e, 0xf0, 0x48, 0x8d, 0x04, 0xc1, 0x41, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xfa, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x68, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x13, 0x66, 0x90, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd7, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd7, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd7, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd7, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd7, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf7, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf7, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x65, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_PY_EXACT_ARGS_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x479, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x495, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_INSERT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_INSERT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 85 ed                      testq   %rbp, %rbp
// 1a2: 74 69                         je      0x20d <_JIT_ENTRY+0x20d>
// 1a4: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 1a8: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 d0                      movzwl  %ax, %edx
// 1b9: f7 d0                         notl    %eax
// 1bb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1c0: 4c 63 e8                      movslq  %eax, %r13
// 1c3: 4b 8d 3c ee                   leaq    (%r14,%r13,8), %rdi
// 1c7: 48 83 c7 f0                   addq    $-0x10, %rdi
// 1cb: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1cf: 4c 89 f6                      movq    %r14, %rsi
// 1d2: 48 29 d6                      subq    %rdx, %rsi
// 1d5: 48 83 c6 f0                   addq    $-0x10, %rsi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  memmove
// 1e3: ff d0                         callq   *%rax
// 1e5: 4b 89 6c ee f0                movq    %rbp, -0x10(%r14,%r13,8)
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _JIT_CONTINUE
// 1f4: 48 89 df                      movq    %rbx, %rdi
// 1f7: 4c 89 e6                      movq    %r12, %rsi
// 1fa: 4c 89 fa                      movq    %r15, %rdx
// 1fd: 48 83 c4 08                   addq    $0x8, %rsp
// 201: 5b                            popq    %rbx
// 202: 41 5c                         popq    %r12
// 204: 41 5d                         popq    %r13
// 206: 41 5e                         popq    %r14
// 208: 41 5f                         popq    %r15
// 20a: 5d                            popq    %rbp
// 20b: ff e0                         jmpq    *%rax
// 20d: 49 83 c6 e8                   addq    $-0x18, %r14
// 211: 49 29 de                      subq    %rbx, %r14
// 214: 49 83 c6 b8                   addq    $-0x48, %r14
// 218: 49 c1 ee 03                   shrq    $0x3, %r14
// 21c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 220: 31 c0                         xorl    %eax, %eax
// 222: e9 33 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 227: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_INSERT_code_body[552] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x69, 0x4d, 0x8d, 0x66, 0xf0, 0x49, 0x89, 0x6e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4b, 0x8d, 0x3c, 0xee, 0x48, 0x83, 0xc7, 0xf0, 0x48, 0xc1, 0xe2, 0x03, 0x4c, 0x89, 0xf6, 0x48, 0x29, 0xd6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x89, 0x6c, 0xee, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x33, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_INSERT_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_INSERT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_IS_NONE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_IS_NONE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 74 73                         je      0x21b <_JIT_ENTRY+0x21b>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 49 89 2c 24                   movq    %rbp, (%r12)
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_NoneStruct
// 1ba: 48 39 c5                      cmpq    %rax, %rbp
// 1bd: 74 72                         je      0x231 <_JIT_ENTRY+0x231>
// 1bf: 48 8b 45 00                   movq    (%rbp), %rax
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 7f 22                         jg      0x1ea <_JIT_ENTRY+0x1ea>
// 1c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ca:  R_X86_64_64  .rodata.str1.1
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 1e1: 48 89 ea                      movq    %rbp, %rdx
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 8b 45 00                   movq    (%rbp), %rax
// 1ea: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001ec:  R_X86_64_64  _Py_FalseStruct
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 78 43                         js      0x23b <_JIT_ENTRY+0x23b>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 202: ff d0                         callq   *%rax
// 204: 48 ff 4d 00                   decq    (%rbp)
// 208: 75 31                         jne     0x23b <_JIT_ENTRY+0x23b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 48 89 ef                      movq    %rbp, %rdi
// 217: ff d0                         callq   *%rax
// 219: eb 20                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 21b: 49 29 dc                      subq    %rbx, %r12
// 21e: 49 83 c4 b8                   addq    $-0x48, %r12
// 222: 49 c1 ec 03                   shrq    $0x3, %r12
// 226: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 22a: 31 c0                         xorl    %eax, %eax
// 22c: e9 29 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 231: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000233:  R_X86_64_64  _Py_TrueStruct
// 23b: 4d 89 2c 24                   movq    %r13, (%r12)
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_CONTINUE
// 249: 48 89 df                      movq    %rbx, %rdi
// 24c: 4c 89 f6                      movq    %r14, %rsi
// 24f: 4c 89 fa                      movq    %r15, %rdx
// 252: 48 83 c4 08                   addq    $0x8, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: ff e0                         jmpq    *%rax
// 262: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_IS_NONE_code_body[611] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x73, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc5, 0x74, 0x72, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x20, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x29, 0xfe, 0xff, 0xff, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_IS_NONE_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_IS_NONE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_IS_OP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_IS_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c7                      movq    %rax, %r15
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4d 89 fc                      movq    %r15, %r12
// 12b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000012d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 135: 78 18                         js      0x14f <_JIT_ENTRY+0x14f>
// 137: 41 ff d7                      callq   *%r15
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 18                         js      0x196 <_JIT_ENTRY+0x196>
// 17e: 41 ff d7                      callq   *%r15
// 181: 49 ff 4d 00                   decq    (%r13)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 ef                      movq    %r13, %rdi
// 194: ff d0                         callq   *%rax
// 196: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19a: 4d 85 e4                      testq   %r12, %r12
// 19d: 0f 84 eb 00 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// 1a3: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a7: 49 8b 6e e0                   movq    -0x20(%r14), %rbp
// 1ab: 48 8b 45 00                   movq    (%rbp), %rax
// 1af: 48 85 c0                      testq   %rax, %rax
// 1b2: 7f 22                         jg      0x1d6 <_JIT_ENTRY+0x1d6>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 1cd: 48 89 ea                      movq    %rbp, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 45 00                   movq    (%rbp), %rax
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 78 18                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1da: 41 ff d7                      callq   *%r15
// 1dd: 48 ff 4d 00                   decq    (%rbp)
// 1e1: 75 0f                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_Dealloc
// 1ed: 48 89 ef                      movq    %rbp, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 8b 04 24                   movq    (%r12), %rax
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 7f 22                         jg      0x21d <_JIT_ENTRY+0x21d>
// 1fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_NegativeRefcount
// 20f: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 214: 4c 89 e2                      movq    %r12, %rdx
// 217: ff d0                         callq   *%rax
// 219: 49 8b 04 24                   movq    (%r12), %rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 78 18                         js      0x239 <_JIT_ENTRY+0x239>
// 221: 41 ff d7                      callq   *%r15
// 224: 49 ff 0c 24                   decq    (%r12)
// 228: 75 0f                         jne     0x239 <_JIT_ENTRY+0x239>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 e7                      movq    %r12, %rdi
// 237: ff d0                         callq   *%rax
// 239: 31 c0                         xorl    %eax, %eax
// 23b: 4c 39 e5                      cmpq    %r12, %rbp
// 23e: 0f 94 c0                      sete    %al
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  _JIT_OPARG
// 24b: 66 39 c8                      cmpw    %cx, %ax
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_FalseStruct
// 258: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025a:  R_X86_64_64  _Py_TrueStruct
// 262: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 266: 49 89 4e e0                   movq    %rcx, -0x20(%r14)
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _JIT_CONTINUE
// 274: 48 89 df                      movq    %rbx, %rdi
// 277: 4c 89 ee                      movq    %r13, %rsi
// 27a: 48 8b 14 24                   movq    (%rsp), %rdx
// 27e: 48 83 c4 08                   addq    $0x8, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: ff e0                         jmpq    *%rax
// 28e: 49 29 dd                      subq    %rbx, %r13
// 291: 49 83 c5 b8                   addq    $-0x48, %r13
// 295: 49 c1 ed 03                   shrq    $0x3, %r13
// 299: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 29d: 31 c0                         xorl    %eax, %eax
// 29f: e9 b6 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2a4: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_IS_OP_code_body[677] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4d, 0x89, 0xfc, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x49, 0x8b, 0x6e, 0xe0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x31, 0xc0, 0x4c, 0x39, 0xe5, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xb6, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_IS_OP_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_IS_OP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_LIST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 6b 01 00 00             jne     0x190 <_JIT_ENTRY+0x190>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 56 01 00 00             je      0x190 <_JIT_ENTRY+0x190>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 4e                         je      0x1c7 <_JIT_ENTRY+0x1c7>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  PyListIter_Type
// 18a: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 18e: 74 49                         je      0x1d9 <_JIT_ENTRY+0x1d9>
// 190: 49 29 de                      subq    %rbx, %r14
// 193: 49 83 c6 b8                   addq    $-0x48, %r14
// 197: 49 c1 ee 03                   shrq    $0x3, %r14
// 19b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19f: 48 8b 03                      movq    (%rbx), %rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  _JIT_TARGET
// 1ac: 89 c9                         movl    %ecx, %ecx
// 1ae: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b8: 48 83 c4 08                   addq    $0x8, %rsp
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: 5d                            popq    %rbp
// 1c6: c3                            retq
// 1c7: 48 29 d8                      subq    %rbx, %rax
// 1ca: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ce: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d2: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1d5: 31 c0                         xorl    %eax, %eax
// 1d7: eb df                         jmp     0x1b8 <_JIT_ENTRY+0x1b8>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 f6                      movq    %r14, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 08                   addq    $0x8, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_LIST_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x4e, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x74, 0x49, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_LIST_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_LIST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_RANGE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_RANGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 6b 01 00 00             jne     0x190 <_JIT_ENTRY+0x190>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 56 01 00 00             je      0x190 <_JIT_ENTRY+0x190>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 4e                         je      0x1c7 <_JIT_ENTRY+0x1c7>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  PyRangeIter_Type
// 18a: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 18e: 74 49                         je      0x1d9 <_JIT_ENTRY+0x1d9>
// 190: 49 29 de                      subq    %rbx, %r14
// 193: 49 83 c6 b8                   addq    $-0x48, %r14
// 197: 49 c1 ee 03                   shrq    $0x3, %r14
// 19b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19f: 48 8b 03                      movq    (%rbx), %rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  _JIT_TARGET
// 1ac: 89 c9                         movl    %ecx, %ecx
// 1ae: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b8: 48 83 c4 08                   addq    $0x8, %rsp
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: 5d                            popq    %rbp
// 1c6: c3                            retq
// 1c7: 48 29 d8                      subq    %rbx, %rax
// 1ca: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ce: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d2: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1d5: 31 c0                         xorl    %eax, %eax
// 1d7: eb df                         jmp     0x1b8 <_JIT_ENTRY+0x1b8>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 f6                      movq    %r14, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 08                   addq    $0x8, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_RANGE_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x4e, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x74, 0x49, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_RANGE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_RANGE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_TUPLE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 6b 01 00 00             jne     0x190 <_JIT_ENTRY+0x190>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 56 01 00 00             je      0x190 <_JIT_ENTRY+0x190>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 4e                         je      0x1c7 <_JIT_ENTRY+0x1c7>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  PyTupleIter_Type
// 18a: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 18e: 74 49                         je      0x1d9 <_JIT_ENTRY+0x1d9>
// 190: 49 29 de                      subq    %rbx, %r14
// 193: 49 83 c6 b8                   addq    $-0x48, %r14
// 197: 49 c1 ee 03                   shrq    $0x3, %r14
// 19b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19f: 48 8b 03                      movq    (%rbx), %rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  _JIT_TARGET
// 1ac: 89 c9                         movl    %ecx, %ecx
// 1ae: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b8: 48 83 c4 08                   addq    $0x8, %rsp
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: 5d                            popq    %rbp
// 1c6: c3                            retq
// 1c7: 48 29 d8                      subq    %rbx, %rax
// 1ca: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ce: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d2: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1d5: 31 c0                         xorl    %eax, %eax
// 1d7: eb df                         jmp     0x1b8 <_JIT_ENTRY+0x1b8>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 f6                      movq    %r14, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 08                   addq    $0x8, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_TUPLE_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x4e, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x74, 0x49, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_TUPLE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_TUPLE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_LIST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 49 8b 76 f8                   movq    -0x8(%r14), %rsi
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 48 89 34 24                   movq    %rsi, (%rsp)
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c5                      movq    %rax, %r13
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 5e                         je      0x206 <_JIT_ENTRY+0x206>
// 1a8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1b3: 49 8b 4d 18                   movq    0x18(%r13), %rcx
// 1b7: 48 8b 49 18                   movq    0x18(%rcx), %rcx
// 1bb: 48 8d 50 01                   leaq    0x1(%rax), %rdx
// 1bf: 49 89 55 10                   movq    %rdx, 0x10(%r13)
// 1c3: 4c 8b 2c c1                   movq    (%rcx,%rax,8), %r13
// 1c7: 41 8b 45 00                   movl    (%r13), %eax
// 1cb: ff c0                         incl    %eax
// 1cd: 74 10                         je      0x1df <_JIT_ENTRY+0x1df>
// 1cf: 41 89 45 00                   movl    %eax, (%r13)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1dd: ff d0                         callq   *%rax
// 1df: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _JIT_CONTINUE
// 1ed: 48 89 df                      movq    %rbx, %rdi
// 1f0: 4c 89 e6                      movq    %r12, %rsi
// 1f3: 4c 89 fa                      movq    %r15, %rdx
// 1f6: 48 83 c4 08                   addq    $0x8, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: ff e0                         jmpq    *%rax
// 206: 48 29 d8                      subq    %rbx, %rax
// 209: 48 83 c0 b8                   addq    $-0x48, %rax
// 20d: 48 c1 e8 03                   shrq    $0x3, %rax
// 211: 89 43 40                      movl    %eax, 0x40(%rbx)
// 214: 31 c0                         xorl    %eax, %eax
// 216: e9 3f fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 21b: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_LIST_code_body[540] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x76, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x34, 0x24, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x5e, 0x4d, 0x8d, 0x66, 0xf8, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x45, 0x10, 0x49, 0x8b, 0x4d, 0x18, 0x48, 0x8b, 0x49, 0x18, 0x48, 0x8d, 0x50, 0x01, 0x49, 0x89, 0x55, 0x10, 0x4c, 0x8b, 0x2c, 0xc1, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x3f, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_LIST_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_LIST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_RANGE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_RANGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 e6                      movq    %r12, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c5                      movq    %rax, %r13
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 04 24                   movq    (%r12), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 e2                      movq    %r12, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 0c 24                   decq    (%r12)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 e7                      movq    %r12, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19c: 4d 85 ed                      testq   %r13, %r13
// 19f: 74 59                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 1a1: 4d 8d 7e f0                   leaq    -0x10(%r14), %r15
// 1a5: 4c 89 28                      movq    %r13, (%rax)
// 1a8: 49 8b 7d 10                   movq    0x10(%r13), %rdi
// 1ac: 49 8b 45 18                   movq    0x18(%r13), %rax
// 1b0: 48 01 f8                      addq    %rdi, %rax
// 1b3: 49 89 45 10                   movq    %rax, 0x10(%r13)
// 1b7: 49 ff 4d 20                   decq    0x20(%r13)
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  PyLong_FromLong
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 74 2b                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1cc: 49 83 c6 f8                   addq    $-0x8, %r14
// 1d0: 49 89 07                      movq    %rax, (%r15)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 4c 89 f6                      movq    %r14, %rsi
// 1e3: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e7: 48 83 c4 08                   addq    $0x8, %rsp
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: 5d                            popq    %rbp
// 1f5: ff e0                         jmpq    *%rax
// 1f7: 4c 89 f8                      movq    %r15, %rax
// 1fa: 48 29 d8                      subq    %rbx, %rax
// 1fd: 48 83 c0 b8                   addq    $-0x48, %rax
// 201: 48 c1 e8 03                   shrq    $0x3, %rax
// 205: 89 43 40                      movl    %eax, 0x40(%rbx)
// 208: 31 c0                         xorl    %eax, %eax
// 20a: e9 4b fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 20f: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_RANGE_code_body[528] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x59, 0x4d, 0x8d, 0x7e, 0xf0, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x7d, 0x10, 0x49, 0x8b, 0x45, 0x18, 0x48, 0x01, 0xf8, 0x49, 0x89, 0x45, 0x10, 0x49, 0xff, 0x4d, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2b, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x4b, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_RANGE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_RANGE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_TUPLE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 49 8b 76 f8                   movq    -0x8(%r14), %rsi
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 48 89 34 24                   movq    %rsi, (%rsp)
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c5                      movq    %rax, %r13
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 5b                         je      0x203 <_JIT_ENTRY+0x203>
// 1a8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1b3: 49 8b 4d 18                   movq    0x18(%r13), %rcx
// 1b7: 48 8d 50 01                   leaq    0x1(%rax), %rdx
// 1bb: 49 89 55 10                   movq    %rdx, 0x10(%r13)
// 1bf: 4c 8b 6c c1 18                movq    0x18(%rcx,%rax,8), %r13
// 1c4: 41 8b 45 00                   movl    (%r13), %eax
// 1c8: ff c0                         incl    %eax
// 1ca: 74 10                         je      0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 41 89 45 00                   movl    %eax, (%r13)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1da: ff d0                         callq   *%rax
// 1dc: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _JIT_CONTINUE
// 1ea: 48 89 df                      movq    %rbx, %rdi
// 1ed: 4c 89 e6                      movq    %r12, %rsi
// 1f0: 4c 89 fa                      movq    %r15, %rdx
// 1f3: 48 83 c4 08                   addq    $0x8, %rsp
// 1f7: 5b                            popq    %rbx
// 1f8: 41 5c                         popq    %r12
// 1fa: 41 5d                         popq    %r13
// 1fc: 41 5e                         popq    %r14
// 1fe: 41 5f                         popq    %r15
// 200: 5d                            popq    %rbp
// 201: ff e0                         jmpq    *%rax
// 203: 48 29 d8                      subq    %rbx, %rax
// 206: 48 83 c0 b8                   addq    $-0x48, %rax
// 20a: 48 c1 e8 03                   shrq    $0x3, %rax
// 20e: 89 43 40                      movl    %eax, 0x40(%rbx)
// 211: 31 c0                         xorl    %eax, %eax
// 213: e9 42 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 218: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_TUPLE_code_body[537] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x76, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x34, 0x24, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x5b, 0x4d, 0x8d, 0x66, 0xf8, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x45, 0x10, 0x49, 0x8b, 0x4d, 0x18, 0x48, 0x8d, 0x50, 0x01, 0x49, 0x89, 0x55, 0x10, 0x4c, 0x8b, 0x6c, 0xc1, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x42, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_TUPLE_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_TUPLE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_JUMP_TO_TOP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_JUMP_TO_TOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 28                         je      0x1d0 <_JIT_ENTRY+0x1d0>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1b3: 48 8b 00                      movq    (%rax), %rax
// 1b6: 84 c0                         testb   %al, %al
// 1b8: 74 2b                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_HandlePending
// 1c4: 4c 89 ff                      movq    %r15, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 74 18                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cd: 4c 89 f0                      movq    %r14, %rax
// 1d0: 48 29 d8                      subq    %rbx, %rax
// 1d3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1d7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1db: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1de: 31 c0                         xorl    %eax, %eax
// 1e0: e9 75 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_CONTINUE
// 1ef: 48 89 df                      movq    %rbx, %rdi
// 1f2: 4c 89 f6                      movq    %r14, %rsi
// 1f5: 4c 89 fa                      movq    %r15, %rdx
// 1f8: 48 83 c4 08                   addq    $0x8, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_JUMP_TO_TOP_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x28, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x18, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x75, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_JUMP_TO_TOP_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_JUMP_TO_TOP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LIST_APPEND
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LIST_APPEND.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 df                      subq    %rbx, %r15
// 35: 49 83 c7 b8                   addq    $-0x48, %r15
// 39: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d6                      movq    %rdx, %r14
// 6c: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 4d 00                   decq    (%r13)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 ef                      movq    %r13, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 19f: 48 8b 34 24                   movq    (%rsp), %rsi
// 1a3: 48 85 f6                      testq   %rsi, %rsi
// 1a6: 74 6a                         je      0x212 <_JIT_ENTRY+0x212>
// 1a8: 49 89 77 e8                   movq    %rsi, -0x18(%r15)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: f7 d0                         notl    %eax
// 1b8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1bd: 48 98                         cltq
// 1bf: 49 8b 7c c7 f0                movq    -0x10(%r15,%rax,8), %rdi
// 1c4: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1c8: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 1cc: 7e 11                         jle     0x1df <_JIT_ENTRY+0x1df>
// 1ce: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 1d2: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 1d6: 48 ff c0                      incq    %rax
// 1d9: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 1dd: eb 10                         jmp     0x1ef <_JIT_ENTRY+0x1ef>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 1e9: ff d0                         callq   *%rax
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 78 23                         js      0x212 <_JIT_ENTRY+0x212>
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _JIT_CONTINUE
// 1f9: 48 89 df                      movq    %rbx, %rdi
// 1fc: 4c 89 e6                      movq    %r12, %rsi
// 1ff: 4c 89 f2                      movq    %r14, %rdx
// 202: 48 83 c4 08                   addq    $0x8, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 49 29 dc                      subq    %rbx, %r12
// 215: 49 83 c4 b8                   addq    $-0x48, %r12
// 219: 49 c1 ec 03                   shrq    $0x3, %r12
// 21d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 221: 31 c0                         xorl    %eax, %eax
// 223: e9 32 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 228: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LIST_APPEND_code_body[553] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xe8, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x6a, 0x49, 0x89, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc7, 0xf0, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x32, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LIST_APPEND_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LIST_APPEND_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LIST_EXTEND
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LIST_EXTEND.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f4                      movq    %rsi, %r12
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 1f: 75 12                         jne     0x33 <_JIT_ENTRY+0x33>
// 21: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 26: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 31: 75 37                         jne     0x6a <_JIT_ENTRY+0x6a>
// 33: 49 29 dc                      subq    %rbx, %r12
// 36: 49 83 c4 b8                   addq    $-0x48, %r12
// 3a: 49 c1 ec 03                   shrq    $0x3, %r12
// 3e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 42: 48 8b 03                      movq    (%rbx), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  _JIT_TARGET
// 4f: 89 c9                         movl    %ecx, %ecx
// 51: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 55: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5b: 48 83 c4 08                   addq    $0x8, %rsp
// 5f: 5b                            popq    %rbx
// 60: 41 5c                         popq    %r12
// 62: 41 5d                         popq    %r13
// 64: 41 5e                         popq    %r14
// 66: 41 5f                         popq    %r15
// 68: 5d                            popq    %rbp
// 69: c3                            retq
// 6a: 49 89 d7                      movq    %rdx, %r15
// 6d: 4d 8b 6c 24 f8                movq    -0x8(%r12), %r13
// 72: 48 8b 03                      movq    (%rbx), %rax
// 75: 48 8b 40 20                   movq    0x20(%rax), %rax
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  _JIT_OPARG
// 83: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 89: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _PySuper_Lookup
// 98: 48 89 ef                      movq    %rbp, %rdi
// 9b: 4c 89 ee                      movq    %r13, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: ff d0                         callq   *%rax
// a2: 48 89 04 24                   movq    %rax, (%rsp)
// a6: 49 8b 06                      movq    (%r14), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f 21                         jg      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c7: 4c 89 f2                      movq    %r14, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 06                      movq    (%r14), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 27                         js      0xfa <_JIT_ENTRY+0xfa>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0e                      decq    (%r14)
// e2: 75 16                         jne     0xfa <_JIT_ENTRY+0xfa>
// e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e6:  R_X86_64_64  PySuper_Type
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: ff d0                         callq   *%rax
// fa: 48 8b 45 00                   movq    (%rbp), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f 22                         jg      0x125 <_JIT_ENTRY+0x125>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11c: 48 89 ea                      movq    %rbp, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 21                         js      0x14a <_JIT_ENTRY+0x14a>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 48 ff 4d 00                   decq    (%rbp)
// 139: 75 0f                         jne     0x14a <_JIT_ENTRY+0x14a>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: 48 89 ef                      movq    %rbp, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 45 00                   movq    (%r13), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7f 22                         jg      0x175 <_JIT_ENTRY+0x175>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16c: 4c 89 ea                      movq    %r13, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 49 8b 45 00                   movq    (%r13), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17b: 78 21                         js      0x19e <_JIT_ENTRY+0x19e>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 187: ff d0                         callq   *%rax
// 189: 49 ff 4d 00                   decq    (%r13)
// 18d: 75 0f                         jne     0x19e <_JIT_ENTRY+0x19e>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 4c 89 ef                      movq    %r13, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 4d 8d 6c 24 e8                leaq    -0x18(%r12), %r13
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 0f 84 6b 01 00 00             je      0x317 <_JIT_ENTRY+0x317>
// 1ac: 49 89 6c 24 e8                movq    %rbp, -0x18(%r12)
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _JIT_OPARG
// 1bb: f7 d0                         notl    %eax
// 1bd: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1c2: 48 98                         cltq
// 1c4: 49 8b 7c c4 f0                movq    -0x10(%r12,%rax,8), %rdi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _PyList_Extend
// 1d3: 48 89 ee                      movq    %rbp, %rsi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 74 73                         je      0x250 <_JIT_ENTRY+0x250>
// 1dd: 48 8b 45 00                   movq    (%rbp), %rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 7f 22                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 1ff: 48 89 ea                      movq    %rbp, %rdx
// 202: ff d0                         callq   *%rax
// 204: 48 8b 45 00                   movq    (%rbp), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 21                         js      0x22d <_JIT_ENTRY+0x22d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 48 ff 4d 00                   decq    (%rbp)
// 21c: 75 0f                         jne     0x22d <_JIT_ENTRY+0x22d>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 48 89 ef                      movq    %rbp, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_CONTINUE
// 237: 48 89 df                      movq    %rbx, %rdi
// 23a: 4c 89 ee                      movq    %r13, %rsi
// 23d: 4c 89 fa                      movq    %r15, %rdx
// 240: 48 83 c4 08                   addq    $0x8, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: ff e0                         jmpq    *%rax
// 250: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000252:  R_X86_64_64  PyExc_TypeError
// 25a: 49 8b 36                      movq    (%r14), %rsi
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _PyErr_ExceptionMatches
// 267: 4c 89 ff                      movq    %r15, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 74 57                         je      0x2c7 <_JIT_ENTRY+0x2c7>
// 270: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 274: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 27c: 75 49                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  PySequence_Check
// 288: 48 89 ef                      movq    %rbp, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 85 c0                         testl   %eax, %eax
// 28f: 75 36                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _PyErr_Clear
// 29b: 4c 89 ff                      movq    %r15, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 49 8b 36                      movq    (%r14), %rsi
// 2a3: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a7: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2ab: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ad:  R_X86_64_64  .rodata.str1.1+0x39
// 2b5: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002b7:  R_X86_64_64  _PyErr_Format
// 2bf: 4c 89 ff                      movq    %r15, %rdi
// 2c2: 31 c0                         xorl    %eax, %eax
// 2c4: 41 ff d0                      callq   *%r8
// 2c7: 48 8b 45 00                   movq    (%rbp), %rax
// 2cb: 48 85 c0                      testq   %rax, %rax
// 2ce: 7f 22                         jg      0x2f2 <_JIT_ENTRY+0x2f2>
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_NegativeRefcount
// 2e4: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 2e9: 48 89 ea                      movq    %rbp, %rdx
// 2ec: ff d0                         callq   *%rax
// 2ee: 48 8b 45 00                   movq    (%rbp), %rax
// 2f2: 85 c0                         testl   %eax, %eax
// 2f4: 78 21                         js      0x317 <_JIT_ENTRY+0x317>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 300: ff d0                         callq   *%rax
// 302: 48 ff 4d 00                   decq    (%rbp)
// 306: 75 0f                         jne     0x317 <_JIT_ENTRY+0x317>
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_Dealloc
// 312: 48 89 ef                      movq    %rbp, %rdi
// 315: ff d0                         callq   *%rax
// 317: 49 29 dd                      subq    %rbx, %r13
// 31a: 49 83 c5 b8                   addq    $-0x48, %r13
// 31e: 49 c1 ed 03                   shrq    $0x3, %r13
// 322: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 326: 31 c0                         xorl    %eax, %eax
// 328: e9 2e fd ff ff                jmp     0x5b <_JIT_ENTRY+0x5b>
// 32d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LIST_EXTEND_code_body[814] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x12, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6c, 0x24, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6c, 0x24, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x89, 0x6c, 0x24, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x73, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x57, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x36, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x2e, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LIST_EXTEND_code_holes[35] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LIST_EXTEND_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ASSERTION_ERROR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 53                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1a8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  PyExc_AssertionError
// 1b9: 4c 8b 28                      movq    (%rax), %r13
// 1bc: 41 8b 45 00                   movl    (%r13), %eax
// 1c0: ff c0                         incl    %eax
// 1c2: 74 10                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 1c4: 41 89 45 00                   movl    %eax, (%r13)
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d2: ff d0                         callq   *%rax
// 1d4: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_CONTINUE
// 1e2: 48 89 df                      movq    %rbx, %rdi
// 1e5: 4c 89 e6                      movq    %r12, %rsi
// 1e8: 4c 89 fa                      movq    %r15, %rdx
// 1eb: 48 83 c4 08                   addq    $0x8, %rsp
// 1ef: 5b                            popq    %rbx
// 1f0: 41 5c                         popq    %r12
// 1f2: 41 5d                         popq    %r13
// 1f4: 41 5e                         popq    %r14
// 1f6: 41 5f                         popq    %r15
// 1f8: 5d                            popq    %rbp
// 1f9: ff e0                         jmpq    *%rax
// 1fb: 48 29 d8                      subq    %rbx, %rax
// 1fe: 48 83 c0 b8                   addq    $-0x48, %rax
// 202: 48 c1 e8 03                   shrq    $0x3, %rax
// 206: 89 43 40                      movl    %eax, 0x40(%rbx)
// 209: 31 c0                         xorl    %eax, %eax
// 20b: e9 4a fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 210: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ASSERTION_ERROR_code_body[529] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x53, 0x4d, 0x8d, 0x66, 0xf8, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x28, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x4a, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ASSERTION_ERROR_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 71: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 49 89 c4                      movq    %rax, %r12
// a8: 49 8b 07                      movq    (%r15), %rax
// ab: 48 85 c0                      testq   %rax, %rax
// ae: 7f 21                         jg      0xd1 <_JIT_ENTRY+0xd1>
// b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_NegativeRefcount
// c4: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c9: 4c 89 fa                      movq    %r15, %rdx
// cc: ff d0                         callq   *%rax
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 27                         js      0xfc <_JIT_ENTRY+0xfc>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0f                      decq    (%r15)
// e4: 75 16                         jne     0xfc <_JIT_ENTRY+0xfc>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  PySuper_Type
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_Dealloc
// fa: ff d0                         callq   *%rax
// fc: 48 8b 45 00                   movq    (%rbp), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7f 22                         jg      0x127 <_JIT_ENTRY+0x127>
// 105: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000107:  R_X86_64_64  .rodata.str1.1
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_NegativeRefcount
// 119: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11e: 48 89 ea                      movq    %rbp, %rdx
// 121: ff d0                         callq   *%rax
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 85 c0                         testl   %eax, %eax
// 129: 78 21                         js      0x14c <_JIT_ENTRY+0x14c>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 135: ff d0                         callq   *%rax
// 137: 48 ff 4d 00                   decq    (%rbp)
// 13b: 75 0f                         jne     0x14c <_JIT_ENTRY+0x14c>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_Dealloc
// 147: 48 89 ef                      movq    %rbp, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 45 00                   movq    (%r13), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 22                         jg      0x177 <_JIT_ENTRY+0x177>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16e: 4c 89 ea                      movq    %r13, %rdx
// 171: ff d0                         callq   *%rax
// 173: 49 8b 45 00                   movq    (%r13), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 21                         js      0x19c <_JIT_ENTRY+0x19c>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 49 ff 4d 00                   decq    (%r13)
// 18b: 75 0f                         jne     0x19c <_JIT_ENTRY+0x19c>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 1a0: 4d 85 e4                      testq   %r12, %r12
// 1a3: 0f 84 28 01 00 00             je      0x2d1 <_JIT_ENTRY+0x2d1>
// 1a9: 4d 89 27                      movq    %r12, (%r15)
// 1ac: 48 8b 03                      movq    (%rbx), %rax
// 1af: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b5:  R_X86_64_64  _JIT_OPARG
// 1bd: 89 ca                         movl    %ecx, %edx
// 1bf: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 1c5: 48 8b 74 90 18                movq    0x18(%rax,%rdx,4), %rsi
// 1ca: f6 c1 01                      testb   $0x1, %cl
// 1cd: 74 2b                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 1cf: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _PyObject_GetMethod
// 1e2: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: ff d0                         callq   *%rax
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 74 42                         je      0x232 <_JIT_ENTRY+0x232>
// 1f0: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f5: e9 95 00 00 00                jmp     0x28f <_JIT_ENTRY+0x28f>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  PyObject_GetAttr
// 204: 4c 89 e7                      movq    %r12, %rdi
// 207: ff d0                         callq   *%rax
// 209: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 20e: 49 8b 04 24                   movq    (%r12), %rax
// 212: 48 85 c0                      testq   %rax, %rax
// 215: 7f 46                         jg      0x25d <_JIT_ENTRY+0x25d>
// 217: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000219:  R_X86_64_64  .rodata.str1.1
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_NegativeRefcount
// 22b: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 230: eb 22                         jmp     0x254 <_JIT_ENTRY+0x254>
// 232: 49 8b 04 24                   movq    (%r12), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 22                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 254: 4c 89 e2                      movq    %r12, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 04 24                   movq    (%r12), %rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 78 21                         js      0x282 <_JIT_ENTRY+0x282>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26b: ff d0                         callq   *%rax
// 26d: 49 ff 0c 24                   decq    (%r12)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 e7                      movq    %r12, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 74 45                         je      0x2d1 <_JIT_ENTRY+0x2d1>
// 28c: 45 31 e4                      xorl    %r12d, %r12d
// 28f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 294: 49 89 07                      movq    %rax, (%r15)
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _JIT_OPARG
// 2a1: a8 01                         testb   $0x1, %al
// 2a3: 74 04                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 2a5: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 2a9: 83 e0 01                      andl    $0x1, %eax
// 2ac: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2b0: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_CONTINUE
// 2be: 48 89 df                      movq    %rbx, %rdi
// 2c1: 48 83 c4 18                   addq    $0x18, %rsp
// 2c5: 5b                            popq    %rbx
// 2c6: 41 5c                         popq    %r12
// 2c8: 41 5d                         popq    %r13
// 2ca: 41 5e                         popq    %r14
// 2cc: 41 5f                         popq    %r15
// 2ce: 5d                            popq    %rbp
// 2cf: ff e0                         jmpq    *%rax
// 2d1: 49 29 df                      subq    %rbx, %r15
// 2d4: 49 83 c7 b8                   addq    $-0x48, %r15
// 2d8: 49 c1 ef 03                   shrq    $0x3, %r15
// 2dc: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2e0: 31 c0                         xorl    %eax, %eax
// 2e2: e9 76 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 2e7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_code_body[744] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x7e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x27, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xca, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x90, 0x18, 0xf6, 0xc1, 0x01, 0x74, 0x2b, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x42, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x45, 0x31, 0xe4, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x04, 0x4d, 0x89, 0x66, 0xf0, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x76, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_CLASS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 74 25                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 1a8: 49 89 2c 24                   movq    %rbp, (%r12)
// 1ac: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001ae:  R_X86_64_64  _JIT_OPERAND
// 1b6: 41 8b 45 00                   movl    (%r13), %eax
// 1ba: ff c0                         incl    %eax
// 1bc: 75 25                         jne     0x1e3 <_JIT_ENTRY+0x1e3>
// 1be: 48 8b 45 00                   movq    (%rbp), %rax
// 1c2: 48 85 c0                      testq   %rax, %rax
// 1c5: 7e 35                         jle     0x1fc <_JIT_ENTRY+0x1fc>
// 1c7: 85 c0                         testl   %eax, %eax
// 1c9: 79 57                         jns     0x222 <_JIT_ENTRY+0x222>
// 1cb: eb 76                         jmp     0x243 <_JIT_ENTRY+0x243>
// 1cd: 49 29 dc                      subq    %rbx, %r12
// 1d0: 49 83 c4 b8                   addq    $-0x48, %r12
// 1d4: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d8: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1dc: 31 c0                         xorl    %eax, %eax
// 1de: e9 77 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1e3: 41 89 45 00                   movl    %eax, (%r13)
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 8b 45 00                   movq    (%rbp), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 7f cb                         jg      0x1c7 <_JIT_ENTRY+0x1c7>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 215: 48 89 ea                      movq    %rbp, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 48 8b 45 00                   movq    (%rbp), %rax
// 21e: 85 c0                         testl   %eax, %eax
// 220: 78 21                         js      0x243 <_JIT_ENTRY+0x243>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22c: ff d0                         callq   *%rax
// 22e: 48 ff 4d 00                   decq    (%rbp)
// 232: 75 0f                         jne     0x243 <_JIT_ENTRY+0x243>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_Dealloc
// 23e: 48 89 ef                      movq    %rbp, %rdi
// 241: ff d0                         callq   *%rax
// 243: 4d 89 2c 24                   movq    %r13, (%r12)
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _JIT_OPARG
// 251: a8 01                         testb   $0x1, %al
// 253: 74 08                         je      0x25d <_JIT_ENTRY+0x25d>
// 255: 49 c7 46 f0 00 00 00 00       movq    $0x0, -0x10(%r14)
// 25d: 83 e0 01                      andl    $0x1, %eax
// 260: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 264: 48 83 c6 f0                   addq    $-0x10, %rsi
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_CONTINUE
// 272: 48 89 df                      movq    %rbx, %rdi
// 275: 4c 89 fa                      movq    %r15, %rdx
// 278: 48 83 c4 08                   addq    $0x8, %rsp
// 27c: 5b                            popq    %rbx
// 27d: 41 5c                         popq    %r12
// 27f: 41 5d                         popq    %r13
// 281: 41 5e                         popq    %r14
// 283: 41 5f                         popq    %r15
// 285: 5d                            popq    %rbp
// 286: ff e0                         jmpq    *%rax
// 288: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_CLASS_code_body[649] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x25, 0x49, 0x89, 0x2c, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x25, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x35, 0x85, 0xc0, 0x79, 0x57, 0xeb, 0x76, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x77, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xcb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_CLASS_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_CLASS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_INSTANCE_VALUE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 49 8b 04 24                   movq    (%r12), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 e2                      movq    %r12, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 04 24                   movq    (%r12), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0c 24                   decq    (%r12)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 1a3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 74 40                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1ad: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 1b1: 49 89 04 24                   movq    %rax, (%r12)
// 1b5: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  _JIT_OPERAND
// 1c3: 0f b7 c9                      movzwl  %cx, %ecx
// 1c6: 48 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %rbp
// 1cb: 48 85 ed                      testq   %rbp, %rbp
// 1ce: 74 33                         je      0x203 <_JIT_ENTRY+0x203>
// 1d0: 8b 45 00                      movl    (%rbp), %eax
// 1d3: ff c0                         incl    %eax
// 1d5: 75 34                         jne     0x20b <_JIT_ENTRY+0x20b>
// 1d7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1dc: 48 8b 00                      movq    (%rax), %rax
// 1df: 48 85 c0                      testq   %rax, %rax
// 1e2: 7e 43                         jle     0x227 <_JIT_ENTRY+0x227>
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 79 74                         jns     0x25c <_JIT_ENTRY+0x25c>
// 1e8: e9 96 00 00 00                jmp     0x283 <_JIT_ENTRY+0x283>
// 1ed: 49 29 dc                      subq    %rbx, %r12
// 1f0: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f4: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f8: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1fc: 31 c0                         xorl    %eax, %eax
// 1fe: e9 5a fe ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 203: 4d 89 ee                      movq    %r13, %r14
// 206: e9 2a fe ff ff                jmp     0x35 <_JIT_ENTRY+0x35>
// 20b: 89 45 00                      movl    %eax, (%rbp)
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 218: ff d0                         callq   *%rax
// 21a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 21f: 48 8b 00                      movq    (%rax), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 7f bd                         jg      0x1e4 <_JIT_ENTRY+0x1e4>
// 227: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000229:  R_X86_64_64  .rodata.str1.1
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_NegativeRefcount
// 23b: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 240: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 245: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 24a: 4c 89 ea                      movq    %r13, %rdx
// 24d: ff d0                         callq   *%rax
// 24f: 49 8b 45 00                   movq    (%r13), %rax
// 253: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 258: 85 c0                         testl   %eax, %eax
// 25a: 78 27                         js      0x283 <_JIT_ENTRY+0x283>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 266: ff d0                         callq   *%rax
// 268: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 26d: 48 ff 08                      decq    (%rax)
// 270: 75 11                         jne     0x283 <_JIT_ENTRY+0x283>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_Dealloc
// 27c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 89 2c 24                   movq    %rbp, (%r12)
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_OPARG
// 291: a8 01                         testb   $0x1, %al
// 293: 74 08                         je      0x29d <_JIT_ENTRY+0x29d>
// 295: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 29d: 83 e0 01                      andl    $0x1, %eax
// 2a0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a4: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_CONTINUE
// 2b2: 48 89 df                      movq    %rbx, %rdi
// 2b5: 4c 89 fa                      movq    %r15, %rdx
// 2b8: 48 83 c4 18                   addq    $0x18, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_INSTANCE_VALUE_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x40, 0x4d, 0x8d, 0x6e, 0xf0, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x40, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x6c, 0xc8, 0x01, 0x48, 0x85, 0xed, 0x74, 0x33, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x34, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x96, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x5a, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x2a, 0xfe, 0xff, 0xff, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xbd, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_LAZY_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 74 54                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1a8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ac: 48 89 28                      movq    %rbp, (%rax)
// 1af: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b1:  R_X86_64_64  _JIT_OPERAND
// 1b9: 41 8b 45 00                   movl    (%r13), %eax
// 1bd: ff c0                         incl    %eax
// 1bf: 74 10                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1c1: 41 89 45 00                   movl    %eax, (%r13)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 1d5: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 e6                      movq    %r12, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 08                   addq    $0x8, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 48 29 d8                      subq    %rbx, %rax
// 1ff: 48 83 c0 b8                   addq    $-0x48, %rax
// 203: 48 c1 e8 03                   shrq    $0x3, %rax
// 207: 89 43 40                      movl    %eax, 0x40(%rbx)
// 20a: 31 c0                         xorl    %eax, %eax
// 20c: e9 49 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 211: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[530] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x54, 0x4d, 0x8d, 0x66, 0xf8, 0x48, 0x89, 0x28, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xe8, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x49, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_NO_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 74 54                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1a8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ac: 48 89 28                      movq    %rbp, (%rax)
// 1af: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b1:  R_X86_64_64  _JIT_OPERAND
// 1b9: 41 8b 45 00                   movl    (%r13), %eax
// 1bd: ff c0                         incl    %eax
// 1bf: 74 10                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1c1: 41 89 45 00                   movl    %eax, (%r13)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 1d5: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 e6                      movq    %r12, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 08                   addq    $0x8, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 48 29 d8                      subq    %rbx, %rax
// 1ff: 48 83 c0 b8                   addq    $-0x48, %rax
// 203: 48 c1 e8 03                   shrq    $0x3, %rax
// 207: 89 43 40                      movl    %eax, 0x40(%rbx)
// 20a: 31 c0                         xorl    %eax, %eax
// 20c: e9 49 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 211: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_NO_DICT_code_body[530] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x54, 0x4d, 0x8d, 0x66, 0xf8, 0x48, 0x89, 0x28, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xe8, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x49, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_WITH_VALUES.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 48 8b 2c 24                   movq    (%rsp), %rbp
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 48 85 ed                      testq   %rbp, %rbp
// 1a6: 74 54                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1a8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ac: 48 89 28                      movq    %rbp, (%rax)
// 1af: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b1:  R_X86_64_64  _JIT_OPERAND
// 1b9: 41 8b 45 00                   movl    (%r13), %eax
// 1bd: ff c0                         incl    %eax
// 1bf: 74 10                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1c1: 41 89 45 00                   movl    %eax, (%r13)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 1d5: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 e6                      movq    %r12, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 08                   addq    $0x8, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 48 29 d8                      subq    %rbx, %rax
// 1ff: 48 83 c0 b8                   addq    $-0x48, %rax
// 203: 48 c1 e8 03                   shrq    $0x3, %rax
// 207: 89 43 40                      movl    %eax, 0x40(%rbx)
// 20a: 31 c0                         xorl    %eax, %eax
// 20c: e9 49 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 211: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[530] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x54, 0x4d, 0x8d, 0x66, 0xf8, 0x48, 0x89, 0x28, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xe8, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x49, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_MODULE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_MODULE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 49 8b 04 24                   movq    (%r12), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 e2                      movq    %r12, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 04 24                   movq    (%r12), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0c 24                   decq    (%r12)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 1a3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 74 57                         je      0x204 <_JIT_ENTRY+0x204>
// 1ad: 49 89 04 24                   movq    %rax, (%r12)
// 1b1: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1b5: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b9: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1bd: ba 01 00 00 00                movl    $0x1, %edx
// 1c2: 48 d3 e2                      shlq    %cl, %rdx
// 1c5: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 1c9: 48 01 c2                      addq    %rax, %rdx
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _JIT_OPERAND
// 1d6: 0f b7 c0                      movzwl  %ax, %eax
// 1d9: 48 c1 e0 04                   shlq    $0x4, %rax
// 1dd: 48 8b 6c 10 28                movq    0x28(%rax,%rdx), %rbp
// 1e2: 48 85 ed                      testq   %rbp, %rbp
// 1e5: 74 33                         je      0x21a <_JIT_ENTRY+0x21a>
// 1e7: 8b 45 00                      movl    (%rbp), %eax
// 1ea: ff c0                         incl    %eax
// 1ec: 75 34                         jne     0x222 <_JIT_ENTRY+0x222>
// 1ee: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f3: 48 8b 00                      movq    (%rax), %rax
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 7e 43                         jle     0x23e <_JIT_ENTRY+0x23e>
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 79 74                         jns     0x273 <_JIT_ENTRY+0x273>
// 1ff: e9 96 00 00 00                jmp     0x29a <_JIT_ENTRY+0x29a>
// 204: 49 29 dc                      subq    %rbx, %r12
// 207: 49 83 c4 b8                   addq    $-0x48, %r12
// 20b: 49 c1 ec 03                   shrq    $0x3, %r12
// 20f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 213: 31 c0                         xorl    %eax, %eax
// 215: e9 43 fe ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 21a: 4d 89 ee                      movq    %r13, %r14
// 21d: e9 13 fe ff ff                jmp     0x35 <_JIT_ENTRY+0x35>
// 222: 89 45 00                      movl    %eax, (%rbp)
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 22f: ff d0                         callq   *%rax
// 231: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 236: 48 8b 00                      movq    (%rax), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 7f bd                         jg      0x1fb <_JIT_ENTRY+0x1fb>
// 23e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000240:  R_X86_64_64  .rodata.str1.1
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_NegativeRefcount
// 252: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 257: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 25c: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 261: 4c 89 ea                      movq    %r13, %rdx
// 264: ff d0                         callq   *%rax
// 266: 49 8b 45 00                   movq    (%r13), %rax
// 26a: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 26f: 85 c0                         testl   %eax, %eax
// 271: 78 27                         js      0x29a <_JIT_ENTRY+0x29a>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27d: ff d0                         callq   *%rax
// 27f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 284: 48 ff 08                      decq    (%rax)
// 287: 75 11                         jne     0x29a <_JIT_ENTRY+0x29a>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 298: ff d0                         callq   *%rax
// 29a: 49 89 2c 24                   movq    %rbp, (%r12)
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_OPARG
// 2a8: a8 01                         testb   $0x1, %al
// 2aa: 74 08                         je      0x2b4 <_JIT_ENTRY+0x2b4>
// 2ac: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 2b4: 83 e0 01                      andl    $0x1, %eax
// 2b7: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2bb: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_CONTINUE
// 2c9: 48 89 df                      movq    %rbx, %rdi
// 2cc: 4c 89 fa                      movq    %r15, %rdx
// 2cf: 48 83 c4 18                   addq    $0x18, %rsp
// 2d3: 5b                            popq    %rbx
// 2d4: 41 5c                         popq    %r12
// 2d6: 41 5d                         popq    %r13
// 2d8: 41 5e                         popq    %r14
// 2da: 41 5f                         popq    %r15
// 2dc: 5d                            popq    %rbp
// 2dd: ff e0                         jmpq    *%rax
// 2df: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_MODULE_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x57, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4d, 0x8d, 0x6e, 0xf0, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x6c, 0x10, 0x28, 0x48, 0x85, 0xed, 0x74, 0x33, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x34, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x96, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x43, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x13, 0xfe, 0xff, 0xff, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xbd, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_MODULE_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_MODULE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 4d 00                   decq    (%r13)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 ef                      movq    %r13, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 19f: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 0f 84 a1 00 00 00             je      0x24d <_JIT_ENTRY+0x24d>
// 1ac: 4d 89 2c 24                   movq    %r13, (%r12)
// 1b0: 49 8b 45 00                   movq    (%r13), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7f 22                         jg      0x1db <_JIT_ENTRY+0x1db>
// 1b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_NegativeRefcount
// 1cd: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 1d2: 4c 89 ea                      movq    %r13, %rdx
// 1d5: ff d0                         callq   *%rax
// 1d7: 49 8b 45 00                   movq    (%r13), %rax
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 78 21                         js      0x200 <_JIT_ENTRY+0x200>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 ff 4d 00                   decq    (%r13)
// 1ef: 75 0f                         jne     0x200 <_JIT_ENTRY+0x200>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 ef                      movq    %r13, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 49 83 c6 f0                   addq    $-0x10, %r14
// 204: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000206:  R_X86_64_64  _JIT_OPERAND
// 20e: 41 8b 45 00                   movl    (%r13), %eax
// 212: ff c0                         incl    %eax
// 214: 74 10                         je      0x226 <_JIT_ENTRY+0x226>
// 216: 41 89 45 00                   movl    %eax, (%r13)
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 224: ff d0                         callq   *%rax
// 226: 4d 89 2c 24                   movq    %r13, (%r12)
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_CONTINUE
// 234: 48 89 df                      movq    %rbx, %rdi
// 237: 4c 89 f6                      movq    %r14, %rsi
// 23a: 4c 89 fa                      movq    %r15, %rdx
// 23d: 48 83 c4 08                   addq    $0x8, %rsp
// 241: 5b                            popq    %rbx
// 242: 41 5c                         popq    %r12
// 244: 41 5d                         popq    %r13
// 246: 41 5e                         popq    %r14
// 248: 41 5f                         popq    %r15
// 24a: 5d                            popq    %rbp
// 24b: ff e0                         jmpq    *%rax
// 24d: 49 29 dc                      subq    %rbx, %r12
// 250: 49 83 c4 b8                   addq    $-0x48, %r12
// 254: 49 c1 ec 03                   shrq    $0x3, %r12
// 258: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 25c: 31 c0                         xorl    %eax, %eax
// 25e: e9 f7 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 263: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[612] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x4c, 0x8b, 0x2c, 0x24, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 4d 00                   decq    (%r13)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 ef                      movq    %r13, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 19f: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 0f 84 a1 00 00 00             je      0x24d <_JIT_ENTRY+0x24d>
// 1ac: 4d 89 2c 24                   movq    %r13, (%r12)
// 1b0: 49 8b 45 00                   movq    (%r13), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7f 22                         jg      0x1db <_JIT_ENTRY+0x1db>
// 1b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_NegativeRefcount
// 1cd: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 1d2: 4c 89 ea                      movq    %r13, %rdx
// 1d5: ff d0                         callq   *%rax
// 1d7: 49 8b 45 00                   movq    (%r13), %rax
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 78 21                         js      0x200 <_JIT_ENTRY+0x200>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 ff 4d 00                   decq    (%r13)
// 1ef: 75 0f                         jne     0x200 <_JIT_ENTRY+0x200>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 ef                      movq    %r13, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 49 83 c6 f0                   addq    $-0x10, %r14
// 204: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000206:  R_X86_64_64  _JIT_OPERAND
// 20e: 41 8b 45 00                   movl    (%r13), %eax
// 212: ff c0                         incl    %eax
// 214: 74 10                         je      0x226 <_JIT_ENTRY+0x226>
// 216: 41 89 45 00                   movl    %eax, (%r13)
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 224: ff d0                         callq   *%rax
// 226: 4d 89 2c 24                   movq    %r13, (%r12)
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_CONTINUE
// 234: 48 89 df                      movq    %rbx, %rdi
// 237: 4c 89 f6                      movq    %r14, %rsi
// 23a: 4c 89 fa                      movq    %r15, %rdx
// 23d: 48 83 c4 08                   addq    $0x8, %rsp
// 241: 5b                            popq    %rbx
// 242: 41 5c                         popq    %r12
// 244: 41 5d                         popq    %r13
// 246: 41 5e                         popq    %r14
// 248: 41 5f                         popq    %r15
// 24a: 5d                            popq    %rbp
// 24b: ff e0                         jmpq    *%rax
// 24d: 49 29 dc                      subq    %rbx, %r12
// 250: 49 83 c4 b8                   addq    $-0x48, %r12
// 254: 49 c1 ec 03                   shrq    $0x3, %r12
// 258: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 25c: 31 c0                         xorl    %eax, %eax
// 25e: e9 f7 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 263: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[612] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x4c, 0x8b, 0x2c, 0x24, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xf7, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_SLOT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_SLOT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 49 8b 04 24                   movq    (%r12), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 e2                      movq    %r12, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 04 24                   movq    (%r12), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0c 24                   decq    (%r12)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 4d 00                   decq    (%r13)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 ef                      movq    %r13, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 1a8: 48 85 ed                      testq   %rbp, %rbp
// 1ab: 74 3c                         je      0x1e9 <_JIT_ENTRY+0x1e9>
// 1ad: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 1b1: 49 89 2c 24                   movq    %rbp, (%r12)
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _JIT_OPERAND
// 1bf: 0f b7 c0                      movzwl  %ax, %eax
// 1c2: 48 8b 6c 05 00                movq    (%rbp,%rax), %rbp
// 1c7: 48 85 ed                      testq   %rbp, %rbp
// 1ca: 74 33                         je      0x1ff <_JIT_ENTRY+0x1ff>
// 1cc: 8b 45 00                      movl    (%rbp), %eax
// 1cf: ff c0                         incl    %eax
// 1d1: 75 34                         jne     0x207 <_JIT_ENTRY+0x207>
// 1d3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1d8: 48 8b 00                      movq    (%rax), %rax
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 7e 43                         jle     0x223 <_JIT_ENTRY+0x223>
// 1e0: 85 c0                         testl   %eax, %eax
// 1e2: 79 74                         jns     0x258 <_JIT_ENTRY+0x258>
// 1e4: e9 96 00 00 00                jmp     0x27f <_JIT_ENTRY+0x27f>
// 1e9: 49 29 dc                      subq    %rbx, %r12
// 1ec: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f0: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f4: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1f8: 31 c0                         xorl    %eax, %eax
// 1fa: e9 5e fe ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 1ff: 4d 89 ee                      movq    %r13, %r14
// 202: e9 2e fe ff ff                jmp     0x35 <_JIT_ENTRY+0x35>
// 207: 89 45 00                      movl    %eax, (%rbp)
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 214: ff d0                         callq   *%rax
// 216: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 21b: 48 8b 00                      movq    (%rax), %rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 7f bd                         jg      0x1e0 <_JIT_ENTRY+0x1e0>
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  .rodata.str1.1
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 23c: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 241: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 246: 4c 89 ea                      movq    %r13, %rdx
// 249: ff d0                         callq   *%rax
// 24b: 49 8b 45 00                   movq    (%r13), %rax
// 24f: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 254: 85 c0                         testl   %eax, %eax
// 256: 78 27                         js      0x27f <_JIT_ENTRY+0x27f>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 262: ff d0                         callq   *%rax
// 264: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 269: 48 ff 08                      decq    (%rax)
// 26c: 75 11                         jne     0x27f <_JIT_ENTRY+0x27f>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_Dealloc
// 278: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 27d: ff d0                         callq   *%rax
// 27f: 49 89 2c 24                   movq    %rbp, (%r12)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: a8 01                         testb   $0x1, %al
// 28f: 74 08                         je      0x299 <_JIT_ENTRY+0x299>
// 291: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 299: 83 e0 01                      andl    $0x1, %eax
// 29c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2a0: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 48 89 df                      movq    %rbx, %rdi
// 2b1: 4c 89 fa                      movq    %r15, %rdx
// 2b4: 48 83 c4 18                   addq    $0x18, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_SLOT_code_body[709] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x3c, 0x4d, 0x8d, 0x6e, 0xf0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x6c, 0x05, 0x00, 0x48, 0x85, 0xed, 0x74, 0x33, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x34, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x96, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x5e, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x2e, 0xfe, 0xff, 0xff, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xbd, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_SLOT_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_SLOT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_WITH_HINT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 0f 85 45 02 00 00             jne     0x26a <_JIT_ENTRY+0x26a>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 30 02 00 00             je      0x26a <_JIT_ENTRY+0x26a>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 ee                      movq    %r13, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 04 24                   movq    (%r12), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 45 00                   movq    (%r13), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 ea                      movq    %r13, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 48 8b 2c 24                   movq    (%rsp), %rbp
// 14d: 78 21                         js      0x170 <_JIT_ENTRY+0x170>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 4d 00                   decq    (%r13)
// 15f: 75 0f                         jne     0x170 <_JIT_ENTRY+0x170>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 ef                      movq    %r13, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 174: 48 85 ed                      testq   %rbp, %rbp
// 177: 0f 84 8b 00 00 00             je      0x208 <_JIT_ENTRY+0x208>
// 17d: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 181: 49 89 2c 24                   movq    %rbp, (%r12)
// 185: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
// 189: 48 8b 40 20                   movq    0x20(%rax), %rax
// 18d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018f:  R_X86_64_64  _JIT_OPERAND
// 197: 0f b7 c9                      movzwl  %cx, %ecx
// 19a: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// 19e: 0f 86 c3 00 00 00             jbe     0x267 <_JIT_ENTRY+0x267>
// 1a4: 48 8b 0b                      movq    (%rbx), %rcx
// 1a7: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 1ab: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ad:  R_X86_64_64  _JIT_OPARG
// 1b5: 81 e6 fe ff 00 00             andl    $0xfffe, %esi           # imm = 0xFFFE
// 1bb: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1bf: bf 01 00 00 00                movl    $0x1, %edi
// 1c4: 48 d3 e7                      shlq    %cl, %rdi
// 1c7: 48 8b 4c b2 18                movq    0x18(%rdx,%rsi,4), %rcx
// 1cc: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 1d0: 48 8d 44 38 20                leaq    0x20(%rax,%rdi), %rax
// 1d5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d7:  R_X86_64_64  _JIT_OPERAND
// 1df: 0f b7 d2                      movzwl  %dx, %edx
// 1e2: 74 37                         je      0x21b <_JIT_ENTRY+0x21b>
// 1e4: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1e8: 48 39 0c 10                   cmpq    %rcx, (%rax,%rdx)
// 1ec: 75 79                         jne     0x267 <_JIT_ENTRY+0x267>
// 1ee: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f0:  R_X86_64_64  _JIT_OPERAND
// 1f8: 0f b7 c9                      movzwl  %cx, %ecx
// 1fb: 48 c1 e1 04                   shlq    $0x4, %rcx
// 1ff: 48 01 c8                      addq    %rcx, %rax
// 202: 48 83 c0 08                   addq    $0x8, %rax
// 206: eb 37                         jmp     0x23f <_JIT_ENTRY+0x23f>
// 208: 49 29 dc                      subq    %rbx, %r12
// 20b: 49 83 c4 b8                   addq    $-0x48, %r12
// 20f: 49 c1 ec 03                   shrq    $0x3, %r12
// 213: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 217: 31 c0                         xorl    %eax, %eax
// 219: eb 77                         jmp     0x292 <_JIT_ENTRY+0x292>
// 21b: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 21f: 48 39 4c d0 08                cmpq    %rcx, 0x8(%rax,%rdx,8)
// 224: 75 41                         jne     0x267 <_JIT_ENTRY+0x267>
// 226: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000228:  R_X86_64_64  _JIT_OPERAND
// 230: 0f b7 c9                      movzwl  %cx, %ecx
// 233: 48 8d 0c 49                   leaq    (%rcx,%rcx,2), %rcx
// 237: 48 8d 04 c8                   leaq    (%rax,%rcx,8), %rax
// 23b: 48 83 c0 10                   addq    $0x10, %rax
// 23f: 48 8b 28                      movq    (%rax), %rbp
// 242: 48 85 ed                      testq   %rbp, %rbp
// 245: 74 20                         je      0x267 <_JIT_ENTRY+0x267>
// 247: 8b 45 00                      movl    (%rbp), %eax
// 24a: ff c0                         incl    %eax
// 24c: 75 53                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 24e: 48 8b 04 24                   movq    (%rsp), %rax
// 252: 48 8b 00                      movq    (%rax), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 62                         jle     0x2bc <_JIT_ENTRY+0x2bc>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 0f 89 84 00 00 00             jns     0x2e6 <_JIT_ENTRY+0x2e6>
// 262: e9 a4 00 00 00                jmp     0x30b <_JIT_ENTRY+0x30b>
// 267: 4d 89 ee                      movq    %r13, %r14
// 26a: 49 29 de                      subq    %rbx, %r14
// 26d: 49 83 c6 b8                   addq    $-0x48, %r14
// 271: 49 c1 ee 03                   shrq    $0x3, %r14
// 275: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 279: 48 8b 03                      movq    (%rbx), %rax
// 27c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027e:  R_X86_64_64  _JIT_TARGET
// 286: 89 c9                         movl    %ecx, %ecx
// 288: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 292: 48 83 c4 08                   addq    $0x8, %rsp
// 296: 5b                            popq    %rbx
// 297: 41 5c                         popq    %r12
// 299: 41 5d                         popq    %r13
// 29b: 41 5e                         popq    %r14
// 29d: 41 5f                         popq    %r15
// 29f: 5d                            popq    %rbp
// 2a0: c3                            retq
// 2a1: 89 45 00                      movl    %eax, (%rbp)
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 8b 04 24                   movq    (%rsp), %rax
// 2b4: 48 8b 00                      movq    (%rax), %rax
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 7f 9e                         jg      0x25a <_JIT_ENTRY+0x25a>
// 2bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002be:  R_X86_64_64  .rodata.str1.1
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_NegativeRefcount
// 2d0: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 2d5: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d9: ff d0                         callq   *%rax
// 2db: 48 8b 04 24                   movq    (%rsp), %rax
// 2df: 48 8b 00                      movq    (%rax), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 25                         js      0x30b <_JIT_ENTRY+0x30b>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 48 8b 04 24                   movq    (%rsp), %rax
// 2f6: 48 ff 08                      decq    (%rax)
// 2f9: 75 10                         jne     0x30b <_JIT_ENTRY+0x30b>
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: 48 8b 3c 24                   movq    (%rsp), %rdi
// 309: ff d0                         callq   *%rax
// 30b: 49 89 2c 24                   movq    %rbp, (%r12)
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _JIT_OPARG
// 319: a8 01                         testb   $0x1, %al
// 31b: 74 08                         je      0x325 <_JIT_ENTRY+0x325>
// 31d: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
// 325: 83 e0 01                      andl    $0x1, %eax
// 328: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 32c: 48 83 c6 f0                   addq    $-0x10, %rsi
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _JIT_CONTINUE
// 33a: 48 89 df                      movq    %rbx, %rdi
// 33d: 4c 89 fa                      movq    %r15, %rdx
// 340: 48 83 c4 08                   addq    $0x8, %rsp
// 344: 5b                            popq    %rbx
// 345: 41 5c                         popq    %r12
// 347: 41 5d                         popq    %r13
// 349: 41 5e                         popq    %r14
// 34b: 41 5f                         popq    %r15
// 34d: 5d                            popq    %rbp
// 34e: ff e0                         jmpq    *%rax
// 350: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_WITH_HINT_code_body[849] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x0f, 0x85, 0x45, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x30, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0x8b, 0x45, 0xe8, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x0f, 0x86, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x51, 0x20, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe6, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0x09, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7, 0x48, 0x8b, 0x4c, 0xb2, 0x18, 0x80, 0x78, 0x0a, 0x00, 0x48, 0x8d, 0x44, 0x38, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x37, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x0c, 0x10, 0x75, 0x79, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83, 0xc0, 0x08, 0xeb, 0x37, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x77, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x4c, 0xd0, 0x08, 0x75, 0x41, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x0c, 0x49, 0x48, 0x8d, 0x04, 0xc8, 0x48, 0x83, 0xc0, 0x10, 0x48, 0x8b, 0x28, 0x48, 0x85, 0xed, 0x74, 0x20, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x53, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x84, 0x00, 0x00, 0x00, 0xe9, 0xa4, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x9e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_WITH_HINT_code_holes[30] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_BUILD_CLASS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_BUILD_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 e6                      movq    %r12, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 ea                      movq    %r13, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 45 00                   movq    (%r13), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 4d 00                   decq    (%r13)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 131: 78 21                         js      0x154 <_JIT_ENTRY+0x154>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 4d 00                   decq    (%rbp)
// 143: 75 0f                         jne     0x154 <_JIT_ENTRY+0x154>
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_Dealloc
// 14f: 48 89 ef                      movq    %rbp, %rdi
// 152: ff d0                         callq   *%rax
// 154: 49 8b 04 24                   movq    (%r12), %rax
// 158: 48 85 c0                      testq   %rax, %rax
// 15b: 7f 22                         jg      0x17f <_JIT_ENTRY+0x17f>
// 15d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015f:  R_X86_64_64  .rodata.str1.1
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_NegativeRefcount
// 171: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 176: 4c 89 e2                      movq    %r12, %rdx
// 179: ff d0                         callq   *%rax
// 17b: 49 8b 04 24                   movq    (%r12), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 0c 24                   decq    (%r12)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 e7                      movq    %r12, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a8: 4d 85 ed                      testq   %r13, %r13
// 1ab: 74 66                         je      0x213 <_JIT_ENTRY+0x213>
// 1ad: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 1b1: 4c 89 28                      movq    %r13, (%rax)
// 1b4: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  PyMapping_GetOptionalItem
// 1c2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c4:  R_X86_64_64  _PyRuntime
// 1cc: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 1d3: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 1d8: ff d0                         callq   *%rax
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 78 60                         js      0x23e <_JIT_ENTRY+0x23e>
// 1de: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1e3: 48 85 c0                      testq   %rax, %rax
// 1e6: 74 30                         je      0x218 <_JIT_ENTRY+0x218>
// 1e8: 49 83 c6 f8                   addq    $-0x8, %r14
// 1ec: 49 89 04 24                   movq    %rax, (%r12)
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _JIT_CONTINUE
// 1fa: 48 89 df                      movq    %rbx, %rdi
// 1fd: 4c 89 f6                      movq    %r14, %rsi
// 200: 4c 89 fa                      movq    %r15, %rdx
// 203: 48 83 c4 18                   addq    $0x18, %rsp
// 207: 5b                            popq    %rbx
// 208: 41 5c                         popq    %r12
// 20a: 41 5d                         popq    %r13
// 20c: 41 5e                         popq    %r14
// 20e: 41 5f                         popq    %r15
// 210: 5d                            popq    %rbp
// 211: ff e0                         jmpq    *%rax
// 213: 49 89 c4                      movq    %rax, %r12
// 216: eb 26                         jmp     0x23e <_JIT_ENTRY+0x23e>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyExc_NameError
// 222: 48 8b 30                      movq    (%rax), %rsi
// 225: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000227:  R_X86_64_64  .rodata.str1.1+0x39
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _PyErr_SetString
// 239: 4c 89 ff                      movq    %r15, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: 49 29 dc                      subq    %rbx, %r12
// 241: 49 83 c4 b8                   addq    $-0x48, %r12
// 245: 49 c1 ec 03                   shrq    $0x3, %r12
// 249: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: e9 09 fe ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 254: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_BUILD_CLASS_code_body[597] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x66, 0x4d, 0x8d, 0x66, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x60, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x30, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_BUILD_CLASS_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_BUILD_CLASS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_CONST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_CONST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 5f                         je      0x207 <_JIT_ENTRY+0x207>
// 1a8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 48 8b 03                      movq    (%rbx), %rax
// 1b2: 48 8b 40 18                   movq    0x18(%rax), %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _JIT_OPARG
// 1c0: 0f b7 c9                      movzwl  %cx, %ecx
// 1c3: 4c 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %r13
// 1c8: 41 8b 45 00                   movl    (%r13), %eax
// 1cc: ff c0                         incl    %eax
// 1ce: 74 10                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 1d0: 41 89 45 00                   movl    %eax, (%r13)
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _JIT_CONTINUE
// 1ee: 48 89 df                      movq    %rbx, %rdi
// 1f1: 4c 89 e6                      movq    %r12, %rsi
// 1f4: 4c 89 fa                      movq    %r15, %rdx
// 1f7: 48 83 c4 08                   addq    $0x8, %rsp
// 1fb: 5b                            popq    %rbx
// 1fc: 41 5c                         popq    %r12
// 1fe: 41 5d                         popq    %r13
// 200: 41 5e                         popq    %r14
// 202: 41 5f                         popq    %r15
// 204: 5d                            popq    %rbp
// 205: ff e0                         jmpq    *%rax
// 207: 48 29 d8                      subq    %rbx, %rax
// 20a: 48 83 c0 b8                   addq    $-0x48, %rax
// 20e: 48 c1 e8 03                   shrq    $0x3, %rax
// 212: 89 43 40                      movl    %eax, 0x40(%rbx)
// 215: 31 c0                         xorl    %eax, %eax
// 217: e9 3e fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 21c: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_CONST_code_body[541] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x5f, 0x4d, 0x8d, 0x66, 0xf8, 0x4c, 0x89, 0x28, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x3e, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_CONST_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_CONST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_DEREF
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_DEREF.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 df                      subq    %rbx, %r15
// 35: 49 83 c7 b8                   addq    $-0x48, %r15
// 39: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d6                      movq    %rdx, %r14
// 6c: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 47 e8                   leaq    -0x18(%r15), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 65                         je      0x20d <_JIT_ENTRY+0x20d>
// 1a8: 4d 8d 67 f0                   leaq    -0x10(%r15), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 c0                      movzwl  %ax, %eax
// 1bc: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 1c1: 4c 8b 68 10                   movq    0x10(%rax), %r13
// 1c5: 4d 85 ed                      testq   %r13, %r13
// 1c8: 74 48                         je      0x212 <_JIT_ENTRY+0x212>
// 1ca: 49 83 c7 f8                   addq    $-0x8, %r15
// 1ce: 41 8b 45 00                   movl    (%r13), %eax
// 1d2: ff c0                         incl    %eax
// 1d4: 74 10                         je      0x1e6 <_JIT_ENTRY+0x1e6>
// 1d6: 41 89 45 00                   movl    %eax, (%r13)
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e4: ff d0                         callq   *%rax
// 1e6: 4d 89 2c 24                   movq    %r13, (%r12)
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _JIT_CONTINUE
// 1f4: 48 89 df                      movq    %rbx, %rdi
// 1f7: 4c 89 fe                      movq    %r15, %rsi
// 1fa: 4c 89 f2                      movq    %r14, %rdx
// 1fd: 48 83 c4 08                   addq    $0x8, %rsp
// 201: 5b                            popq    %rbx
// 202: 41 5c                         popq    %r12
// 204: 41 5d                         popq    %r13
// 206: 41 5e                         popq    %r14
// 208: 41 5f                         popq    %r15
// 20a: 5d                            popq    %rbp
// 20b: ff e0                         jmpq    *%rax
// 20d: 49 89 c4                      movq    %rax, %r12
// 210: eb 1f                         jmp     0x231 <_JIT_ENTRY+0x231>
// 212: 48 8b 33                      movq    (%rbx), %rsi
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_OPARG
// 21f: 0f b7 d0                      movzwl  %ax, %edx
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _PyEval_FormatExcUnbound
// 22c: 4c 89 f7                      movq    %r14, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 29 dc                      subq    %rbx, %r12
// 234: 49 83 c4 b8                   addq    $-0x48, %r12
// 238: 49 c1 ec 03                   shrq    $0x3, %r12
// 23c: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 240: 31 c0                         xorl    %eax, %eax
// 242: e9 13 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 247: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_DEREF_code_body[584] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x65, 0x4d, 0x8d, 0x67, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x68, 0x10, 0x4d, 0x85, 0xed, 0x74, 0x48, 0x49, 0x83, 0xc7, 0xf8, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0xeb, 0x1f, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x13, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_DEREF_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_DEREF_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 58                         je      0x200 <_JIT_ENTRY+0x200>
// 1a8: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 c0                      movzwl  %ax, %eax
// 1bc: 4c 8b 6c c3 48                movq    0x48(%rbx,%rax,8), %r13
// 1c1: 41 8b 45 00                   movl    (%r13), %eax
// 1c5: ff c0                         incl    %eax
// 1c7: 74 10                         je      0x1d9 <_JIT_ENTRY+0x1d9>
// 1c9: 41 89 45 00                   movl    %eax, (%r13)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d7: ff d0                         callq   *%rax
// 1d9: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_CONTINUE
// 1e7: 48 89 df                      movq    %rbx, %rdi
// 1ea: 4c 89 e6                      movq    %r12, %rsi
// 1ed: 4c 89 fa                      movq    %r15, %rdx
// 1f0: 48 83 c4 08                   addq    $0x8, %rsp
// 1f4: 5b                            popq    %rbx
// 1f5: 41 5c                         popq    %r12
// 1f7: 41 5d                         popq    %r13
// 1f9: 41 5e                         popq    %r14
// 1fb: 41 5f                         popq    %r15
// 1fd: 5d                            popq    %rbp
// 1fe: ff e0                         jmpq    *%rax
// 200: 48 29 d8                      subq    %rbx, %rax
// 203: 48 83 c0 b8                   addq    $-0x48, %rax
// 207: 48 c1 e8 03                   shrq    $0x3, %rax
// 20b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 20e: 31 c0                         xorl    %eax, %eax
// 210: e9 45 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 215: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_code_body[534] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x58, 0x4d, 0x8d, 0x66, 0xf8, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x6c, 0xc3, 0x48, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x45, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_AND_CLEAR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 04 24                   movq    (%rsp), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 74 47                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 1a4: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 1a8: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 48 8b 4c c3 48                movq    0x48(%rbx,%rax,8), %rcx
// 1be: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 1c7: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _JIT_CONTINUE
// 1d5: 48 89 df                      movq    %rbx, %rdi
// 1d8: 4c 89 fa                      movq    %r15, %rdx
// 1db: 48 83 c4 08                   addq    $0x8, %rsp
// 1df: 5b                            popq    %rbx
// 1e0: 41 5c                         popq    %r12
// 1e2: 41 5d                         popq    %r13
// 1e4: 41 5e                         popq    %r14
// 1e6: 41 5f                         popq    %r15
// 1e8: 5d                            popq    %rbp
// 1e9: ff e0                         jmpq    *%rax
// 1eb: 49 83 c6 e8                   addq    $-0x18, %r14
// 1ef: 49 29 de                      subq    %rbx, %r14
// 1f2: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f6: 49 c1 ee 03                   shrq    $0x3, %r14
// 1fa: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1fe: 31 c0                         xorl    %eax, %eax
// 200: e9 55 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 205: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_AND_CLEAR_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x89, 0x46, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x4c, 0xc3, 0x48, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x55, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_AND_CLEAR_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_CHECK
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_CHECK.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 df                      subq    %rbx, %r15
// 35: 49 83 c7 b8                   addq    $-0x48, %r15
// 39: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d6                      movq    %rdx, %r14
// 6c: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 47 e8                   leaq    -0x18(%r15), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 61                         je      0x209 <_JIT_ENTRY+0x209>
// 1a8: 4d 8d 67 f0                   leaq    -0x10(%r15), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 c0                      movzwl  %ax, %eax
// 1bc: 4c 8b 6c c3 48                movq    0x48(%rbx,%rax,8), %r13
// 1c1: 4d 85 ed                      testq   %r13, %r13
// 1c4: 74 48                         je      0x20e <_JIT_ENTRY+0x20e>
// 1c6: 49 83 c7 f8                   addq    $-0x8, %r15
// 1ca: 41 8b 45 00                   movl    (%r13), %eax
// 1ce: ff c0                         incl    %eax
// 1d0: 74 10                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 1d2: 41 89 45 00                   movl    %eax, (%r13)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 4d 89 2c 24                   movq    %r13, (%r12)
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 48 89 df                      movq    %rbx, %rdi
// 1f3: 4c 89 fe                      movq    %r15, %rsi
// 1f6: 4c 89 f2                      movq    %r14, %rdx
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: ff e0                         jmpq    *%rax
// 209: 49 89 c4                      movq    %rax, %r12
// 20c: eb 4d                         jmp     0x25b <_JIT_ENTRY+0x25b>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  PyExc_UnboundLocalError
// 218: 4c 8b 38                      movq    (%rax), %r15
// 21b: 48 8b 03                      movq    (%rbx), %rax
// 21e: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_OPARG
// 22c: 0f b7 f0                      movzwl  %ax, %esi
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  PyTuple_GetItem
// 239: ff d0                         callq   *%rax
// 23b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000023d:  R_X86_64_64  .rodata.str1.1+0x39
// 245: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000247:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 24f: 4c 89 f7                      movq    %r14, %rdi
// 252: 4c 89 fe                      movq    %r15, %rsi
// 255: 48 89 c1                      movq    %rax, %rcx
// 258: 41 ff d0                      callq   *%r8
// 25b: 49 29 dc                      subq    %rbx, %r12
// 25e: 49 83 c4 b8                   addq    $-0x48, %r12
// 262: 49 c1 ec 03                   shrq    $0x3, %r12
// 266: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 26a: 31 c0                         xorl    %eax, %eax
// 26c: e9 e9 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 271: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_CHECK_code_body[626] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x61, 0x4d, 0x8d, 0x67, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x6c, 0xc3, 0x48, 0x4d, 0x85, 0xed, 0x74, 0x48, 0x49, 0x83, 0xc7, 0xf8, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xe9, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_CHECK_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_CHECK_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_DEREF.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 49 8b 04 24                   movq    (%r12), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 e2                      movq    %r12, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 04 24                   movq    (%r12), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0c 24                   decq    (%r12)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 1a3: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1a8: 4d 85 ed                      testq   %r13, %r13
// 1ab: 0f 84 c5 00 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 1b1: 49 83 c6 f0                   addq    $-0x10, %r14
// 1b5: 4d 89 2c 24                   movq    %r13, (%r12)
// 1b9: 48 8b 03                      movq    (%rbx), %rax
// 1bc: 48 8b 40 60                   movq    0x60(%rax), %rax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 0f b7 c9                      movzwl  %cx, %ecx
// 1cd: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  PyMapping_GetOptionalItem
// 1dc: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e1: 4c 89 ef                      movq    %r13, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 0f 88 8b 00 00 00             js      0x279 <_JIT_ENTRY+0x279>
// 1ee: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1f4: 0f 84 95 00 00 00             je      0x28f <_JIT_ENTRY+0x28f>
// 1fa: 49 8b 45 00                   movq    (%r13), %rax
// 1fe: 48 85 c0                      testq   %rax, %rax
// 201: 7f 22                         jg      0x225 <_JIT_ENTRY+0x225>
// 203: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000205:  R_X86_64_64  .rodata.str1.1
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_NegativeRefcount
// 217: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 21c: 4c 89 ea                      movq    %r13, %rdx
// 21f: ff d0                         callq   *%rax
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 85 c0                         testl   %eax, %eax
// 227: 78 21                         js      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 233: ff d0                         callq   *%rax
// 235: 49 ff 4d 00                   decq    (%r13)
// 239: 75 0f                         jne     0x24a <_JIT_ENTRY+0x24a>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 ef                      movq    %r13, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 24f: 49 89 04 24                   movq    %rax, (%r12)
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _JIT_CONTINUE
// 25d: 48 89 df                      movq    %rbx, %rdi
// 260: 4c 89 f6                      movq    %r14, %rsi
// 263: 4c 89 fa                      movq    %r15, %rdx
// 266: 48 83 c4 18                   addq    $0x18, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: ff e0                         jmpq    *%rax
// 276: 4d 89 e6                      movq    %r12, %r14
// 279: 49 29 de                      subq    %rbx, %r14
// 27c: 49 83 c6 b8                   addq    $-0x48, %r14
// 280: 49 c1 ee 03                   shrq    $0x3, %r14
// 284: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 288: 31 c0                         xorl    %eax, %eax
// 28a: e9 ce fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _JIT_OPARG
// 299: 0f b7 c0                      movzwl  %ax, %eax
// 29c: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 2a1: 48 8b 40 10                   movq    0x10(%rax), %rax
// 2a5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 74 1d                         je      0x2cc <_JIT_ENTRY+0x2cc>
// 2af: 8b 08                         movl    (%rax), %ecx
// 2b1: ff c1                         incl    %ecx
// 2b3: 0f 84 41 ff ff ff             je      0x1fa <_JIT_ENTRY+0x1fa>
// 2b9: 89 08                         movl    %ecx, (%rax)
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2c5: ff d0                         callq   *%rax
// 2c7: e9 2e ff ff ff                jmp     0x1fa <_JIT_ENTRY+0x1fa>
// 2cc: 48 8b 33                      movq    (%rbx), %rsi
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _JIT_OPARG
// 2d9: 0f b7 d0                      movzwl  %ax, %edx
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2e6: 4c 89 ff                      movq    %r15, %rdi
// 2e9: ff d0                         callq   *%rax
// 2eb: eb 8c                         jmp     0x279 <_JIT_ENTRY+0x279>
// 2ed: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_DEREF_code_body[750] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x60, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x8b, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xce, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x41, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x2e, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x8c};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_DEREF_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_GLOBALS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 49 8b 04 24                   movq    (%r12), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 e2                      movq    %r12, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 04 24                   movq    (%r12), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0c 24                   decq    (%r12)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 1a3: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1a8: 48 85 ff                      testq   %rdi, %rdi
// 1ab: 0f 84 ca 00 00 00             je      0x27b <_JIT_ENTRY+0x27b>
// 1b1: 49 83 c6 f0                   addq    $-0x10, %r14
// 1b5: 49 89 3c 24                   movq    %rdi, (%r12)
// 1b9: 48 8b 03                      movq    (%rbx), %rax
// 1bc: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 0f b7 c9                      movzwl  %cx, %ecx
// 1cd: 4c 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %r13
// 1d2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001d4:  R_X86_64_64  PyMapping_GetOptionalItem
// 1dc: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e1: 4c 89 ee                      movq    %r13, %rsi
// 1e4: ff d5                         callq   *%rbp
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 0f 88 90 00 00 00             js      0x27e <_JIT_ENTRY+0x27e>
// 1ee: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1f4: 0f 84 9a 00 00 00             je      0x294 <_JIT_ENTRY+0x294>
// 1fa: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1ff: 49 8b 45 00                   movq    (%r13), %rax
// 203: 48 85 c0                      testq   %rax, %rax
// 206: 7f 22                         jg      0x22a <_JIT_ENTRY+0x22a>
// 208: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020a:  R_X86_64_64  .rodata.str1.1
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 221: 4c 89 ea                      movq    %r13, %rdx
// 224: ff d0                         callq   *%rax
// 226: 49 8b 45 00                   movq    (%r13), %rax
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 78 21                         js      0x24f <_JIT_ENTRY+0x24f>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 238: ff d0                         callq   *%rax
// 23a: 49 ff 4d 00                   decq    (%r13)
// 23e: 75 0f                         jne     0x24f <_JIT_ENTRY+0x24f>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_Dealloc
// 24a: 4c 89 ef                      movq    %r13, %rdi
// 24d: ff d0                         callq   *%rax
// 24f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 254: 49 89 04 24                   movq    %rax, (%r12)
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_CONTINUE
// 262: 48 89 df                      movq    %rbx, %rdi
// 265: 4c 89 f6                      movq    %r14, %rsi
// 268: 4c 89 fa                      movq    %r15, %rdx
// 26b: 48 83 c4 18                   addq    $0x18, %rsp
// 26f: 5b                            popq    %rbx
// 270: 41 5c                         popq    %r12
// 272: 41 5d                         popq    %r13
// 274: 41 5e                         popq    %r14
// 276: 41 5f                         popq    %r15
// 278: 5d                            popq    %rbp
// 279: ff e0                         jmpq    *%rax
// 27b: 4d 89 e6                      movq    %r12, %r14
// 27e: 49 29 de                      subq    %rbx, %r14
// 281: 49 83 c6 b8                   addq    $-0x48, %r14
// 285: 49 c1 ee 03                   shrq    $0x3, %r14
// 289: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 28d: 31 c0                         xorl    %eax, %eax
// 28f: e9 c9 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 294: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  PyDict_GetItemRef
// 2a2: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 2a7: 4c 89 ee                      movq    %r13, %rsi
// 2aa: ff d0                         callq   *%rax
// 2ac: 85 c0                         testl   %eax, %eax
// 2ae: 78 ce                         js      0x27e <_JIT_ENTRY+0x27e>
// 2b0: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 2b6: 0f 85 3e ff ff ff             jne     0x1fa <_JIT_ENTRY+0x1fa>
// 2bc: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 2c0: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 2c5: 4c 89 ee                      movq    %r13, %rsi
// 2c8: ff d5                         callq   *%rbp
// 2ca: 85 c0                         testl   %eax, %eax
// 2cc: 78 b0                         js      0x27e <_JIT_ENTRY+0x27e>
// 2ce: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 2d4: 0f 85 20 ff ff ff             jne     0x1fa <_JIT_ENTRY+0x1fa>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  PyExc_NameError
// 2e4: 48 8b 30                      movq    (%rax), %rsi
// 2e7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e9:  R_X86_64_64  .rodata.str1.1+0x39
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2fb: 4c 89 ff                      movq    %r15, %rdi
// 2fe: 4c 89 e9                      movq    %r13, %rcx
// 301: ff d0                         callq   *%rax
// 303: e9 76 ff ff ff                jmp     0x27e <_JIT_ENTRY+0x27e>
// 308: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x3c, 0x24, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc9, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xce, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x3e, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xb0, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x20, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x76, 0xff, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 df                      subq    %rbx, %r15
// 38: 49 83 c7 b8                   addq    $-0x48, %r15
// 3c: 49 c1 ef 03                   shrq    $0x3, %r15
// 40: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d6                      movq    %rdx, %r14
// 6f: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 e6                      movq    %r12, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 ea                      movq    %r13, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 45 00                   movq    (%r13), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 4d 00                   decq    (%r13)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 47 e8                   leaq    -0x18(%r15), %rax
// 1a3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1a8: 48 85 c9                      testq   %rcx, %rcx
// 1ab: 0f 84 ae 00 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 1b1: 4d 8d 6f f0                   leaq    -0x10(%r15), %r13
// 1b5: 48 89 08                      movq    %rcx, (%rax)
// 1b8: 48 8b 03                      movq    (%rbx), %rax
// 1bb: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1bf: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c5:  R_X86_64_64  _JIT_OPARG
// 1cd: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 1d3: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  PyDict_Type
// 1e2: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1e6: 75 0e                         jne     0x1f6 <_JIT_ENTRY+0x1f6>
// 1e8: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 1ec: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 1f0: 0f 84 a0 00 00 00             je      0x296 <_JIT_ENTRY+0x296>
// 1f6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001f8:  R_X86_64_64  PyMapping_GetOptionalItem
// 200: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 205: 4c 89 e6                      movq    %r12, %rsi
// 208: ff d5                         callq   *%rbp
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 78 54                         js      0x262 <_JIT_ENTRY+0x262>
// 20e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 213: 48 85 c0                      testq   %rax, %rax
// 216: 74 60                         je      0x278 <_JIT_ENTRY+0x278>
// 218: 49 89 45 00                   movq    %rax, (%r13)
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: a8 01                         testb   $0x1, %al
// 228: 74 08                         je      0x232 <_JIT_ENTRY+0x232>
// 22a: 49 c7 47 f8 00 00 00 00       movq    $0x0, -0x8(%r15)
// 232: 83 e0 01                      andl    $0x1, %eax
// 235: ff c0                         incl    %eax
// 237: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 23b: 48 83 c6 f0                   addq    $-0x10, %rsi
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_CONTINUE
// 249: 48 89 df                      movq    %rbx, %rdi
// 24c: 4c 89 f2                      movq    %r14, %rdx
// 24f: 48 83 c4 18                   addq    $0x18, %rsp
// 253: 5b                            popq    %rbx
// 254: 41 5c                         popq    %r12
// 256: 41 5d                         popq    %r13
// 258: 41 5e                         popq    %r14
// 25a: 41 5f                         popq    %r15
// 25c: 5d                            popq    %rbp
// 25d: ff e0                         jmpq    *%rax
// 25f: 49 89 c5                      movq    %rax, %r13
// 262: 49 29 dd                      subq    %rbx, %r13
// 265: 49 83 c5 b8                   addq    $-0x48, %r13
// 269: 49 c1 ed 03                   shrq    $0x3, %r13
// 26d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 271: 31 c0                         xorl    %eax, %eax
// 273: e9 e5 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 278: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 27c: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 281: 4c 89 e6                      movq    %r12, %rsi
// 284: ff d5                         callq   *%rbp
// 286: 85 c0                         testl   %eax, %eax
// 288: 78 d8                         js      0x262 <_JIT_ENTRY+0x262>
// 28a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 28f: 48 85 c0                      testq   %rax, %rax
// 292: 75 84                         jne     0x218 <_JIT_ENTRY+0x218>
// 294: eb 4b                         jmp     0x2e1 <_JIT_ENTRY+0x2e1>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _PyDict_LoadGlobal
// 2a0: 4c 89 e2                      movq    %r12, %rdx
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 74 22                         je      0x2d1 <_JIT_ENTRY+0x2d1>
// 2af: 8b 08                         movl    (%rax), %ecx
// 2b1: ff c1                         incl    %ecx
// 2b3: 0f 84 5f ff ff ff             je      0x218 <_JIT_ENTRY+0x218>
// 2b9: 89 08                         movl    %ecx, (%rax)
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2cc: e9 47 ff ff ff                jmp     0x218 <_JIT_ENTRY+0x218>
// 2d1: 49 8b 46 68                   movq    0x68(%r14), %rax
// 2d5: 48 85 c0                      testq   %rax, %rax
// 2d8: 74 07                         je      0x2e1 <_JIT_ENTRY+0x2e1>
// 2da: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2df: 75 81                         jne     0x262 <_JIT_ENTRY+0x262>
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  PyExc_NameError
// 2eb: 48 8b 30                      movq    (%rax), %rsi
// 2ee: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002f0:  R_X86_64_64  .rodata.str1.1+0x39
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 302: 4c 89 f7                      movq    %r14, %rdi
// 305: 4c 89 e1                      movq    %r12, %rcx
// 308: ff d0                         callq   *%rax
// 30a: e9 53 ff ff ff                jmp     0x262 <_JIT_ENTRY+0x262>
// 30f: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6f, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x54, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x60, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x47, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xe5, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xd8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x75, 0x84, 0xeb, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x5f, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x47, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x53, 0xff, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_BUILTINS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 0f 84 98 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 1b3: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b7: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1bb: ba 01 00 00 00                movl    $0x1, %edx
// 1c0: 48 d3 e2                      shlq    %cl, %rdx
// 1c3: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 1c7: 48 01 c2                      addq    %rax, %rdx
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: 48 c1 e0 04                   shlq    $0x4, %rax
// 1db: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 1e0: 4d 85 ed                      testq   %r13, %r13
// 1e3: 74 74                         je      0x259 <_JIT_ENTRY+0x259>
// 1e5: 41 8b 45 00                   movl    (%r13), %eax
// 1e9: ff c0                         incl    %eax
// 1eb: 74 10                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1ed: 41 89 45 00                   movl    %eax, (%r13)
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1fb: ff d0                         callq   *%rax
// 1fd: 4d 89 2c 24                   movq    %r13, (%r12)
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _JIT_OPARG
// 20b: a8 01                         testb   $0x1, %al
// 20d: 74 08                         je      0x217 <_JIT_ENTRY+0x217>
// 20f: 49 c7 46 f8 00 00 00 00       movq    $0x0, -0x8(%r14)
// 217: 83 e0 01                      andl    $0x1, %eax
// 21a: ff c0                         incl    %eax
// 21c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 220: 48 83 c6 f0                   addq    $-0x10, %rsi
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _JIT_CONTINUE
// 22e: 48 89 df                      movq    %rbx, %rdi
// 231: 4c 89 fa                      movq    %r15, %rdx
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 48 29 d8                      subq    %rbx, %rax
// 247: 48 83 c0 b8                   addq    $-0x48, %rax
// 24b: 48 c1 e8 03                   shrq    $0x3, %rax
// 24f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 252: 31 c0                         xorl    %eax, %eax
// 254: e9 01 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 259: 4d 89 e6                      movq    %r12, %r14
// 25c: e9 d1 fd ff ff                jmp     0x32 <_JIT_ENTRY+0x32>
// 261: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_BUILTINS_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4d, 0x8d, 0x66, 0xf0, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x74, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x01, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xe6, 0xe9, 0xd1, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_BUILTINS_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 0f 84 98 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 1b3: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b7: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1bb: ba 01 00 00 00                movl    $0x1, %edx
// 1c0: 48 d3 e2                      shlq    %cl, %rdx
// 1c3: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 1c7: 48 01 c2                      addq    %rax, %rdx
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: 48 c1 e0 04                   shlq    $0x4, %rax
// 1db: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 1e0: 4d 85 ed                      testq   %r13, %r13
// 1e3: 74 74                         je      0x259 <_JIT_ENTRY+0x259>
// 1e5: 41 8b 45 00                   movl    (%r13), %eax
// 1e9: ff c0                         incl    %eax
// 1eb: 74 10                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1ed: 41 89 45 00                   movl    %eax, (%r13)
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1fb: ff d0                         callq   *%rax
// 1fd: 4d 89 2c 24                   movq    %r13, (%r12)
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _JIT_OPARG
// 20b: a8 01                         testb   $0x1, %al
// 20d: 74 08                         je      0x217 <_JIT_ENTRY+0x217>
// 20f: 49 c7 46 f8 00 00 00 00       movq    $0x0, -0x8(%r14)
// 217: 83 e0 01                      andl    $0x1, %eax
// 21a: ff c0                         incl    %eax
// 21c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 220: 48 83 c6 f0                   addq    $-0x10, %rsi
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _JIT_CONTINUE
// 22e: 48 89 df                      movq    %rbx, %rdi
// 231: 4c 89 fa                      movq    %r15, %rdx
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 48 29 d8                      subq    %rbx, %rax
// 247: 48 83 c0 b8                   addq    $-0x48, %rax
// 24b: 48 c1 e8 03                   shrq    $0x3, %rax
// 24f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 252: 31 c0                         xorl    %eax, %eax
// 254: e9 01 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 259: 4d 89 e6                      movq    %r12, %r14
// 25c: e9 d1 fd ff ff                jmp     0x32 <_JIT_ENTRY+0x32>
// 261: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_MODULE_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x4d, 0x8d, 0x66, 0xf0, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x74, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x01, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0xe6, 0xe9, 0xd1, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_MODULE_code_holes[22] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_LOCALS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_LOCALS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 53                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1a8: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 1ac: 4c 89 28                      movq    %r13, (%rax)
// 1af: 4c 8b 6b 28                   movq    0x28(%rbx), %r13
// 1b3: 4d 85 ed                      testq   %r13, %r13
// 1b6: 74 48                         je      0x200 <_JIT_ENTRY+0x200>
// 1b8: 49 83 c6 f8                   addq    $-0x8, %r14
// 1bc: 41 8b 45 00                   movl    (%r13), %eax
// 1c0: ff c0                         incl    %eax
// 1c2: 74 10                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 1c4: 41 89 45 00                   movl    %eax, (%r13)
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d2: ff d0                         callq   *%rax
// 1d4: 4d 89 2c 24                   movq    %r13, (%r12)
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_CONTINUE
// 1e2: 48 89 df                      movq    %rbx, %rdi
// 1e5: 4c 89 f6                      movq    %r14, %rsi
// 1e8: 4c 89 fa                      movq    %r15, %rdx
// 1eb: 48 83 c4 08                   addq    $0x8, %rsp
// 1ef: 5b                            popq    %rbx
// 1f0: 41 5c                         popq    %r12
// 1f2: 41 5d                         popq    %r13
// 1f4: 41 5e                         popq    %r14
// 1f6: 41 5f                         popq    %r15
// 1f8: 5d                            popq    %rbp
// 1f9: ff e0                         jmpq    *%rax
// 1fb: 49 89 c4                      movq    %rax, %r12
// 1fe: eb 26                         jmp     0x226 <_JIT_ENTRY+0x226>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  PyExc_SystemError
// 20a: 48 8b 30                      movq    (%rax), %rsi
// 20d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000020f:  R_X86_64_64  .rodata.str1.1+0x39
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _PyErr_SetString
// 221: 4c 89 ff                      movq    %r15, %rdi
// 224: ff d0                         callq   *%rax
// 226: 49 29 dc                      subq    %rbx, %r12
// 229: 49 83 c4 b8                   addq    $-0x48, %r12
// 22d: 49 c1 ec 03                   shrq    $0x3, %r12
// 231: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 235: 31 c0                         xorl    %eax, %eax
// 237: e9 1e fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 23c: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_LOCALS_code_body[573] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x53, 0x4d, 0x8d, 0x66, 0xf0, 0x4c, 0x89, 0x28, 0x4c, 0x8b, 0x6b, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x48, 0x49, 0x83, 0xc6, 0xf8, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc4, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x1e, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_LOCALS_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_LOCALS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_NAME
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_NAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 df                      subq    %rbx, %r15
// 38: 49 83 c7 b8                   addq    $-0x48, %r15
// 3c: 49 c1 ef 03                   shrq    $0x3, %r15
// 40: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d6                      movq    %rdx, %r14
// 6f: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 e6                      movq    %r12, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 ea                      movq    %r13, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 45 00                   movq    (%r13), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 4d 00                   decq    (%r13)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 47 e8                   leaq    -0x18(%r15), %rax
// 1a3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1a8: 48 85 c9                      testq   %rcx, %rcx
// 1ab: 74 76                         je      0x223 <_JIT_ENTRY+0x223>
// 1ad: 4d 8d 6f f0                   leaq    -0x10(%r15), %r13
// 1b1: 48 89 08                      movq    %rcx, (%rax)
// 1b4: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1b8: 48 85 ff                      testq   %rdi, %rdi
// 1bb: 74 6b                         je      0x228 <_JIT_ENTRY+0x228>
// 1bd: 48 8b 03                      movq    (%rbx), %rax
// 1c0: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c6:  R_X86_64_64  _JIT_OPARG
// 1ce: 0f b7 c9                      movzwl  %cx, %ecx
// 1d1: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1d6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001d8:  R_X86_64_64  PyMapping_GetOptionalItem
// 1e0: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e5: 4c 89 e6                      movq    %r12, %rsi
// 1e8: ff d5                         callq   *%rbp
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 60                         js      0x24e <_JIT_ENTRY+0x24e>
// 1ee: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f3: 48 85 c0                      testq   %rax, %rax
// 1f6: 74 6c                         je      0x264 <_JIT_ENTRY+0x264>
// 1f8: 49 83 c7 f8                   addq    $-0x8, %r15
// 1fc: 49 89 45 00                   movq    %rax, (%r13)
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_CONTINUE
// 20a: 48 89 df                      movq    %rbx, %rdi
// 20d: 4c 89 fe                      movq    %r15, %rsi
// 210: 4c 89 f2                      movq    %r14, %rdx
// 213: 48 83 c4 18                   addq    $0x18, %rsp
// 217: 5b                            popq    %rbx
// 218: 41 5c                         popq    %r12
// 21a: 41 5d                         popq    %r13
// 21c: 41 5e                         popq    %r14
// 21e: 41 5f                         popq    %r15
// 220: 5d                            popq    %rbp
// 221: ff e0                         jmpq    *%rax
// 223: 49 89 c5                      movq    %rax, %r13
// 226: eb 26                         jmp     0x24e <_JIT_ENTRY+0x24e>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  PyExc_SystemError
// 232: 48 8b 30                      movq    (%rax), %rsi
// 235: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000237:  R_X86_64_64  .rodata.str1.1+0x56
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _PyErr_SetString
// 249: 4c 89 f7                      movq    %r14, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 49 29 dd                      subq    %rbx, %r13
// 251: 49 83 c5 b8                   addq    $-0x48, %r13
// 255: 49 c1 ed 03                   shrq    $0x3, %r13
// 259: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 25d: 31 c0                         xorl    %eax, %eax
// 25f: e9 f9 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 264: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  PyDict_GetItemRef
// 272: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 277: 4c 89 e6                      movq    %r12, %rsi
// 27a: ff d0                         callq   *%rax
// 27c: 85 c0                         testl   %eax, %eax
// 27e: 78 ce                         js      0x24e <_JIT_ENTRY+0x24e>
// 280: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 0f 85 6a ff ff ff             jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 28e: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 292: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 297: 4c 89 e6                      movq    %r12, %rsi
// 29a: ff d5                         callq   *%rbp
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 78 ae                         js      0x24e <_JIT_ENTRY+0x24e>
// 2a0: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2a5: 48 85 c0                      testq   %rax, %rax
// 2a8: 0f 85 4a ff ff ff             jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  PyExc_NameError
// 2b8: 48 8b 30                      movq    (%rax), %rsi
// 2bb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002bd:  R_X86_64_64  .rodata.str1.1+0x39
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2cf: 4c 89 f7                      movq    %r14, %rdi
// 2d2: 4c 89 e1                      movq    %r12, %rcx
// 2d5: ff d0                         callq   *%rax
// 2d7: e9 72 ff ff ff                jmp     0x24e <_JIT_ENTRY+0x24e>
// 2dc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_NAME_code_body[733] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x47, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x76, 0x4d, 0x8d, 0x6f, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x74, 0x6b, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x60, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x6c, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc5, 0xeb, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xf9, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xce, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x6a, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xae, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x4a, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x72, 0xff, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_NAME_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_NAME_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 0f 85 76 01 00 00             jne     0x19e <_JIT_ENTRY+0x19e>
// 28: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 31: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 38: 0f 84 60 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 3e: 49 89 d7                      movq    %rdx, %r15
// 41: 49 8b 6e f8                   movq    -0x8(%r14), %rbp
// 45: 48 8b 03                      movq    (%rbx), %rax
// 48: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 61: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000063:  R_X86_64_64  _PySuper_Lookup
// 6b: 4c 89 e7                      movq    %r12, %rdi
// 6e: 48 89 ee                      movq    %rbp, %rsi
// 71: 31 c9                         xorl    %ecx, %ecx
// 73: ff d0                         callq   *%rax
// 75: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7f 22                         jg      0xa5 <_JIT_ENTRY+0xa5>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 28                         js      0xd1 <_JIT_ENTRY+0xd1>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 75 16                         jne     0xd1 <_JIT_ENTRY+0xd1>
// bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000bd:  R_X86_64_64  PySuper_Type
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_Dealloc
// cf: ff d0                         callq   *%rax
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7f 22                         jg      0xfc <_JIT_ENTRY+0xfc>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// f3: 4c 89 e2                      movq    %r12, %rdx
// f6: ff d0                         callq   *%rax
// f8: 49 8b 04 24                   movq    (%r12), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 21                         js      0x121 <_JIT_ENTRY+0x121>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 75 0f                         jne     0x121 <_JIT_ENTRY+0x121>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_Dealloc
// 11c: 4c 89 e7                      movq    %r12, %rdi
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 48 85 c0                      testq   %rax, %rax
// 128: 7f 22                         jg      0x14c <_JIT_ENTRY+0x14c>
// 12a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012c:  R_X86_64_64  .rodata.str1.1
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_NegativeRefcount
// 13e: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 143: 48 89 ea                      movq    %rbp, %rdx
// 146: ff d0                         callq   *%rax
// 148: 48 8b 45 00                   movq    (%rbp), %rax
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 153: 78 21                         js      0x176 <_JIT_ENTRY+0x176>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15f: ff d0                         callq   *%rax
// 161: 48 ff 4d 00                   decq    (%rbp)
// 165: 75 0f                         jne     0x176 <_JIT_ENTRY+0x176>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_Dealloc
// 171: 48 89 ef                      movq    %rbp, %rdi
// 174: ff d0                         callq   *%rax
// 176: 4d 85 e4                      testq   %r12, %r12
// 179: 74 5a                         je      0x1d5 <_JIT_ENTRY+0x1d5>
// 17b: 49 8d 6e f0                   leaq    -0x10(%r14), %rbp
// 17f: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 183: 4d 39 6e d8                   cmpq    %r13, -0x28(%r14)
// 187: 75 12                         jne     0x19b <_JIT_ENTRY+0x19b>
// 189: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 18d: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 192: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 199: 75 4f                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 19b: 49 89 ee                      movq    %rbp, %r14
// 19e: 49 29 de                      subq    %rbx, %r14
// 1a1: 49 83 c6 b8                   addq    $-0x48, %r14
// 1a5: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ad: 48 8b 03                      movq    (%rbx), %rax
// 1b0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b2:  R_X86_64_64  _JIT_TARGET
// 1ba: 89 c9                         movl    %ecx, %ecx
// 1bc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1c0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c6: 48 83 c4 18                   addq    $0x18, %rsp
// 1ca: 5b                            popq    %rbx
// 1cb: 41 5c                         popq    %r12
// 1cd: 41 5d                         popq    %r13
// 1cf: 41 5e                         popq    %r14
// 1d1: 41 5f                         popq    %r15
// 1d3: 5d                            popq    %rbp
// 1d4: c3                            retq
// 1d5: 4c 89 f5                      movq    %r14, %rbp
// 1d8: 48 29 dd                      subq    %rbx, %rbp
// 1db: 48 83 c5 a0                   addq    $-0x60, %rbp
// 1df: 48 c1 ed 03                   shrq    $0x3, %rbp
// 1e3: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 1e6: 31 c0                         xorl    %eax, %eax
// 1e8: eb dc                         jmp     0x1c6 <_JIT_ENTRY+0x1c6>
// 1ea: 48 8b 03                      movq    (%rbx), %rax
// 1ed: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f3:  R_X86_64_64  _JIT_OPARG
// 1fb: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 201: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 206: 4c 89 e7                      movq    %r12, %rdi
// 209: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 20e: 31 c9                         xorl    %ecx, %ecx
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _PySuper_Lookup
// 21a: ff d0                         callq   *%rax
// 21c: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7f 22                         jg      0x24c <_JIT_ENTRY+0x24c>
// 22a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022c:  R_X86_64_64  .rodata.str1.1
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_NegativeRefcount
// 23e: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 243: 4c 89 ea                      movq    %r13, %rdx
// 246: ff d0                         callq   *%rax
// 248: 49 8b 45 00                   movq    (%r13), %rax
// 24c: 85 c0                         testl   %eax, %eax
// 24e: 78 28                         js      0x278 <_JIT_ENTRY+0x278>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25a: ff d0                         callq   *%rax
// 25c: 49 ff 4d 00                   decq    (%r13)
// 260: 75 16                         jne     0x278 <_JIT_ENTRY+0x278>
// 262: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000264:  R_X86_64_64  PySuper_Type
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: ff d0                         callq   *%rax
// 278: 49 8b 04 24                   movq    (%r12), %rax
// 27c: 48 85 c0                      testq   %rax, %rax
// 27f: 7f 22                         jg      0x2a3 <_JIT_ENTRY+0x2a3>
// 281: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000283:  R_X86_64_64  .rodata.str1.1
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_NegativeRefcount
// 295: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 29a: 4c 89 e2                      movq    %r12, %rdx
// 29d: ff d0                         callq   *%rax
// 29f: 49 8b 04 24                   movq    (%r12), %rax
// 2a3: 85 c0                         testl   %eax, %eax
// 2a5: 78 21                         js      0x2c8 <_JIT_ENTRY+0x2c8>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 ff 0c 24                   decq    (%r12)
// 2b7: 75 0f                         jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_Dealloc
// 2c3: 4c 89 e7                      movq    %r12, %rdi
// 2c6: ff d0                         callq   *%rax
// 2c8: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 2cd: 49 8b 04 24                   movq    (%r12), %rax
// 2d1: 48 85 c0                      testq   %rax, %rax
// 2d4: 7f 22                         jg      0x2f8 <_JIT_ENTRY+0x2f8>
// 2d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d8:  R_X86_64_64  .rodata.str1.1
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_NegativeRefcount
// 2ea: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 2ef: 4c 89 e2                      movq    %r12, %rdx
// 2f2: ff d0                         callq   *%rax
// 2f4: 49 8b 04 24                   movq    (%r12), %rax
// 2f8: 85 c0                         testl   %eax, %eax
// 2fa: 78 21                         js      0x31d <_JIT_ENTRY+0x31d>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 306: ff d0                         callq   *%rax
// 308: 49 ff 0c 24                   decq    (%r12)
// 30c: 75 0f                         jne     0x31d <_JIT_ENTRY+0x31d>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_Dealloc
// 318: 4c 89 e7                      movq    %r12, %rdi
// 31b: ff d0                         callq   *%rax
// 31d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 322: 48 85 c0                      testq   %rax, %rax
// 325: 0f 84 ad fe ff ff             je      0x1d8 <_JIT_ENTRY+0x1d8>
// 32b: 49 89 46 d8                   movq    %rax, -0x28(%r14)
// 32f: 49 83 c6 e0                   addq    $-0x20, %r14
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  _JIT_CONTINUE
// 33d: 48 89 df                      movq    %rbx, %rdi
// 340: 4c 89 f6                      movq    %r14, %rsi
// 343: 4c 89 fa                      movq    %r15, %rdx
// 346: 48 83 c4 18                   addq    $0x18, %rsp
// 34a: 5b                            popq    %rbx
// 34b: 41 5c                         popq    %r12
// 34d: 41 5d                         popq    %r13
// 34f: 41 5e                         popq    %r14
// 351: 41 5f                         popq    %r15
// 353: 5d                            popq    %rbp
// 354: ff e0                         jmpq    *%rax
// 356: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_ATTR_code_body[855] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x76, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x60, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x49, 0x8d, 0x6e, 0xf0, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x39, 0x6e, 0xd8, 0x75, 0x12, 0x4d, 0x8b, 0x66, 0xe0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x4f, 0x49, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0xf5, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xa0, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0xdc, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x4c, 0x89, 0xe7, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x31, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xad, 0xfe, 0xff, 0xff, 0x49, 0x89, 0x46, 0xd8, 0x49, 0x83, 0xc6, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_ATTR_code_holes[34] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_METHOD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 0f 85 75 01 00 00             jne     0x19d <_JIT_ENTRY+0x19d>
// 28: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 31: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 38: 0f 84 5f 01 00 00             je      0x19d <_JIT_ENTRY+0x19d>
// 3e: 49 89 d7                      movq    %rdx, %r15
// 41: 49 8b 6e f8                   movq    -0x8(%r14), %rbp
// 45: 48 8b 03                      movq    (%rbx), %rax
// 48: 48 8b 40 20                   movq    0x20(%rax), %rax
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 5c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 61: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000063:  R_X86_64_64  _PySuper_Lookup
// 6b: 4c 89 e7                      movq    %r12, %rdi
// 6e: 48 89 ee                      movq    %rbp, %rsi
// 71: 31 c9                         xorl    %ecx, %ecx
// 73: ff d0                         callq   *%rax
// 75: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7f 22                         jg      0xa5 <_JIT_ENTRY+0xa5>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 28                         js      0xd1 <_JIT_ENTRY+0xd1>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 75 16                         jne     0xd1 <_JIT_ENTRY+0xd1>
// bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000bd:  R_X86_64_64  PySuper_Type
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_Dealloc
// cf: ff d0                         callq   *%rax
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7f 22                         jg      0xfc <_JIT_ENTRY+0xfc>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// f3: 4c 89 e2                      movq    %r12, %rdx
// f6: ff d0                         callq   *%rax
// f8: 49 8b 04 24                   movq    (%r12), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 21                         js      0x121 <_JIT_ENTRY+0x121>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 75 0f                         jne     0x121 <_JIT_ENTRY+0x121>
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_Dealloc
// 11c: 4c 89 e7                      movq    %r12, %rdi
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 48 85 c0                      testq   %rax, %rax
// 128: 7f 22                         jg      0x14c <_JIT_ENTRY+0x14c>
// 12a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012c:  R_X86_64_64  .rodata.str1.1
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_NegativeRefcount
// 13e: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 143: 48 89 ea                      movq    %rbp, %rdx
// 146: ff d0                         callq   *%rax
// 148: 48 8b 45 00                   movq    (%rbp), %rax
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 78 21                         js      0x171 <_JIT_ENTRY+0x171>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15a: ff d0                         callq   *%rax
// 15c: 48 ff 4d 00                   decq    (%rbp)
// 160: 75 0f                         jne     0x171 <_JIT_ENTRY+0x171>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_Dealloc
// 16c: 48 89 ef                      movq    %rbp, %rdi
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 74 59                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 17b: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 17f: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 183: 4d 39 6e d8                   cmpq    %r13, -0x28(%r14)
// 187: 75 11                         jne     0x19a <_JIT_ENTRY+0x19a>
// 189: 49 8b 6e e0                   movq    -0x20(%r14), %rbp
// 18d: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 191: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 198: 75 50                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 19a: 4d 89 e6                      movq    %r12, %r14
// 19d: 49 29 de                      subq    %rbx, %r14
// 1a0: 49 83 c6 b8                   addq    $-0x48, %r14
// 1a4: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ac: 48 8b 03                      movq    (%rbx), %rax
// 1af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b1:  R_X86_64_64  _JIT_TARGET
// 1b9: 89 c9                         movl    %ecx, %ecx
// 1bb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1bf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c5: 48 83 c4 18                   addq    $0x18, %rsp
// 1c9: 5b                            popq    %rbx
// 1ca: 41 5c                         popq    %r12
// 1cc: 41 5d                         popq    %r13
// 1ce: 41 5e                         popq    %r14
// 1d0: 41 5f                         popq    %r15
// 1d2: 5d                            popq    %rbp
// 1d3: c3                            retq
// 1d4: 4d 89 f4                      movq    %r14, %r12
// 1d7: 49 29 dc                      subq    %rbx, %r12
// 1da: 49 83 c4 a0                   addq    $-0x60, %r12
// 1de: 49 c1 ec 03                   shrq    $0x3, %r12
// 1e2: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1e6: 31 c0                         xorl    %eax, %eax
// 1e8: eb db                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 1ea: 48 8b 03                      movq    (%rbx), %rax
// 1ed: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f3:  R_X86_64_64  _JIT_OPARG
// 1fb: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 201: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 206: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%rsp)
// 20e: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 213: 48 8b 46 08                   movq    0x8(%rsi), %rax
// 217: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000219:  R_X86_64_64  PyObject_GenericGetAttr
// 221: 31 ff                         xorl    %edi, %edi
// 223: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 22a: 48 8d 4c 24 04                leaq    0x4(%rsp), %rcx
// 22f: 48 0f 45 cf                   cmovneq %rdi, %rcx
// 233: 48 89 ef                      movq    %rbp, %rdi
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _PySuper_Lookup
// 240: ff d0                         callq   *%rax
// 242: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 247: 49 8b 45 00                   movq    (%r13), %rax
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 7f 22                         jg      0x272 <_JIT_ENTRY+0x272>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_NegativeRefcount
// 264: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 269: 4c 89 ea                      movq    %r13, %rdx
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 28                         js      0x29e <_JIT_ENTRY+0x29e>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 16                         jne     0x29e <_JIT_ENTRY+0x29e>
// 288: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028a:  R_X86_64_64  PySuper_Type
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_Dealloc
// 29c: ff d0                         callq   *%rax
// 29e: 48 8b 45 00                   movq    (%rbp), %rax
// 2a2: 48 85 c0                      testq   %rax, %rax
// 2a5: 7f 22                         jg      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a9:  R_X86_64_64  .rodata.str1.1
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_NegativeRefcount
// 2bb: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 2c0: 48 89 ea                      movq    %rbp, %rdx
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 8b 45 00                   movq    (%rbp), %rax
// 2c9: 85 c0                         testl   %eax, %eax
// 2cb: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 2d0: 78 21                         js      0x2f3 <_JIT_ENTRY+0x2f3>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2dc: ff d0                         callq   *%rax
// 2de: 48 ff 4d 00                   decq    (%rbp)
// 2e2: 75 0f                         jne     0x2f3 <_JIT_ENTRY+0x2f3>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_Dealloc
// 2ee: 48 89 ef                      movq    %rbp, %rdi
// 2f1: ff d0                         callq   *%rax
// 2f3: 4d 85 ed                      testq   %r13, %r13
// 2f6: 74 4e                         je      0x346 <_JIT_ENTRY+0x346>
// 2f8: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 2fc: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
// 301: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 306: 75 13                         jne     0x31b <_JIT_ENTRY+0x31b>
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  .text+0x3b0
// 312: bf 21 06 00 00                movl    $0x621, %edi            # imm = 0x621
// 317: ff d0                         callq   *%rax
// 319: 31 f6                         xorl    %esi, %esi
// 31b: 4d 89 6e d8                   movq    %r13, -0x28(%r14)
// 31f: 49 89 76 e0                   movq    %rsi, -0x20(%r14)
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _JIT_CONTINUE
// 32d: 48 89 df                      movq    %rbx, %rdi
// 330: 4c 89 e6                      movq    %r12, %rsi
// 333: 4c 89 fa                      movq    %r15, %rdx
// 336: 48 83 c4 18                   addq    $0x18, %rsp
// 33a: 5b                            popq    %rbx
// 33b: 41 5c                         popq    %r12
// 33d: 41 5d                         popq    %r13
// 33f: 41 5e                         popq    %r14
// 341: 41 5f                         popq    %r15
// 343: 5d                            popq    %rbp
// 344: ff e0                         jmpq    *%rax
// 346: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 34b: 49 8b 06                      movq    (%r14), %rax
// 34e: 48 85 c0                      testq   %rax, %rax
// 351: 7f 21                         jg      0x374 <_JIT_ENTRY+0x374>
// 353: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000355:  R_X86_64_64  .rodata.str1.1
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _Py_NegativeRefcount
// 367: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 36c: 4c 89 f2                      movq    %r14, %rdx
// 36f: ff d0                         callq   *%rax
// 371: 49 8b 06                      movq    (%r14), %rax
// 374: 85 c0                         testl   %eax, %eax
// 376: 0f 88 5b fe ff ff             js      0x1d7 <_JIT_ENTRY+0x1d7>
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 386: ff d0                         callq   *%rax
// 388: 49 ff 0e                      decq    (%r14)
// 38b: 0f 85 46 fe ff ff             jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 391: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000393:  R_X86_64_64  _Py_Dealloc
// 39b: 4c 89 f7                      movq    %r14, %rdi
// 39e: ff d0                         callq   *%rax
// 3a0: e9 32 fe ff ff                jmp     0x1d7 <_JIT_ENTRY+0x1d7>
// 3a5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 
// 00000000000003b0 <Py_DECREF>:
// 3b0: 53                            pushq   %rbx
// 3b1: 48 89 f3                      movq    %rsi, %rbx
// 3b4: 48 8b 06                      movq    (%rsi), %rax
// 3b7: 48 85 c0                      testq   %rax, %rax
// 3ba: 7e 06                         jle     0x3c2 <Py_DECREF+0x12>
// 3bc: 85 c0                         testl   %eax, %eax
// 3be: 79 24                         jns     0x3e4 <Py_DECREF+0x34>
// 3c0: eb 33                         jmp     0x3f5 <Py_DECREF+0x45>
// 3c2: 89 fe                         movl    %edi, %esi
// 3c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003c6:  R_X86_64_64  .rodata.str1.1
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _Py_NegativeRefcount
// 3d8: 48 89 da                      movq    %rbx, %rdx
// 3db: ff d0                         callq   *%rax
// 3dd: 48 8b 03                      movq    (%rbx), %rax
// 3e0: 85 c0                         testl   %eax, %eax
// 3e2: 78 11                         js      0x3f5 <Py_DECREF+0x45>
// 3e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ee: ff d0                         callq   *%rax
// 3f0: 48 ff 0b                      decq    (%rbx)
// 3f3: 74 02                         je      0x3f7 <Py_DECREF+0x47>
// 3f5: 5b                            popq    %rbx
// 3f6: c3                            retq
// 3f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f9:  R_X86_64_64  _Py_Dealloc
// 401: 48 89 df                      movq    %rbx, %rdi
// 404: 5b                            popq    %rbx
// 405: ff e0                         jmpq    *%rax
// 407: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_METHOD_code_body[1032] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x75, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x59, 0x4d, 0x8d, 0x66, 0xf0, 0x49, 0x89, 0x46, 0xe8, 0x4d, 0x39, 0x6e, 0xd8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xe0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x50, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa0, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0xdb, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x46, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x04, 0x48, 0x0f, 0x45, 0xcf, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x4e, 0x4d, 0x8d, 0x66, 0xe8, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x75, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x21, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x31, 0xf6, 0x4d, 0x89, 0x6e, 0xd8, 0x49, 0x89, 0x76, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0x5b, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x46, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0x32, 0xfe, 0xff, 0xff, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_METHOD_code_holes[40] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3b0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_MAKE_CELL
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_MAKE_CELL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 0f 84 c0 00 00 00             je      0x26c <_JIT_ENTRY+0x26c>
// 1ac: 49 83 c6 f0                   addq    $-0x10, %r14
// 1b0: 48 89 08                      movq    %rcx, (%rax)
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_OPARG
// 1bd: 0f b7 c0                      movzwl  %ax, %eax
// 1c0: 48 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %rdi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyCell_New
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 0f 84 8f 00 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c9                      movzwl  %cx, %ecx
// 1e7: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 1ec: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 1f1: 4d 85 e4                      testq   %r12, %r12
// 1f4: 74 50                         je      0x246 <_JIT_ENTRY+0x246>
// 1f6: 49 8b 04 24                   movq    (%r12), %rax
// 1fa: 48 85 c0                      testq   %rax, %rax
// 1fd: 7f 22                         jg      0x221 <_JIT_ENTRY+0x221>
// 1ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000201:  R_X86_64_64  .rodata.str1.1+0x39
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_NegativeRefcount
// 213: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 218: 4c 89 e2                      movq    %r12, %rdx
// 21b: ff d0                         callq   *%rax
// 21d: 49 8b 04 24                   movq    (%r12), %rax
// 221: 85 c0                         testl   %eax, %eax
// 223: 78 21                         js      0x246 <_JIT_ENTRY+0x246>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22f: ff d0                         callq   *%rax
// 231: 49 ff 0c 24                   decq    (%r12)
// 235: 75 0f                         jne     0x246 <_JIT_ENTRY+0x246>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_Dealloc
// 241: 4c 89 e7                      movq    %r12, %rdi
// 244: ff d0                         callq   *%rax
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_CONTINUE
// 250: 48 89 df                      movq    %rbx, %rdi
// 253: 4c 89 f6                      movq    %r14, %rsi
// 256: 4c 89 fa                      movq    %r15, %rdx
// 259: 48 83 c4 08                   addq    $0x8, %rsp
// 25d: 5b                            popq    %rbx
// 25e: 41 5c                         popq    %r12
// 260: 41 5d                         popq    %r13
// 262: 41 5e                         popq    %r14
// 264: 41 5f                         popq    %r15
// 266: 5d                            popq    %rbp
// 267: ff e0                         jmpq    *%rax
// 269: 4c 89 f0                      movq    %r14, %rax
// 26c: 48 29 d8                      subq    %rbx, %rax
// 26f: 48 83 c0 b8                   addq    $-0x48, %rax
// 273: 48 c1 e8 03                   shrq    $0x3, %rax
// 277: 89 43 40                      movl    %eax, 0x40(%rbx)
// 27a: 31 c0                         xorl    %eax, %eax
// 27c: e9 d9 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 281: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MAKE_CELL_code_body[642] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xd9, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MAKE_CELL_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MAKE_CELL_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_MAKE_FUNCTION
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_MAKE_FUNCTION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 b2 00 00 00             je      0x257 <_JIT_ENTRY+0x257>
// 1a5: 4d 89 65 00                   movq    %r12, (%r13)
// 1a9: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyFunction_New
// 1b7: 4c 89 e7                      movq    %r12, %rdi
// 1ba: ff d0                         callq   *%rax
// 1bc: 49 89 c7                      movq    %rax, %r15
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 7f 22                         jg      0x1ea <_JIT_ENTRY+0x1ea>
// 1c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ca:  R_X86_64_64  .rodata.str1.1
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 1e1: 4c 89 e2                      movq    %r12, %rdx
// 1e4: ff d0                         callq   *%rax
// 1e6: 49 8b 04 24                   movq    (%r12), %rax
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 21                         js      0x20f <_JIT_ENTRY+0x20f>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f8: ff d0                         callq   *%rax
// 1fa: 49 ff 0c 24                   decq    (%r12)
// 1fe: 75 0f                         jne     0x20f <_JIT_ENTRY+0x20f>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_Dealloc
// 20a: 4c 89 e7                      movq    %r12, %rdi
// 20d: ff d0                         callq   *%rax
// 20f: 49 83 c6 f0                   addq    $-0x10, %r14
// 213: 4d 85 ff                      testq   %r15, %r15
// 216: 74 3c                         je      0x254 <_JIT_ENTRY+0x254>
// 218: 41 8b 74 24 5c                movl    0x5c(%r12), %esi
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _PyFunction_SetVersion
// 227: 4c 89 ff                      movq    %r15, %rdi
// 22a: ff d0                         callq   *%rax
// 22c: 4d 89 7d 00                   movq    %r15, (%r13)
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_CONTINUE
// 23a: 48 89 df                      movq    %rbx, %rdi
// 23d: 4c 89 f6                      movq    %r14, %rsi
// 240: 48 8b 14 24                   movq    (%rsp), %rdx
// 244: 48 83 c4 08                   addq    $0x8, %rsp
// 248: 5b                            popq    %rbx
// 249: 41 5c                         popq    %r12
// 24b: 41 5d                         popq    %r13
// 24d: 41 5e                         popq    %r14
// 24f: 41 5f                         popq    %r15
// 251: 5d                            popq    %rbp
// 252: ff e0                         jmpq    *%rax
// 254: 4d 89 f5                      movq    %r14, %r13
// 257: 49 29 dd                      subq    %rbx, %r13
// 25a: 49 83 c5 b8                   addq    $-0x48, %r13
// 25e: 49 c1 ed 03                   shrq    $0x3, %r13
// 262: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 266: 31 c0                         xorl    %eax, %eax
// 268: e9 ed fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 26d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MAKE_FUNCTION_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x85, 0xff, 0x74, 0x3c, 0x41, 0x8b, 0x74, 0x24, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0x7d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xed, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MAKE_FUNCTION_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MAKE_FUNCTION_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_MAP_ADD
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_MAP_ADD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 85 e4                      testq   %r12, %r12
// 1a2: 74 65                         je      0x209 <_JIT_ENTRY+0x209>
// 1a4: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a8: 49 8b 76 e0                   movq    -0x20(%r14), %rsi
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1be: 29 c1                         subl    %eax, %ecx
// 1c0: 48 63 c1                      movslq  %ecx, %rax
// 1c3: 49 8b 7c c6 f0                movq    -0x10(%r14,%rax,8), %rdi
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _PyDict_SetItem_Take2
// 1d2: 4c 89 e2                      movq    %r12, %rdx
// 1d5: ff d0                         callq   *%rax
// 1d7: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
// 1de: 85 c0                         testl   %eax, %eax
// 1e0: 75 2e                         jne     0x210 <_JIT_ENTRY+0x210>
// 1e2: 49 83 c6 e0                   addq    $-0x20, %r14
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 48 89 df                      movq    %rbx, %rdi
// 1f3: 4c 89 f6                      movq    %r14, %rsi
// 1f6: 4c 89 fa                      movq    %r15, %rdx
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: ff e0                         jmpq    *%rax
// 209: 48 c7 c1 ff ff ff ff          movq    $-0x1, %rcx
// 210: 49 8d 04 ce                   leaq    (%r14,%rcx,8), %rax
// 214: 48 29 d8                      subq    %rbx, %rax
// 217: 48 83 c0 a8                   addq    $-0x58, %rax
// 21b: 48 c1 e8 03                   shrq    $0x3, %rax
// 21f: 89 43 40                      movl    %eax, 0x40(%rbx)
// 222: 31 c0                         xorl    %eax, %eax
// 224: e9 31 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 229: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MAP_ADD_code_body[554] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x65, 0x4d, 0x89, 0x66, 0xe8, 0x49, 0x8b, 0x76, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x7c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0xc7, 0xc1, 0xfe, 0xff, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x2e, 0x49, 0x83, 0xc6, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc1, 0xff, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xce, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x31, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MAP_ADD_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MAP_ADD_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_MATCH_CLASS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_MATCH_CLASS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 70: 49 8b 06                      movq    (%r14), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 85 e4                      testq   %r12, %r12
// 1a2: 0f 84 76 01 00 00             je      0x31e <_JIT_ENTRY+0x31e>
// 1a8: 4c 89 63 e8                   movq    %r12, -0x18(%rbx)
// 1ac: 4d 89 e0                      movq    %r12, %r8
// 1af: 4c 8b 63 d8                   movq    -0x28(%rbx), %r12
// 1b3: 48 8b 6b e0                   movq    -0x20(%rbx), %rbp
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _JIT_OPARG
// 1c1: 0f b7 c8                      movzwl  %ax, %ecx
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _PyEval_MatchClass
// 1ce: 4c 89 ff                      movq    %r15, %rdi
// 1d1: 4c 89 e6                      movq    %r12, %rsi
// 1d4: 48 89 ea                      movq    %rbp, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 49 89 c5                      movq    %rax, %r13
// 1dc: 49 8b 04 24                   movq    (%r12), %rax
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 7f 22                         jg      0x207 <_JIT_ENTRY+0x207>
// 1e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e7:  R_X86_64_64  .rodata.str1.1
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_NegativeRefcount
// 1f9: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 1fe: 4c 89 e2                      movq    %r12, %rdx
// 201: ff d0                         callq   *%rax
// 203: 49 8b 04 24                   movq    (%r12), %rax
// 207: 85 c0                         testl   %eax, %eax
// 209: 78 21                         js      0x22c <_JIT_ENTRY+0x22c>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 215: ff d0                         callq   *%rax
// 217: 49 ff 0c 24                   decq    (%r12)
// 21b: 75 0f                         jne     0x22c <_JIT_ENTRY+0x22c>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_Dealloc
// 227: 4c 89 e7                      movq    %r12, %rdi
// 22a: ff d0                         callq   *%rax
// 22c: 48 8b 45 00                   movq    (%rbp), %rax
// 230: 48 85 c0                      testq   %rax, %rax
// 233: 7f 22                         jg      0x257 <_JIT_ENTRY+0x257>
// 235: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000237:  R_X86_64_64  .rodata.str1.1
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_NegativeRefcount
// 249: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 24e: 48 89 ea                      movq    %rbp, %rdx
// 251: ff d0                         callq   *%rax
// 253: 48 8b 45 00                   movq    (%rbp), %rax
// 257: 85 c0                         testl   %eax, %eax
// 259: 4c 8b 24 24                   movq    (%rsp), %r12
// 25d: 78 21                         js      0x280 <_JIT_ENTRY+0x280>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 269: ff d0                         callq   *%rax
// 26b: 48 ff 4d 00                   decq    (%rbp)
// 26f: 75 0f                         jne     0x280 <_JIT_ENTRY+0x280>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 48 89 ef                      movq    %rbp, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 49 8b 04 24                   movq    (%r12), %rax
// 284: 48 85 c0                      testq   %rax, %rax
// 287: 7f 22                         jg      0x2ab <_JIT_ENTRY+0x2ab>
// 289: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028b:  R_X86_64_64  .rodata.str1.1
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_NegativeRefcount
// 29d: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 2a2: 4c 89 e2                      movq    %r12, %rdx
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 04 24                   movq    (%r12), %rax
// 2ab: 85 c0                         testl   %eax, %eax
// 2ad: 78 21                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 ff 0c 24                   decq    (%r12)
// 2bf: 75 0f                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: 4c 89 e7                      movq    %r12, %rdi
// 2ce: ff d0                         callq   *%rax
// 2d0: 4d 85 ed                      testq   %r13, %r13
// 2d3: 74 2b                         je      0x300 <_JIT_ENTRY+0x300>
// 2d5: 4c 89 6b d8                   movq    %r13, -0x28(%rbx)
// 2d9: 48 83 c3 e0                   addq    $-0x20, %rbx
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _JIT_CONTINUE
// 2e7: 4c 89 f7                      movq    %r14, %rdi
// 2ea: 48 89 de                      movq    %rbx, %rsi
// 2ed: 4c 89 fa                      movq    %r15, %rdx
// 2f0: 48 83 c4 08                   addq    $0x8, %rsp
// 2f4: 5b                            popq    %rbx
// 2f5: 41 5c                         popq    %r12
// 2f7: 41 5d                         popq    %r13
// 2f9: 41 5e                         popq    %r14
// 2fb: 41 5f                         popq    %r15
// 2fd: 5d                            popq    %rbp
// 2fe: ff e0                         jmpq    *%rax
// 300: 49 8b 47 68                   movq    0x68(%r15), %rax
// 304: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000306:  R_X86_64_64  _Py_NoneStruct
// 30e: 48 85 c0                      testq   %rax, %rax
// 311: 74 c2                         je      0x2d5 <_JIT_ENTRY+0x2d5>
// 313: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 318: 74 bb                         je      0x2d5 <_JIT_ENTRY+0x2d5>
// 31a: 48 83 c3 f0                   addq    $-0x10, %rbx
// 31e: 4c 29 f3                      subq    %r14, %rbx
// 321: 48 83 c3 a0                   addq    $-0x60, %rbx
// 325: 48 c1 eb 03                   shrq    $0x3, %rbx
// 329: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 32d: 31 c0                         xorl    %eax, %eax
// 32f: e9 26 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 334: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MATCH_CLASS_code_body[821] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x76, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x63, 0xe8, 0x4d, 0x89, 0xe0, 0x4c, 0x8b, 0x63, 0xd8, 0x48, 0x8b, 0x6b, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x2b, 0x4c, 0x89, 0x6b, 0xd8, 0x48, 0x83, 0xc3, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x47, 0x68, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0xc2, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0xbb, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x26, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MATCH_CLASS_code_holes[34] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MATCH_CLASS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_MATCH_KEYS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_MATCH_KEYS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 85 ed                      testq   %r13, %r13
// 1a2: 74 4e                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1a4: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 1a8: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 1ac: 49 8b 76 e0                   movq    -0x20(%r14), %rsi
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _PyEval_MatchKeys
// 1ba: 4c 89 ff                      movq    %r15, %rdi
// 1bd: 4c 89 ea                      movq    %r13, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 85 c0                      testq   %rax, %rax
// 1c5: 74 32                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1c7: 49 83 c6 f8                   addq    $-0x8, %r14
// 1cb: 49 89 04 24                   movq    %rax, (%r12)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _JIT_CONTINUE
// 1d9: 48 89 df                      movq    %rbx, %rdi
// 1dc: 4c 89 f6                      movq    %r14, %rsi
// 1df: 4c 89 fa                      movq    %r15, %rdx
// 1e2: 48 83 c4 08                   addq    $0x8, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 49 83 c6 e8                   addq    $-0x18, %r14
// 1f6: 4d 89 f4                      movq    %r14, %r12
// 1f9: 49 29 dc                      subq    %rbx, %r12
// 1fc: 49 83 c4 b8                   addq    $-0x48, %r12
// 200: 49 c1 ec 03                   shrq    $0x3, %r12
// 204: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 208: 31 c0                         xorl    %eax, %eax
// 20a: e9 4b fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 20f: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MATCH_KEYS_code_body[528] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x4e, 0x4d, 0x8d, 0x66, 0xf0, 0x4d, 0x89, 0x6e, 0xe8, 0x49, 0x8b, 0x76, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x32, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x4b, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MATCH_KEYS_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MATCH_KEYS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_MATCH_MAPPING
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_MATCH_MAPPING.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 04 24                   movq    (%rsp), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 74 4f                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1a4: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 1a8: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1ac: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1b0: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_FalseStruct
// 1c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c3:  R_X86_64_64  _Py_TrueStruct
// 1cb: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1cf: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 4c 89 fa                      movq    %r15, %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 49 83 c6 e8                   addq    $-0x18, %r14
// 1f7: 49 29 de                      subq    %rbx, %r14
// 1fa: 49 83 c6 b8                   addq    $-0x48, %r14
// 1fe: 49 c1 ee 03                   shrq    $0x3, %r14
// 202: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 206: 31 c0                         xorl    %eax, %eax
// 208: e9 4d fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 20d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MATCH_MAPPING_code_body[526] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x4f, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x89, 0x46, 0xe8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x4d, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MATCH_MAPPING_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MATCH_MAPPING_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_MATCH_SEQUENCE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_MATCH_SEQUENCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 04 24                   movq    (%rsp), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 74 4f                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1a4: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 1a8: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1ac: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1b0: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_FalseStruct
// 1c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c3:  R_X86_64_64  _Py_TrueStruct
// 1cb: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1cf: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 4c 89 fa                      movq    %r15, %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 49 83 c6 e8                   addq    $-0x18, %r14
// 1f7: 49 29 de                      subq    %rbx, %r14
// 1fa: 49 83 c6 b8                   addq    $-0x48, %r14
// 1fe: 49 c1 ee 03                   shrq    $0x3, %r14
// 202: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 206: 31 c0                         xorl    %eax, %eax
// 208: e9 4d fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 20d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MATCH_SEQUENCE_code_body[526] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x4f, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x89, 0x46, 0xe8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x4d, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MATCH_SEQUENCE_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_MATCH_SEQUENCE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_NOP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_NOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 2a                         je      0x1d2 <_JIT_ENTRY+0x1d2>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 48 89 df                      movq    %rbx, %rdi
// 1bc: 4c 89 f6                      movq    %r14, %rsi
// 1bf: 4c 89 fa                      movq    %r15, %rdx
// 1c2: 48 83 c4 08                   addq    $0x8, %rsp
// 1c6: 5b                            popq    %rbx
// 1c7: 41 5c                         popq    %r12
// 1c9: 41 5d                         popq    %r13
// 1cb: 41 5e                         popq    %r14
// 1cd: 41 5f                         popq    %r15
// 1cf: 5d                            popq    %rbp
// 1d0: ff e0                         jmpq    *%rax
// 1d2: 48 29 d8                      subq    %rbx, %rax
// 1d5: 48 83 c0 b8                   addq    $-0x48, %rax
// 1d9: 48 c1 e8 03                   shrq    $0x3, %rax
// 1dd: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1e0: 31 c0                         xorl    %eax, %eax
// 1e2: e9 73 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1e7: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_NOP_code_body[488] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x73, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_NOP_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_NOP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_POP_EXCEPT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_POP_EXCEPT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 70: 49 8b 06                      movq    (%r14), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 0f 84 98 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 1ac: 4c 89 2b                      movq    %r13, (%rbx)
// 1af: 49 8b 47 70                   movq    0x70(%r15), %rax
// 1b3: 4c 8b 20                      movq    (%rax), %r12
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _Py_NoneStruct
// 1c0: 31 d2                         xorl    %edx, %edx
// 1c2: 49 39 cd                      cmpq    %rcx, %r13
// 1c5: 49 0f 45 d5                   cmovneq %r13, %rdx
// 1c9: 48 89 10                      movq    %rdx, (%rax)
// 1cc: 4d 85 e4                      testq   %r12, %r12
// 1cf: 74 50                         je      0x221 <_JIT_ENTRY+0x221>
// 1d1: 49 8b 04 24                   movq    (%r12), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7f 22                         jg      0x1fc <_JIT_ENTRY+0x1fc>
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1+0x39
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_NegativeRefcount
// 1ee: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1f3: 4c 89 e2                      movq    %r12, %rdx
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 8b 04 24                   movq    (%r12), %rax
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 78 21                         js      0x221 <_JIT_ENTRY+0x221>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20a: ff d0                         callq   *%rax
// 20c: 49 ff 0c 24                   decq    (%r12)
// 210: 75 0f                         jne     0x221 <_JIT_ENTRY+0x221>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_Dealloc
// 21c: 4c 89 e7                      movq    %r12, %rdi
// 21f: ff d0                         callq   *%rax
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_CONTINUE
// 22b: 4c 89 f7                      movq    %r14, %rdi
// 22e: 48 89 de                      movq    %rbx, %rsi
// 231: 4c 89 fa                      movq    %r15, %rdx
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 4c 29 f3                      subq    %r14, %rbx
// 247: 48 83 c3 b8                   addq    $-0x48, %rbx
// 24b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 24f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 253: 31 c0                         xorl    %eax, %eax
// 255: e9 00 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 25a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_POP_EXCEPT_code_body[603] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xe8, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x49, 0x8b, 0x47, 0x70, 0x4c, 0x8b, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xd2, 0x49, 0x39, 0xcd, 0x49, 0x0f, 0x45, 0xd5, 0x48, 0x89, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x00, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_POP_EXCEPT_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_POP_EXCEPT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_POP_FRAME
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_POP_FRAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 df                      subq    %rbx, %r15
// 35: 49 83 c7 b8                   addq    $-0x48, %r15
// 39: 49 c1 ef 03                   shrq    $0x3, %r15
// 3d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d6                      movq    %rdx, %r14
// 6c: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 83 c7 e8                   addq    $-0x18, %r15
// 1a3: 4d 85 e4                      testq   %r12, %r12
// 1a6: 74 69                         je      0x211 <_JIT_ENTRY+0x211>
// 1a8: 4d 89 27                      movq    %r12, (%r15)
// 1ab: 49 29 df                      subq    %rbx, %r15
// 1ae: 49 83 c7 b8                   addq    $-0x48, %r15
// 1b2: 49 c1 ef 03                   shrq    $0x3, %r15
// 1b6: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1ba: 41 ff 46 24                   incl    0x24(%r14)
// 1be: 4c 8b 7b 08                   movq    0x8(%rbx), %r15
// 1c2: 4d 89 7e 40                   movq    %r15, 0x40(%r14)
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _PyEval_FrameClearAndPop
// 1d0: 4c 89 f7                      movq    %r14, %rdi
// 1d3: 48 89 de                      movq    %rbx, %rsi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 63 47 40                   movslq  0x40(%r15), %rax
// 1dc: 4d 89 64 c7 48                movq    %r12, 0x48(%r15,%rax,8)
// 1e1: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1e5: 48 83 c6 50                   addq    $0x50, %rsi
// 1e9: 41 c7 47 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r15) # imm = 0xFFFFFFFF
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 4c 89 ff                      movq    %r15, %rdi
// 1fe: 4c 89 f2                      movq    %r14, %rdx
// 201: 48 83 c4 08                   addq    $0x8, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 49 29 df                      subq    %rbx, %r15
// 214: 49 83 c7 b8                   addq    $-0x48, %r15
// 218: 49 c1 ef 03                   shrq    $0x3, %r15
// 21c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 220: 31 c0                         xorl    %eax, %eax
// 222: e9 33 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 227: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_POP_FRAME_code_body[552] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x69, 0x4d, 0x89, 0x27, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x41, 0xff, 0x46, 0x24, 0x4c, 0x8b, 0x7b, 0x08, 0x4d, 0x89, 0x7e, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x49, 0x63, 0x47, 0x40, 0x4d, 0x89, 0x64, 0xc7, 0x48, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x33, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_POP_FRAME_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_POP_FRAME_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_POP_TOP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_POP_TOP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 70: 49 8b 06                      movq    (%r14), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1a3: 4d 85 e4                      testq   %r12, %r12
// 1a6: 74 76                         je      0x21e <_JIT_ENTRY+0x21e>
// 1a8: 4c 89 23                      movq    %r12, (%rbx)
// 1ab: 49 8b 04 24                   movq    (%r12), %rax
// 1af: 48 85 c0                      testq   %rax, %rax
// 1b2: 7f 22                         jg      0x1d6 <_JIT_ENTRY+0x1d6>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be 54 00 00 00                movl    $0x54, %esi
// 1cd: 4c 89 e2                      movq    %r12, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 8b 04 24                   movq    (%r12), %rax
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 78 21                         js      0x1fb <_JIT_ENTRY+0x1fb>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e4: ff d0                         callq   *%rax
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 75 0f                         jne     0x1fb <_JIT_ENTRY+0x1fb>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 e7                      movq    %r12, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 4c 89 f7                      movq    %r14, %rdi
// 208: 48 89 de                      movq    %rbx, %rsi
// 20b: 4c 89 fa                      movq    %r15, %rdx
// 20e: 48 83 c4 08                   addq    $0x8, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: ff e0                         jmpq    *%rax
// 21e: 4c 29 f3                      subq    %r14, %rbx
// 221: 48 83 c3 b8                   addq    $-0x48, %rbx
// 225: 48 c1 eb 03                   shrq    $0x3, %rbx
// 229: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 22d: 31 c0                         xorl    %eax, %eax
// 22f: e9 26 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 234: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_POP_TOP_code_body[565] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x76, 0x4c, 0x89, 0x23, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x26, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_POP_TOP_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_POP_TOP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_PUSH_EXC_INFO
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_PUSH_EXC_INFO.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 49 8b 04 24                   movq    (%r12), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 e2                      movq    %r12, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 04 24                   movq    (%r12), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 0c 24                   decq    (%r12)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 1a8: 4d 85 e4                      testq   %r12, %r12
// 1ab: 74 6e                         je      0x21b <_JIT_ENTRY+0x21b>
// 1ad: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 1b1: 4c 89 20                      movq    %r12, (%rax)
// 1b4: 4d 8b 6f 70                   movq    0x70(%r15), %r13
// 1b8: 49 8b 6d 00                   movq    (%r13), %rbp
// 1bc: 41 8b 04 24                   movl    (%r12), %eax
// 1c0: ff c0                         incl    %eax
// 1c2: 74 1a                         je      0x1de <_JIT_ENTRY+0x1de>
// 1c4: 41 89 04 24                   movl    %eax, (%r12)
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d2: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 1d7: ff d0                         callq   *%rax
// 1d9: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 1de: 48 85 ed                      testq   %rbp, %rbp
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_NoneStruct
// 1eb: 48 0f 45 c5                   cmovneq %rbp, %rax
// 1ef: 4d 89 65 00                   movq    %r12, (%r13)
// 1f3: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1f7: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 48 89 df                      movq    %rbx, %rdi
// 208: 4c 89 fa                      movq    %r15, %rdx
// 20b: 48 83 c4 18                   addq    $0x18, %rsp
// 20f: 5b                            popq    %rbx
// 210: 41 5c                         popq    %r12
// 212: 41 5d                         popq    %r13
// 214: 41 5e                         popq    %r14
// 216: 41 5f                         popq    %r15
// 218: 5d                            popq    %rbp
// 219: ff e0                         jmpq    *%rax
// 21b: 48 29 d8                      subq    %rbx, %rax
// 21e: 48 83 c0 b8                   addq    $-0x48, %rax
// 222: 48 c1 e8 03                   shrq    $0x3, %rax
// 226: 89 43 40                      movl    %eax, 0x40(%rbx)
// 229: 31 c0                         xorl    %eax, %eax
// 22b: e9 2d fe ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 230: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_PUSH_EXC_INFO_code_body[561] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x6e, 0x49, 0x8d, 0x76, 0xf8, 0x4c, 0x89, 0x20, 0x4d, 0x8b, 0x6f, 0x70, 0x49, 0x8b, 0x6d, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x1a, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x65, 0x00, 0x49, 0x89, 0x46, 0xe8, 0x4d, 0x89, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x2d, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_PUSH_EXC_INFO_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_PUSH_EXC_INFO_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_PUSH_FRAME
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_PUSH_FRAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 49 8b 76 f8                   movq    -0x8(%r14), %rsi
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 48 89 34 24                   movq    %rsi, (%rsp)
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 83 c6 e8                   addq    $-0x18, %r14
// 1a3: 4d 85 e4                      testq   %r12, %r12
// 1a6: 74 55                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1a8: 4d 89 26                      movq    %r12, (%r14)
// 1ab: 49 29 de                      subq    %rbx, %r14
// 1ae: 49 83 c6 b8                   addq    $-0x48, %r14
// 1b2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1b6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ba: 49 89 5c 24 08                movq    %rbx, 0x8(%r12)
// 1bf: 4d 89 67 40                   movq    %r12, 0x40(%r15)
// 1c3: 41 ff 4f 24                   decl    0x24(%r15)
// 1c7: 49 63 44 24 40                movslq  0x40(%r12), %rax
// 1cc: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 1d0: 48 83 c6 48                   addq    $0x48, %rsi
// 1d4: 41 c7 44 24 40 ff ff ff ff    movl    $0xffffffff, 0x40(%r12) # imm = 0xFFFFFFFF
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_CONTINUE
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: 4c 89 fa                      movq    %r15, %rdx
// 1ed: 48 83 c4 08                   addq    $0x8, %rsp
// 1f1: 5b                            popq    %rbx
// 1f2: 41 5c                         popq    %r12
// 1f4: 41 5d                         popq    %r13
// 1f6: 41 5e                         popq    %r14
// 1f8: 41 5f                         popq    %r15
// 1fa: 5d                            popq    %rbp
// 1fb: ff e0                         jmpq    *%rax
// 1fd: 49 29 de                      subq    %rbx, %r14
// 200: 49 83 c6 b8                   addq    $-0x48, %r14
// 204: 49 c1 ee 03                   shrq    $0x3, %r14
// 208: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20c: 31 c0                         xorl    %eax, %eax
// 20e: e9 47 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 213: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_PUSH_FRAME_code_body[532] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x76, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x34, 0x24, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x55, 0x4d, 0x89, 0x26, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x49, 0x89, 0x5c, 0x24, 0x08, 0x4d, 0x89, 0x67, 0x40, 0x41, 0xff, 0x4f, 0x24, 0x49, 0x63, 0x44, 0x24, 0x40, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0x83, 0xc6, 0x48, 0x41, 0xc7, 0x44, 0x24, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x47, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_PUSH_FRAME_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_PUSH_FRAME_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_PUSH_NULL
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_PUSH_NULL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 8b 04 24                   movq    (%rsp), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 74 30                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 1a4: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 1a8: 49 89 46 e8                   movq    %rax, -0x18(%r14)
// 1ac: 49 c7 46 f0 00 00 00 00       movq    $0x0, -0x10(%r14)
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _JIT_CONTINUE
// 1be: 48 89 df                      movq    %rbx, %rdi
// 1c1: 4c 89 fa                      movq    %r15, %rdx
// 1c4: 48 83 c4 08                   addq    $0x8, %rsp
// 1c8: 5b                            popq    %rbx
// 1c9: 41 5c                         popq    %r12
// 1cb: 41 5d                         popq    %r13
// 1cd: 41 5e                         popq    %r14
// 1cf: 41 5f                         popq    %r15
// 1d1: 5d                            popq    %rbp
// 1d2: ff e0                         jmpq    *%rax
// 1d4: 49 83 c6 e8                   addq    $-0x18, %r14
// 1d8: 49 29 de                      subq    %rbx, %r14
// 1db: 49 83 c6 b8                   addq    $-0x48, %r14
// 1df: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e7: 31 c0                         xorl    %eax, %eax
// 1e9: e9 6c fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1ee: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_PUSH_NULL_code_body[495] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x30, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x89, 0x46, 0xe8, 0x49, 0xc7, 0x46, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6c, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_PUSH_NULL_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_PUSH_NULL_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_RESUME_CHECK
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_RESUME_CHECK.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 91 01 00 00             jne     0x1b6 <_JIT_ENTRY+0x1b6>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 7c 01 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 74                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 49 8b 47 10                   movq    0x10(%r15), %rax
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 48 8b 0b                      movq    (%rbx), %rcx
// 18a: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
// 191: 75 23                         jne     0x1b6 <_JIT_ENTRY+0x1b6>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_CONTINUE
// 19d: 48 89 df                      movq    %rbx, %rdi
// 1a0: 4c 89 f6                      movq    %r14, %rsi
// 1a3: 4c 89 fa                      movq    %r15, %rdx
// 1a6: 48 83 c4 08                   addq    $0x8, %rsp
// 1aa: 5b                            popq    %rbx
// 1ab: 41 5c                         popq    %r12
// 1ad: 41 5d                         popq    %r13
// 1af: 41 5e                         popq    %r14
// 1b1: 41 5f                         popq    %r15
// 1b3: 5d                            popq    %rbp
// 1b4: ff e0                         jmpq    *%rax
// 1b6: 49 29 de                      subq    %rbx, %r14
// 1b9: 49 83 c6 b8                   addq    $-0x48, %r14
// 1bd: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1c5: 48 8b 03                      movq    (%rbx), %rax
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  _JIT_TARGET
// 1d2: 89 c9                         movl    %ecx, %ecx
// 1d4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1de: 48 83 c4 08                   addq    $0x8, %rsp
// 1e2: 5b                            popq    %rbx
// 1e3: 41 5c                         popq    %r12
// 1e5: 41 5d                         popq    %r13
// 1e7: 41 5e                         popq    %r14
// 1e9: 41 5f                         popq    %r15
// 1eb: 5d                            popq    %rbp
// 1ec: c3                            retq
// 1ed: 48 29 d8                      subq    %rbx, %rax
// 1f0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1fb: 31 c0                         xorl    %eax, %eax
// 1fd: eb df                         jmp     0x1de <_JIT_ENTRY+0x1de>
// 1ff: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_RESUME_CHECK_code_body[512] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x91, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x7c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x74, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x3b, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_RESUME_CHECK_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_RESUME_CHECK_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_SAVE_RETURN_OFFSET.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 38                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 66 89 43 44                   movw    %ax, 0x44(%rbx)
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _JIT_CONTINUE
// 1c7: 48 89 df                      movq    %rbx, %rdi
// 1ca: 4c 89 f6                      movq    %r14, %rsi
// 1cd: 4c 89 fa                      movq    %r15, %rdx
// 1d0: 48 83 c4 08                   addq    $0x8, %rsp
// 1d4: 5b                            popq    %rbx
// 1d5: 41 5c                         popq    %r12
// 1d7: 41 5d                         popq    %r13
// 1d9: 41 5e                         popq    %r14
// 1db: 41 5f                         popq    %r15
// 1dd: 5d                            popq    %rbp
// 1de: ff e0                         jmpq    *%rax
// 1e0: 48 29 d8                      subq    %rbx, %rax
// 1e3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1eb: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1ee: 31 c0                         xorl    %eax, %eax
// 1f0: e9 65 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1f5: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SAVE_RETURN_OFFSET_code_body[502] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x38, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x43, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x65, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SAVE_RETURN_OFFSET_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SAVE_RETURN_OFFSET_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_SETUP_ANNOTATIONS
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_SETUP_ANNOTATIONS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 18                   addq    $0x18, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 49 89 d7                      movq    %rdx, %r15
// 6f: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 e6                      movq    %r12, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 48 85 c0                      testq   %rax, %rax
// af: 7f 22                         jg      0xd3 <_JIT_ENTRY+0xd3>
// b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_NegativeRefcount
// c5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// ca: 4c 89 ea                      movq    %r13, %rdx
// cd: ff d0                         callq   *%rax
// cf: 49 8b 45 00                   movq    (%r13), %rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 78 28                         js      0xff <_JIT_ENTRY+0xff>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e1: ff d0                         callq   *%rax
// e3: 49 ff 4d 00                   decq    (%r13)
// e7: 75 16                         jne     0xff <_JIT_ENTRY+0xff>
// e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000eb:  R_X86_64_64  PySuper_Type
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: ff d0                         callq   *%rax
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1a3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1a8: 48 85 c9                      testq   %rcx, %rcx
// 1ab: 0f 84 ac 00 00 00             je      0x25d <_JIT_ENTRY+0x25d>
// 1b1: 49 83 c6 f0                   addq    $-0x10, %r14
// 1b5: 48 89 08                      movq    %rcx, (%rax)
// 1b8: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1bc: 48 85 ff                      testq   %rdi, %rdi
// 1bf: 0f 84 9d 00 00 00             je      0x262 <_JIT_ENTRY+0x262>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyMapping_GetOptionalItem
// 1cf: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001d1:  R_X86_64_64  _PyRuntime
// 1d9: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 1e0: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e5: 4c 89 ee                      movq    %r13, %rsi
// 1e8: ff d0                         callq   *%rax
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 0f 88 98 00 00 00             js      0x28a <_JIT_ENTRY+0x28a>
// 1f2: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1f7: 4d 85 e4                      testq   %r12, %r12
// 1fa: 0f 84 a0 00 00 00             je      0x2a0 <_JIT_ENTRY+0x2a0>
// 200: 49 8b 04 24                   movq    (%r12), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7f 22                         jg      0x22b <_JIT_ENTRY+0x22b>
// 209: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020b:  R_X86_64_64  .rodata.str1.1
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_NegativeRefcount
// 21d: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 222: 4c 89 e2                      movq    %r12, %rdx
// 225: ff d0                         callq   *%rax
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 0f 88 f8 00 00 00             js      0x32b <_JIT_ENTRY+0x32b>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23d: ff d0                         callq   *%rax
// 23f: 49 ff 0c 24                   decq    (%r12)
// 243: 0f 85 e2 00 00 00             jne     0x32b <_JIT_ENTRY+0x32b>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 4c 89 e7                      movq    %r12, %rdi
// 256: ff d0                         callq   *%rax
// 258: e9 ce 00 00 00                jmp     0x32b <_JIT_ENTRY+0x32b>
// 25d: 49 89 c6                      movq    %rax, %r14
// 260: eb 28                         jmp     0x28a <_JIT_ENTRY+0x28a>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyExc_SystemError
// 26c: 48 8b 30                      movq    (%rax), %rsi
// 26f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000271:  R_X86_64_64  .rodata.str1.1+0x39
// 279: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027b:  R_X86_64_64  _PyErr_Format
// 283: 4c 89 ff                      movq    %r15, %rdi
// 286: 31 c0                         xorl    %eax, %eax
// 288: ff d1                         callq   *%rcx
// 28a: 49 29 de                      subq    %rbx, %r14
// 28d: 49 83 c6 b8                   addq    $-0x48, %r14
// 291: 49 c1 ee 03                   shrq    $0x3, %r14
// 295: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 299: 31 c0                         xorl    %eax, %eax
// 29b: e9 bd fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  PyDict_New
// 2aa: ff d0                         callq   *%rax
// 2ac: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2b1: 48 85 c0                      testq   %rax, %rax
// 2b4: 74 d4                         je      0x28a <_JIT_ENTRY+0x28a>
// 2b6: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 2ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bc:  R_X86_64_64  PyObject_SetItem
// 2c4: 4c 89 ee                      movq    %r13, %rsi
// 2c7: 48 89 c2                      movq    %rax, %rdx
// 2ca: ff d1                         callq   *%rcx
// 2cc: 89 c5                         movl    %eax, %ebp
// 2ce: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 2d3: 49 8b 04 24                   movq    (%r12), %rax
// 2d7: 48 85 c0                      testq   %rax, %rax
// 2da: 7f 22                         jg      0x2fe <_JIT_ENTRY+0x2fe>
// 2dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002de:  R_X86_64_64  .rodata.str1.1
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_NegativeRefcount
// 2f0: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 2f5: 4c 89 e2                      movq    %r12, %rdx
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 8b 04 24                   movq    (%r12), %rax
// 2fe: 85 c0                         testl   %eax, %eax
// 300: 78 21                         js      0x323 <_JIT_ENTRY+0x323>
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30c: ff d0                         callq   *%rax
// 30e: 49 ff 0c 24                   decq    (%r12)
// 312: 75 0f                         jne     0x323 <_JIT_ENTRY+0x323>
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _Py_Dealloc
// 31e: 4c 89 e7                      movq    %r12, %rdi
// 321: ff d0                         callq   *%rax
// 323: 85 ed                         testl   %ebp, %ebp
// 325: 0f 85 5f ff ff ff             jne     0x28a <_JIT_ENTRY+0x28a>
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _JIT_CONTINUE
// 335: 48 89 df                      movq    %rbx, %rdi
// 338: 4c 89 f6                      movq    %r14, %rsi
// 33b: 4c 89 fa                      movq    %r15, %rdx
// 33e: 48 83 c4 18                   addq    $0x18, %rsp
// 342: 5b                            popq    %rbx
// 343: 41 5c                         popq    %r12
// 345: 41 5d                         popq    %r13
// 347: 41 5e                         popq    %r14
// 349: 41 5f                         popq    %r15
// 34b: 5d                            popq    %rbp
// 34c: ff e0                         jmpq    *%rax
// 34e: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SETUP_ANNOTATIONS_code_body[847] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x98, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xeb, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xbd, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0xd4, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x5f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SETUP_ANNOTATIONS_code_holes[34] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SETUP_ANNOTATIONS_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_SET_ADD
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_SET_ADD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f4                      movq    %rsi, %r12
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 1f: 75 12                         jne     0x33 <_JIT_ENTRY+0x33>
// 21: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 26: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 31: 75 37                         jne     0x6a <_JIT_ENTRY+0x6a>
// 33: 49 29 dc                      subq    %rbx, %r12
// 36: 49 83 c4 b8                   addq    $-0x48, %r12
// 3a: 49 c1 ec 03                   shrq    $0x3, %r12
// 3e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 42: 48 8b 03                      movq    (%rbx), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  _JIT_TARGET
// 4f: 89 c9                         movl    %ecx, %ecx
// 51: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 55: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5b: 48 83 c4 08                   addq    $0x8, %rsp
// 5f: 5b                            popq    %rbx
// 60: 41 5c                         popq    %r12
// 62: 41 5d                         popq    %r13
// 64: 41 5e                         popq    %r14
// 66: 41 5f                         popq    %r15
// 68: 5d                            popq    %rbp
// 69: c3                            retq
// 6a: 48 89 14 24                   movq    %rdx, (%rsp)
// 6e: 4d 8b 6c 24 f8                movq    -0x8(%r12), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 49 89 c7                      movq    %rax, %r15
// a6: 49 8b 06                      movq    (%r14), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f 21                         jg      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c7: 4c 89 f2                      movq    %r14, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 06                      movq    (%r14), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 27                         js      0xfa <_JIT_ENTRY+0xfa>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0e                      decq    (%r14)
// e2: 75 16                         jne     0xfa <_JIT_ENTRY+0xfa>
// e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e6:  R_X86_64_64  PySuper_Type
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: ff d0                         callq   *%rax
// fa: 48 8b 45 00                   movq    (%rbp), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f 22                         jg      0x125 <_JIT_ENTRY+0x125>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11c: 48 89 ea                      movq    %rbp, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 21                         js      0x14a <_JIT_ENTRY+0x14a>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 48 ff 4d 00                   decq    (%rbp)
// 139: 75 0f                         jne     0x14a <_JIT_ENTRY+0x14a>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: 48 89 ef                      movq    %rbp, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 45 00                   movq    (%r13), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7f 22                         jg      0x175 <_JIT_ENTRY+0x175>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16c: 4c 89 ea                      movq    %r13, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 49 8b 45 00                   movq    (%r13), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 78 21                         js      0x19a <_JIT_ENTRY+0x19a>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 183: ff d0                         callq   *%rax
// 185: 49 ff 4d 00                   decq    (%r13)
// 189: 75 0f                         jne     0x19a <_JIT_ENTRY+0x19a>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 4c 89 ef                      movq    %r13, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 4d 8d 6c 24 e8                leaq    -0x18(%r12), %r13
// 19f: 4d 85 ff                      testq   %r15, %r15
// 1a2: 74 7f                         je      0x223 <_JIT_ENTRY+0x223>
// 1a4: 4d 89 7c 24 e8                movq    %r15, -0x18(%r12)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _JIT_OPARG
// 1b3: f7 d0                         notl    %eax
// 1b5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ba: 48 98                         cltq
// 1bc: 49 8b 7c c4 f0                movq    -0x10(%r12,%rax,8), %rdi
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PySet_Add
// 1cb: 4c 89 fe                      movq    %r15, %rsi
// 1ce: ff d0                         callq   *%rax
// 1d0: 89 c5                         movl    %eax, %ebp
// 1d2: 49 8b 07                      movq    (%r15), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7f 21                         jg      0x1fb <_JIT_ENTRY+0x1fb>
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_NegativeRefcount
// 1ee: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 1f3: 4c 89 fa                      movq    %r15, %rdx
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 8b 07                      movq    (%r15), %rax
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 78 20                         js      0x21f <_JIT_ENTRY+0x21f>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 49 ff 0f                      decq    (%r15)
// 20e: 75 0f                         jne     0x21f <_JIT_ENTRY+0x21f>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_Dealloc
// 21a: 4c 89 ff                      movq    %r15, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 85 ed                         testl   %ebp, %ebp
// 221: 74 16                         je      0x239 <_JIT_ENTRY+0x239>
// 223: 49 29 dd                      subq    %rbx, %r13
// 226: 49 83 c5 b8                   addq    $-0x48, %r13
// 22a: 49 c1 ed 03                   shrq    $0x3, %r13
// 22e: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 232: 31 c0                         xorl    %eax, %eax
// 234: e9 22 fe ff ff                jmp     0x5b <_JIT_ENTRY+0x5b>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_CONTINUE
// 243: 48 89 df                      movq    %rbx, %rdi
// 246: 4c 89 ee                      movq    %r13, %rsi
// 249: 48 8b 14 24                   movq    (%rsp), %rdx
// 24d: 48 83 c4 08                   addq    $0x8, %rsp
// 251: 5b                            popq    %rbx
// 252: 41 5c                         popq    %r12
// 254: 41 5d                         popq    %r13
// 256: 41 5e                         popq    %r14
// 258: 41 5f                         popq    %r15
// 25a: 5d                            popq    %rbp
// 25b: ff e0                         jmpq    *%rax
// 25d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SET_ADD_code_body[606] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x12, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6c, 0x24, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6c, 0x24, 0xe8, 0x4d, 0x85, 0xff, 0x74, 0x7f, 0x4d, 0x89, 0x7c, 0x24, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x16, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x22, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SET_ADD_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SET_ADD_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_SET_FUNCTION_ATTRIBUTE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8d 76 e8                   leaq    -0x18(%r14), %rsi
// 1a3: 4d 85 e4                      testq   %r12, %r12
// 1a6: 74 2d                         je      0x1d5 <_JIT_ENTRY+0x1d5>
// 1a8: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1ac: 49 8b 46 e0                   movq    -0x20(%r14), %rax
// 1b0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c9                      movzwl  %cx, %ecx
// 1bd: 83 f9 03                      cmpl    $0x3, %ecx
// 1c0: 7f 28                         jg      0x1ea <_JIT_ENTRY+0x1ea>
// 1c2: 83 f9 01                      cmpl    $0x1, %ecx
// 1c5: 74 36                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1c7: 83 f9 02                      cmpl    $0x2, %ecx
// 1ca: 75 68                         jne     0x234 <_JIT_ENTRY+0x234>
// 1cc: 4c 89 e1                      movq    %r12, %rcx
// 1cf: 48 83 c1 40                   addq    $0x40, %rcx
// 1d3: eb 38                         jmp     0x20d <_JIT_ENTRY+0x20d>
// 1d5: 48 29 de                      subq    %rbx, %rsi
// 1d8: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1dc: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e0: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e3: 31 c0                         xorl    %eax, %eax
// 1e5: e9 70 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 1ea: 83 f9 04                      cmpl    $0x4, %ecx
// 1ed: 74 17                         je      0x206 <_JIT_ENTRY+0x206>
// 1ef: 83 f9 08                      cmpl    $0x8, %ecx
// 1f2: 75 40                         jne     0x234 <_JIT_ENTRY+0x234>
// 1f4: 4c 89 e1                      movq    %r12, %rcx
// 1f7: 48 83 c1 48                   addq    $0x48, %rcx
// 1fb: eb 10                         jmp     0x20d <_JIT_ENTRY+0x20d>
// 1fd: 4c 89 e1                      movq    %r12, %rcx
// 200: 48 83 c1 38                   addq    $0x38, %rcx
// 204: eb 07                         jmp     0x20d <_JIT_ENTRY+0x20d>
// 206: 4c 89 e1                      movq    %r12, %rcx
// 209: 48 83 c1 70                   addq    $0x70, %rcx
// 20d: 48 89 01                      movq    %rax, (%rcx)
// 210: 4d 89 66 e0                   movq    %r12, -0x20(%r14)
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_CONTINUE
// 21e: 48 89 df                      movq    %rbx, %rdi
// 221: 4c 89 fa                      movq    %r15, %rdx
// 224: 48 83 c4 08                   addq    $0x8, %rsp
// 228: 5b                            popq    %rbx
// 229: 41 5c                         popq    %r12
// 22b: 41 5d                         popq    %r13
// 22d: 41 5e                         popq    %r14
// 22f: 41 5f                         popq    %r15
// 231: 5d                            popq    %rbp
// 232: ff e0                         jmpq    *%rax
// 234: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000236:  R_X86_64_64  .rodata.str1.1+0x39
// 23e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000240:  R_X86_64_64  .rodata.str1.1+0x44
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_FatalErrorFunc
// 252: ff d0                         callq   *%rax
// 254: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SET_FUNCTION_ATTRIBUTE_code_body[597] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x2d, 0x4d, 0x89, 0x66, 0xe8, 0x49, 0x8b, 0x46, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x83, 0xf9, 0x03, 0x7f, 0x28, 0x83, 0xf9, 0x01, 0x74, 0x36, 0x83, 0xf9, 0x02, 0x75, 0x68, 0x4c, 0x89, 0xe1, 0x48, 0x83, 0xc1, 0x40, 0xeb, 0x38, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x70, 0xfe, 0xff, 0xff, 0x83, 0xf9, 0x04, 0x74, 0x17, 0x83, 0xf9, 0x08, 0x75, 0x40, 0x4c, 0x89, 0xe1, 0x48, 0x83, 0xc1, 0x48, 0xeb, 0x10, 0x4c, 0x89, 0xe1, 0x48, 0x83, 0xc1, 0x38, 0xeb, 0x07, 0x4c, 0x89, 0xe1, 0x48, 0x83, 0xc1, 0x70, 0x48, 0x89, 0x01, 0x4d, 0x89, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SET_FUNCTION_ATTRIBUTE_code_holes[23] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_SET_IP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_SET_IP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1a3: 48 85 c9                      testq   %rcx, %rcx
// 1a6: 74 46                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 89 08                      movq    %rcx, (%rax)
// 1af: 48 8b 03                      movq    (%rbx), %rax
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  _JIT_OPARG
// 1bc: 0f b7 c9                      movzwl  %cx, %ecx
// 1bf: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 1c7: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _JIT_CONTINUE
// 1d5: 48 89 df                      movq    %rbx, %rdi
// 1d8: 4c 89 f6                      movq    %r14, %rsi
// 1db: 4c 89 fa                      movq    %r15, %rdx
// 1de: 48 83 c4 08                   addq    $0x8, %rsp
// 1e2: 5b                            popq    %rbx
// 1e3: 41 5c                         popq    %r12
// 1e5: 41 5d                         popq    %r13
// 1e7: 41 5e                         popq    %r14
// 1e9: 41 5f                         popq    %r15
// 1eb: 5d                            popq    %rbp
// 1ec: ff e0                         jmpq    *%rax
// 1ee: 48 29 d8                      subq    %rbx, %rax
// 1f1: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f5: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f9: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1fc: 31 c0                         xorl    %eax, %eax
// 1fe: e9 57 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 203: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SET_IP_code_body[516] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x46, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x57, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SET_IP_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SET_IP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_SET_UPDATE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_SET_UPDATE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f4                      movq    %rsi, %r12
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 1f: 75 12                         jne     0x33 <_JIT_ENTRY+0x33>
// 21: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 26: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2a: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 31: 75 37                         jne     0x6a <_JIT_ENTRY+0x6a>
// 33: 49 29 dc                      subq    %rbx, %r12
// 36: 49 83 c4 b8                   addq    $-0x48, %r12
// 3a: 49 c1 ec 03                   shrq    $0x3, %r12
// 3e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 42: 48 8b 03                      movq    (%rbx), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  _JIT_TARGET
// 4f: 89 c9                         movl    %ecx, %ecx
// 51: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 55: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5b: 48 83 c4 08                   addq    $0x8, %rsp
// 5f: 5b                            popq    %rbx
// 60: 41 5c                         popq    %r12
// 62: 41 5d                         popq    %r13
// 64: 41 5e                         popq    %r14
// 66: 41 5f                         popq    %r15
// 68: 5d                            popq    %rbp
// 69: c3                            retq
// 6a: 48 89 14 24                   movq    %rdx, (%rsp)
// 6e: 4d 8b 6c 24 f8                movq    -0x8(%r12), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 49 89 c7                      movq    %rax, %r15
// a6: 49 8b 06                      movq    (%r14), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f 21                         jg      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c7: 4c 89 f2                      movq    %r14, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 06                      movq    (%r14), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 27                         js      0xfa <_JIT_ENTRY+0xfa>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0e                      decq    (%r14)
// e2: 75 16                         jne     0xfa <_JIT_ENTRY+0xfa>
// e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e6:  R_X86_64_64  PySuper_Type
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: ff d0                         callq   *%rax
// fa: 48 8b 45 00                   movq    (%rbp), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f 22                         jg      0x125 <_JIT_ENTRY+0x125>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11c: 48 89 ea                      movq    %rbp, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 21                         js      0x14a <_JIT_ENTRY+0x14a>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 48 ff 4d 00                   decq    (%rbp)
// 139: 75 0f                         jne     0x14a <_JIT_ENTRY+0x14a>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: 48 89 ef                      movq    %rbp, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 45 00                   movq    (%r13), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7f 22                         jg      0x175 <_JIT_ENTRY+0x175>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16c: 4c 89 ea                      movq    %r13, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 49 8b 45 00                   movq    (%r13), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 78 21                         js      0x19a <_JIT_ENTRY+0x19a>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 183: ff d0                         callq   *%rax
// 185: 49 ff 4d 00                   decq    (%r13)
// 189: 75 0f                         jne     0x19a <_JIT_ENTRY+0x19a>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 4c 89 ef                      movq    %r13, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 4d 8d 6c 24 e8                leaq    -0x18(%r12), %r13
// 19f: 4d 85 ff                      testq   %r15, %r15
// 1a2: 0f 84 a3 00 00 00             je      0x24b <_JIT_ENTRY+0x24b>
// 1a8: 4d 89 7c 24 e8                movq    %r15, -0x18(%r12)
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _JIT_OPARG
// 1b7: f7 d0                         notl    %eax
// 1b9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1be: 48 98                         cltq
// 1c0: 49 8b 7c c4 f0                movq    -0x10(%r12,%rax,8), %rdi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _PySet_Update
// 1cf: 4c 89 fe                      movq    %r15, %rsi
// 1d2: ff d0                         callq   *%rax
// 1d4: 89 c5                         movl    %eax, %ebp
// 1d6: 49 8b 07                      movq    (%r15), %rax
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 7f 21                         jg      0x1ff <_JIT_ENTRY+0x1ff>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 1f7: 4c 89 fa                      movq    %r15, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 07                      movq    (%r15), %rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 20                         js      0x223 <_JIT_ENTRY+0x223>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 49 ff 0f                      decq    (%r15)
// 212: 75 0f                         jne     0x223 <_JIT_ENTRY+0x223>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 ff                      movq    %r15, %rdi
// 221: ff d0                         callq   *%rax
// 223: 85 ed                         testl   %ebp, %ebp
// 225: 78 24                         js      0x24b <_JIT_ENTRY+0x24b>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_CONTINUE
// 231: 48 89 df                      movq    %rbx, %rdi
// 234: 4c 89 ee                      movq    %r13, %rsi
// 237: 48 8b 14 24                   movq    (%rsp), %rdx
// 23b: 48 83 c4 08                   addq    $0x8, %rsp
// 23f: 5b                            popq    %rbx
// 240: 41 5c                         popq    %r12
// 242: 41 5d                         popq    %r13
// 244: 41 5e                         popq    %r14
// 246: 41 5f                         popq    %r15
// 248: 5d                            popq    %rbp
// 249: ff e0                         jmpq    *%rax
// 24b: 49 29 dd                      subq    %rbx, %r13
// 24e: 49 83 c5 b8                   addq    $-0x48, %r13
// 252: 49 c1 ed 03                   shrq    $0x3, %r13
// 256: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 25a: 31 c0                         xorl    %eax, %eax
// 25c: e9 fa fd ff ff                jmp     0x5b <_JIT_ENTRY+0x5b>
// 261: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SET_UPDATE_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x12, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6c, 0x24, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6c, 0x24, 0xe8, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x7c, 0x24, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x78, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xfa, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SET_UPDATE_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SET_UPDATE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 0f 84 05 01 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 1a1: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a5: 4d 8b 7e e0                   movq    -0x20(%r14), %r15
// 1a9: 48 8b 03                      movq    (%rbx), %rax
// 1ac: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c9                      movzwl  %cx, %ecx
// 1bd: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  PyObject_SetAttr
// 1cc: 4c 89 e7                      movq    %r12, %rdi
// 1cf: 4c 89 fa                      movq    %r15, %rdx
// 1d2: ff d0                         callq   *%rax
// 1d4: 89 c5                         movl    %eax, %ebp
// 1d6: 49 8b 07                      movq    (%r15), %rax
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 7f 21                         jg      0x1ff <_JIT_ENTRY+0x1ff>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 1f7: 4c 89 fa                      movq    %r15, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 07                      movq    (%r15), %rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 20                         js      0x223 <_JIT_ENTRY+0x223>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 49 ff 0f                      decq    (%r15)
// 212: 75 0f                         jne     0x223 <_JIT_ENTRY+0x223>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 ff                      movq    %r15, %rdi
// 221: ff d0                         callq   *%rax
// 223: 49 8b 04 24                   movq    (%r12), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7f 22                         jg      0x24e <_JIT_ENTRY+0x24e>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 245: 4c 89 e2                      movq    %r12, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 04 24                   movq    (%r12), %rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 21                         js      0x273 <_JIT_ENTRY+0x273>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 0c 24                   decq    (%r12)
// 262: 75 0f                         jne     0x273 <_JIT_ENTRY+0x273>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 e7                      movq    %r12, %rdi
// 271: ff d0                         callq   *%rax
// 273: 48 c7 c0 fe ff ff ff          movq    $-0x2, %rax
// 27a: 85 ed                         testl   %ebp, %ebp
// 27c: 75 2f                         jne     0x2ad <_JIT_ENTRY+0x2ad>
// 27e: 49 83 c6 e0                   addq    $-0x20, %r14
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_CONTINUE
// 28c: 48 89 df                      movq    %rbx, %rdi
// 28f: 4c 89 f6                      movq    %r14, %rsi
// 292: 48 8b 14 24                   movq    (%rsp), %rdx
// 296: 48 83 c4 08                   addq    $0x8, %rsp
// 29a: 5b                            popq    %rbx
// 29b: 41 5c                         popq    %r12
// 29d: 41 5d                         popq    %r13
// 29f: 41 5e                         popq    %r14
// 2a1: 41 5f                         popq    %r15
// 2a3: 5d                            popq    %rbp
// 2a4: ff e0                         jmpq    *%rax
// 2a6: 48 c7 c0 ff ff ff ff          movq    $-0x1, %rax
// 2ad: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2b1: 48 29 d8                      subq    %rbx, %rax
// 2b4: 48 83 c0 a8                   addq    $-0x58, %rax
// 2b8: 48 c1 e8 03                   shrq    $0x3, %rax
// 2bc: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2bf: 31 c0                         xorl    %eax, %eax
// 2c1: e9 94 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2c6: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x05, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x7e, 0xe0, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0x85, 0xed, 0x75, 0x2f, 0x49, 0x83, 0xc6, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xa8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x94, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_INSTANCE_VALUE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 70: 49 8b 06                      movq    (%r14), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 4d 00                   decq    (%r13)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 ef                      movq    %r13, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 19f: 4d 85 ed                      testq   %r13, %r13
// 1a2: 74 7a                         je      0x21e <_JIT_ENTRY+0x21e>
// 1a4: 4c 89 6b e8                   movq    %r13, -0x18(%rbx)
// 1a8: 48 8b 4b e0                   movq    -0x20(%rbx), %rcx
// 1ac: 49 8b 45 e8                   movq    -0x18(%r13), %rax
// 1b0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b2:  R_X86_64_64  _JIT_OPERAND
// 1ba: 0f b7 d2                      movzwl  %dx, %edx
// 1bd: 4c 8b 64 d0 01                movq    0x1(%rax,%rdx,8), %r12
// 1c2: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 1c7: 4d 85 e4                      testq   %r12, %r12
// 1ca: 74 6c                         je      0x238 <_JIT_ENTRY+0x238>
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 48 85 c0                      testq   %rax, %rax
// 1d3: 7f 22                         jg      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d7:  R_X86_64_64  .rodata.str1.1
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_NegativeRefcount
// 1e9: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 1ee: 4c 89 e2                      movq    %r12, %rdx
// 1f1: ff d0                         callq   *%rax
// 1f3: 49 8b 04 24                   movq    (%r12), %rax
// 1f7: 85 c0                         testl   %eax, %eax
// 1f9: 78 59                         js      0x254 <_JIT_ENTRY+0x254>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 205: ff d0                         callq   *%rax
// 207: 49 ff 0c 24                   decq    (%r12)
// 20b: 75 47                         jne     0x254 <_JIT_ENTRY+0x254>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_Dealloc
// 217: 4c 89 e7                      movq    %r12, %rdi
// 21a: ff d0                         callq   *%rax
// 21c: eb 36                         jmp     0x254 <_JIT_ENTRY+0x254>
// 21e: 48 83 c3 e8                   addq    $-0x18, %rbx
// 222: 4c 29 f3                      subq    %r14, %rbx
// 225: 48 83 c3 b8                   addq    $-0x48, %rbx
// 229: 48 c1 eb 03                   shrq    $0x3, %rbx
// 22d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 231: 31 c0                         xorl    %eax, %eax
// 233: e9 22 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 238: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 23c: 8d 51 01                      leal    0x1(%rcx), %edx
// 23f: 48 f7 d1                      notq    %rcx
// 242: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000244:  R_X86_64_64  _JIT_OPERAND
// 24c: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 251: 88 50 ff                      movb    %dl, -0x1(%rax)
// 254: 49 8b 45 00                   movq    (%r13), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 7f 22                         jg      0x27f <_JIT_ENTRY+0x27f>
// 25d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_NegativeRefcount
// 271: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 276: 4c 89 ea                      movq    %r13, %rdx
// 279: ff d0                         callq   *%rax
// 27b: 49 8b 45 00                   movq    (%r13), %rax
// 27f: 48 83 c3 e0                   addq    $-0x20, %rbx
// 283: 85 c0                         testl   %eax, %eax
// 285: 78 21                         js      0x2a8 <_JIT_ENTRY+0x2a8>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 291: ff d0                         callq   *%rax
// 293: 49 ff 4d 00                   decq    (%r13)
// 297: 75 0f                         jne     0x2a8 <_JIT_ENTRY+0x2a8>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_Dealloc
// 2a3: 4c 89 ef                      movq    %r13, %rdi
// 2a6: ff d0                         callq   *%rax
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_CONTINUE
// 2b2: 4c 89 f7                      movq    %r14, %rdi
// 2b5: 48 89 de                      movq    %rbx, %rsi
// 2b8: 4c 89 fa                      movq    %r15, %rdx
// 2bb: 48 83 c4 08                   addq    $0x8, %rsp
// 2bf: 5b                            popq    %rbx
// 2c0: 41 5c                         popq    %r12
// 2c2: 41 5d                         popq    %r13
// 2c4: 41 5e                         popq    %r14
// 2c6: 41 5f                         popq    %r15
// 2c8: 5d                            popq    %rbp
// 2c9: ff e0                         jmpq    *%rax
// 2cb: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_INSTANCE_VALUE_code_body[716] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x4d, 0x85, 0xed, 0x74, 0x7a, 0x4c, 0x89, 0x6b, 0xe8, 0x48, 0x8b, 0x4b, 0xe0, 0x49, 0x8b, 0x45, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x64, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xe4, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x59, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x47, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x36, 0x48, 0x83, 0xc3, 0xe8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x22, 0xfe, 0xff, 0xff, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_INSTANCE_VALUE_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_SLOT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_SLOT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 71: 49 8b 06                      movq    (%r14), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 e4                      testq   %r12, %r12
// 19b: 0f 84 e7 00 00 00             je      0x288 <_JIT_ENTRY+0x288>
// 1a1: 4c 89 63 e8                   movq    %r12, -0x18(%rbx)
// 1a5: 48 8b 43 e0                   movq    -0x20(%rbx), %rax
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _JIT_OPERAND
// 1b3: 0f b7 c9                      movzwl  %cx, %ecx
// 1b6: 4d 8b 3c 0c                   movq    (%r12,%rcx), %r15
// 1ba: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 1be: 4d 85 ff                      testq   %r15, %r15
// 1c1: 74 4d                         je      0x210 <_JIT_ENTRY+0x210>
// 1c3: 49 8b 07                      movq    (%r15), %rax
// 1c6: 48 85 c0                      testq   %rax, %rax
// 1c9: 7f 21                         jg      0x1ec <_JIT_ENTRY+0x1ec>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1+0x39
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_NegativeRefcount
// 1df: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1e4: 4c 89 fa                      movq    %r15, %rdx
// 1e7: ff d0                         callq   *%rax
// 1e9: 49 8b 07                      movq    (%r15), %rax
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 78 20                         js      0x210 <_JIT_ENTRY+0x210>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 ff 0f                      decq    (%r15)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 ff                      movq    %r15, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 49 8b 04 24                   movq    (%r12), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7f 22                         jg      0x23b <_JIT_ENTRY+0x23b>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 232: 4c 89 e2                      movq    %r12, %rdx
// 235: ff d0                         callq   *%rax
// 237: 49 8b 04 24                   movq    (%r12), %rax
// 23b: 48 83 c3 e0                   addq    $-0x20, %rbx
// 23f: 85 c0                         testl   %eax, %eax
// 241: 78 21                         js      0x264 <_JIT_ENTRY+0x264>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24d: ff d0                         callq   *%rax
// 24f: 49 ff 0c 24                   decq    (%r12)
// 253: 75 0f                         jne     0x264 <_JIT_ENTRY+0x264>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_Dealloc
// 25f: 4c 89 e7                      movq    %r12, %rdi
// 262: ff d0                         callq   *%rax
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _JIT_CONTINUE
// 26e: 4c 89 f7                      movq    %r14, %rdi
// 271: 48 89 de                      movq    %rbx, %rsi
// 274: 48 8b 14 24                   movq    (%rsp), %rdx
// 278: 48 83 c4 08                   addq    $0x8, %rsp
// 27c: 5b                            popq    %rbx
// 27d: 41 5c                         popq    %r12
// 27f: 41 5d                         popq    %r13
// 281: 41 5e                         popq    %r14
// 283: 41 5f                         popq    %r15
// 285: 5d                            popq    %rbp
// 286: ff e0                         jmpq    *%rax
// 288: 48 83 c3 e8                   addq    $-0x18, %rbx
// 28c: 4c 29 f3                      subq    %r14, %rbx
// 28f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 293: 48 c1 eb 03                   shrq    $0x3, %rbx
// 297: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 29b: 31 c0                         xorl    %eax, %eax
// 29d: e9 b8 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2a2: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_SLOT_code_body[675] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x8b, 0x6b, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x63, 0xe8, 0x48, 0x8b, 0x43, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x3c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xe8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xb8, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_SLOT_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_SLOT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_DEREF
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 70: 49 8b 06                      movq    (%r14), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 0f 84 95 00 00 00             je      0x241 <_JIT_ENTRY+0x241>
// 1ac: 4c 89 2b                      movq    %r13, (%rbx)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 c0                      movzwl  %ax, %eax
// 1bc: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 1c1: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1c5: 4c 89 68 10                   movq    %r13, 0x10(%rax)
// 1c9: 4d 85 e4                      testq   %r12, %r12
// 1cc: 74 50                         je      0x21e <_JIT_ENTRY+0x21e>
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 7f 22                         jg      0x1f9 <_JIT_ENTRY+0x1f9>
// 1d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d9:  R_X86_64_64  .rodata.str1.1+0x39
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_NegativeRefcount
// 1eb: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1f0: 4c 89 e2                      movq    %r12, %rdx
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 8b 04 24                   movq    (%r12), %rax
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 21                         js      0x21e <_JIT_ENTRY+0x21e>
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 207: ff d0                         callq   *%rax
// 209: 49 ff 0c 24                   decq    (%r12)
// 20d: 75 0f                         jne     0x21e <_JIT_ENTRY+0x21e>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_Dealloc
// 219: 4c 89 e7                      movq    %r12, %rdi
// 21c: ff d0                         callq   *%rax
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_CONTINUE
// 228: 4c 89 f7                      movq    %r14, %rdi
// 22b: 48 89 de                      movq    %rbx, %rsi
// 22e: 4c 89 fa                      movq    %r15, %rdx
// 231: 48 83 c4 08                   addq    $0x8, %rsp
// 235: 5b                            popq    %rbx
// 236: 41 5c                         popq    %r12
// 238: 41 5d                         popq    %r13
// 23a: 41 5e                         popq    %r14
// 23c: 41 5f                         popq    %r15
// 23e: 5d                            popq    %rbp
// 23f: ff e0                         jmpq    *%rax
// 241: 4c 29 f3                      subq    %r14, %rbx
// 244: 48 83 c3 b8                   addq    $-0x48, %rbx
// 248: 48 c1 eb 03                   shrq    $0x3, %rbx
// 24c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 250: 31 c0                         xorl    %eax, %eax
// 252: e9 03 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 257: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_DEREF_code_body[600] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xe8, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4c, 0x89, 0x68, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x03, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_DEREF_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_DEREF_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_FAST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 70: 49 8b 06                      movq    (%r14), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 0c 24                   decq    (%r12)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 0f 84 92 00 00 00             je      0x23e <_JIT_ENTRY+0x23e>
// 1ac: 4c 89 2b                      movq    %r13, (%rbx)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_OPARG
// 1b9: 0f b7 c0                      movzwl  %ax, %eax
// 1bc: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 1c1: 4d 89 6c c6 48                movq    %r13, 0x48(%r14,%rax,8)
// 1c6: 4d 85 e4                      testq   %r12, %r12
// 1c9: 74 50                         je      0x21b <_JIT_ENTRY+0x21b>
// 1cb: 49 8b 04 24                   movq    (%r12), %rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 7f 22                         jg      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x39
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_NegativeRefcount
// 1e8: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1ed: 4c 89 e2                      movq    %r12, %rdx
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 8b 04 24                   movq    (%r12), %rax
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 78 21                         js      0x21b <_JIT_ENTRY+0x21b>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 204: ff d0                         callq   *%rax
// 206: 49 ff 0c 24                   decq    (%r12)
// 20a: 75 0f                         jne     0x21b <_JIT_ENTRY+0x21b>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 e7                      movq    %r12, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _JIT_CONTINUE
// 225: 4c 89 f7                      movq    %r14, %rdi
// 228: 48 89 de                      movq    %rbx, %rsi
// 22b: 4c 89 fa                      movq    %r15, %rdx
// 22e: 48 83 c4 08                   addq    $0x8, %rsp
// 232: 5b                            popq    %rbx
// 233: 41 5c                         popq    %r12
// 235: 41 5d                         popq    %r13
// 237: 41 5e                         popq    %r14
// 239: 41 5f                         popq    %r15
// 23b: 5d                            popq    %rbp
// 23c: ff e0                         jmpq    *%rax
// 23e: 4c 29 f3                      subq    %r14, %rbx
// 241: 48 83 c3 b8                   addq    $-0x48, %rbx
// 245: 48 c1 eb 03                   shrq    $0x3, %rbx
// 249: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 24d: 31 c0                         xorl    %eax, %eax
// 24f: e9 06 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 254: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_FAST_code_body[597] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xe8, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x89, 0x6c, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x06, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_FAST_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_FAST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_GLOBAL
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_GLOBAL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 71: 49 8b 06                      movq    (%r14), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 48 83 c3 e8                   addq    $-0x18, %rbx
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 85 00 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// 1a5: 4c 89 23                      movq    %r12, (%rbx)
// 1a8: 49 8b 06                      movq    (%r14), %rax
// 1ab: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 1af: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b5:  R_X86_64_64  _JIT_OPARG
// 1bd: 0f b7 c9                      movzwl  %cx, %ecx
// 1c0: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyDict_SetItem
// 1cf: 4c 89 e2                      movq    %r12, %rdx
// 1d2: ff d0                         callq   *%rax
// 1d4: 89 c5                         movl    %eax, %ebp
// 1d6: 49 8b 04 24                   movq    (%r12), %rax
// 1da: 48 85 c0                      testq   %rax, %rax
// 1dd: 7f 22                         jg      0x201 <_JIT_ENTRY+0x201>
// 1df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e1:  R_X86_64_64  .rodata.str1.1
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_NegativeRefcount
// 1f3: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 1f8: 4c 89 e2                      movq    %r12, %rdx
// 1fb: ff d0                         callq   *%rax
// 1fd: 49 8b 04 24                   movq    (%r12), %rax
// 201: 85 c0                         testl   %eax, %eax
// 203: 78 21                         js      0x226 <_JIT_ENTRY+0x226>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20f: ff d0                         callq   *%rax
// 211: 49 ff 0c 24                   decq    (%r12)
// 215: 75 0f                         jne     0x226 <_JIT_ENTRY+0x226>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 4c 89 e7                      movq    %r12, %rdi
// 224: ff d0                         callq   *%rax
// 226: 85 ed                         testl   %ebp, %ebp
// 228: 74 16                         je      0x240 <_JIT_ENTRY+0x240>
// 22a: 4c 29 f3                      subq    %r14, %rbx
// 22d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 231: 48 c1 eb 03                   shrq    $0x3, %rbx
// 235: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 239: 31 c0                         xorl    %eax, %eax
// 23b: e9 1a fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _JIT_CONTINUE
// 24a: 4c 89 f7                      movq    %r14, %rdi
// 24d: 48 89 de                      movq    %rbx, %rsi
// 250: 48 8b 14 24                   movq    (%rsp), %rdx
// 254: 48 83 c4 08                   addq    $0x8, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: ff e0                         jmpq    *%rax
// 264: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_GLOBAL_code_body[613] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x8b, 0x6b, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x23, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x16, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x1a, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_GLOBAL_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_GLOBAL_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_NAME
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_NAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 71: 49 8b 06                      movq    (%r14), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c7                      movq    %rax, %r15
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 45 00                   movq    (%r13), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 ea                      movq    %r13, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 45 00                   movq    (%r13), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 4d 00                   decq    (%r13)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 ef                      movq    %r13, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 48 83 c3 e8                   addq    $-0x18, %rbx
// 19f: 4d 85 ff                      testq   %r15, %r15
// 1a2: 0f 84 2a 01 00 00             je      0x2d2 <_JIT_ENTRY+0x2d2>
// 1a8: 4c 89 3b                      movq    %r15, (%rbx)
// 1ab: 49 8b 06                      movq    (%r14), %rax
// 1ae: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1b2: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b8:  R_X86_64_64  _JIT_OPARG
// 1c0: 0f b7 c9                      movzwl  %cx, %ecx
// 1c3: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 1c8: 48 85 ff                      testq   %rdi, %rdi
// 1cb: 74 23                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyDict_Type
// 1d7: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1db: 0f 84 8c 00 00 00             je      0x26d <_JIT_ENTRY+0x26d>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  PyObject_SetItem
// 1eb: e9 87 00 00 00                jmp     0x277 <_JIT_ENTRY+0x277>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  PyExc_SystemError
// 1fa: 48 8b 30                      movq    (%rax), %rsi
// 1fd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ff:  R_X86_64_64  .rodata.str1.1+0x39
// 207: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000209:  R_X86_64_64  _PyErr_Format
// 211: 48 8b 3c 24                   movq    (%rsp), %rdi
// 215: 31 c0                         xorl    %eax, %eax
// 217: 41 ff d0                      callq   *%r8
// 21a: 49 8b 07                      movq    (%r15), %rax
// 21d: 48 85 c0                      testq   %rax, %rax
// 220: 7f 21                         jg      0x243 <_JIT_ENTRY+0x243>
// 222: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_NegativeRefcount
// 236: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 23b: 4c 89 fa                      movq    %r15, %rdx
// 23e: ff d0                         callq   *%rax
// 240: 49 8b 07                      movq    (%r15), %rax
// 243: 85 c0                         testl   %eax, %eax
// 245: 0f 88 87 00 00 00             js      0x2d2 <_JIT_ENTRY+0x2d2>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 255: ff d0                         callq   *%rax
// 257: 49 ff 0f                      decq    (%r15)
// 25a: 75 76                         jne     0x2d2 <_JIT_ENTRY+0x2d2>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_Dealloc
// 266: 4c 89 ff                      movq    %r15, %rdi
// 269: ff d0                         callq   *%rax
// 26b: eb 65                         jmp     0x2d2 <_JIT_ENTRY+0x2d2>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  PyDict_SetItem
// 277: 48 89 ce                      movq    %rcx, %rsi
// 27a: 4c 89 fa                      movq    %r15, %rdx
// 27d: ff d0                         callq   *%rax
// 27f: 89 c5                         movl    %eax, %ebp
// 281: 49 8b 07                      movq    (%r15), %rax
// 284: 48 85 c0                      testq   %rax, %rax
// 287: 7f 21                         jg      0x2aa <_JIT_ENTRY+0x2aa>
// 289: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028b:  R_X86_64_64  .rodata.str1.1
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_NegativeRefcount
// 29d: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 2a2: 4c 89 fa                      movq    %r15, %rdx
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 07                      movq    (%r15), %rax
// 2aa: 85 c0                         testl   %eax, %eax
// 2ac: 78 20                         js      0x2ce <_JIT_ENTRY+0x2ce>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 ff 0f                      decq    (%r15)
// 2bd: 75 0f                         jne     0x2ce <_JIT_ENTRY+0x2ce>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_Dealloc
// 2c9: 4c 89 ff                      movq    %r15, %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 85 ed                         testl   %ebp, %ebp
// 2d0: 74 16                         je      0x2e8 <_JIT_ENTRY+0x2e8>
// 2d2: 4c 29 f3                      subq    %r14, %rbx
// 2d5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2d9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2dd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2e1: 31 c0                         xorl    %eax, %eax
// 2e3: e9 72 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _JIT_CONTINUE
// 2f2: 4c 89 f7                      movq    %r14, %rdi
// 2f5: 48 89 de                      movq    %rbx, %rsi
// 2f8: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fc: 48 83 c4 08                   addq    $0x8, %rsp
// 300: 5b                            popq    %rbx
// 301: 41 5c                         popq    %r12
// 303: 41 5d                         popq    %r13
// 305: 41 5e                         popq    %r14
// 307: 41 5f                         popq    %r15
// 309: 5d                            popq    %rbp
// 30a: ff e0                         jmpq    *%rax
// 30c: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_NAME_code_body[781] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x8b, 0x6b, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xe8, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x2a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x3b, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x16, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x72, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_NAME_code_holes[34] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_NAME_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_SLICE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 e6                      movq    %r12, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c5                      movq    %rax, %r13
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 04 24                   movq    (%r12), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 e2                      movq    %r12, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 0c 24                   decq    (%r12)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 e7                      movq    %r12, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 85 ed                      testq   %r13, %r13
// 19b: 0f 84 73 01 00 00             je      0x314 <_JIT_ENTRY+0x314>
// 1a1: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 1a5: 49 8b 7e e0                   movq    -0x20(%r14), %rdi
// 1a9: 49 8b 6e d0                   movq    -0x30(%r14), %rbp
// 1ad: 4d 8b 66 d8                   movq    -0x28(%r14), %r12
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1bb: 4c 89 ee                      movq    %r13, %rsi
// 1be: ff d0                         callq   *%rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 0f 84 61 01 00 00             je      0x32a <_JIT_ENTRY+0x32a>
// 1c9: 49 89 c7                      movq    %rax, %r15
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  PyObject_SetItem
// 1d6: 4c 89 e7                      movq    %r12, %rdi
// 1d9: 4c 89 fe                      movq    %r15, %rsi
// 1dc: 48 89 ea                      movq    %rbp, %rdx
// 1df: ff d0                         callq   *%rax
// 1e1: 41 89 c5                      movl    %eax, %r13d
// 1e4: 49 8b 07                      movq    (%r15), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 7f 21                         jg      0x20d <_JIT_ENTRY+0x20d>
// 1ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ee:  R_X86_64_64  .rodata.str1.1
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_NegativeRefcount
// 200: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 205: 4c 89 fa                      movq    %r15, %rdx
// 208: ff d0                         callq   *%rax
// 20a: 49 8b 07                      movq    (%r15), %rax
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 78 20                         js      0x231 <_JIT_ENTRY+0x231>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 49 ff 0f                      decq    (%r15)
// 220: 75 0f                         jne     0x231 <_JIT_ENTRY+0x231>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 4c 89 ff                      movq    %r15, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 45 85 ed                      testl   %r13d, %r13d
// 234: 41 0f 94 c5                   sete    %r13b
// 238: 48 8b 45 00                   movq    (%rbp), %rax
// 23c: 48 85 c0                      testq   %rax, %rax
// 23f: 7f 22                         jg      0x263 <_JIT_ENTRY+0x263>
// 241: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000243:  R_X86_64_64  .rodata.str1.1
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_NegativeRefcount
// 255: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 25a: 48 89 ea                      movq    %rbp, %rdx
// 25d: ff d0                         callq   *%rax
// 25f: 48 8b 45 00                   movq    (%rbp), %rax
// 263: 85 c0                         testl   %eax, %eax
// 265: 78 21                         js      0x288 <_JIT_ENTRY+0x288>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 271: ff d0                         callq   *%rax
// 273: 48 ff 4d 00                   decq    (%rbp)
// 277: 75 0f                         jne     0x288 <_JIT_ENTRY+0x288>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 48 89 ef                      movq    %rbp, %rdi
// 286: ff d0                         callq   *%rax
// 288: 49 8b 04 24                   movq    (%r12), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 7f 22                         jg      0x2b3 <_JIT_ENTRY+0x2b3>
// 291: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000293:  R_X86_64_64  .rodata.str1.1
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_NegativeRefcount
// 2a5: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 2aa: 4c 89 e2                      movq    %r12, %rdx
// 2ad: ff d0                         callq   *%rax
// 2af: 49 8b 04 24                   movq    (%r12), %rax
// 2b3: 4d 8d 7e f0                   leaq    -0x10(%r14), %r15
// 2b7: 49 83 c6 d0                   addq    $-0x30, %r14
// 2bb: 85 c0                         testl   %eax, %eax
// 2bd: 78 21                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c9: ff d0                         callq   *%rax
// 2cb: 49 ff 0c 24                   decq    (%r12)
// 2cf: 75 0f                         jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_Dealloc
// 2db: 4c 89 e7                      movq    %r12, %rdi
// 2de: ff d0                         callq   *%rax
// 2e0: 45 84 ed                      testb   %r13b, %r13b
// 2e3: 4d 0f 45 fe                   cmovneq %r14, %r15
// 2e7: 74 24                         je      0x30d <_JIT_ENTRY+0x30d>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _JIT_CONTINUE
// 2f3: 48 89 df                      movq    %rbx, %rdi
// 2f6: 4c 89 fe                      movq    %r15, %rsi
// 2f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2fd: 48 83 c4 08                   addq    $0x8, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 49 83 c7 f8                   addq    $-0x8, %r15
// 311: 4d 89 fe                      movq    %r15, %r14
// 314: 49 29 de                      subq    %rbx, %r14
// 317: 49 83 c6 a0                   addq    $-0x60, %r14
// 31b: 49 c1 ee 03                   shrq    $0x3, %r14
// 31f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 323: 31 c0                         xorl    %eax, %eax
// 325: e9 30 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 32a: 45 31 ed                      xorl    %r13d, %r13d
// 32d: 48 8b 45 00                   movq    (%rbp), %rax
// 331: 48 85 c0                      testq   %rax, %rax
// 334: 0f 8f 29 ff ff ff             jg      0x263 <_JIT_ENTRY+0x263>
// 33a: e9 02 ff ff ff                jmp     0x241 <_JIT_ENTRY+0x241>
// 33f: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_SLICE_code_body[832] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x73, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0xe8, 0x49, 0x8b, 0x7e, 0xe0, 0x49, 0x8b, 0x6e, 0xd0, 0x4d, 0x8b, 0x66, 0xd8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x41, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x41, 0x0f, 0x94, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xf0, 0x49, 0x83, 0xc6, 0xd0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x84, 0xed, 0x4d, 0x0f, 0x45, 0xfe, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x30, 0xfd, 0xff, 0xff, 0x45, 0x31, 0xed, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x29, 0xff, 0xff, 0xff, 0xe9, 0x02, 0xff, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_SLICE_code_holes[33] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_SLICE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 4c 29 f3                      subq    %r14, %rbx
// 35: 48 83 c3 b8                   addq    $-0x48, %rbx
// 39: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 41: 49 8b 06                      movq    (%r14), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 70: 49 8b 06                      movq    (%r14), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 85 e4                      testq   %r12, %r12
// 1a2: 0f 84 1f 01 00 00             je      0x2c7 <_JIT_ENTRY+0x2c7>
// 1a8: 4c 89 63 e8                   movq    %r12, -0x18(%rbx)
// 1ac: 4c 89 e6                      movq    %r12, %rsi
// 1af: 4c 8b 63 d8                   movq    -0x28(%rbx), %r12
// 1b3: 4c 8b 6b e0                   movq    -0x20(%rbx), %r13
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  PyObject_SetItem
// 1c1: 4c 89 ef                      movq    %r13, %rdi
// 1c4: 4c 89 e2                      movq    %r12, %rdx
// 1c7: ff d0                         callq   *%rax
// 1c9: 89 c5                         movl    %eax, %ebp
// 1cb: 49 8b 04 24                   movq    (%r12), %rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 7f 22                         jg      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_NegativeRefcount
// 1e8: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 1ed: 4c 89 e2                      movq    %r12, %rdx
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 8b 04 24                   movq    (%r12), %rax
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 78 21                         js      0x21b <_JIT_ENTRY+0x21b>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 204: ff d0                         callq   *%rax
// 206: 49 ff 0c 24                   decq    (%r12)
// 20a: 75 0f                         jne     0x21b <_JIT_ENTRY+0x21b>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 e7                      movq    %r12, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 49 8b 45 00                   movq    (%r13), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 7f 22                         jg      0x246 <_JIT_ENTRY+0x246>
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 23d: 4c 89 ea                      movq    %r13, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 45 00                   movq    (%r13), %rax
// 246: 85 c0                         testl   %eax, %eax
// 248: 4c 8b 24 24                   movq    (%rsp), %r12
// 24c: 78 21                         js      0x26f <_JIT_ENTRY+0x26f>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 258: ff d0                         callq   *%rax
// 25a: 49 ff 4d 00                   decq    (%r13)
// 25e: 75 0f                         jne     0x26f <_JIT_ENTRY+0x26f>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_Dealloc
// 26a: 4c 89 ef                      movq    %r13, %rdi
// 26d: ff d0                         callq   *%rax
// 26f: 49 8b 04 24                   movq    (%r12), %rax
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 7f 22                         jg      0x29a <_JIT_ENTRY+0x29a>
// 278: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027a:  R_X86_64_64  .rodata.str1.1
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 291: 4c 89 e2                      movq    %r12, %rdx
// 294: ff d0                         callq   *%rax
// 296: 49 8b 04 24                   movq    (%r12), %rax
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 21                         js      0x2bf <_JIT_ENTRY+0x2bf>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 ff 0c 24                   decq    (%r12)
// 2ae: 75 0f                         jne     0x2bf <_JIT_ENTRY+0x2bf>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_Dealloc
// 2ba: 4c 89 e7                      movq    %r12, %rdi
// 2bd: ff d0                         callq   *%rax
// 2bf: 85 ed                         testl   %ebp, %ebp
// 2c1: 74 1a                         je      0x2dd <_JIT_ENTRY+0x2dd>
// 2c3: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2c7: 4c 29 f3                      subq    %r14, %rbx
// 2ca: 48 83 c3 a0                   addq    $-0x60, %rbx
// 2ce: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2d2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2d6: 31 c0                         xorl    %eax, %eax
// 2d8: e9 7d fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 2dd: 48 83 c3 d8                   addq    $-0x28, %rbx
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _JIT_CONTINUE
// 2eb: 4c 89 f7                      movq    %r14, %rdi
// 2ee: 48 89 de                      movq    %rbx, %rsi
// 2f1: 4c 89 fa                      movq    %r15, %rdx
// 2f4: 48 83 c4 08                   addq    $0x8, %rsp
// 2f8: 5b                            popq    %rbx
// 2f9: 41 5c                         popq    %r12
// 2fb: 41 5d                         popq    %r13
// 2fd: 41 5e                         popq    %r14
// 2ff: 41 5f                         popq    %r15
// 301: 5d                            popq    %rbp
// 302: ff e0                         jmpq    *%rax
// 304: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_code_body[773] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4c, 0x8b, 0x6b, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x1f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x63, 0xe8, 0x4c, 0x89, 0xe6, 0x4c, 0x8b, 0x63, 0xd8, 0x4c, 0x8b, 0x6b, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x1a, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x7d, 0xfd, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xd8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_code_holes[32] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_DICT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 0f 85 70 01 00 00             jne     0x195 <_JIT_ENTRY+0x195>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 5b 01 00 00             je      0x195 <_JIT_ENTRY+0x195>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 ee                      movq    %r13, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 04 24                   movq    (%r12), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 45 00                   movq    (%r13), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 ea                      movq    %r13, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 48 8b 2c 24                   movq    (%rsp), %rbp
// 14d: 78 21                         js      0x170 <_JIT_ENTRY+0x170>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 4d 00                   decq    (%r13)
// 15f: 75 0f                         jne     0x170 <_JIT_ENTRY+0x170>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 ef                      movq    %r13, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 48 85 ed                      testq   %rbp, %rbp
// 173: 74 57                         je      0x1cc <_JIT_ENTRY+0x1cc>
// 175: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 179: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 17d: 4d 8b 66 e0                   movq    -0x20(%r14), %r12
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  PyDict_Type
// 18b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 190: 74 3f                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 192: 4d 89 ee                      movq    %r13, %r14
// 195: 49 29 de                      subq    %rbx, %r14
// 198: 49 83 c6 b8                   addq    $-0x48, %r14
// 19c: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a0: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a4: 48 8b 03                      movq    (%rbx), %rax
// 1a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a9:  R_X86_64_64  _JIT_TARGET
// 1b1: 89 c9                         movl    %ecx, %ecx
// 1b3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1bd: 48 83 c4 08                   addq    $0x8, %rsp
// 1c1: 5b                            popq    %rbx
// 1c2: 41 5c                         popq    %r12
// 1c4: 41 5d                         popq    %r13
// 1c6: 41 5e                         popq    %r14
// 1c8: 41 5f                         popq    %r15
// 1ca: 5d                            popq    %rbp
// 1cb: c3                            retq
// 1cc: 4d 89 f5                      movq    %r14, %r13
// 1cf: eb 6f                         jmp     0x240 <_JIT_ENTRY+0x240>
// 1d1: 49 83 c6 d8                   addq    $-0x28, %r14
// 1d5: 49 8b 16                      movq    (%r14), %rdx
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _PyDict_SetItem_Take2
// 1e2: 4c 89 e7                      movq    %r12, %rdi
// 1e5: 48 89 ee                      movq    %rbp, %rsi
// 1e8: ff d0                         callq   *%rax
// 1ea: 89 c5                         movl    %eax, %ebp
// 1ec: 49 8b 04 24                   movq    (%r12), %rax
// 1f0: 48 85 c0                      testq   %rax, %rax
// 1f3: 7f 22                         jg      0x217 <_JIT_ENTRY+0x217>
// 1f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_NegativeRefcount
// 209: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 20e: 4c 89 e2                      movq    %r12, %rdx
// 211: ff d0                         callq   *%rax
// 213: 49 8b 04 24                   movq    (%r12), %rax
// 217: 85 c0                         testl   %eax, %eax
// 219: 78 21                         js      0x23c <_JIT_ENTRY+0x23c>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 225: ff d0                         callq   *%rax
// 227: 49 ff 0c 24                   decq    (%r12)
// 22b: 75 0f                         jne     0x23c <_JIT_ENTRY+0x23c>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 4c 89 e7                      movq    %r12, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 85 ed                         testl   %ebp, %ebp
// 23e: 74 16                         je      0x256 <_JIT_ENTRY+0x256>
// 240: 49 29 dd                      subq    %rbx, %r13
// 243: 49 83 c5 a0                   addq    $-0x60, %r13
// 247: 49 c1 ed 03                   shrq    $0x3, %r13
// 24b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 24f: 31 c0                         xorl    %eax, %eax
// 251: e9 67 ff ff ff                jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _JIT_CONTINUE
// 260: 48 89 df                      movq    %rbx, %rdi
// 263: 4c 89 f6                      movq    %r14, %rsi
// 266: 4c 89 fa                      movq    %r15, %rdx
// 269: 48 83 c4 08                   addq    $0x8, %rsp
// 26d: 5b                            popq    %rbx
// 26e: 41 5c                         popq    %r12
// 270: 41 5d                         popq    %r13
// 272: 41 5e                         popq    %r14
// 274: 41 5f                         popq    %r15
// 276: 5d                            popq    %rbp
// 277: ff e0                         jmpq    *%rax
// 279: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_DICT_code_body[634] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x0f, 0x85, 0x70, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x5b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x57, 0x4d, 0x8d, 0x6e, 0xf0, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x8b, 0x66, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x3f, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0xf5, 0xeb, 0x6f, 0x49, 0x83, 0xc6, 0xd8, 0x49, 0x8b, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x16, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xa0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x67, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_DICT_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_DICT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_LIST_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 39                         jne     0x6b <_JIT_ENTRY+0x6b>
// 32: 4c 89 f0                      movq    %r14, %rax
// 35: 48 29 d8                      subq    %rbx, %rax
// 38: 48 83 c0 b8                   addq    $-0x48, %rax
// 3c: 48 c1 e8 03                   shrq    $0x3, %rax
// 40: 89 43 40                      movl    %eax, 0x40(%rbx)
// 43: 48 8b 03                      movq    (%rbx), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 56: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5c: 48 83 c4 08                   addq    $0x8, %rsp
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5d                         popq    %r13
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: 5d                            popq    %rbp
// 6a: c3                            retq
// 6b: 49 89 d7                      movq    %rdx, %r15
// 6e: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 72: 48 8b 03                      movq    (%rbx), %rax
// 75: 48 8b 40 20                   movq    0x20(%rax), %rax
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  _JIT_OPARG
// 83: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 89: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _PySuper_Lookup
// 98: 48 89 ef                      movq    %rbp, %rdi
// 9b: 4c 89 ee                      movq    %r13, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: ff d0                         callq   *%rax
// a2: 48 89 04 24                   movq    %rax, (%rsp)
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 48 85 c0                      testq   %rax, %rax
// ad: 7f 22                         jg      0xd1 <_JIT_ENTRY+0xd1>
// af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b1:  R_X86_64_64  .rodata.str1.1
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_NegativeRefcount
// c3: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c8: 4c 89 e2                      movq    %r12, %rdx
// cb: ff d0                         callq   *%rax
// cd: 49 8b 04 24                   movq    (%r12), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 28                         js      0xfd <_JIT_ENTRY+0xfd>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0c 24                   decq    (%r12)
// e5: 75 16                         jne     0xfd <_JIT_ENTRY+0xfd>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  PySuper_Type
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_Dealloc
// fb: ff d0                         callq   *%rax
// fd: 48 8b 45 00                   movq    (%rbp), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f 22                         jg      0x128 <_JIT_ENTRY+0x128>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11f: 48 89 ea                      movq    %rbp, %rdx
// 122: ff d0                         callq   *%rax
// 124: 48 8b 45 00                   movq    (%rbp), %rax
// 128: 85 c0                         testl   %eax, %eax
// 12a: 4c 8b 24 24                   movq    (%rsp), %r12
// 12e: 78 21                         js      0x151 <_JIT_ENTRY+0x151>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 4d 00                   decq    (%rbp)
// 140: 75 0f                         jne     0x151 <_JIT_ENTRY+0x151>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_Dealloc
// 14c: 48 89 ef                      movq    %rbp, %rdi
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 45 00                   movq    (%r13), %rax
// 155: 48 85 c0                      testq   %rax, %rax
// 158: 7f 22                         jg      0x17c <_JIT_ENTRY+0x17c>
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_NegativeRefcount
// 16e: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 173: 4c 89 ea                      movq    %r13, %rdx
// 176: ff d0                         callq   *%rax
// 178: 49 8b 45 00                   movq    (%r13), %rax
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 78 21                         js      0x1a1 <_JIT_ENTRY+0x1a1>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: ff d0                         callq   *%rax
// 18c: 49 ff 4d 00                   decq    (%r13)
// 190: 75 0f                         jne     0x1a1 <_JIT_ENTRY+0x1a1>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_Dealloc
// 19c: 4c 89 ef                      movq    %r13, %rdi
// 19f: ff d0                         callq   *%rax
// 1a1: 4d 85 e4                      testq   %r12, %r12
// 1a4: 0f 84 51 01 00 00             je      0x2fb <_JIT_ENTRY+0x2fb>
// 1aa: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 1ae: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  PyLong_Type
// 1bc: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1c1: 0f 85 6e fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1c7: 4d 8b 6e e0                   movq    -0x20(%r14), %r13
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  PyList_Type
// 1d5: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1d9: 0f 85 56 fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1df: 49 83 7c 24 10 08             cmpq    $0x8, 0x10(%r12)
// 1e5: 0f 87 4a fe ff ff             ja      0x35 <_JIT_ENTRY+0x35>
// 1eb: 41 8b 4c 24 18                movl    0x18(%r12), %ecx
// 1f0: 49 39 4d 10                   cmpq    %rcx, 0x10(%r13)
// 1f4: 0f 8e 3b fe ff ff             jle     0x35 <_JIT_ENTRY+0x35>
// 1fa: 49 8b 46 d8                   movq    -0x28(%r14), %rax
// 1fe: 49 8b 55 18                   movq    0x18(%r13), %rdx
// 202: 4c 8b 24 ca                   movq    (%rdx,%rcx,8), %r12
// 206: 48 89 04 ca                   movq    %rax, (%rdx,%rcx,8)
// 20a: 49 8b 04 24                   movq    (%r12), %rax
// 20e: 48 85 c0                      testq   %rax, %rax
// 211: 7f 22                         jg      0x235 <_JIT_ENTRY+0x235>
// 213: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000215:  R_X86_64_64  .rodata.str1.1
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_NegativeRefcount
// 227: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 22c: 4c 89 e2                      movq    %r12, %rdx
// 22f: ff d0                         callq   *%rax
// 231: 49 8b 04 24                   movq    (%r12), %rax
// 235: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000237:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23f: 85 c0                         testl   %eax, %eax
// 241: 78 17                         js      0x25a <_JIT_ENTRY+0x25a>
// 243: ff d5                         callq   *%rbp
// 245: 49 ff 0c 24                   decq    (%r12)
// 249: 75 0f                         jne     0x25a <_JIT_ENTRY+0x25a>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: 4c 89 e7                      movq    %r12, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 4c 8b 24 24                   movq    (%rsp), %r12
// 25e: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 264: 75 28                         jne     0x28e <_JIT_ENTRY+0x28e>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  PyInterpreterState_Get
// 270: ff d0                         callq   *%rax
// 272: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 279: 49 ff 0c 24                   decq    (%r12)
// 27d: 75 0f                         jne     0x28e <_JIT_ENTRY+0x28e>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  PyObject_Free
// 289: 4c 89 e7                      movq    %r12, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 48 85 c0                      testq   %rax, %rax
// 295: 7f 22                         jg      0x2b9 <_JIT_ENTRY+0x2b9>
// 297: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000299:  R_X86_64_64  .rodata.str1.1
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_NegativeRefcount
// 2ab: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 2b0: 4c 89 ea                      movq    %r13, %rdx
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 8b 45 00                   movq    (%r13), %rax
// 2b9: 49 83 c6 d8                   addq    $-0x28, %r14
// 2bd: 85 c0                         testl   %eax, %eax
// 2bf: 78 17                         js      0x2d8 <_JIT_ENTRY+0x2d8>
// 2c1: ff d5                         callq   *%rbp
// 2c3: 49 ff 4d 00                   decq    (%r13)
// 2c7: 75 0f                         jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_Dealloc
// 2d3: 4c 89 ef                      movq    %r13, %rdi
// 2d6: ff d0                         callq   *%rax
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _JIT_CONTINUE
// 2e2: 48 89 df                      movq    %rbx, %rdi
// 2e5: 4c 89 f6                      movq    %r14, %rsi
// 2e8: 4c 89 fa                      movq    %r15, %rdx
// 2eb: 48 83 c4 08                   addq    $0x8, %rsp
// 2ef: 5b                            popq    %rbx
// 2f0: 41 5c                         popq    %r12
// 2f2: 41 5d                         popq    %r13
// 2f4: 41 5e                         popq    %r14
// 2f6: 41 5f                         popq    %r15
// 2f8: 5d                            popq    %rbp
// 2f9: ff e0                         jmpq    *%rax
// 2fb: 49 83 c6 e8                   addq    $-0x18, %r14
// 2ff: 49 29 de                      subq    %rbx, %r14
// 302: 49 83 c6 b8                   addq    $-0x48, %r14
// 306: 49 c1 ee 03                   shrq    $0x3, %r14
// 30a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 30e: 31 c0                         xorl    %eax, %eax
// 310: e9 47 fd ff ff                jmp     0x5c <_JIT_ENTRY+0x5c>
// 315: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_LIST_INT_code_body[790] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x51, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x6e, 0xfe, 0xff, 0xff, 0x4d, 0x8b, 0x6e, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x56, 0xfe, 0xff, 0xff, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x08, 0x0f, 0x87, 0x4a, 0xfe, 0xff, 0xff, 0x41, 0x8b, 0x4c, 0x24, 0x18, 0x49, 0x39, 0x4d, 0x10, 0x0f, 0x8e, 0x3b, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x46, 0xd8, 0x49, 0x8b, 0x55, 0x18, 0x4c, 0x8b, 0x24, 0xca, 0x48, 0x89, 0x04, 0xca, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x83, 0xc6, 0xd8, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x47, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_LIST_INT_code_holes[30] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_SWAP
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_SWAP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 85 e4                      testq   %r12, %r12
// 1a2: 74 4f                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1a4: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 1a8: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 48 c1 e0 03                   shlq    $0x3, %rax
// 1bd: 4c 89 f1                      movq    %r14, %rcx
// 1c0: 48 29 c1                      subq    %rax, %rcx
// 1c3: 48 f7 d8                      negq    %rax
// 1c6: 48 8b 49 f0                   movq    -0x10(%rcx), %rcx
// 1ca: 4d 89 64 06 f0                movq    %r12, -0x10(%r14,%rax)
// 1cf: 49 89 4e e8                   movq    %rcx, -0x18(%r14)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 4c 89 fa                      movq    %r15, %rdx
// 1e3: 48 83 c4 08                   addq    $0x8, %rsp
// 1e7: 5b                            popq    %rbx
// 1e8: 41 5c                         popq    %r12
// 1ea: 41 5d                         popq    %r13
// 1ec: 41 5e                         popq    %r14
// 1ee: 41 5f                         popq    %r15
// 1f0: 5d                            popq    %rbp
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 49 83 c6 e8                   addq    $-0x18, %r14
// 1f7: 49 29 de                      subq    %rbx, %r14
// 1fa: 49 83 c6 b8                   addq    $-0x48, %r14
// 1fe: 49 c1 ee 03                   shrq    $0x3, %r14
// 202: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 206: 31 c0                         xorl    %eax, %eax
// 208: e9 4d fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 20d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SWAP_code_body[526] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x4f, 0x49, 0x8d, 0x76, 0xf0, 0x4d, 0x89, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x49, 0xf0, 0x4d, 0x89, 0x64, 0x06, 0xf0, 0x49, 0x89, 0x4e, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x4d, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SWAP_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_SWAP_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 ab 00 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 1a5: 4d 89 27                      movq    %r12, (%r15)
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyObject_IsTrue
// 1b2: 4c 89 e7                      movq    %r12, %rdi
// 1b5: ff d0                         callq   *%rax
// 1b7: 89 c5                         movl    %eax, %ebp
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 7f 22                         jg      0x1e4 <_JIT_ENTRY+0x1e4>
// 1c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c4:  R_X86_64_64  .rodata.str1.1
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_NegativeRefcount
// 1d6: be 86 00 00 00                movl    $0x86, %esi
// 1db: 4c 89 e2                      movq    %r12, %rdx
// 1de: ff d0                         callq   *%rax
// 1e0: 49 8b 04 24                   movq    (%r12), %rax
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 78 21                         js      0x209 <_JIT_ENTRY+0x209>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 ff 0c 24                   decq    (%r12)
// 1f8: 75 0f                         jne     0x209 <_JIT_ENTRY+0x209>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_Dealloc
// 204: 4c 89 e7                      movq    %r12, %rdi
// 207: ff d0                         callq   *%rax
// 209: 49 83 c6 f0                   addq    $-0x10, %r14
// 20d: 85 ed                         testl   %ebp, %ebp
// 20f: 78 3f                         js      0x250 <_JIT_ENTRY+0x250>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_FalseStruct
// 21b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021d:  R_X86_64_64  _Py_TrueStruct
// 225: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 229: 49 89 0f                      movq    %rcx, (%r15)
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _JIT_CONTINUE
// 236: 48 89 df                      movq    %rbx, %rdi
// 239: 4c 89 f6                      movq    %r14, %rsi
// 23c: 48 8b 14 24                   movq    (%rsp), %rdx
// 240: 48 83 c4 08                   addq    $0x8, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: ff e0                         jmpq    *%rax
// 250: 49 29 df                      subq    %rbx, %r15
// 253: 49 83 c7 b8                   addq    $-0x48, %r15
// 257: 49 c1 ef 03                   shrq    $0x3, %r15
// 25b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 25f: 31 c0                         xorl    %eax, %eax
// 261: e9 f4 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 266: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x7e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xed, 0x78, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xf4, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_ALWAYS_TRUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 0f 85 fb 01 00 00             jne     0x220 <_JIT_ENTRY+0x220>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 e6 01 00 00             je      0x220 <_JIT_ENTRY+0x220>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 ee                      movq    %r13, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 04 24                   movq    (%r12), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 45 00                   movq    (%r13), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 ea                      movq    %r13, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 4d 00                   decq    (%r13)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 ef                      movq    %r13, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 170: 4c 8b 2c 24                   movq    (%rsp), %r13
// 174: 4d 85 ed                      testq   %r13, %r13
// 177: 0f 84 da 00 00 00             je      0x257 <_JIT_ENTRY+0x257>
// 17d: 49 83 c6 f0                   addq    $-0x10, %r14
// 181: 4d 89 2c 24                   movq    %r13, (%r12)
// 185: 49 8b 45 08                   movq    0x8(%r13), %rax
// 189: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018b:  R_X86_64_64  _JIT_OPERAND
// 193: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 199: 0f 85 81 00 00 00             jne     0x220 <_JIT_ENTRY+0x220>
// 19f: 49 8b 45 00                   movq    (%r13), %rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 7f 22                         jg      0x1ca <_JIT_ENTRY+0x1ca>
// 1a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001aa:  R_X86_64_64  .rodata.str1.1
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: be db 00 00 00                movl    $0xdb, %esi
// 1c1: 4c 89 ea                      movq    %r13, %rdx
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 8b 45 00                   movq    (%r13), %rax
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 21                         js      0x1ef <_JIT_ENTRY+0x1ef>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d8: ff d0                         callq   *%rax
// 1da: 49 ff 4d 00                   decq    (%r13)
// 1de: 75 0f                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_Dealloc
// 1ea: 4c 89 ef                      movq    %r13, %rdi
// 1ed: ff d0                         callq   *%rax
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_TrueStruct
// 1f9: 49 89 04 24                   movq    %rax, (%r12)
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_CONTINUE
// 207: 48 89 df                      movq    %rbx, %rdi
// 20a: 4c 89 f6                      movq    %r14, %rsi
// 20d: 4c 89 fa                      movq    %r15, %rdx
// 210: 48 83 c4 08                   addq    $0x8, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: ff e0                         jmpq    *%rax
// 220: 49 29 de                      subq    %rbx, %r14
// 223: 49 83 c6 b8                   addq    $-0x48, %r14
// 227: 49 c1 ee 03                   shrq    $0x3, %r14
// 22b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 22f: 48 8b 03                      movq    (%rbx), %rax
// 232: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000234:  R_X86_64_64  _JIT_TARGET
// 23c: 89 c9                         movl    %ecx, %ecx
// 23e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 242: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 248: 48 83 c4 08                   addq    $0x8, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: c3                            retq
// 257: 49 29 dc                      subq    %rbx, %r12
// 25a: 49 83 c4 b8                   addq    $-0x48, %r12
// 25e: 49 c1 ec 03                   shrq    $0x3, %r12
// 262: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 266: 31 c0                         xorl    %eax, %eax
// 268: eb de                         jmp     0x248 <_JIT_ENTRY+0x248>
// 26a: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_ALWAYS_TRUE_code_body[619] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x0f, 0x85, 0xfb, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xe6, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x4c, 0x8b, 0x2c, 0x24, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0xde};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_ALWAYS_TRUE_code_holes[25] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_BOOL
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_BOOL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 6b 01 00 00             jne     0x190 <_JIT_ENTRY+0x190>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 56 01 00 00             je      0x190 <_JIT_ENTRY+0x190>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 0c 24                   movq    (%rsp), %rcx
// 174: 48 85 c9                      testq   %rcx, %rcx
// 177: 74 4e                         je      0x1c7 <_JIT_ENTRY+0x1c7>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 08                      movq    %rcx, (%rax)
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  PyBool_Type
// 18a: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 18e: 74 49                         je      0x1d9 <_JIT_ENTRY+0x1d9>
// 190: 49 29 de                      subq    %rbx, %r14
// 193: 49 83 c6 b8                   addq    $-0x48, %r14
// 197: 49 c1 ee 03                   shrq    $0x3, %r14
// 19b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19f: 48 8b 03                      movq    (%rbx), %rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  _JIT_TARGET
// 1ac: 89 c9                         movl    %ecx, %ecx
// 1ae: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b8: 48 83 c4 08                   addq    $0x8, %rsp
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: 5d                            popq    %rbp
// 1c6: c3                            retq
// 1c7: 48 29 d8                      subq    %rbx, %rax
// 1ca: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ce: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d2: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1d5: 31 c0                         xorl    %eax, %eax
// 1d7: eb df                         jmp     0x1b8 <_JIT_ENTRY+0x1b8>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 4c 89 f6                      movq    %r14, %rsi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 08                   addq    $0x8, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_BOOL_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x4e, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x74, 0x49, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_BOOL_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_BOOL_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_INT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 0f 85 6c 01 00 00             jne     0x191 <_JIT_ENTRY+0x191>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 57 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 ee                      movq    %r13, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 04 24                   movq    (%r12), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 45 00                   movq    (%r13), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 ea                      movq    %r13, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 48 8b 2c 24                   movq    (%rsp), %rbp
// 14d: 78 21                         js      0x170 <_JIT_ENTRY+0x170>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 4d 00                   decq    (%r13)
// 15f: 75 0f                         jne     0x170 <_JIT_ENTRY+0x170>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 ef                      movq    %r13, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 174: 48 85 ed                      testq   %rbp, %rbp
// 177: 74 4f                         je      0x1c8 <_JIT_ENTRY+0x1c8>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 49 89 2c 24                   movq    %rbp, (%r12)
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  PyLong_Type
// 18b: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 18f: 74 4a                         je      0x1db <_JIT_ENTRY+0x1db>
// 191: 49 29 de                      subq    %rbx, %r14
// 194: 49 83 c6 b8                   addq    $-0x48, %r14
// 198: 49 c1 ee 03                   shrq    $0x3, %r14
// 19c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a0: 48 8b 03                      movq    (%rbx), %rax
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _JIT_TARGET
// 1ad: 89 c9                         movl    %ecx, %ecx
// 1af: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b9: 48 83 c4 08                   addq    $0x8, %rsp
// 1bd: 5b                            popq    %rbx
// 1be: 41 5c                         popq    %r12
// 1c0: 41 5d                         popq    %r13
// 1c2: 41 5e                         popq    %r14
// 1c4: 41 5f                         popq    %r15
// 1c6: 5d                            popq    %rbp
// 1c7: c3                            retq
// 1c8: 49 29 dc                      subq    %rbx, %r12
// 1cb: 49 83 c4 b8                   addq    $-0x48, %r12
// 1cf: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d3: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1d7: 31 c0                         xorl    %eax, %eax
// 1d9: eb de                         jmp     0x1b9 <_JIT_ENTRY+0x1b9>
// 1db: 8b 45 10                      movl    0x10(%rbp), %eax
// 1de: 83 e0 03                      andl    $0x3, %eax
// 1e1: 83 f8 01                      cmpl    $0x1, %eax
// 1e4: 75 0c                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1e6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001e8:  R_X86_64_64  _Py_FalseStruct
// 1f0: eb 5a                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 1f2: 48 8b 45 00                   movq    (%rbp), %rax
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 7f 22                         jg      0x21d <_JIT_ENTRY+0x21d>
// 1fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_NegativeRefcount
// 20f: be a0 00 00 00                movl    $0xa0, %esi
// 214: 48 89 ea                      movq    %rbp, %rdx
// 217: ff d0                         callq   *%rax
// 219: 48 8b 45 00                   movq    (%rbp), %rax
// 21d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000021f:  R_X86_64_64  _Py_TrueStruct
// 227: 85 c0                         testl   %eax, %eax
// 229: 78 21                         js      0x24c <_JIT_ENTRY+0x24c>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 235: ff d0                         callq   *%rax
// 237: 48 ff 4d 00                   decq    (%rbp)
// 23b: 75 0f                         jne     0x24c <_JIT_ENTRY+0x24c>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_Dealloc
// 247: 48 89 ef                      movq    %rbp, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 4d 89 2c 24                   movq    %r13, (%r12)
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_CONTINUE
// 25a: 48 89 df                      movq    %rbx, %rdi
// 25d: 4c 89 f6                      movq    %r14, %rsi
// 260: 4c 89 fa                      movq    %r15, %rdx
// 263: 48 83 c4 08                   addq    $0x8, %rsp
// 267: 5b                            popq    %rbx
// 268: 41 5c                         popq    %r12
// 26a: 41 5d                         popq    %r13
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: ff e0                         jmpq    *%rax
// 273: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_INT_code_body[628] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x0f, 0x85, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x57, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x4f, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x74, 0x4a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0xde, 0x8b, 0x45, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_INT_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_INT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_LIST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 0f 85 6c 01 00 00             jne     0x191 <_JIT_ENTRY+0x191>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 57 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 ee                      movq    %r13, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 04 24                   movq    (%r12), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 45 00                   movq    (%r13), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 ea                      movq    %r13, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 48 8b 2c 24                   movq    (%rsp), %rbp
// 14d: 78 21                         js      0x170 <_JIT_ENTRY+0x170>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 4d 00                   decq    (%r13)
// 15f: 75 0f                         jne     0x170 <_JIT_ENTRY+0x170>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 ef                      movq    %r13, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 174: 48 85 ed                      testq   %rbp, %rbp
// 177: 74 4f                         je      0x1c8 <_JIT_ENTRY+0x1c8>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 49 89 2c 24                   movq    %rbp, (%r12)
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  PyList_Type
// 18b: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 18f: 74 4a                         je      0x1db <_JIT_ENTRY+0x1db>
// 191: 49 29 de                      subq    %rbx, %r14
// 194: 49 83 c6 b8                   addq    $-0x48, %r14
// 198: 49 c1 ee 03                   shrq    $0x3, %r14
// 19c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a0: 48 8b 03                      movq    (%rbx), %rax
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _JIT_TARGET
// 1ad: 89 c9                         movl    %ecx, %ecx
// 1af: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b9: 48 83 c4 08                   addq    $0x8, %rsp
// 1bd: 5b                            popq    %rbx
// 1be: 41 5c                         popq    %r12
// 1c0: 41 5d                         popq    %r13
// 1c2: 41 5e                         popq    %r14
// 1c4: 41 5f                         popq    %r15
// 1c6: 5d                            popq    %rbp
// 1c7: c3                            retq
// 1c8: 49 29 dc                      subq    %rbx, %r12
// 1cb: 49 83 c4 b8                   addq    $-0x48, %r12
// 1cf: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d3: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1d7: 31 c0                         xorl    %eax, %eax
// 1d9: eb de                         jmp     0x1b9 <_JIT_ENTRY+0x1b9>
// 1db: 48 8b 45 00                   movq    (%rbp), %rax
// 1df: 4c 8b 6d 10                   movq    0x10(%rbp), %r13
// 1e3: 48 85 c0                      testq   %rax, %rax
// 1e6: 7f 22                         jg      0x20a <_JIT_ENTRY+0x20a>
// 1e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: be ae 00 00 00                movl    $0xae, %esi
// 201: 48 89 ea                      movq    %rbp, %rdx
// 204: ff d0                         callq   *%rax
// 206: 48 8b 45 00                   movq    (%rbp), %rax
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 78 21                         js      0x22f <_JIT_ENTRY+0x22f>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 218: ff d0                         callq   *%rax
// 21a: 48 ff 4d 00                   decq    (%rbp)
// 21e: 75 0f                         jne     0x22f <_JIT_ENTRY+0x22f>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_Dealloc
// 22a: 48 89 ef                      movq    %rbp, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 4d 85 ed                      testq   %r13, %r13
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_FalseStruct
// 23c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023e:  R_X86_64_64  _Py_TrueStruct
// 246: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 24a: 49 89 0c 24                   movq    %rcx, (%r12)
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_CONTINUE
// 258: 48 89 df                      movq    %rbx, %rdi
// 25b: 4c 89 f6                      movq    %r14, %rsi
// 25e: 4c 89 fa                      movq    %r15, %rdx
// 261: 48 83 c4 08                   addq    $0x8, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: ff e0                         jmpq    *%rax
// 271: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_LIST_code_body[626] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x0f, 0x85, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x57, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x4f, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x74, 0x4a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0xde, 0x48, 0x8b, 0x45, 0x00, 0x4c, 0x8b, 0x6d, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x0c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_LIST_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_LIST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_NONE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_NONE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 0f 85 6a 01 00 00             jne     0x18f <_JIT_ENTRY+0x18f>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 55 01 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 e6                      movq    %r12, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 45 00                   movq    (%r13), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 ea                      movq    %r13, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 45 00                   movq    (%r13), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 4d 00                   decq    (%r13)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 e2                      movq    %r12, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 21                         js      0x16c <_JIT_ENTRY+0x16c>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 155: ff d0                         callq   *%rax
// 157: 49 ff 0c 24                   decq    (%r12)
// 15b: 75 0f                         jne     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 170: 48 8b 14 24                   movq    (%rsp), %rdx
// 174: 48 85 d2                      testq   %rdx, %rdx
// 177: 74 4d                         je      0x1c6 <_JIT_ENTRY+0x1c6>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 48 89 10                      movq    %rdx, (%rax)
// 180: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000182:  R_X86_64_64  _Py_NoneStruct
// 18a: 48 39 ca                      cmpq    %rcx, %rdx
// 18d: 74 49                         je      0x1d8 <_JIT_ENTRY+0x1d8>
// 18f: 49 29 de                      subq    %rbx, %r14
// 192: 49 83 c6 b8                   addq    $-0x48, %r14
// 196: 49 c1 ee 03                   shrq    $0x3, %r14
// 19a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19e: 48 8b 03                      movq    (%rbx), %rax
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _JIT_TARGET
// 1ab: 89 c9                         movl    %ecx, %ecx
// 1ad: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b7: 48 83 c4 08                   addq    $0x8, %rsp
// 1bb: 5b                            popq    %rbx
// 1bc: 41 5c                         popq    %r12
// 1be: 41 5d                         popq    %r13
// 1c0: 41 5e                         popq    %r14
// 1c2: 41 5f                         popq    %r15
// 1c4: 5d                            popq    %rbp
// 1c5: c3                            retq
// 1c6: 48 29 d8                      subq    %rbx, %rax
// 1c9: 48 83 c0 b8                   addq    $-0x48, %rax
// 1cd: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d1: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1d4: 31 c0                         xorl    %eax, %eax
// 1d6: eb df                         jmp     0x1b7 <_JIT_ENTRY+0x1b7>
// 1d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001da:  R_X86_64_64  _Py_FalseStruct
// 1e2: 48 89 08                      movq    %rcx, (%rax)
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_CONTINUE
// 1ef: 48 89 df                      movq    %rbx, %rdi
// 1f2: 4c 89 f6                      movq    %r14, %rsi
// 1f5: 4c 89 fa                      movq    %r15, %rdx
// 1f8: 48 83 c4 08                   addq    $0x8, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_NONE_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0x6a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x4d, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x10, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xca, 0x74, 0x49, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0xdf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_NONE_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_NONE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_STR
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_STR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 0f 85 6c 01 00 00             jne     0x191 <_JIT_ENTRY+0x191>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 57 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 ee                      movq    %r13, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 04 24                   movq    (%r12), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 45 00                   movq    (%r13), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 ea                      movq    %r13, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 48 8b 2c 24                   movq    (%rsp), %rbp
// 14d: 78 21                         js      0x170 <_JIT_ENTRY+0x170>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 4d 00                   decq    (%r13)
// 15f: 75 0f                         jne     0x170 <_JIT_ENTRY+0x170>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 ef                      movq    %r13, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 4d 8d 66 e8                   leaq    -0x18(%r14), %r12
// 174: 48 85 ed                      testq   %rbp, %rbp
// 177: 74 4f                         je      0x1c8 <_JIT_ENTRY+0x1c8>
// 179: 49 83 c6 f0                   addq    $-0x10, %r14
// 17d: 49 89 2c 24                   movq    %rbp, (%r12)
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  PyUnicode_Type
// 18b: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 18f: 74 4a                         je      0x1db <_JIT_ENTRY+0x1db>
// 191: 49 29 de                      subq    %rbx, %r14
// 194: 49 83 c6 b8                   addq    $-0x48, %r14
// 198: 49 c1 ee 03                   shrq    $0x3, %r14
// 19c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a0: 48 8b 03                      movq    (%rbx), %rax
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _JIT_TARGET
// 1ad: 89 c9                         movl    %ecx, %ecx
// 1af: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b9: 48 83 c4 08                   addq    $0x8, %rsp
// 1bd: 5b                            popq    %rbx
// 1be: 41 5c                         popq    %r12
// 1c0: 41 5d                         popq    %r13
// 1c2: 41 5e                         popq    %r14
// 1c4: 41 5f                         popq    %r15
// 1c6: 5d                            popq    %rbp
// 1c7: c3                            retq
// 1c8: 49 29 dc                      subq    %rbx, %r12
// 1cb: 49 83 c4 b8                   addq    $-0x48, %r12
// 1cf: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d3: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1d7: 31 c0                         xorl    %eax, %eax
// 1d9: eb de                         jmp     0x1b9 <_JIT_ENTRY+0x1b9>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _PyRuntime
// 1e5: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 1eb: 48 39 c5                      cmpq    %rax, %rbp
// 1ee: 74 5c                         je      0x24c <_JIT_ENTRY+0x24c>
// 1f0: 48 8b 45 00                   movq    (%rbp), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7f 22                         jg      0x21b <_JIT_ENTRY+0x21b>
// 1f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_NegativeRefcount
// 20d: be cb 00 00 00                movl    $0xcb, %esi
// 212: 48 89 ea                      movq    %rbp, %rdx
// 215: ff d0                         callq   *%rax
// 217: 48 8b 45 00                   movq    (%rbp), %rax
// 21b: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000021d:  R_X86_64_64  _Py_TrueStruct
// 225: 85 c0                         testl   %eax, %eax
// 227: 78 2d                         js      0x256 <_JIT_ENTRY+0x256>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 233: ff d0                         callq   *%rax
// 235: 48 ff 4d 00                   decq    (%rbp)
// 239: 75 1b                         jne     0x256 <_JIT_ENTRY+0x256>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 48 89 ef                      movq    %rbp, %rdi
// 248: ff d0                         callq   *%rax
// 24a: eb 0a                         jmp     0x256 <_JIT_ENTRY+0x256>
// 24c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000024e:  R_X86_64_64  _Py_FalseStruct
// 256: 4d 89 2c 24                   movq    %r13, (%r12)
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _JIT_CONTINUE
// 264: 48 89 df                      movq    %rbx, %rdi
// 267: 4c 89 f6                      movq    %r14, %rsi
// 26a: 4c 89 fa                      movq    %r15, %rdx
// 26d: 48 83 c4 08                   addq    $0x8, %rsp
// 271: 5b                            popq    %rbx
// 272: 41 5c                         popq    %r12
// 274: 41 5d                         popq    %r13
// 276: 41 5e                         popq    %r14
// 278: 41 5f                         popq    %r15
// 27a: 5d                            popq    %rbp
// 27b: ff e0                         jmpq    *%rax
// 27d: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_STR_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x0f, 0x85, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x57, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xe8, 0x48, 0x85, 0xed, 0x74, 0x4f, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x74, 0x4a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x48, 0x39, 0xc5, 0x74, 0x5c, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_STR_code_holes[27] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_STR_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_UNARY_INVERT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_UNARY_INVERT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 97 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 1a5: 4d 89 65 00                   movq    %r12, (%r13)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyNumber_Invert
// 1b3: 4c 89 e7                      movq    %r12, %rdi
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 89 c7                      movq    %rax, %r15
// 1bb: 49 8b 04 24                   movq    (%r12), %rax
// 1bf: 48 85 c0                      testq   %rax, %rax
// 1c2: 7f 22                         jg      0x1e6 <_JIT_ENTRY+0x1e6>
// 1c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c6:  R_X86_64_64  .rodata.str1.1
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NegativeRefcount
// 1d8: be e6 00 00 00                movl    $0xe6, %esi
// 1dd: 4c 89 e2                      movq    %r12, %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 8b 04 24                   movq    (%r12), %rax
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 78 21                         js      0x20b <_JIT_ENTRY+0x20b>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 ff 0c 24                   decq    (%r12)
// 1fa: 75 0f                         jne     0x20b <_JIT_ENTRY+0x20b>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 e7                      movq    %r12, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 4d 85 ff                      testq   %r15, %r15
// 20e: 74 2c                         je      0x23c <_JIT_ENTRY+0x23c>
// 210: 49 83 c6 f0                   addq    $-0x10, %r14
// 214: 4d 89 7d 00                   movq    %r15, (%r13)
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _JIT_CONTINUE
// 222: 48 89 df                      movq    %rbx, %rdi
// 225: 4c 89 f6                      movq    %r14, %rsi
// 228: 48 8b 14 24                   movq    (%rsp), %rdx
// 22c: 48 83 c4 08                   addq    $0x8, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 49 29 dd                      subq    %rbx, %r13
// 23f: 49 83 c5 b8                   addq    $-0x48, %r13
// 243: 49 c1 ed 03                   shrq    $0x3, %r13
// 247: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 08 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 252: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNARY_INVERT_code_body[595] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x2c, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x7d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x08, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNARY_INVERT_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNARY_INVERT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_UNARY_NEGATIVE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_UNARY_NEGATIVE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 48 89 14 24                   movq    %rdx, (%rsp)
// 6d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 71: 48 8b 03                      movq    (%rbx), %rax
// 74: 48 8b 40 20                   movq    0x20(%rax), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 88: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PySuper_Lookup
// 97: 48 89 ef                      movq    %rbp, %rdi
// 9a: 4c 89 ee                      movq    %r13, %rsi
// 9d: 31 c9                         xorl    %ecx, %ecx
// 9f: ff d0                         callq   *%rax
// a1: 49 89 c4                      movq    %rax, %r12
// a4: 49 8b 07                      movq    (%r15), %rax
// a7: 48 85 c0                      testq   %rax, %rax
// aa: 7f 21                         jg      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_NegativeRefcount
// c0: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c5: 4c 89 fa                      movq    %r15, %rdx
// c8: ff d0                         callq   *%rax
// ca: 49 8b 07                      movq    (%r15), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 27                         js      0xf8 <_JIT_ENTRY+0xf8>
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// db: ff d0                         callq   *%rax
// dd: 49 ff 0f                      decq    (%r15)
// e0: 75 16                         jne     0xf8 <_JIT_ENTRY+0xf8>
// e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e4:  R_X86_64_64  PySuper_Type
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 22                         jg      0x123 <_JIT_ENTRY+0x123>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11a: 48 89 ea                      movq    %rbp, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 48 8b 45 00                   movq    (%rbp), %rax
// 123: 85 c0                         testl   %eax, %eax
// 125: 78 21                         js      0x148 <_JIT_ENTRY+0x148>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 131: ff d0                         callq   *%rax
// 133: 48 ff 4d 00                   decq    (%rbp)
// 137: 75 0f                         jne     0x148 <_JIT_ENTRY+0x148>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f 22                         jg      0x173 <_JIT_ENTRY+0x173>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 21                         js      0x198 <_JIT_ENTRY+0x198>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 75 0f                         jne     0x198 <_JIT_ENTRY+0x198>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 0f 84 97 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 1a5: 4d 89 65 00                   movq    %r12, (%r13)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyNumber_Negative
// 1b3: 4c 89 e7                      movq    %r12, %rdi
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 89 c7                      movq    %rax, %r15
// 1bb: 49 8b 04 24                   movq    (%r12), %rax
// 1bf: 48 85 c0                      testq   %rax, %rax
// 1c2: 7f 22                         jg      0x1e6 <_JIT_ENTRY+0x1e6>
// 1c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c6:  R_X86_64_64  .rodata.str1.1
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NegativeRefcount
// 1d8: be 71 00 00 00                movl    $0x71, %esi
// 1dd: 4c 89 e2                      movq    %r12, %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 8b 04 24                   movq    (%r12), %rax
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 78 21                         js      0x20b <_JIT_ENTRY+0x20b>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 ff 0c 24                   decq    (%r12)
// 1fa: 75 0f                         jne     0x20b <_JIT_ENTRY+0x20b>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 e7                      movq    %r12, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 4d 85 ff                      testq   %r15, %r15
// 20e: 74 2c                         je      0x23c <_JIT_ENTRY+0x23c>
// 210: 49 83 c6 f0                   addq    $-0x10, %r14
// 214: 4d 89 7d 00                   movq    %r15, (%r13)
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _JIT_CONTINUE
// 222: 48 89 df                      movq    %rbx, %rdi
// 225: 4c 89 f6                      movq    %r14, %rsi
// 228: 48 8b 14 24                   movq    (%rsp), %rdx
// 22c: 48 83 c4 08                   addq    $0x8, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 49 29 dd                      subq    %rbx, %r13
// 23f: 49 83 c5 b8                   addq    $-0x48, %r13
// 243: 49 c1 ed 03                   shrq    $0x3, %r13
// 247: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 24b: 31 c0                         xorl    %eax, %eax
// 24d: e9 08 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 252: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNARY_NEGATIVE_code_body[595] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x2c, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0x7d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0x08, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNARY_NEGATIVE_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNARY_NEGATIVE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_UNARY_NOT
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_UNARY_NOT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 6e e8                   cmpq    %r13, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 e6                      movq    %r12, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 ea                      movq    %r13, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 45 00                   movq    (%r13), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 4d 00                   decq    (%r13)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 21                         js      0x14b <_JIT_ENTRY+0x14b>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 48 ff 4d 00                   decq    (%rbp)
// 13a: 75 0f                         jne     0x14b <_JIT_ENTRY+0x14b>
// 13c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013e:  R_X86_64_64  _Py_Dealloc
// 146: 48 89 ef                      movq    %rbp, %rdi
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7f 22                         jg      0x176 <_JIT_ENTRY+0x176>
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_NegativeRefcount
// 168: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16d: 4c 89 e2                      movq    %r12, %rdx
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 85 c0                         testl   %eax, %eax
// 178: 78 21                         js      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 184: ff d0                         callq   *%rax
// 186: 49 ff 0c 24                   decq    (%r12)
// 18a: 75 0f                         jne     0x19b <_JIT_ENTRY+0x19b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_Dealloc
// 196: 4c 89 e7                      movq    %r12, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 19f: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a3: 48 85 d2                      testq   %rdx, %rdx
// 1a6: 74 45                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1a8: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _Py_FalseStruct
// 1b6: 48 39 ca                      cmpq    %rcx, %rdx
// 1b9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001bb:  R_X86_64_64  _Py_TrueStruct
// 1c3: 48 0f 45 d1                   cmovneq %rcx, %rdx
// 1c7: 48 89 10                      movq    %rdx, (%rax)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_CONTINUE
// 1d4: 48 89 df                      movq    %rbx, %rdi
// 1d7: 4c 89 f6                      movq    %r14, %rsi
// 1da: 4c 89 fa                      movq    %r15, %rdx
// 1dd: 48 83 c4 08                   addq    $0x8, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 48 29 d8                      subq    %rbx, %rax
// 1f0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1fb: 31 c0                         xorl    %eax, %eax
// 1fd: e9 58 fe ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 202: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNARY_NOT_code_body[515] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x45, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xca, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x58, 0xfe, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNARY_NOT_code_holes[21] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNARY_NOT_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_UNPACK_EX
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_UNPACK_EX.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 85 e4                      testq   %r12, %r12
// 1a2: 0f 84 c0 00 00 00             je      0x268 <_JIT_ENTRY+0x268>
// 1a8: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b6 cc                      movzbl  %ah, %ecx
// 1b9: 0f b6 d0                      movzbl  %al, %edx
// 1bc: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 1bf: ff c0                         incl    %eax
// 1c1: 4d 8d 44 c6 e8                leaq    -0x18(%r14,%rax,8), %r8
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _PyEval_UnpackIterable
// 1d0: 4c 89 ff                      movq    %r15, %rdi
// 1d3: 4c 89 e6                      movq    %r12, %rsi
// 1d6: ff d0                         callq   *%rax
// 1d8: 89 c5                         movl    %eax, %ebp
// 1da: 49 8b 04 24                   movq    (%r12), %rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 7f 22                         jg      0x205 <_JIT_ENTRY+0x205>
// 1e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NegativeRefcount
// 1f7: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 1fc: 4c 89 e2                      movq    %r12, %rdx
// 1ff: ff d0                         callq   *%rax
// 201: 49 8b 04 24                   movq    (%r12), %rax
// 205: 85 c0                         testl   %eax, %eax
// 207: 78 21                         js      0x22a <_JIT_ENTRY+0x22a>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 213: ff d0                         callq   *%rax
// 215: 49 ff 0c 24                   decq    (%r12)
// 219: 75 0f                         jne     0x22a <_JIT_ENTRY+0x22a>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: 4c 89 e7                      movq    %r12, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 85 ed                         testl   %ebp, %ebp
// 22c: 74 3a                         je      0x268 <_JIT_ENTRY+0x268>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: 0f b6 c8                      movzbl  %al, %ecx
// 23b: 0f b6 c4                      movzbl  %ah, %eax
// 23e: 01 c8                         addl    %ecx, %eax
// 240: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 244: 48 83 c6 f0                   addq    $-0x10, %rsi
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_CONTINUE
// 252: 48 89 df                      movq    %rbx, %rdi
// 255: 4c 89 fa                      movq    %r15, %rdx
// 258: 48 83 c4 08                   addq    $0x8, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 49 83 c6 e8                   addq    $-0x18, %r14
// 26c: 49 29 de                      subq    %rbx, %r14
// 26f: 49 83 c6 b8                   addq    $-0x48, %r14
// 273: 49 c1 ee 03                   shrq    $0x3, %r14
// 277: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 27b: 31 c0                         xorl    %eax, %eax
// 27d: e9 d8 fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 282: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_EX_code_body[643] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xcc, 0x0f, 0xb6, 0xd0, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x4d, 0x8d, 0x44, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xc4, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd8, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_EX_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_EX_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 37                         jne     0x69 <_JIT_ENTRY+0x69>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _JIT_TARGET
// 4e: 89 c9                         movl    %ecx, %ecx
// 50: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 54: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5d                         popq    %r13
// 63: 41 5e                         popq    %r14
// 65: 41 5f                         popq    %r15
// 67: 5d                            popq    %rbp
// 68: c3                            retq
// 69: 49 89 d7                      movq    %rdx, %r15
// 6c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 70: 48 8b 03                      movq    (%rbx), %rax
// 73: 48 8b 40 20                   movq    0x20(%rax), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 87: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PySuper_Lookup
// 96: 48 89 ef                      movq    %rbp, %rdi
// 99: 4c 89 ee                      movq    %r13, %rsi
// 9c: 31 c9                         xorl    %ecx, %ecx
// 9e: ff d0                         callq   *%rax
// a0: 48 89 04 24                   movq    %rax, (%rsp)
// a4: 49 8b 04 24                   movq    (%r12), %rax
// a8: 48 85 c0                      testq   %rax, %rax
// ab: 7f 22                         jg      0xcf <_JIT_ENTRY+0xcf>
// ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_NegativeRefcount
// c1: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c6: 4c 89 e2                      movq    %r12, %rdx
// c9: ff d0                         callq   *%rax
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 28                         js      0xfb <_JIT_ENTRY+0xfb>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0c 24                   decq    (%r12)
// e3: 75 16                         jne     0xfb <_JIT_ENTRY+0xfb>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  PySuper_Type
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11d: 48 89 ea                      movq    %rbp, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 8b 45 00                   movq    (%rbp), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 4c 8b 24 24                   movq    (%rsp), %r12
// 12c: 78 21                         js      0x14f <_JIT_ENTRY+0x14f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 48 ff 4d 00                   decq    (%rbp)
// 13e: 75 0f                         jne     0x14f <_JIT_ENTRY+0x14f>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 48 89 ef                      movq    %rbp, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 45 00                   movq    (%r13), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 171: 4c 89 ea                      movq    %r13, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 21                         js      0x19f <_JIT_ENTRY+0x19f>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 49 ff 4d 00                   decq    (%r13)
// 18e: 75 0f                         jne     0x19f <_JIT_ENTRY+0x19f>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 4d 85 e4                      testq   %r12, %r12
// 1a2: 0f 84 be 00 00 00             je      0x266 <_JIT_ENTRY+0x266>
// 1a8: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c8                      movzwl  %ax, %ecx
// 1b9: 4d 8d 04 ce                   leaq    (%r14,%rcx,8), %r8
// 1bd: 49 83 c0 e8                   addq    $-0x18, %r8
// 1c1: 0f b7 d0                      movzwl  %ax, %edx
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _PyEval_UnpackIterable
// 1ce: 4c 89 ff                      movq    %r15, %rdi
// 1d1: 4c 89 e6                      movq    %r12, %rsi
// 1d4: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 1d9: ff d0                         callq   *%rax
// 1db: 89 c5                         movl    %eax, %ebp
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 7f 22                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 1ff: 4c 89 e2                      movq    %r12, %rdx
// 202: ff d0                         callq   *%rax
// 204: 49 8b 04 24                   movq    (%r12), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 21                         js      0x22d <_JIT_ENTRY+0x22d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 49 ff 0c 24                   decq    (%r12)
// 21c: 75 0f                         jne     0x22d <_JIT_ENTRY+0x22d>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 4c 89 e7                      movq    %r12, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 85 ed                         testl   %ebp, %ebp
// 22f: 74 35                         je      0x266 <_JIT_ENTRY+0x266>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_OPARG
// 23b: 0f b7 c0                      movzwl  %ax, %eax
// 23e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 242: 48 83 c6 e8                   addq    $-0x18, %rsi
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_CONTINUE
// 250: 48 89 df                      movq    %rbx, %rdi
// 253: 4c 89 fa                      movq    %r15, %rdx
// 256: 48 83 c4 08                   addq    $0x8, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 49 83 c6 e8                   addq    $-0x18, %r14
// 26a: 49 29 de                      subq    %rbx, %r14
// 26d: 49 83 c6 b8                   addq    $-0x48, %r14
// 271: 49 c1 ee 03                   shrq    $0x3, %r14
// 275: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 279: 31 c0                         xorl    %eax, %eax
// 27b: e9 da fd ff ff                jmp     0x5a <_JIT_ENTRY+0x5a>
// 280: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_code_body[641] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x4d, 0x8d, 0x04, 0xce, 0x49, 0x83, 0xc0, 0xe8, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xda, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_code_holes[26] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 39                         jne     0x6e <_JIT_ENTRY+0x6e>
// 35: 4c 89 f8                      movq    %r15, %rax
// 38: 48 29 d8                      subq    %rbx, %rax
// 3b: 48 83 c0 b8                   addq    $-0x48, %rax
// 3f: 48 c1 e8 03                   shrq    $0x3, %rax
// 43: 89 43 40                      movl    %eax, 0x40(%rbx)
// 46: 48 8b 03                      movq    (%rbx), %rax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_TARGET
// 53: 89 c9                         movl    %ecx, %ecx
// 55: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 59: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5f: 48 83 c4 18                   addq    $0x18, %rsp
// 63: 5b                            popq    %rbx
// 64: 41 5c                         popq    %r12
// 66: 41 5d                         popq    %r13
// 68: 41 5e                         popq    %r14
// 6a: 41 5f                         popq    %r15
// 6c: 5d                            popq    %rbp
// 6d: c3                            retq
// 6e: 49 89 d6                      movq    %rdx, %r14
// 71: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 48 85 c0                      testq   %rax, %rax
// b1: 7f 22                         jg      0xd5 <_JIT_ENTRY+0xd5>
// b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b5:  R_X86_64_64  .rodata.str1.1
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_NegativeRefcount
// c7: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// cc: 4c 89 e2                      movq    %r12, %rdx
// cf: ff d0                         callq   *%rax
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 85 c0                         testl   %eax, %eax
// d7: 78 28                         js      0x101 <_JIT_ENTRY+0x101>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e3: ff d0                         callq   *%rax
// e5: 49 ff 0c 24                   decq    (%r12)
// e9: 75 16                         jne     0x101 <_JIT_ENTRY+0x101>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  PySuper_Type
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: 48 8b 45 00                   movq    (%rbp), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f 22                         jg      0x12c <_JIT_ENTRY+0x12c>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 123: 48 89 ea                      movq    %rbp, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 45 00                   movq    (%rbp), %rax
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 21                         js      0x151 <_JIT_ENTRY+0x151>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 48 ff 4d 00                   decq    (%rbp)
// 140: 75 0f                         jne     0x151 <_JIT_ENTRY+0x151>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_Dealloc
// 14c: 48 89 ef                      movq    %rbp, %rdi
// 14f: ff d0                         callq   *%rax
// 151: 49 8b 45 00                   movq    (%r13), %rax
// 155: 48 85 c0                      testq   %rax, %rax
// 158: 7f 22                         jg      0x17c <_JIT_ENTRY+0x17c>
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_NegativeRefcount
// 16e: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 173: 4c 89 ea                      movq    %r13, %rdx
// 176: ff d0                         callq   *%rax
// 178: 49 8b 45 00                   movq    (%r13), %rax
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 78 21                         js      0x1a1 <_JIT_ENTRY+0x1a1>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: ff d0                         callq   *%rax
// 18c: 49 ff 4d 00                   decq    (%r13)
// 190: 75 0f                         jne     0x1a1 <_JIT_ENTRY+0x1a1>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_Dealloc
// 19c: 4c 89 ef                      movq    %r13, %rdi
// 19f: ff d0                         callq   *%rax
// 1a1: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 1a5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1aa: 48 85 d2                      testq   %rdx, %rdx
// 1ad: 0f 84 9e 00 00 00             je      0x251 <_JIT_ENTRY+0x251>
// 1b3: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1b7: 49 89 14 24                   movq    %rdx, (%r12)
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  PyList_Type
// 1c5: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 1c9: 0f 85 69 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  _JIT_OPARG
// 1d9: 0f b7 c9                      movzwl  %cx, %ecx
// 1dc: 48 39 4a 10                   cmpq    %rcx, 0x10(%rdx)
// 1e0: 0f 85 52 fe ff ff             jne     0x38 <_JIT_ENTRY+0x38>
// 1e6: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_OPARG
// 1f5: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 1fa: 7e 6b                         jle     0x267 <_JIT_ENTRY+0x267>
// 1fc: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 201: 4c 8b 68 18                   movq    0x18(%rax), %r13
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _JIT_OPARG
// 20f: 0f b7 e8                      movzwl  %ax, %ebp
// 212: 48 ff c5                      incq    %rbp
// 215: eb 1a                         jmp     0x231 <_JIT_ENTRY+0x231>
// 217: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 220: 4d 89 34 24                   movq    %r14, (%r12)
// 224: 49 83 c4 08                   addq    $0x8, %r12
// 228: 48 ff cd                      decq    %rbp
// 22b: 48 83 fd 01                   cmpq    $0x1, %rbp
// 22f: 7e 36                         jle     0x267 <_JIT_ENTRY+0x267>
// 231: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 234: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// 239: 41 8b 06                      movl    (%r14), %eax
// 23c: ff c0                         incl    %eax
// 23e: 74 e0                         je      0x220 <_JIT_ENTRY+0x220>
// 240: 41 89 06                      movl    %eax, (%r14)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 24d: ff d0                         callq   *%rax
// 24f: eb cf                         jmp     0x220 <_JIT_ENTRY+0x220>
// 251: 49 29 dc                      subq    %rbx, %r12
// 254: 49 83 c4 b8                   addq    $-0x48, %r12
// 258: 49 c1 ec 03                   shrq    $0x3, %r12
// 25c: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 260: 31 c0                         xorl    %eax, %eax
// 262: e9 f8 fd ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
// 267: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 26c: 49 8b 04 24                   movq    (%r12), %rax
// 270: 48 85 c0                      testq   %rax, %rax
// 273: 7f 22                         jg      0x297 <_JIT_ENTRY+0x297>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 28e: 4c 89 e2                      movq    %r12, %rdx
// 291: ff d0                         callq   *%rax
// 293: 49 8b 04 24                   movq    (%r12), %rax
// 297: 85 c0                         testl   %eax, %eax
// 299: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 29e: 78 21                         js      0x2c1 <_JIT_ENTRY+0x2c1>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 ff 0c 24                   decq    (%r12)
// 2b0: 75 0f                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 4c 89 e7                      movq    %r12, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _JIT_OPARG
// 2cb: 0f b7 c0                      movzwl  %ax, %eax
// 2ce: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2d2: 48 83 c6 e8                   addq    $-0x18, %rsi
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _JIT_CONTINUE
// 2e0: 48 89 df                      movq    %rbx, %rdi
// 2e3: 4c 89 f2                      movq    %r14, %rdx
// 2e6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ea: 5b                            popq    %rbx
// 2eb: 41 5c                         popq    %r12
// 2ed: 41 5d                         popq    %r13
// 2ef: 41 5e                         popq    %r14
// 2f1: 41 5f                         popq    %r15
// 2f3: 5d                            popq    %rbp
// 2f4: ff e0                         jmpq    *%rax
// 2f6: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_LIST_code_body[759] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd6, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xe8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x49, 0x89, 0x14, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x0f, 0x85, 0x69, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x4a, 0x10, 0x0f, 0x85, 0x52, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x6b, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x8b, 0x68, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1a, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x34, 0x24, 0x49, 0x83, 0xc4, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x36, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0xe0, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcf, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xf8, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_LIST_code_holes[29] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 76 e8                   cmpq    %r14, -0x18(%rsi)
// 1f: 75 11                         jne     0x32 <_JIT_ENTRY+0x32>
// 21: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 25: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 29: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 30: 75 39                         jne     0x6b <_JIT_ENTRY+0x6b>
// 32: 4c 89 f8                      movq    %r15, %rax
// 35: 48 29 d8                      subq    %rbx, %rax
// 38: 48 83 c0 b8                   addq    $-0x48, %rax
// 3c: 48 c1 e8 03                   shrq    $0x3, %rax
// 40: 89 43 40                      movl    %eax, 0x40(%rbx)
// 43: 48 8b 03                      movq    (%rbx), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  _JIT_TARGET
// 50: 89 c9                         movl    %ecx, %ecx
// 52: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 56: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5c: 48 83 c4 08                   addq    $0x8, %rsp
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5d                         popq    %r13
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: 5d                            popq    %rbp
// 6a: c3                            retq
// 6b: 48 89 14 24                   movq    %rdx, (%rsp)
// 6f: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 73: 48 8b 03                      movq    (%rbx), %rax
// 76: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _PySuper_Lookup
// 99: 48 89 ef                      movq    %rbp, %rdi
// 9c: 4c 89 ee                      movq    %r13, %rsi
// 9f: 31 c9                         xorl    %ecx, %ecx
// a1: ff d0                         callq   *%rax
// a3: 49 89 c4                      movq    %rax, %r12
// a6: 49 8b 06                      movq    (%r14), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f 21                         jg      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c7: 4c 89 f2                      movq    %r14, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 06                      movq    (%r14), %rax
// cf: 85 c0                         testl   %eax, %eax
// d1: 78 27                         js      0xfa <_JIT_ENTRY+0xfa>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// dd: ff d0                         callq   *%rax
// df: 49 ff 0e                      decq    (%r14)
// e2: 75 16                         jne     0xfa <_JIT_ENTRY+0xfa>
// e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e6:  R_X86_64_64  PySuper_Type
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: ff d0                         callq   *%rax
// fa: 48 8b 45 00                   movq    (%rbp), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f 22                         jg      0x125 <_JIT_ENTRY+0x125>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11c: 48 89 ea                      movq    %rbp, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 21                         js      0x14a <_JIT_ENTRY+0x14a>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 48 ff 4d 00                   decq    (%rbp)
// 139: 75 0f                         jne     0x14a <_JIT_ENTRY+0x14a>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: 48 89 ef                      movq    %rbp, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 45 00                   movq    (%r13), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7f 22                         jg      0x175 <_JIT_ENTRY+0x175>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16c: 4c 89 ea                      movq    %r13, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 49 8b 45 00                   movq    (%r13), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 78 21                         js      0x19a <_JIT_ENTRY+0x19a>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 183: ff d0                         callq   *%rax
// 185: 49 ff 4d 00                   decq    (%r13)
// 189: 75 0f                         jne     0x19a <_JIT_ENTRY+0x19a>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 4c 89 ef                      movq    %r13, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 19e: 4d 85 e4                      testq   %r12, %r12
// 1a1: 0f 84 8a 00 00 00             je      0x231 <_JIT_ENTRY+0x231>
// 1a7: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 1ab: 4d 89 26                      movq    %r12, (%r14)
// 1ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b0:  R_X86_64_64  PyTuple_Type
// 1b8: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1bd: 0f 85 72 fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c5:  R_X86_64_64  _JIT_OPARG
// 1cd: 0f b7 c9                      movzwl  %cx, %ecx
// 1d0: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 1d5: 0f 85 5a fe ff ff             jne     0x35 <_JIT_ENTRY+0x35>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_OPARG
// 1e5: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 1ea: 7e 5b                         jle     0x247 <_JIT_ENTRY+0x247>
// 1ec: 44 0f b7 e8                   movzwl  %ax, %r13d
// 1f0: 49 ff c5                      incq    %r13
// 1f3: eb 1b                         jmp     0x210 <_JIT_ENTRY+0x210>
// 1f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 200: 49 89 2e                      movq    %rbp, (%r14)
// 203: 49 83 c6 08                   addq    $0x8, %r14
// 207: 49 ff cd                      decq    %r13
// 20a: 49 83 fd 01                   cmpq    $0x1, %r13
// 20e: 7e 37                         jle     0x247 <_JIT_ENTRY+0x247>
// 210: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 214: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 219: 8b 45 00                      movl    (%rbp), %eax
// 21c: ff c0                         incl    %eax
// 21e: 74 e0                         je      0x200 <_JIT_ENTRY+0x200>
// 220: 89 45 00                      movl    %eax, (%rbp)
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 22d: ff d0                         callq   *%rax
// 22f: eb cf                         jmp     0x200 <_JIT_ENTRY+0x200>
// 231: 49 29 de                      subq    %rbx, %r14
// 234: 49 83 c6 b8                   addq    $-0x48, %r14
// 238: 49 c1 ee 03                   shrq    $0x3, %r14
// 23c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 240: 31 c0                         xorl    %eax, %eax
// 242: e9 15 fe ff ff                jmp     0x5c <_JIT_ENTRY+0x5c>
// 247: 49 8b 04 24                   movq    (%r12), %rax
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 7f 22                         jg      0x272 <_JIT_ENTRY+0x272>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_NegativeRefcount
// 264: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 269: 4c 89 e2                      movq    %r12, %rdx
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 04 24                   movq    (%r12), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 21                         js      0x297 <_JIT_ENTRY+0x297>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 0c 24                   decq    (%r12)
// 286: 75 0f                         jne     0x297 <_JIT_ENTRY+0x297>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_Dealloc
// 292: 4c 89 e7                      movq    %r12, %rdi
// 295: ff d0                         callq   *%rax
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _JIT_OPARG
// 2a1: 0f b7 c0                      movzwl  %ax, %eax
// 2a4: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2a8: 48 83 c6 e8                   addq    $-0x18, %rsi
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _JIT_CONTINUE
// 2b6: 48 89 df                      movq    %rbx, %rdi
// 2b9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2bd: 48 83 c4 08                   addq    $0x8, %rsp
// 2c1: 5b                            popq    %rbx
// 2c2: 41 5c                         popq    %r12
// 2c4: 41 5d                         popq    %r13
// 2c6: 41 5e                         popq    %r14
// 2c8: 41 5f                         popq    %r15
// 2ca: 5d                            popq    %rbp
// 2cb: ff e0                         jmpq    *%rax
// 2cd: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TUPLE_code_body[718] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x76, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x39, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x14, 0x24, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x77, 0xe8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x47, 0xf0, 0x4d, 0x89, 0x26, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x72, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x85, 0x5a, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x5b, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0xeb, 0x1b, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x2e, 0x49, 0x83, 0xc6, 0x08, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x37, 0x41, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe0, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcf, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x15, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TUPLE_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TWO_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000013:  R_X86_64_64  PySuper_Type
// 1b: 4c 39 66 e8                   cmpq    %r12, -0x18(%rsi)
// 1f: 0f 85 d6 01 00 00             jne     0x1fb <_JIT_ENTRY+0x1fb>
// 25: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 29: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2d: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 34: 0f 84 c1 01 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 8b 40 20                   movq    0x20(%rax), %rax
// 48: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 58: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PySuper_Lookup
// 67: 48 89 ef                      movq    %rbp, %rdi
// 6a: 4c 89 ee                      movq    %r13, %rsi
// 6d: 31 c9                         xorl    %ecx, %ecx
// 6f: ff d0                         callq   *%rax
// 71: 48 89 04 24                   movq    %rax, (%rsp)
// 75: 49 8b 04 24                   movq    (%r12), %rax
// 79: 48 85 c0                      testq   %rax, %rax
// 7c: 7f 22                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 28                         js      0xcc <_JIT_ENTRY+0xcc>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 16                         jne     0xcc <_JIT_ENTRY+0xcc>
// b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b8:  R_X86_64_64  PySuper_Type
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: ff d0                         callq   *%rax
// cc: 48 8b 45 00                   movq    (%rbp), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// ee: 48 89 ea                      movq    %rbp, %rdx
// f1: ff d0                         callq   *%rax
// f3: 48 8b 45 00                   movq    (%rbp), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 21                         js      0x11c <_JIT_ENTRY+0x11c>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 48 ff 4d 00                   decq    (%rbp)
// 10b: 75 0f                         jne     0x11c <_JIT_ENTRY+0x11c>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_Dealloc
// 117: 48 89 ef                      movq    %rbp, %rdi
// 11a: ff d0                         callq   *%rax
// 11c: 49 8b 45 00                   movq    (%r13), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 22                         jg      0x147 <_JIT_ENTRY+0x147>
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 13e: 4c 89 ea                      movq    %r13, %rdx
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 48 8b 2c 24                   movq    (%rsp), %rbp
// 14d: 78 21                         js      0x170 <_JIT_ENTRY+0x170>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 4d 00                   decq    (%r13)
// 15f: 75 0f                         jne     0x170 <_JIT_ENTRY+0x170>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 ef                      movq    %r13, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 174: 48 85 ed                      testq   %rbp, %rbp
// 177: 0f 84 b5 00 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 17d: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 181: 49 89 6d 00                   movq    %rbp, (%r13)
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  PyTuple_Type
// 18f: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 193: 75 63                         jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 195: 48 83 7d 10 02                cmpq    $0x2, 0x10(%rbp)
// 19a: 75 5c                         jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 19c: 48 8b 6d 20                   movq    0x20(%rbp), %rbp
// 1a0: 8b 45 00                      movl    (%rbp), %eax
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ad: ff c0                         incl    %eax
// 1af: 74 19                         je      0x1ca <_JIT_ENTRY+0x1ca>
// 1b1: 89 45 00                      movl    %eax, (%rbp)
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ca: 49 89 6d 00                   movq    %rbp, (%r13)
// 1ce: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d2: 4c 8b 6d 18                   movq    0x18(%rbp), %r13
// 1d6: 41 8b 45 00                   movl    (%r13), %eax
// 1da: ff c0                         incl    %eax
// 1dc: 75 67                         jne     0x245 <_JIT_ENTRY+0x245>
// 1de: 4d 89 2c 24                   movq    %r13, (%r12)
// 1e2: 48 8b 45 00                   movq    (%rbp), %rax
// 1e6: 48 85 c0                      testq   %rax, %rax
// 1e9: 7e 6d                         jle     0x258 <_JIT_ENTRY+0x258>
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 0f 89 8b 00 00 00             jns     0x27e <_JIT_ENTRY+0x27e>
// 1f3: e9 a7 00 00 00                jmp     0x29f <_JIT_ENTRY+0x29f>
// 1f8: 4d 89 e6                      movq    %r12, %r14
// 1fb: 49 29 de                      subq    %rbx, %r14
// 1fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 202: 49 c1 ee 03                   shrq    $0x3, %r14
// 206: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020f:  R_X86_64_64  _JIT_TARGET
// 217: 89 c9                         movl    %ecx, %ecx
// 219: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 223: 48 83 c4 08                   addq    $0x8, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: c3                            retq
// 232: 49 29 dd                      subq    %rbx, %r13
// 235: 49 83 c5 b8                   addq    $-0x48, %r13
// 239: 49 c1 ed 03                   shrq    $0x3, %r13
// 23d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 241: 31 c0                         xorl    %eax, %eax
// 243: eb de                         jmp     0x223 <_JIT_ENTRY+0x223>
// 245: 41 89 45 00                   movl    %eax, (%r13)
// 249: ff d1                         callq   *%rcx
// 24b: 4d 89 2c 24                   movq    %r13, (%r12)
// 24f: 48 8b 45 00                   movq    (%rbp), %rax
// 253: 48 85 c0                      testq   %rax, %rax
// 256: 7f 93                         jg      0x1eb <_JIT_ENTRY+0x1eb>
// 258: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025a:  R_X86_64_64  .rodata.str1.1
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 271: 48 89 ea                      movq    %rbp, %rdx
// 274: ff d0                         callq   *%rax
// 276: 48 8b 45 00                   movq    (%rbp), %rax
// 27a: 85 c0                         testl   %eax, %eax
// 27c: 78 21                         js      0x29f <_JIT_ENTRY+0x29f>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 288: ff d0                         callq   *%rax
// 28a: 48 ff 4d 00                   decq    (%rbp)
// 28e: 75 0f                         jne     0x29f <_JIT_ENTRY+0x29f>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_Dealloc
// 29a: 48 89 ef                      movq    %rbp, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _JIT_OPARG
// 2a9: 0f b7 c0                      movzwl  %ax, %eax
// 2ac: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2b0: 48 83 c6 e8                   addq    $-0x18, %rsi
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_CONTINUE
// 2be: 48 89 df                      movq    %rbx, %rdi
// 2c1: 4c 89 fa                      movq    %r15, %rdx
// 2c4: 48 83 c4 08                   addq    $0x8, %rsp
// 2c8: 5b                            popq    %rbx
// 2c9: 41 5c                         popq    %r12
// 2cb: 41 5d                         popq    %r13
// 2cd: 41 5e                         popq    %r14
// 2cf: 41 5f                         popq    %r15
// 2d1: 5d                            popq    %rbp
// 2d2: ff e0                         jmpq    *%rax
// 2d4: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[725] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x66, 0xe8, 0x0f, 0x85, 0xd6, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc1, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xe8, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x66, 0xf0, 0x49, 0x89, 0x6d, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x75, 0x63, 0x48, 0x83, 0x7d, 0x10, 0x02, 0x75, 0x5c, 0x48, 0x8b, 0x6d, 0x20, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x19, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x00, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x6d, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x67, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x6d, 0x85, 0xc0, 0x0f, 0x89, 0x8b, 0x00, 0x00, 0x00, 0xe9, 0xa7, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0xde, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd1, 0x4d, 0x89, 0x2c, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x93, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[28] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _LOAD_SUPER_ATTR_ATTRplus_WITH_EXCEPT_START
// 
// /tmp/tmp2cvrg_m4/_LOAD_SUPER_ATTR_ATTRplus_WITH_EXCEPT_START.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000016:  R_X86_64_64  PySuper_Type
// 1e: 4c 39 7e e8                   cmpq    %r15, -0x18(%rsi)
// 22: 75 11                         jne     0x35 <_JIT_ENTRY+0x35>
// 24: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 28: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2c: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 33: 75 37                         jne     0x6c <_JIT_ENTRY+0x6c>
// 35: 49 29 de                      subq    %rbx, %r14
// 38: 49 83 c6 b8                   addq    $-0x48, %r14
// 3c: 49 c1 ee 03                   shrq    $0x3, %r14
// 40: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 44: 48 8b 03                      movq    (%rbx), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 48 83 c4 38                   addq    $0x38, %rsp
// 61: 5b                            popq    %rbx
// 62: 41 5c                         popq    %r12
// 64: 41 5d                         popq    %r13
// 66: 41 5e                         popq    %r14
// 68: 41 5f                         popq    %r15
// 6a: 5d                            popq    %rbp
// 6b: c3                            retq
// 6c: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 71: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 75: 48 8b 03                      movq    (%rbx), %rax
// 78: 48 8b 40 20                   movq    0x20(%rax), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  _JIT_OPARG
// 86: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 8c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _PySuper_Lookup
// 9b: 48 89 ef                      movq    %rbp, %rdi
// 9e: 4c 89 ee                      movq    %r13, %rsi
// a1: 31 c9                         xorl    %ecx, %ecx
// a3: ff d0                         callq   *%rax
// a5: 49 89 c4                      movq    %rax, %r12
// a8: 49 8b 07                      movq    (%r15), %rax
// ab: 48 85 c0                      testq   %rax, %rax
// ae: 7f 21                         jg      0xd1 <_JIT_ENTRY+0xd1>
// b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_NegativeRefcount
// c4: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// c9: 4c 89 fa                      movq    %r15, %rdx
// cc: ff d0                         callq   *%rax
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 27                         js      0xfc <_JIT_ENTRY+0xfc>
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// df: ff d0                         callq   *%rax
// e1: 49 ff 0f                      decq    (%r15)
// e4: 75 16                         jne     0xfc <_JIT_ENTRY+0xfc>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  PySuper_Type
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_Dealloc
// fa: ff d0                         callq   *%rax
// fc: 48 8b 45 00                   movq    (%rbp), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7f 22                         jg      0x127 <_JIT_ENTRY+0x127>
// 105: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000107:  R_X86_64_64  .rodata.str1.1
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_NegativeRefcount
// 119: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 11e: 48 89 ea                      movq    %rbp, %rdx
// 121: ff d0                         callq   *%rax
// 123: 48 8b 45 00                   movq    (%rbp), %rax
// 127: 85 c0                         testl   %eax, %eax
// 129: 78 21                         js      0x14c <_JIT_ENTRY+0x14c>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 135: ff d0                         callq   *%rax
// 137: 48 ff 4d 00                   decq    (%rbp)
// 13b: 75 0f                         jne     0x14c <_JIT_ENTRY+0x14c>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_Dealloc
// 147: 48 89 ef                      movq    %rbp, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 45 00                   movq    (%r13), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 22                         jg      0x177 <_JIT_ENTRY+0x177>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 16e: 4c 89 ea                      movq    %r13, %rdx
// 171: ff d0                         callq   *%rax
// 173: 49 8b 45 00                   movq    (%r13), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 21                         js      0x19c <_JIT_ENTRY+0x19c>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 49 ff 4d 00                   decq    (%r13)
// 18b: 75 0f                         jne     0x19c <_JIT_ENTRY+0x19c>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 4d 85 e4                      testq   %r12, %r12
// 19f: 74 73                         je      0x214 <_JIT_ENTRY+0x214>
// 1a1: 4d 89 66 e8                   movq    %r12, -0x18(%r14)
// 1a5: 4d 8b 6e d0                   movq    -0x30(%r14), %r13
// 1a9: 49 8b 6c 24 08                movq    0x8(%r12), %rbp
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  PyException_GetTraceback
// 1b8: 4c 89 e7                      movq    %r12, %rdi
// 1bb: ff d0                         callq   *%rax
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 74 5b                         je      0x21d <_JIT_ENTRY+0x21d>
// 1c2: 49 89 c7                      movq    %rax, %r15
// 1c5: 48 8b 00                      movq    (%rax), %rax
// 1c8: 48 85 c0                      testq   %rax, %rax
// 1cb: 7f 21                         jg      0x1ee <_JIT_ENTRY+0x1ee>
// 1cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cf:  R_X86_64_64  .rodata.str1.1
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_NegativeRefcount
// 1e1: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 1e6: 4c 89 fa                      movq    %r15, %rdx
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 8b 07                      movq    (%r15), %rax
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 35                         js      0x227 <_JIT_ENTRY+0x227>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 ff 0f                      decq    (%r15)
// 201: 75 24                         jne     0x227 <_JIT_ENTRY+0x227>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_Dealloc
// 20d: 4c 89 ff                      movq    %r15, %rdi
// 210: ff d0                         callq   *%rax
// 212: eb 13                         jmp     0x227 <_JIT_ENTRY+0x227>
// 214: 49 83 c6 e8                   addq    $-0x18, %r14
// 218: 4d 89 f5                      movq    %r14, %r13
// 21b: eb 78                         jmp     0x295 <_JIT_ENTRY+0x295>
// 21d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000021f:  R_X86_64_64  _Py_NoneStruct
// 227: 4c 89 ef                      movq    %r13, %rdi
// 22a: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 22e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 237: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// 23c: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 241: 4c 89 64 24 20                movq    %r12, 0x20(%rsp)
// 246: 4c 89 7c 24 28                movq    %r15, 0x28(%rsp)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  PyObject_Vectorcall
// 255: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 25f: 31 c9                         xorl    %ecx, %ecx
// 261: ff d0                         callq   *%rax
// 263: 48 85 c0                      testq   %rax, %rax
// 266: 74 2d                         je      0x295 <_JIT_ENTRY+0x295>
// 268: 49 83 c6 f8                   addq    $-0x8, %r14
// 26c: 49 89 45 00                   movq    %rax, (%r13)
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _JIT_CONTINUE
// 27a: 48 89 df                      movq    %rbx, %rdi
// 27d: 4c 89 f6                      movq    %r14, %rsi
// 280: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 285: 48 83 c4 38                   addq    $0x38, %rsp
// 289: 5b                            popq    %rbx
// 28a: 41 5c                         popq    %r12
// 28c: 41 5d                         popq    %r13
// 28e: 41 5e                         popq    %r14
// 290: 41 5f                         popq    %r15
// 292: 5d                            popq    %rbp
// 293: ff e0                         jmpq    *%rax
// 295: 49 29 dd                      subq    %rbx, %r13
// 298: 49 83 c5 b8                   addq    $-0x48, %r13
// 29c: 49 c1 ed 03                   shrq    $0x3, %r13
// 2a0: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2a4: 31 c0                         xorl    %eax, %eax
// 2a6: e9 b2 fd ff ff                jmp     0x5d <_JIT_ENTRY+0x5d>
// 2ab: 
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_WITH_EXCEPT_START_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x7e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x73, 0x4d, 0x89, 0x66, 0xe8, 0x4d, 0x8b, 0x6e, 0xd0, 0x49, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x5b, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x35, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x13, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf5, 0xeb, 0x78, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4d, 0x8d, 0x6e, 0xf0, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x4c, 0x89, 0x64, 0x24, 0x20, 0x4c, 0x89, 0x7c, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2d, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xe9, 0xb2, 0xfd, 0xff, 0xff};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_WITH_EXCEPT_START_code_holes[26] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTRplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTRplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_LOAD_SUPER_ATTR_ATTRplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BEFORE_ASYNC_WITH),
    [_LOAD_SUPER_ATTR_ATTRplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BEFORE_WITH),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_FLOAT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_ADD_UNICODE),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_FLOAT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_MULTIPLY_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_FLOAT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_OP_SUBTRACT_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_SLICE),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_DICT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_LIST_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_STR_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BINARY_SUBSCR_TUPLE_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BUILD_CONST_KEY_MAP),
    [_LOAD_SUPER_ATTR_ATTRplus_BUILD_LIST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BUILD_LIST),
    [_LOAD_SUPER_ATTR_ATTRplus_BUILD_MAP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BUILD_MAP),
    [_LOAD_SUPER_ATTR_ATTRplus_BUILD_SET] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BUILD_SET),
    [_LOAD_SUPER_ATTR_ATTRplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BUILD_SLICE),
    [_LOAD_SUPER_ATTR_ATTRplus_BUILD_STRING] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BUILD_STRING),
    [_LOAD_SUPER_ATTR_ATTRplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_BUILD_TUPLE),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_CLASS),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_BUILTIN_O),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_1),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_INTRINSIC_2),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_ISINSTANCE),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_LEN] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_LEN),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_METHOD_DESCRIPTOR_O),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_STR_1] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_STR_1),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_TUPLE_1),
    [_LOAD_SUPER_ATTR_ATTRplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CALL_TYPE_1),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_CLASS),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_MODULE),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_ATTR_WITH_HINT),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_EG_MATCH),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_EXC_MATCH),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_FUNCTION_EXACT_ARGS),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_PEP_523),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_STACK_SPACE),
    [_LOAD_SUPER_ATTR_ATTRplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CHECK_VALIDITY),
    [_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP),
    [_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_FLOAT),
    [_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_COMPARE_OP_STR),
    [_LOAD_SUPER_ATTR_ATTRplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CONTAINS_OP),
    [_LOAD_SUPER_ATTR_ATTRplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_CONVERT_VALUE),
    [_LOAD_SUPER_ATTR_ATTRplus_COPY] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_COPY),
    [_LOAD_SUPER_ATTR_ATTRplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_COPY_FREE_VARS),
    [_LOAD_SUPER_ATTR_ATTRplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_DELETE_ATTR),
    [_LOAD_SUPER_ATTR_ATTRplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_DELETE_DEREF),
    [_LOAD_SUPER_ATTR_ATTRplus_DELETE_FAST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_DELETE_FAST),
    [_LOAD_SUPER_ATTR_ATTRplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_DELETE_GLOBAL),
    [_LOAD_SUPER_ATTR_ATTRplus_DELETE_NAME] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_DELETE_NAME),
    [_LOAD_SUPER_ATTR_ATTRplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_DELETE_SUBSCR),
    [_LOAD_SUPER_ATTR_ATTRplus_DICT_MERGE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_DICT_MERGE),
    [_LOAD_SUPER_ATTR_ATTRplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_DICT_UPDATE),
    [_LOAD_SUPER_ATTR_ATTRplus_END_SEND] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_END_SEND),
    [_LOAD_SUPER_ATTR_ATTRplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_EXIT_INIT_CHECK),
    [_LOAD_SUPER_ATTR_ATTRplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_EXIT_TRACE),
    [_LOAD_SUPER_ATTR_ATTRplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_FORMAT_SIMPLE),
    [_LOAD_SUPER_ATTR_ATTRplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_FORMAT_WITH_SPEC),
    [_LOAD_SUPER_ATTR_ATTRplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_FOR_ITER_TIER_TWO),
    [_LOAD_SUPER_ATTR_ATTRplus_GET_AITER] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GET_AITER),
    [_LOAD_SUPER_ATTR_ATTRplus_GET_ANEXT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GET_ANEXT),
    [_LOAD_SUPER_ATTR_ATTRplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GET_AWAITABLE),
    [_LOAD_SUPER_ATTR_ATTRplus_GET_ITER] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GET_ITER),
    [_LOAD_SUPER_ATTR_ATTRplus_GET_LEN] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GET_LEN),
    [_LOAD_SUPER_ATTR_ATTRplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GET_YIELD_FROM_ITER),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_FLOAT),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_BOTH_UNICODE),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_BUILTINS_VERSION),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_GLOBALS_VERSION),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_FALSE_POP),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NONE_POP),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_NOT_NONE_POP),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_IS_TRUE_POP),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_KEYS_VERSION),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_LIST),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_LOAD_SUPER_ATTR_ATTRplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_GUARD_TYPE_VERSION),
    [_LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_INIT_CALL_PY_EXACT_ARGS),
    [_LOAD_SUPER_ATTR_ATTRplus_INSERT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_INSERT),
    [_LOAD_SUPER_ATTR_ATTRplus_IS_NONE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_IS_NONE),
    [_LOAD_SUPER_ATTR_ATTRplus_IS_OP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_IS_OP),
    [_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_LIST),
    [_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_RANGE),
    [_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_ITER_CHECK_TUPLE),
    [_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_LIST),
    [_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_RANGE),
    [_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_ITER_NEXT_TUPLE),
    [_LOAD_SUPER_ATTR_ATTRplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_JUMP_TO_TOP),
    [_LOAD_SUPER_ATTR_ATTRplus_LIST_APPEND] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LIST_APPEND),
    [_LOAD_SUPER_ATTR_ATTRplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LIST_EXTEND),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ASSERTION_ERROR),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_CLASS),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_INSTANCE_VALUE),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_NO_DICT),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_MODULE),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_SLOT),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_ATTR_WITH_HINT),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_BUILD_CLASS),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_CONST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_CONST),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_DEREF),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_AND_CLEAR),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_FAST_CHECK),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_DEREF),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_BUILTINS),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_GLOBAL_MODULE),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_LOCALS),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_NAME] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_NAME),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_ATTR),
    [_LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_LOAD_SUPER_ATTR_METHOD),
    [_LOAD_SUPER_ATTR_ATTRplus_MAKE_CELL] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_MAKE_CELL),
    [_LOAD_SUPER_ATTR_ATTRplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_MAKE_FUNCTION),
    [_LOAD_SUPER_ATTR_ATTRplus_MAP_ADD] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_MAP_ADD),
    [_LOAD_SUPER_ATTR_ATTRplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_MATCH_CLASS),
    [_LOAD_SUPER_ATTR_ATTRplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_MATCH_KEYS),
    [_LOAD_SUPER_ATTR_ATTRplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_MATCH_MAPPING),
    [_LOAD_SUPER_ATTR_ATTRplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_MATCH_SEQUENCE),
    [_LOAD_SUPER_ATTR_ATTRplus_NOP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_NOP),
    [_LOAD_SUPER_ATTR_ATTRplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_POP_EXCEPT),
    [_LOAD_SUPER_ATTR_ATTRplus_POP_FRAME] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_POP_FRAME),
    [_LOAD_SUPER_ATTR_ATTRplus_POP_TOP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_POP_TOP),
    [_LOAD_SUPER_ATTR_ATTRplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_PUSH_EXC_INFO),
    [_LOAD_SUPER_ATTR_ATTRplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_PUSH_FRAME),
    [_LOAD_SUPER_ATTR_ATTRplus_PUSH_NULL] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_PUSH_NULL),
    [_LOAD_SUPER_ATTR_ATTRplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_RESUME_CHECK),
    [_LOAD_SUPER_ATTR_ATTRplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_SAVE_RETURN_OFFSET),
    [_LOAD_SUPER_ATTR_ATTRplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_SETUP_ANNOTATIONS),
    [_LOAD_SUPER_ATTR_ATTRplus_SET_ADD] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_SET_ADD),
    [_LOAD_SUPER_ATTR_ATTRplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_SET_FUNCTION_ATTRIBUTE),
    [_LOAD_SUPER_ATTR_ATTRplus_SET_IP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_SET_IP),
    [_LOAD_SUPER_ATTR_ATTRplus_SET_UPDATE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_SET_UPDATE),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_INSTANCE_VALUE),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_ATTR_SLOT),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_DEREF] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_DEREF),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_FAST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_FAST),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_GLOBAL),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_NAME] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_NAME),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_SLICE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_SLICE),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_DICT),
    [_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_STORE_SUBSCR_LIST_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_SWAP] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_SWAP),
    [_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL),
    [_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_ALWAYS_TRUE),
    [_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_BOOL),
    [_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_INT),
    [_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_LIST),
    [_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_NONE),
    [_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_TO_BOOL_STR),
    [_LOAD_SUPER_ATTR_ATTRplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_UNARY_INVERT),
    [_LOAD_SUPER_ATTR_ATTRplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_UNARY_NEGATIVE),
    [_LOAD_SUPER_ATTR_ATTRplus_UNARY_NOT] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_UNARY_NOT),
    [_LOAD_SUPER_ATTR_ATTRplus_UNPACK_EX] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_UNPACK_EX),
    [_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE),
    [_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_LIST),
    [_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TUPLE),
    [_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_LOAD_SUPER_ATTR_ATTRplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTRplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
