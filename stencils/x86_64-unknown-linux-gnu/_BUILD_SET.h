// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _BUILD_SETplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BEFORE_ASYNC_WITH.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 36: 48 89 1c 24                   movq    %rbx, (%rsp)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 66 85 c0                      testw   %ax, %ax
// 47: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 4c: 0f 84 38 01 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 ca 03 00 00                jmp     0x4ec <_JIT_ENTRY+0x4ec>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 129: 74 5f                         je      0x18a <_JIT_ENTRY+0x18a>
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 48 85 c0                      testq   %rax, %rax
// 132: 7f 22                         jg      0x156 <_JIT_ENTRY+0x156>
// 134: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000136:  R_X86_64_64  .rodata.str1.1
// 13e: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 143: 4c 89 e2                      movq    %r12, %rdx
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: ff d0                         callq   *%rax
// 152: 49 8b 04 24                   movq    (%r12), %rax
// 156: 85 c0                         testl   %eax, %eax
// 158: 48 8b 1c 24                   movq    (%rsp), %rbx
// 15c: 0f 88 8a 03 00 00             js      0x4ec <_JIT_ENTRY+0x4ec>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 74 03 00 00             jne     0x4ec <_JIT_ENTRY+0x4ec>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: e9 60 03 00 00                jmp     0x4ea <_JIT_ENTRY+0x4ea>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: 0f b7 c8                      movzwl  %ax, %ecx
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: 48 c1 e0 03                   shlq    $0x3, %rax
// 19e: 48 f7 d8                      negq    %rax
// 1a1: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1a6: b8 01 00 00 00                movl    $0x1, %eax
// 1ab: 29 c8                         subl    %ecx, %eax
// 1ad: 4c 63 e8                      movslq  %eax, %r13
// 1b0: 4e 8d 3c ed 00 00 00 00       leaq    (,%r13,8), %r15
// 1b8: 49 01 ef                      addq    %rbp, %r15
// 1bb: 4a 8b 6c ed f8                movq    -0x8(%rbp,%r13,8), %rbp
// 1c0: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001c2:  R_X86_64_64  _PyObject_LookupSpecial
// 1ca: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001cc:  R_X86_64_64  _PyRuntime
// 1d4: 49 8d b6 68 a6 00 00          leaq    0xa668(%r14), %rsi
// 1db: 48 89 ef                      movq    %rbp, %rdi
// 1de: ff d3                         callq   *%rbx
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 0f 84 c0 00 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 1e9: 49 89 c4                      movq    %rax, %r12
// 1ec: 49 81 c6 a0 a6 00 00          addq    $0xa6a0, %r14           # imm = 0xA6A0
// 1f3: 48 89 ef                      movq    %rbp, %rdi
// 1f6: 4c 89 f6                      movq    %r14, %rsi
// 1f9: ff d3                         callq   *%rbx
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 0f 84 f1 00 00 00             je      0x2f5 <_JIT_ENTRY+0x2f5>
// 204: 49 89 c6                      movq    %rax, %r14
// 207: 48 8b 45 00                   movq    (%rbp), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f 22                         jg      0x232 <_JIT_ENTRY+0x232>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 229: 48 89 ea                      movq    %rbp, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 45 00                   movq    (%rbp), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 16                         js      0x24c <_JIT_ENTRY+0x24c>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 48 ff 4d 00                   decq    (%rbp)
// 246: 0f 84 61 01 00 00             je      0x3ad <_JIT_ENTRY+0x3ad>
// 24c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 251: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 258: 0f 84 70 01 00 00             je      0x3ce <_JIT_ENTRY+0x3ce>
// 25e: 48 8b 40 38                   movq    0x38(%rax), %rax
// 262: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 266: 48 85 c0                      testq   %rax, %rax
// 269: 0f 84 5f 01 00 00             je      0x3ce <_JIT_ENTRY+0x3ce>
// 26f: 4c 89 e7                      movq    %r12, %rdi
// 272: 31 f6                         xorl    %esi, %esi
// 274: 31 d2                         xorl    %edx, %edx
// 276: 31 c9                         xorl    %ecx, %ecx
// 278: ff d0                         callq   *%rax
// 27a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000027c:  R_X86_64_64  _Py_CheckFunctionResult
// 284: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 289: 4c 89 e6                      movq    %r12, %rsi
// 28c: 48 89 c2                      movq    %rax, %rdx
// 28f: 31 c9                         xorl    %ecx, %ecx
// 291: 41 ff d0                      callq   *%r8
// 294: 48 89 c5                      movq    %rax, %rbp
// 297: 49 8b 04 24                   movq    (%r12), %rax
// 29b: 48 85 c0                      testq   %rax, %rax
// 29e: 0f 8f 73 01 00 00             jg      0x417 <_JIT_ENTRY+0x417>
// 2a4: e9 4c 01 00 00                jmp     0x3f5 <_JIT_ENTRY+0x3f5>
// 2a9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ae: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2b2: 48 85 c0                      testq   %rax, %rax
// 2b5: 74 07                         je      0x2be <_JIT_ENTRY+0x2be>
// 2b7: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2bc: 75 2e                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  PyExc_TypeError
// 2c8: 48 8b 30                      movq    (%rax), %rsi
// 2cb: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2cf: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2d3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002d5:  R_X86_64_64  .rodata.str1.1+0x39
// 2dd: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002df:  R_X86_64_64  _PyErr_Format
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 41 ff d0                      callq   *%r8
// 2ec: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2f0: e9 f7 01 00 00                jmp     0x4ec <_JIT_ENTRY+0x4ec>
// 2f5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2fa: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2fe: 48 85 c0                      testq   %rax, %rax
// 301: 74 1d                         je      0x320 <_JIT_ENTRY+0x320>
// 303: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 308: 74 16                         je      0x320 <_JIT_ENTRY+0x320>
// 30a: 49 8b 04 24                   movq    (%r12), %rax
// 30e: 48 85 c0                      testq   %rax, %rax
// 311: 7e 44                         jle     0x357 <_JIT_ENTRY+0x357>
// 313: 85 c0                         testl   %eax, %eax
// 315: 48 8b 1c 24                   movq    (%rsp), %rbx
// 319: 79 6a                         jns     0x385 <_JIT_ENTRY+0x385>
// 31b: e9 cc 01 00 00                jmp     0x4ec <_JIT_ENTRY+0x4ec>
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  PyExc_TypeError
// 32a: 48 8b 30                      movq    (%rax), %rsi
// 32d: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 331: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 335: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000337:  R_X86_64_64  .rodata.str1.1+0x84
// 33f: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000341:  R_X86_64_64  _PyErr_Format
// 349: 31 c0                         xorl    %eax, %eax
// 34b: 41 ff d0                      callq   *%r8
// 34e: 49 8b 04 24                   movq    (%r12), %rax
// 352: 48 85 c0                      testq   %rax, %rax
// 355: 7f bc                         jg      0x313 <_JIT_ENTRY+0x313>
// 357: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000359:  R_X86_64_64  .rodata.str1.1
// 361: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000363:  R_X86_64_64  _Py_NegativeRefcount
// 36b: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 370: 4c 89 e2                      movq    %r12, %rdx
// 373: ff d0                         callq   *%rax
// 375: 49 8b 04 24                   movq    (%r12), %rax
// 379: 85 c0                         testl   %eax, %eax
// 37b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 37f: 0f 88 67 01 00 00             js      0x4ec <_JIT_ENTRY+0x4ec>
// 385: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000387:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38f: ff d0                         callq   *%rax
// 391: 49 ff 0c 24                   decq    (%r12)
// 395: 0f 85 51 01 00 00             jne     0x4ec <_JIT_ENTRY+0x4ec>
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_Dealloc
// 3a5: 4c 89 e7                      movq    %r12, %rdi
// 3a8: e9 3d 01 00 00                jmp     0x4ea <_JIT_ENTRY+0x4ea>
// 3ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003af:  R_X86_64_64  _Py_Dealloc
// 3b7: 48 89 ef                      movq    %rbp, %rdi
// 3ba: ff d0                         callq   *%rax
// 3bc: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 3c1: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 3c8: 0f 85 90 fe ff ff             jne     0x25e <_JIT_ENTRY+0x25e>
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _PyObject_MakeTpCall
// 3d8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 3dd: 4c 89 e6                      movq    %r12, %rsi
// 3e0: 31 d2                         xorl    %edx, %edx
// 3e2: 31 c9                         xorl    %ecx, %ecx
// 3e4: 45 31 c0                      xorl    %r8d, %r8d
// 3e7: ff d0                         callq   *%rax
// 3e9: 48 89 c5                      movq    %rax, %rbp
// 3ec: 49 8b 04 24                   movq    (%r12), %rax
// 3f0: 48 85 c0                      testq   %rax, %rax
// 3f3: 7f 22                         jg      0x417 <_JIT_ENTRY+0x417>
// 3f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f7:  R_X86_64_64  .rodata.str1.1
// 3ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000401:  R_X86_64_64  _Py_NegativeRefcount
// 409: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 40e: 4c 89 e2                      movq    %r12, %rdx
// 411: ff d0                         callq   *%rax
// 413: 49 8b 04 24                   movq    (%r12), %rax
// 417: 85 c0                         testl   %eax, %eax
// 419: 78 21                         js      0x43c <_JIT_ENTRY+0x43c>
// 41b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 425: ff d0                         callq   *%rax
// 427: 49 ff 0c 24                   decq    (%r12)
// 42b: 75 0f                         jne     0x43c <_JIT_ENTRY+0x43c>
// 42d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042f:  R_X86_64_64  _Py_Dealloc
// 437: 4c 89 e7                      movq    %r12, %rdi
// 43a: ff d0                         callq   *%rax
// 43c: 48 85 ed                      testq   %rbp, %rbp
// 43f: 74 4d                         je      0x48e <_JIT_ENTRY+0x48e>
// 441: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000443:  R_X86_64_64  _JIT_OPARG
// 44b: 0f b7 c0                      movzwl  %ax, %eax
// 44e: b9 01 00 00 00                movl    $0x1, %ecx
// 453: 29 c1                         subl    %eax, %ecx
// 455: 48 63 c1                      movslq  %ecx, %rax
// 458: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 45d: 4c 89 74 c1 f8                movq    %r14, -0x8(%rcx,%rax,8)
// 462: 48 89 2c c1                   movq    %rbp, (%rcx,%rax,8)
// 466: 48 8d 74 c1 08                leaq    0x8(%rcx,%rax,8), %rsi
// 46b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000046d:  R_X86_64_64  _JIT_CONTINUE
// 475: 48 8b 3c 24                   movq    (%rsp), %rdi
// 479: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 47e: 48 83 c4 18                   addq    $0x18, %rsp
// 482: 5b                            popq    %rbx
// 483: 41 5c                         popq    %r12
// 485: 41 5d                         popq    %r13
// 487: 41 5e                         popq    %r14
// 489: 41 5f                         popq    %r15
// 48b: 5d                            popq    %rbp
// 48c: ff e0                         jmpq    *%rax
// 48e: 49 8b 06                      movq    (%r14), %rax
// 491: 48 85 c0                      testq   %rax, %rax
// 494: 7f 21                         jg      0x4b7 <_JIT_ENTRY+0x4b7>
// 496: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000498:  R_X86_64_64  .rodata.str1.1
// 4a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004a2:  R_X86_64_64  _Py_NegativeRefcount
// 4aa: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 4af: 4c 89 f2                      movq    %r14, %rdx
// 4b2: ff d0                         callq   *%rax
// 4b4: 49 8b 06                      movq    (%r14), %rax
// 4b7: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 4bc: 4e 8d 3c e9                   leaq    (%rcx,%r13,8), %r15
// 4c0: 49 83 c7 f8                   addq    $-0x8, %r15
// 4c4: 85 c0                         testl   %eax, %eax
// 4c6: 48 8b 1c 24                   movq    (%rsp), %rbx
// 4ca: 78 20                         js      0x4ec <_JIT_ENTRY+0x4ec>
// 4cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4d6: ff d0                         callq   *%rax
// 4d8: 49 ff 0e                      decq    (%r14)
// 4db: 75 0f                         jne     0x4ec <_JIT_ENTRY+0x4ec>
// 4dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004df:  R_X86_64_64  _Py_Dealloc
// 4e7: 4c 89 f7                      movq    %r14, %rdi
// 4ea: ff d0                         callq   *%rax
// 4ec: 49 29 df                      subq    %rbx, %r15
// 4ef: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f3: 49 c1 ef 03                   shrq    $0x3, %r15
// 4f7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 4fb: 31 c0                         xorl    %eax, %eax
// 4fd: 48 83 c4 18                   addq    $0x18, %rsp
// 501: 5b                            popq    %rbx
// 502: 41 5c                         popq    %r12
// 504: 41 5d                         popq    %r13
// 506: 41 5e                         popq    %r14
// 508: 41 5f                         popq    %r15
// 50a: 5d                            popq    %rbp
// 50b: c3                            retq
// 50c: 
static const unsigned char _BUILD_SETplus_BEFORE_ASYNC_WITH_code_body[1293] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0x84, 0x38, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0xca, 0x03, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x5f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x88, 0x8a, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x74, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x60, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xe8, 0x4e, 0x8d, 0x3c, 0xed, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xef, 0x4a, 0x8b, 0x6c, 0xed, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb6, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc6, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x70, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x73, 0x01, 0x00, 0x00, 0xe9, 0x4c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0xf7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x16, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x44, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x79, 0x6a, 0xe9, 0xcc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xbc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x88, 0x67, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x51, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xe9, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x85, 0x90, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x74, 0xc1, 0xf8, 0x48, 0x89, 0x2c, 0xc1, 0x48, 0x8d, 0x74, 0xc1, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4e, 0x8d, 0x3c, 0xe9, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BEFORE_ASYNC_WITH_code_holes[42] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x3f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x401, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x41d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x42f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x443, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x46d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x498, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BEFORE_ASYNC_WITH_data_holes[1];

// _BUILD_SETplus_BEFORE_WITH
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BEFORE_WITH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 36: 48 89 1c 24                   movq    %rbx, (%rsp)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 66 85 c0                      testw   %ax, %ax
// 47: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 4c: 0f 84 38 01 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 ca 03 00 00                jmp     0x4ec <_JIT_ENTRY+0x4ec>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 129: 74 5f                         je      0x18a <_JIT_ENTRY+0x18a>
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 48 85 c0                      testq   %rax, %rax
// 132: 7f 22                         jg      0x156 <_JIT_ENTRY+0x156>
// 134: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000136:  R_X86_64_64  .rodata.str1.1
// 13e: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 143: 4c 89 e2                      movq    %r12, %rdx
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: ff d0                         callq   *%rax
// 152: 49 8b 04 24                   movq    (%r12), %rax
// 156: 85 c0                         testl   %eax, %eax
// 158: 48 8b 1c 24                   movq    (%rsp), %rbx
// 15c: 0f 88 8a 03 00 00             js      0x4ec <_JIT_ENTRY+0x4ec>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 74 03 00 00             jne     0x4ec <_JIT_ENTRY+0x4ec>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: e9 60 03 00 00                jmp     0x4ea <_JIT_ENTRY+0x4ea>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: 0f b7 c8                      movzwl  %ax, %ecx
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: 48 c1 e0 03                   shlq    $0x3, %rax
// 19e: 48 f7 d8                      negq    %rax
// 1a1: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1a6: b8 01 00 00 00                movl    $0x1, %eax
// 1ab: 29 c8                         subl    %ecx, %eax
// 1ad: 4c 63 e8                      movslq  %eax, %r13
// 1b0: 4e 8d 3c ed 00 00 00 00       leaq    (,%r13,8), %r15
// 1b8: 49 01 ef                      addq    %rbp, %r15
// 1bb: 4a 8b 6c ed f8                movq    -0x8(%rbp,%r13,8), %rbp
// 1c0: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001c2:  R_X86_64_64  _PyObject_LookupSpecial
// 1ca: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001cc:  R_X86_64_64  _PyRuntime
// 1d4: 49 8d b6 50 ae 00 00          leaq    0xae50(%r14), %rsi
// 1db: 48 89 ef                      movq    %rbp, %rdi
// 1de: ff d3                         callq   *%rbx
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 0f 84 c0 00 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 1e9: 49 89 c4                      movq    %rax, %r12
// 1ec: 49 81 c6 b8 ae 00 00          addq    $0xaeb8, %r14           # imm = 0xAEB8
// 1f3: 48 89 ef                      movq    %rbp, %rdi
// 1f6: 4c 89 f6                      movq    %r14, %rsi
// 1f9: ff d3                         callq   *%rbx
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 0f 84 f1 00 00 00             je      0x2f5 <_JIT_ENTRY+0x2f5>
// 204: 49 89 c6                      movq    %rax, %r14
// 207: 48 8b 45 00                   movq    (%rbp), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f 22                         jg      0x232 <_JIT_ENTRY+0x232>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 229: 48 89 ea                      movq    %rbp, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 45 00                   movq    (%rbp), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 16                         js      0x24c <_JIT_ENTRY+0x24c>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 48 ff 4d 00                   decq    (%rbp)
// 246: 0f 84 61 01 00 00             je      0x3ad <_JIT_ENTRY+0x3ad>
// 24c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 251: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 258: 0f 84 70 01 00 00             je      0x3ce <_JIT_ENTRY+0x3ce>
// 25e: 48 8b 40 38                   movq    0x38(%rax), %rax
// 262: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 266: 48 85 c0                      testq   %rax, %rax
// 269: 0f 84 5f 01 00 00             je      0x3ce <_JIT_ENTRY+0x3ce>
// 26f: 4c 89 e7                      movq    %r12, %rdi
// 272: 31 f6                         xorl    %esi, %esi
// 274: 31 d2                         xorl    %edx, %edx
// 276: 31 c9                         xorl    %ecx, %ecx
// 278: ff d0                         callq   *%rax
// 27a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000027c:  R_X86_64_64  _Py_CheckFunctionResult
// 284: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 289: 4c 89 e6                      movq    %r12, %rsi
// 28c: 48 89 c2                      movq    %rax, %rdx
// 28f: 31 c9                         xorl    %ecx, %ecx
// 291: 41 ff d0                      callq   *%r8
// 294: 48 89 c5                      movq    %rax, %rbp
// 297: 49 8b 04 24                   movq    (%r12), %rax
// 29b: 48 85 c0                      testq   %rax, %rax
// 29e: 0f 8f 73 01 00 00             jg      0x417 <_JIT_ENTRY+0x417>
// 2a4: e9 4c 01 00 00                jmp     0x3f5 <_JIT_ENTRY+0x3f5>
// 2a9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ae: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2b2: 48 85 c0                      testq   %rax, %rax
// 2b5: 74 07                         je      0x2be <_JIT_ENTRY+0x2be>
// 2b7: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2bc: 75 2e                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  PyExc_TypeError
// 2c8: 48 8b 30                      movq    (%rax), %rsi
// 2cb: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2cf: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2d3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002d5:  R_X86_64_64  .rodata.str1.1+0x39
// 2dd: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002df:  R_X86_64_64  _PyErr_Format
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 41 ff d0                      callq   *%r8
// 2ec: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2f0: e9 f7 01 00 00                jmp     0x4ec <_JIT_ENTRY+0x4ec>
// 2f5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2fa: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2fe: 48 85 c0                      testq   %rax, %rax
// 301: 74 1d                         je      0x320 <_JIT_ENTRY+0x320>
// 303: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 308: 74 16                         je      0x320 <_JIT_ENTRY+0x320>
// 30a: 49 8b 04 24                   movq    (%r12), %rax
// 30e: 48 85 c0                      testq   %rax, %rax
// 311: 7e 44                         jle     0x357 <_JIT_ENTRY+0x357>
// 313: 85 c0                         testl   %eax, %eax
// 315: 48 8b 1c 24                   movq    (%rsp), %rbx
// 319: 79 6a                         jns     0x385 <_JIT_ENTRY+0x385>
// 31b: e9 cc 01 00 00                jmp     0x4ec <_JIT_ENTRY+0x4ec>
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  PyExc_TypeError
// 32a: 48 8b 30                      movq    (%rax), %rsi
// 32d: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 331: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 335: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000337:  R_X86_64_64  .rodata.str1.1+0x77
// 33f: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000341:  R_X86_64_64  _PyErr_Format
// 349: 31 c0                         xorl    %eax, %eax
// 34b: 41 ff d0                      callq   *%r8
// 34e: 49 8b 04 24                   movq    (%r12), %rax
// 352: 48 85 c0                      testq   %rax, %rax
// 355: 7f bc                         jg      0x313 <_JIT_ENTRY+0x313>
// 357: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000359:  R_X86_64_64  .rodata.str1.1
// 361: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000363:  R_X86_64_64  _Py_NegativeRefcount
// 36b: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 370: 4c 89 e2                      movq    %r12, %rdx
// 373: ff d0                         callq   *%rax
// 375: 49 8b 04 24                   movq    (%r12), %rax
// 379: 85 c0                         testl   %eax, %eax
// 37b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 37f: 0f 88 67 01 00 00             js      0x4ec <_JIT_ENTRY+0x4ec>
// 385: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000387:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38f: ff d0                         callq   *%rax
// 391: 49 ff 0c 24                   decq    (%r12)
// 395: 0f 85 51 01 00 00             jne     0x4ec <_JIT_ENTRY+0x4ec>
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_Dealloc
// 3a5: 4c 89 e7                      movq    %r12, %rdi
// 3a8: e9 3d 01 00 00                jmp     0x4ea <_JIT_ENTRY+0x4ea>
// 3ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003af:  R_X86_64_64  _Py_Dealloc
// 3b7: 48 89 ef                      movq    %rbp, %rdi
// 3ba: ff d0                         callq   *%rax
// 3bc: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 3c1: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 3c8: 0f 85 90 fe ff ff             jne     0x25e <_JIT_ENTRY+0x25e>
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _PyObject_MakeTpCall
// 3d8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 3dd: 4c 89 e6                      movq    %r12, %rsi
// 3e0: 31 d2                         xorl    %edx, %edx
// 3e2: 31 c9                         xorl    %ecx, %ecx
// 3e4: 45 31 c0                      xorl    %r8d, %r8d
// 3e7: ff d0                         callq   *%rax
// 3e9: 48 89 c5                      movq    %rax, %rbp
// 3ec: 49 8b 04 24                   movq    (%r12), %rax
// 3f0: 48 85 c0                      testq   %rax, %rax
// 3f3: 7f 22                         jg      0x417 <_JIT_ENTRY+0x417>
// 3f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f7:  R_X86_64_64  .rodata.str1.1
// 3ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000401:  R_X86_64_64  _Py_NegativeRefcount
// 409: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 40e: 4c 89 e2                      movq    %r12, %rdx
// 411: ff d0                         callq   *%rax
// 413: 49 8b 04 24                   movq    (%r12), %rax
// 417: 85 c0                         testl   %eax, %eax
// 419: 78 21                         js      0x43c <_JIT_ENTRY+0x43c>
// 41b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 425: ff d0                         callq   *%rax
// 427: 49 ff 0c 24                   decq    (%r12)
// 42b: 75 0f                         jne     0x43c <_JIT_ENTRY+0x43c>
// 42d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000042f:  R_X86_64_64  _Py_Dealloc
// 437: 4c 89 e7                      movq    %r12, %rdi
// 43a: ff d0                         callq   *%rax
// 43c: 48 85 ed                      testq   %rbp, %rbp
// 43f: 74 4d                         je      0x48e <_JIT_ENTRY+0x48e>
// 441: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000443:  R_X86_64_64  _JIT_OPARG
// 44b: 0f b7 c0                      movzwl  %ax, %eax
// 44e: b9 01 00 00 00                movl    $0x1, %ecx
// 453: 29 c1                         subl    %eax, %ecx
// 455: 48 63 c1                      movslq  %ecx, %rax
// 458: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 45d: 4c 89 74 c1 f8                movq    %r14, -0x8(%rcx,%rax,8)
// 462: 48 89 2c c1                   movq    %rbp, (%rcx,%rax,8)
// 466: 48 8d 74 c1 08                leaq    0x8(%rcx,%rax,8), %rsi
// 46b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000046d:  R_X86_64_64  _JIT_CONTINUE
// 475: 48 8b 3c 24                   movq    (%rsp), %rdi
// 479: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 47e: 48 83 c4 18                   addq    $0x18, %rsp
// 482: 5b                            popq    %rbx
// 483: 41 5c                         popq    %r12
// 485: 41 5d                         popq    %r13
// 487: 41 5e                         popq    %r14
// 489: 41 5f                         popq    %r15
// 48b: 5d                            popq    %rbp
// 48c: ff e0                         jmpq    *%rax
// 48e: 49 8b 06                      movq    (%r14), %rax
// 491: 48 85 c0                      testq   %rax, %rax
// 494: 7f 21                         jg      0x4b7 <_JIT_ENTRY+0x4b7>
// 496: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000498:  R_X86_64_64  .rodata.str1.1
// 4a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004a2:  R_X86_64_64  _Py_NegativeRefcount
// 4aa: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 4af: 4c 89 f2                      movq    %r14, %rdx
// 4b2: ff d0                         callq   *%rax
// 4b4: 49 8b 06                      movq    (%r14), %rax
// 4b7: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 4bc: 4e 8d 3c e9                   leaq    (%rcx,%r13,8), %r15
// 4c0: 49 83 c7 f8                   addq    $-0x8, %r15
// 4c4: 85 c0                         testl   %eax, %eax
// 4c6: 48 8b 1c 24                   movq    (%rsp), %rbx
// 4ca: 78 20                         js      0x4ec <_JIT_ENTRY+0x4ec>
// 4cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4d6: ff d0                         callq   *%rax
// 4d8: 49 ff 0e                      decq    (%r14)
// 4db: 75 0f                         jne     0x4ec <_JIT_ENTRY+0x4ec>
// 4dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004df:  R_X86_64_64  _Py_Dealloc
// 4e7: 4c 89 f7                      movq    %r14, %rdi
// 4ea: ff d0                         callq   *%rax
// 4ec: 49 29 df                      subq    %rbx, %r15
// 4ef: 49 83 c7 b8                   addq    $-0x48, %r15
// 4f3: 49 c1 ef 03                   shrq    $0x3, %r15
// 4f7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 4fb: 31 c0                         xorl    %eax, %eax
// 4fd: 48 83 c4 18                   addq    $0x18, %rsp
// 501: 5b                            popq    %rbx
// 502: 41 5c                         popq    %r12
// 504: 41 5d                         popq    %r13
// 506: 41 5e                         popq    %r14
// 508: 41 5f                         popq    %r15
// 50a: 5d                            popq    %rbp
// 50b: c3                            retq
// 50c: 
static const unsigned char _BUILD_SETplus_BEFORE_WITH_code_body[1293] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0x84, 0x38, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0xca, 0x03, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x5f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x88, 0x8a, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x74, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x60, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xe8, 0x4e, 0x8d, 0x3c, 0xed, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xef, 0x4a, 0x8b, 0x6c, 0xed, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb6, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc6, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x61, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x70, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x73, 0x01, 0x00, 0x00, 0xe9, 0x4c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0xf7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x16, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x44, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x79, 0x6a, 0xe9, 0xcc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xbc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x88, 0x67, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x51, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xe9, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x85, 0x90, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x74, 0xc1, 0xf8, 0x48, 0x89, 0x2c, 0xc1, 0x48, 0x8d, 0x74, 0xc1, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4e, 0x8d, 0x3c, 0xe9, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BEFORE_WITH_code_holes[42] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x3f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x401, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x41d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x42f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x443, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x46d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x498, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _BUILD_SETplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BEFORE_WITH_data_holes[1];

// _BUILD_SETplus_BINARY_OP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_OP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 c1 01 00 00                jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 81 01 00 00             js      0x2e3 <_JIT_ENTRY+0x2e3>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 6b 01 00 00             jne     0x2e3 <_JIT_ENTRY+0x2e3>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 57 01 00 00                jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1a4: 48 f7 da                      negq    %rdx
// 1a7: 4d 89 64 15 00                movq    %r12, (%r13,%rdx)
// 1ac: ba 01 00 00 00                movl    $0x1, %edx
// 1b1: 29 ca                         subl    %ecx, %edx
// 1b3: 48 63 da                      movslq  %edx, %rbx
// 1b6: 4d 8b 74 dd f0                movq    -0x10(%r13,%rbx,8), %r14
// 1bb: 4d 89 ef                      movq    %r13, %r15
// 1be: 4d 8b 6c dd f8                movq    -0x8(%r13,%rbx,8), %r13
// 1c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c5:  R_X86_64_64  _PyEval_BinaryOps
// 1cd: 4c 89 f7                      movq    %r14, %rdi
// 1d0: 4c 89 ee                      movq    %r13, %rsi
// 1d3: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1d6: 49 89 c4                      movq    %rax, %r12
// 1d9: 49 8b 06                      movq    (%r14), %rax
// 1dc: 48 85 c0                      testq   %rax, %rax
// 1df: 7e 06                         jle     0x1e7 <_JIT_ENTRY+0x1e7>
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 79 27                         jns     0x20c <_JIT_ENTRY+0x20c>
// 1e5: eb 36                         jmp     0x21d <_JIT_ENTRY+0x21d>
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NegativeRefcount
// 1fb: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 200: 4c 89 f2                      movq    %r14, %rdx
// 203: ff d0                         callq   *%rax
// 205: 49 8b 06                      movq    (%r14), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 11                         js      0x21d <_JIT_ENTRY+0x21d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 49 ff 0e                      decq    (%r14)
// 21b: 74 0f                         je      0x22c <_JIT_ENTRY+0x22c>
// 21d: 49 8b 45 00                   movq    (%r13), %rax
// 221: 48 85 c0                      testq   %rax, %rax
// 224: 7e 1e                         jle     0x244 <_JIT_ENTRY+0x244>
// 226: 85 c0                         testl   %eax, %eax
// 228: 79 40                         jns     0x26a <_JIT_ENTRY+0x26a>
// 22a: eb 50                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_Dealloc
// 236: 4c 89 f7                      movq    %r14, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 49 8b 45 00                   movq    (%r13), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f e2                         jg      0x226 <_JIT_ENTRY+0x226>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 25d: 4c 89 ea                      movq    %r13, %rdx
// 260: ff d0                         callq   *%rax
// 262: 49 8b 45 00                   movq    (%r13), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 12                         js      0x27c <_JIT_ENTRY+0x27c>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 49 ff 4d 00                   decq    (%r13)
// 27a: 74 4b                         je      0x2c7 <_JIT_ENTRY+0x2c7>
// 27c: 4d 85 e4                      testq   %r12, %r12
// 27f: 74 5a                         je      0x2db <_JIT_ENTRY+0x2db>
// 281: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 285: 48 83 c6 f8                   addq    $-0x8, %rsi
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_OPARG
// 293: 0f b7 c0                      movzwl  %ax, %eax
// 296: b9 01 00 00 00                movl    $0x1, %ecx
// 29b: 29 c1                         subl    %eax, %ecx
// 29d: 48 63 c1                      movslq  %ecx, %rax
// 2a0: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _JIT_CONTINUE
// 2af: 48 89 ef                      movq    %rbp, %rdi
// 2b2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b7: 48 83 c4 18                   addq    $0x18, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 4c 89 ef                      movq    %r13, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 4d 85 e4                      testq   %r12, %r12
// 2d9: 75 a6                         jne     0x281 <_JIT_ENTRY+0x281>
// 2db: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 2df: 49 83 c7 f0                   addq    $-0x10, %r15
// 2e3: 49 29 ef                      subq    %rbp, %r15
// 2e6: 49 83 c7 b8                   addq    $-0x48, %r15
// 2ea: 49 c1 ef 03                   shrq    $0x3, %r15
// 2ee: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 2f2: 31 c0                         xorl    %eax, %eax
// 2f4: 48 83 c4 18                   addq    $0x18, %rsp
// 2f8: 5b                            popq    %rbx
// 2f9: 41 5c                         popq    %r12
// 2fb: 41 5d                         popq    %r13
// 2fd: 41 5e                         popq    %r14
// 2ff: 41 5f                         popq    %r15
// 301: 5d                            popq    %rbp
// 302: c3                            retq
// 303: 
static const unsigned char _BUILD_SETplus_BINARY_OP_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0xc1, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x81, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x6b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x57, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x64, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4d, 0x8b, 0x74, 0xdd, 0xf0, 0x4d, 0x89, 0xef, 0x4d, 0x8b, 0x6c, 0xdd, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4b, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa6, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_OP_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_OP_data_holes[1];

// _BUILD_SETplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_OP_ADD_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 0a 02 00 00                jmp     0x32c <_JIT_ENTRY+0x32c>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 c5 01 00 00             js      0x32c <_JIT_ENTRY+0x32c>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 af 01 00 00             jne     0x32c <_JIT_ENTRY+0x32c>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 9b 01 00 00                jmp     0x32c <_JIT_ENTRY+0x32c>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 c8                         subl    %ecx, %eax
// 1b3: 4c 63 f8                      movslq  %eax, %r15
// 1b6: 4b 8b 5c fe f0                movq    -0x10(%r14,%r15,8), %rbx
// 1bb: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 1c0: f2 0f 10 43 10                movsd   0x10(%rbx), %xmm0       # xmm0 = mem[0],zero
// 1c5: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 1cc: 48 83 3b 01                   cmpq    $0x1, (%rbx)
// 1d0: 75 7c                         jne     0x24e <_JIT_ENTRY+0x24e>
// 1d2: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
// 1d7: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1dd: 75 28                         jne     0x207 <_JIT_ENTRY+0x207>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyInterpreterState_Get
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _PyFloat_ExactDealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 49 89 dc                      movq    %rbx, %r12
// 20a: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 20e: 48 83 c6 f8                   addq    $-0x8, %rsi
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_OPARG
// 21c: 0f b7 c0                      movzwl  %ax, %eax
// 21f: b9 01 00 00 00                movl    $0x1, %ecx
// 224: 29 c1                         subl    %eax, %ecx
// 226: 48 63 c1                      movslq  %ecx, %rax
// 229: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_CONTINUE
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 89 ea                      movq    %rbp, %rdx
// 23e: 48 83 c4 18                   addq    $0x18, %rsp
// 242: 5b                            popq    %rbx
// 243: 41 5c                         popq    %r12
// 245: 41 5d                         popq    %r13
// 247: 41 5e                         popq    %r14
// 249: 41 5f                         popq    %r15
// 24b: 5d                            popq    %rbp
// 24c: ff e0                         jmpq    *%rax
// 24e: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 253: 75 32                         jne     0x287 <_JIT_ENTRY+0x287>
// 255: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 25c: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 260: 75 a8                         jne     0x20a <_JIT_ENTRY+0x20a>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyInterpreterState_Get
// 26c: ff d0                         callq   *%rax
// 26e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 275: 48 8b 03                      movq    (%rbx), %rax
// 278: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 27c: 48 89 0b                      movq    %rcx, (%rbx)
// 27f: 48 83 f8 01                   cmpq    $0x1, %rax
// 283: 7f 85                         jg      0x20a <_JIT_ENTRY+0x20a>
// 285: eb 7d                         jmp     0x304 <_JIT_ENTRY+0x304>
// 287: 4c 89 34 24                   movq    %r14, (%rsp)
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  PyFloat_FromDouble
// 295: ff d0                         callq   *%rax
// 297: 48 85 c0                      testq   %rax, %rax
// 29a: 0f 84 84 00 00 00             je      0x324 <_JIT_ENTRY+0x324>
// 2a0: 49 89 c6                      movq    %rax, %r14
// 2a3: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 2a7: 75 23                         jne     0x2cc <_JIT_ENTRY+0x2cc>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  PyInterpreterState_Get
// 2b3: ff d0                         callq   *%rax
// 2b5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bc: 48 8b 03                      movq    (%rbx), %rax
// 2bf: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c3: 48 89 0b                      movq    %rcx, (%rbx)
// 2c6: 48 83 f8 01                   cmpq    $0x1, %rax
// 2ca: 7e 38                         jle     0x304 <_JIT_ENTRY+0x304>
// 2cc: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2d2: 75 78                         jne     0x34c <_JIT_ENTRY+0x34c>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  PyInterpreterState_Get
// 2de: ff d0                         callq   *%rax
// 2e0: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e7: 49 8b 04 24                   movq    (%r12), %rax
// 2eb: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2ef: 49 89 0c 24                   movq    %rcx, (%r12)
// 2f3: 4d 89 f4                      movq    %r14, %r12
// 2f6: 48 83 f8 01                   cmpq    $0x1, %rax
// 2fa: 4c 8b 34 24                   movq    (%rsp), %r14
// 2fe: 0f 8f 06 ff ff ff             jg      0x20a <_JIT_ENTRY+0x20a>
// 304: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000306:  R_X86_64_64  .rodata.str1.1+0x39
// 30e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000310:  R_X86_64_64  .rodata.str1.1+0x4f
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 322: ff d0                         callq   *%rax
// 324: 48 8b 04 24                   movq    (%rsp), %rax
// 328: 4e 8d 3c f8                   leaq    (%rax,%r15,8), %r15
// 32c: 4d 29 ef                      subq    %r13, %r15
// 32f: 49 83 c7 b8                   addq    $-0x48, %r15
// 333: 49 c1 ef 03                   shrq    $0x3, %r15
// 337: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 33b: 31 c0                         xorl    %eax, %eax
// 33d: 48 83 c4 18                   addq    $0x18, %rsp
// 341: 5b                            popq    %rbx
// 342: 41 5c                         popq    %r12
// 344: 41 5d                         popq    %r13
// 346: 41 5e                         popq    %r14
// 348: 41 5f                         popq    %r15
// 34a: 5d                            popq    %rbp
// 34b: c3                            retq
// 34c: 4d 89 f4                      movq    %r14, %r12
// 34f: 4c 8b 34 24                   movq    (%rsp), %r14
// 353: e9 b2 fe ff ff                jmp     0x20a <_JIT_ENTRY+0x20a>
// 358: 
static const unsigned char _BUILD_SETplus_BINARY_OP_ADD_FLOAT_code_body[857] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x0a, 0x02, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x5c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x43, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x48, 0x83, 0x3b, 0x01, 0x75, 0x7c, 0xf2, 0x0f, 0x11, 0x43, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xdc, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x32, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x43, 0x03, 0x80, 0x75, 0xa8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x85, 0xeb, 0x7d, 0x4c, 0x89, 0x34, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xf6, 0x43, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xf4, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x8f, 0x06, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x3c, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0xf4, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0xb2, 0xfe, 0xff, 0xff};
static const Hole _BUILD_SETplus_BINARY_OP_ADD_FLOAT_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BUILD_SETplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _BUILD_SETplus_BINARY_OP_ADD_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_OP_ADD_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 67 01 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 27 01 00 00             js      0x289 <_JIT_ENTRY+0x289>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 11 01 00 00             jne     0x289 <_JIT_ENTRY+0x289>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 fd 00 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 c8                         subl    %ecx, %eax
// 1af: 48 63 d8                      movslq  %eax, %rbx
// 1b2: 4d 8b 74 dd f0                movq    -0x10(%r13,%rbx,8), %r14
// 1b7: 4d 89 ef                      movq    %r13, %r15
// 1ba: 4d 8b 6c dd f8                movq    -0x8(%r13,%rbx,8), %r13
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _PyLong_Add
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 4c 89 ee                      movq    %r13, %rsi
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 89 c4                      movq    %rax, %r12
// 1d4: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1d9: 75 28                         jne     0x203 <_JIT_ENTRY+0x203>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  PyInterpreterState_Get
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ee: 49 ff 4d 00                   decq    (%r13)
// 1f2: 75 0f                         jne     0x203 <_JIT_ENTRY+0x203>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  PyObject_Free
// 1fe: 4c 89 ef                      movq    %r13, %rdi
// 201: ff d0                         callq   *%rax
// 203: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 208: 75 18                         jne     0x222 <_JIT_ENTRY+0x222>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyInterpreterState_Get
// 214: ff d0                         callq   *%rax
// 216: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 21d: 49 ff 0e                      decq    (%r14)
// 220: 74 4b                         je      0x26d <_JIT_ENTRY+0x26d>
// 222: 4d 85 e4                      testq   %r12, %r12
// 225: 74 5a                         je      0x281 <_JIT_ENTRY+0x281>
// 227: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 22b: 48 83 c6 f8                   addq    $-0x8, %rsi
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_OPARG
// 239: 0f b7 c0                      movzwl  %ax, %eax
// 23c: b9 01 00 00 00                movl    $0x1, %ecx
// 241: 29 c1                         subl    %eax, %ecx
// 243: 48 63 c1                      movslq  %ecx, %rax
// 246: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 89 ef                      movq    %rbp, %rdi
// 258: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  PyObject_Free
// 277: 4c 89 f7                      movq    %r14, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 4d 85 e4                      testq   %r12, %r12
// 27f: 75 a6                         jne     0x227 <_JIT_ENTRY+0x227>
// 281: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 285: 49 83 c7 f0                   addq    $-0x10, %r15
// 289: 49 29 ef                      subq    %rbp, %r15
// 28c: 49 83 c7 b8                   addq    $-0x48, %r15
// 290: 49 c1 ef 03                   shrq    $0x3, %r15
// 294: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: 48 83 c4 18                   addq    $0x18, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 
static const unsigned char _BUILD_SETplus_BINARY_OP_ADD_INT_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x67, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x27, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x11, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdd, 0xf0, 0x4d, 0x89, 0xef, 0x4d, 0x8b, 0x6c, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x74, 0x4b, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa6, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_OP_ADD_INT_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_OP_ADD_INT_data_holes[1];

// _BUILD_SETplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_OP_ADD_UNICODE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 66 01 00 00                jmp     0x288 <_JIT_ENTRY+0x288>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 129: 4c 8b 34 24                   movq    (%rsp), %r14
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 26 01 00 00             js      0x288 <_JIT_ENTRY+0x288>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 10 01 00 00             jne     0x288 <_JIT_ENTRY+0x288>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 fc 00 00 00                jmp     0x288 <_JIT_ENTRY+0x288>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1a7: b8 01 00 00 00                movl    $0x1, %eax
// 1ac: 29 c8                         subl    %ecx, %eax
// 1ae: 48 63 d8                      movslq  %eax, %rbx
// 1b1: 4d 8b 6c de f0                movq    -0x10(%r14,%rbx,8), %r13
// 1b6: 4d 89 f7                      movq    %r14, %r15
// 1b9: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyUnicode_Concat
// 1c8: 4c 89 ef                      movq    %r13, %rdi
// 1cb: 4c 89 f6                      movq    %r14, %rsi
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 89 c4                      movq    %rax, %r12
// 1d3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1d8: 75 28                         jne     0x202 <_JIT_ENTRY+0x202>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  PyInterpreterState_Get
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ed: 49 ff 4d 00                   decq    (%r13)
// 1f1: 75 0f                         jne     0x202 <_JIT_ENTRY+0x202>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _PyUnicode_ExactDealloc
// 1fd: 4c 89 ef                      movq    %r13, %rdi
// 200: ff d0                         callq   *%rax
// 202: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 207: 75 18                         jne     0x221 <_JIT_ENTRY+0x221>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  PyInterpreterState_Get
// 213: ff d0                         callq   *%rax
// 215: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 21c: 49 ff 0e                      decq    (%r14)
// 21f: 74 4b                         je      0x26c <_JIT_ENTRY+0x26c>
// 221: 4d 85 e4                      testq   %r12, %r12
// 224: 74 5a                         je      0x280 <_JIT_ENTRY+0x280>
// 226: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 22a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: 0f b7 c0                      movzwl  %ax, %eax
// 23b: b9 01 00 00 00                movl    $0x1, %ecx
// 240: 29 c1                         subl    %eax, %ecx
// 242: 48 63 c1                      movslq  %ecx, %rax
// 245: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _JIT_CONTINUE
// 254: 48 89 ef                      movq    %rbp, %rdi
// 257: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 25c: 48 83 c4 18                   addq    $0x18, %rsp
// 260: 5b                            popq    %rbx
// 261: 41 5c                         popq    %r12
// 263: 41 5d                         popq    %r13
// 265: 41 5e                         popq    %r14
// 267: 41 5f                         popq    %r15
// 269: 5d                            popq    %rbp
// 26a: ff e0                         jmpq    *%rax
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _PyUnicode_ExactDealloc
// 276: 4c 89 f7                      movq    %r14, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 4d 85 e4                      testq   %r12, %r12
// 27e: 75 a6                         jne     0x226 <_JIT_ENTRY+0x226>
// 280: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 284: 49 83 c7 f0                   addq    $-0x10, %r15
// 288: 49 29 ef                      subq    %rbp, %r15
// 28b: 49 83 c7 b8                   addq    $-0x48, %r15
// 28f: 49 c1 ef 03                   shrq    $0x3, %r15
// 293: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 297: 31 c0                         xorl    %eax, %eax
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: c3                            retq
// 2a8: 
static const unsigned char _BUILD_SETplus_BINARY_OP_ADD_UNICODE_code_body[681] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x66, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x26, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xfc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf0, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x74, 0x4b, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa6, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_OP_ADD_UNICODE_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _BUILD_SETplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_OP_MULTIPLY_FLOAT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 0a 02 00 00                jmp     0x32c <_JIT_ENTRY+0x32c>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 c5 01 00 00             js      0x32c <_JIT_ENTRY+0x32c>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 af 01 00 00             jne     0x32c <_JIT_ENTRY+0x32c>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 9b 01 00 00                jmp     0x32c <_JIT_ENTRY+0x32c>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 c8                         subl    %ecx, %eax
// 1b3: 4c 63 f8                      movslq  %eax, %r15
// 1b6: 4b 8b 5c fe f0                movq    -0x10(%r14,%r15,8), %rbx
// 1bb: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 1c0: f2 0f 10 43 10                movsd   0x10(%rbx), %xmm0       # xmm0 = mem[0],zero
// 1c5: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 1cc: 48 83 3b 01                   cmpq    $0x1, (%rbx)
// 1d0: 75 7c                         jne     0x24e <_JIT_ENTRY+0x24e>
// 1d2: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
// 1d7: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1dd: 75 28                         jne     0x207 <_JIT_ENTRY+0x207>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyInterpreterState_Get
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _PyFloat_ExactDealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 49 89 dc                      movq    %rbx, %r12
// 20a: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 20e: 48 83 c6 f8                   addq    $-0x8, %rsi
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_OPARG
// 21c: 0f b7 c0                      movzwl  %ax, %eax
// 21f: b9 01 00 00 00                movl    $0x1, %ecx
// 224: 29 c1                         subl    %eax, %ecx
// 226: 48 63 c1                      movslq  %ecx, %rax
// 229: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_CONTINUE
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 89 ea                      movq    %rbp, %rdx
// 23e: 48 83 c4 18                   addq    $0x18, %rsp
// 242: 5b                            popq    %rbx
// 243: 41 5c                         popq    %r12
// 245: 41 5d                         popq    %r13
// 247: 41 5e                         popq    %r14
// 249: 41 5f                         popq    %r15
// 24b: 5d                            popq    %rbp
// 24c: ff e0                         jmpq    *%rax
// 24e: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 253: 75 32                         jne     0x287 <_JIT_ENTRY+0x287>
// 255: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 25c: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 260: 75 a8                         jne     0x20a <_JIT_ENTRY+0x20a>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyInterpreterState_Get
// 26c: ff d0                         callq   *%rax
// 26e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 275: 48 8b 03                      movq    (%rbx), %rax
// 278: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 27c: 48 89 0b                      movq    %rcx, (%rbx)
// 27f: 48 83 f8 01                   cmpq    $0x1, %rax
// 283: 7f 85                         jg      0x20a <_JIT_ENTRY+0x20a>
// 285: eb 7d                         jmp     0x304 <_JIT_ENTRY+0x304>
// 287: 4c 89 34 24                   movq    %r14, (%rsp)
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  PyFloat_FromDouble
// 295: ff d0                         callq   *%rax
// 297: 48 85 c0                      testq   %rax, %rax
// 29a: 0f 84 84 00 00 00             je      0x324 <_JIT_ENTRY+0x324>
// 2a0: 49 89 c6                      movq    %rax, %r14
// 2a3: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 2a7: 75 23                         jne     0x2cc <_JIT_ENTRY+0x2cc>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  PyInterpreterState_Get
// 2b3: ff d0                         callq   *%rax
// 2b5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bc: 48 8b 03                      movq    (%rbx), %rax
// 2bf: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c3: 48 89 0b                      movq    %rcx, (%rbx)
// 2c6: 48 83 f8 01                   cmpq    $0x1, %rax
// 2ca: 7e 38                         jle     0x304 <_JIT_ENTRY+0x304>
// 2cc: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2d2: 75 78                         jne     0x34c <_JIT_ENTRY+0x34c>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  PyInterpreterState_Get
// 2de: ff d0                         callq   *%rax
// 2e0: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e7: 49 8b 04 24                   movq    (%r12), %rax
// 2eb: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2ef: 49 89 0c 24                   movq    %rcx, (%r12)
// 2f3: 4d 89 f4                      movq    %r14, %r12
// 2f6: 48 83 f8 01                   cmpq    $0x1, %rax
// 2fa: 4c 8b 34 24                   movq    (%rsp), %r14
// 2fe: 0f 8f 06 ff ff ff             jg      0x20a <_JIT_ENTRY+0x20a>
// 304: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000306:  R_X86_64_64  .rodata.str1.1+0x39
// 30e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000310:  R_X86_64_64  .rodata.str1.1+0x4f
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 322: ff d0                         callq   *%rax
// 324: 48 8b 04 24                   movq    (%rsp), %rax
// 328: 4e 8d 3c f8                   leaq    (%rax,%r15,8), %r15
// 32c: 4d 29 ef                      subq    %r13, %r15
// 32f: 49 83 c7 b8                   addq    $-0x48, %r15
// 333: 49 c1 ef 03                   shrq    $0x3, %r15
// 337: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 33b: 31 c0                         xorl    %eax, %eax
// 33d: 48 83 c4 18                   addq    $0x18, %rsp
// 341: 5b                            popq    %rbx
// 342: 41 5c                         popq    %r12
// 344: 41 5d                         popq    %r13
// 346: 41 5e                         popq    %r14
// 348: 41 5f                         popq    %r15
// 34a: 5d                            popq    %rbp
// 34b: c3                            retq
// 34c: 4d 89 f4                      movq    %r14, %r12
// 34f: 4c 8b 34 24                   movq    (%rsp), %r14
// 353: e9 b2 fe ff ff                jmp     0x20a <_JIT_ENTRY+0x20a>
// 358: 
static const unsigned char _BUILD_SETplus_BINARY_OP_MULTIPLY_FLOAT_code_body[857] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x0a, 0x02, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x5c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x43, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x48, 0x83, 0x3b, 0x01, 0x75, 0x7c, 0xf2, 0x0f, 0x11, 0x43, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xdc, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x32, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x43, 0x03, 0x80, 0x75, 0xa8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x85, 0xeb, 0x7d, 0x4c, 0x89, 0x34, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xf6, 0x43, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xf4, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x8f, 0x06, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x3c, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0xf4, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0xb2, 0xfe, 0xff, 0xff};
static const Hole _BUILD_SETplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BUILD_SETplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _BUILD_SETplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_OP_MULTIPLY_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 67 01 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 27 01 00 00             js      0x289 <_JIT_ENTRY+0x289>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 11 01 00 00             jne     0x289 <_JIT_ENTRY+0x289>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 fd 00 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 c8                         subl    %ecx, %eax
// 1af: 48 63 d8                      movslq  %eax, %rbx
// 1b2: 4d 8b 74 dd f0                movq    -0x10(%r13,%rbx,8), %r14
// 1b7: 4d 89 ef                      movq    %r13, %r15
// 1ba: 4d 8b 6c dd f8                movq    -0x8(%r13,%rbx,8), %r13
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _PyLong_Multiply
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 4c 89 ee                      movq    %r13, %rsi
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 89 c4                      movq    %rax, %r12
// 1d4: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1d9: 75 28                         jne     0x203 <_JIT_ENTRY+0x203>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  PyInterpreterState_Get
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ee: 49 ff 4d 00                   decq    (%r13)
// 1f2: 75 0f                         jne     0x203 <_JIT_ENTRY+0x203>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  PyObject_Free
// 1fe: 4c 89 ef                      movq    %r13, %rdi
// 201: ff d0                         callq   *%rax
// 203: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 208: 75 18                         jne     0x222 <_JIT_ENTRY+0x222>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyInterpreterState_Get
// 214: ff d0                         callq   *%rax
// 216: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 21d: 49 ff 0e                      decq    (%r14)
// 220: 74 4b                         je      0x26d <_JIT_ENTRY+0x26d>
// 222: 4d 85 e4                      testq   %r12, %r12
// 225: 74 5a                         je      0x281 <_JIT_ENTRY+0x281>
// 227: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 22b: 48 83 c6 f8                   addq    $-0x8, %rsi
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_OPARG
// 239: 0f b7 c0                      movzwl  %ax, %eax
// 23c: b9 01 00 00 00                movl    $0x1, %ecx
// 241: 29 c1                         subl    %eax, %ecx
// 243: 48 63 c1                      movslq  %ecx, %rax
// 246: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 89 ef                      movq    %rbp, %rdi
// 258: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  PyObject_Free
// 277: 4c 89 f7                      movq    %r14, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 4d 85 e4                      testq   %r12, %r12
// 27f: 75 a6                         jne     0x227 <_JIT_ENTRY+0x227>
// 281: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 285: 49 83 c7 f0                   addq    $-0x10, %r15
// 289: 49 29 ef                      subq    %rbp, %r15
// 28c: 49 83 c7 b8                   addq    $-0x48, %r15
// 290: 49 c1 ef 03                   shrq    $0x3, %r15
// 294: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: 48 83 c4 18                   addq    $0x18, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 
static const unsigned char _BUILD_SETplus_BINARY_OP_MULTIPLY_INT_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x67, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x27, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x11, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdd, 0xf0, 0x4d, 0x89, 0xef, 0x4d, 0x8b, 0x6c, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x74, 0x4b, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa6, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_OP_MULTIPLY_INT_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _BUILD_SETplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_OP_SUBTRACT_FLOAT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 0a 02 00 00                jmp     0x32c <_JIT_ENTRY+0x32c>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 c5 01 00 00             js      0x32c <_JIT_ENTRY+0x32c>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 af 01 00 00             jne     0x32c <_JIT_ENTRY+0x32c>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 9b 01 00 00                jmp     0x32c <_JIT_ENTRY+0x32c>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 c8                         subl    %ecx, %eax
// 1b3: 4c 63 f8                      movslq  %eax, %r15
// 1b6: 4b 8b 5c fe f0                movq    -0x10(%r14,%r15,8), %rbx
// 1bb: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 1c0: f2 0f 10 43 10                movsd   0x10(%rbx), %xmm0       # xmm0 = mem[0],zero
// 1c5: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 1cc: 48 83 3b 01                   cmpq    $0x1, (%rbx)
// 1d0: 75 7c                         jne     0x24e <_JIT_ENTRY+0x24e>
// 1d2: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
// 1d7: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1dd: 75 28                         jne     0x207 <_JIT_ENTRY+0x207>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  PyInterpreterState_Get
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _PyFloat_ExactDealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 49 89 dc                      movq    %rbx, %r12
// 20a: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 20e: 48 83 c6 f8                   addq    $-0x8, %rsi
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_OPARG
// 21c: 0f b7 c0                      movzwl  %ax, %eax
// 21f: b9 01 00 00 00                movl    $0x1, %ecx
// 224: 29 c1                         subl    %eax, %ecx
// 226: 48 63 c1                      movslq  %ecx, %rax
// 229: 4d 89 64 c6 f0                movq    %r12, -0x10(%r14,%rax,8)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_CONTINUE
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: 48 89 ea                      movq    %rbp, %rdx
// 23e: 48 83 c4 18                   addq    $0x18, %rsp
// 242: 5b                            popq    %rbx
// 243: 41 5c                         popq    %r12
// 245: 41 5d                         popq    %r13
// 247: 41 5e                         popq    %r14
// 249: 41 5f                         popq    %r15
// 24b: 5d                            popq    %rbp
// 24c: ff e0                         jmpq    *%rax
// 24e: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 253: 75 32                         jne     0x287 <_JIT_ENTRY+0x287>
// 255: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 25c: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 260: 75 a8                         jne     0x20a <_JIT_ENTRY+0x20a>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  PyInterpreterState_Get
// 26c: ff d0                         callq   *%rax
// 26e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 275: 48 8b 03                      movq    (%rbx), %rax
// 278: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 27c: 48 89 0b                      movq    %rcx, (%rbx)
// 27f: 48 83 f8 01                   cmpq    $0x1, %rax
// 283: 7f 85                         jg      0x20a <_JIT_ENTRY+0x20a>
// 285: eb 7d                         jmp     0x304 <_JIT_ENTRY+0x304>
// 287: 4c 89 34 24                   movq    %r14, (%rsp)
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  PyFloat_FromDouble
// 295: ff d0                         callq   *%rax
// 297: 48 85 c0                      testq   %rax, %rax
// 29a: 0f 84 84 00 00 00             je      0x324 <_JIT_ENTRY+0x324>
// 2a0: 49 89 c6                      movq    %rax, %r14
// 2a3: f6 43 03 80                   testb   $-0x80, 0x3(%rbx)
// 2a7: 75 23                         jne     0x2cc <_JIT_ENTRY+0x2cc>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  PyInterpreterState_Get
// 2b3: ff d0                         callq   *%rax
// 2b5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2bc: 48 8b 03                      movq    (%rbx), %rax
// 2bf: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c3: 48 89 0b                      movq    %rcx, (%rbx)
// 2c6: 48 83 f8 01                   cmpq    $0x1, %rax
// 2ca: 7e 38                         jle     0x304 <_JIT_ENTRY+0x304>
// 2cc: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 2d2: 75 78                         jne     0x34c <_JIT_ENTRY+0x34c>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  PyInterpreterState_Get
// 2de: ff d0                         callq   *%rax
// 2e0: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e7: 49 8b 04 24                   movq    (%r12), %rax
// 2eb: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2ef: 49 89 0c 24                   movq    %rcx, (%r12)
// 2f3: 4d 89 f4                      movq    %r14, %r12
// 2f6: 48 83 f8 01                   cmpq    $0x1, %rax
// 2fa: 4c 8b 34 24                   movq    (%rsp), %r14
// 2fe: 0f 8f 06 ff ff ff             jg      0x20a <_JIT_ENTRY+0x20a>
// 304: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000306:  R_X86_64_64  .rodata.str1.1+0x39
// 30e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000310:  R_X86_64_64  .rodata.str1.1+0x4f
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 322: ff d0                         callq   *%rax
// 324: 48 8b 04 24                   movq    (%rsp), %rax
// 328: 4e 8d 3c f8                   leaq    (%rax,%r15,8), %r15
// 32c: 4d 29 ef                      subq    %r13, %r15
// 32f: 49 83 c7 b8                   addq    $-0x48, %r15
// 333: 49 c1 ef 03                   shrq    $0x3, %r15
// 337: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 33b: 31 c0                         xorl    %eax, %eax
// 33d: 48 83 c4 18                   addq    $0x18, %rsp
// 341: 5b                            popq    %rbx
// 342: 41 5c                         popq    %r12
// 344: 41 5d                         popq    %r13
// 346: 41 5e                         popq    %r14
// 348: 41 5f                         popq    %r15
// 34a: 5d                            popq    %rbp
// 34b: c3                            retq
// 34c: 4d 89 f4                      movq    %r14, %r12
// 34f: 4c 8b 34 24                   movq    (%rsp), %r14
// 353: e9 b2 fe ff ff                jmp     0x20a <_JIT_ENTRY+0x20a>
// 358: 
static const unsigned char _BUILD_SETplus_BINARY_OP_SUBTRACT_FLOAT_code_body[857] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x0a, 0x02, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xaf, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x5c, 0xfe, 0xf0, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf2, 0x0f, 0x10, 0x43, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x48, 0x83, 0x3b, 0x01, 0x75, 0x7c, 0xf2, 0x0f, 0x11, 0x43, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xdc, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x32, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x43, 0x03, 0x80, 0x75, 0xa8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x85, 0xeb, 0x7d, 0x4c, 0x89, 0x34, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0xf6, 0x43, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x38, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xf4, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x8f, 0x06, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x3c, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0xf4, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0xb2, 0xfe, 0xff, 0xff};
static const Hole _BUILD_SETplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BUILD_SETplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _BUILD_SETplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_OP_SUBTRACT_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 67 01 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 27 01 00 00             js      0x289 <_JIT_ENTRY+0x289>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 11 01 00 00             jne     0x289 <_JIT_ENTRY+0x289>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 fd 00 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 c8                         subl    %ecx, %eax
// 1af: 48 63 d8                      movslq  %eax, %rbx
// 1b2: 4d 8b 74 dd f0                movq    -0x10(%r13,%rbx,8), %r14
// 1b7: 4d 89 ef                      movq    %r13, %r15
// 1ba: 4d 8b 6c dd f8                movq    -0x8(%r13,%rbx,8), %r13
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _PyLong_Subtract
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 4c 89 ee                      movq    %r13, %rsi
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 89 c4                      movq    %rax, %r12
// 1d4: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1d9: 75 28                         jne     0x203 <_JIT_ENTRY+0x203>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  PyInterpreterState_Get
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ee: 49 ff 4d 00                   decq    (%r13)
// 1f2: 75 0f                         jne     0x203 <_JIT_ENTRY+0x203>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  PyObject_Free
// 1fe: 4c 89 ef                      movq    %r13, %rdi
// 201: ff d0                         callq   *%rax
// 203: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 208: 75 18                         jne     0x222 <_JIT_ENTRY+0x222>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyInterpreterState_Get
// 214: ff d0                         callq   *%rax
// 216: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 21d: 49 ff 0e                      decq    (%r14)
// 220: 74 4b                         je      0x26d <_JIT_ENTRY+0x26d>
// 222: 4d 85 e4                      testq   %r12, %r12
// 225: 74 5a                         je      0x281 <_JIT_ENTRY+0x281>
// 227: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 22b: 48 83 c6 f8                   addq    $-0x8, %rsi
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_OPARG
// 239: 0f b7 c0                      movzwl  %ax, %eax
// 23c: b9 01 00 00 00                movl    $0x1, %ecx
// 241: 29 c1                         subl    %eax, %ecx
// 243: 48 63 c1                      movslq  %ecx, %rax
// 246: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 89 ef                      movq    %rbp, %rdi
// 258: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  PyObject_Free
// 277: 4c 89 f7                      movq    %r14, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 4d 85 e4                      testq   %r12, %r12
// 27f: 75 a6                         jne     0x227 <_JIT_ENTRY+0x227>
// 281: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 285: 49 83 c7 f0                   addq    $-0x10, %r15
// 289: 49 29 ef                      subq    %rbp, %r15
// 28c: 49 83 c7 b8                   addq    $-0x48, %r15
// 290: 49 c1 ef 03                   shrq    $0x3, %r15
// 294: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: 48 83 c4 18                   addq    $0x18, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 
static const unsigned char _BUILD_SETplus_BINARY_OP_SUBTRACT_INT_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x67, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x27, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x11, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdd, 0xf0, 0x4d, 0x89, 0xef, 0x4d, 0x8b, 0x6c, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x74, 0x4b, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa6, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_OP_SUBTRACT_INT_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _BUILD_SETplus_BINARY_SLICE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_SLICE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 49: 48 89 1c 24                   movq    %rbx, (%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 e6 01 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 1c 24                   movq    (%rsp), %rbx
// 128: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 12d: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 a1 01 00 00             js      0x308 <_JIT_ENTRY+0x308>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 8b 01 00 00             jne     0x308 <_JIT_ENTRY+0x308>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 77 01 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 c8                         subl    %ecx, %eax
// 1b3: 4c 63 f8                      movslq  %eax, %r15
// 1b6: 4b 8b 74 fe f8                movq    -0x8(%r14,%r15,8), %rsi
// 1bb: 4f 8b 64 fe e8                movq    -0x18(%r14,%r15,8), %r12
// 1c0: 4d 89 f5                      movq    %r14, %r13
// 1c3: 4b 8b 7c fe f0                movq    -0x10(%r14,%r15,8), %rdi
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 0f 84 f7 00 00 00             je      0x2d4 <_JIT_ENTRY+0x2d4>
// 1dd: 49 89 c6                      movq    %rax, %r14
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  PyObject_GetItem
// 1ea: 4c 89 e7                      movq    %r12, %rdi
// 1ed: 4c 89 f6                      movq    %r14, %rsi
// 1f0: ff d0                         callq   *%rax
// 1f2: 48 89 04 24                   movq    %rax, (%rsp)
// 1f6: 49 8b 06                      movq    (%r14), %rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 7f 21                         jg      0x21f <_JIT_ENTRY+0x21f>
// 1fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000200:  R_X86_64_64  .rodata.str1.1
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_NegativeRefcount
// 212: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 217: 4c 89 f2                      movq    %r14, %rdx
// 21a: ff d0                         callq   *%rax
// 21c: 49 8b 06                      movq    (%r14), %rax
// 21f: 85 c0                         testl   %eax, %eax
// 221: 78 20                         js      0x243 <_JIT_ENTRY+0x243>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22d: ff d0                         callq   *%rax
// 22f: 49 ff 0e                      decq    (%r14)
// 232: 75 0f                         jne     0x243 <_JIT_ENTRY+0x243>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_Dealloc
// 23e: 4c 89 f7                      movq    %r14, %rdi
// 241: ff d0                         callq   *%rax
// 243: 4c 8b 34 24                   movq    (%rsp), %r14
// 247: 49 8b 04 24                   movq    (%r12), %rax
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 7f 22                         jg      0x272 <_JIT_ENTRY+0x272>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_NegativeRefcount
// 264: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 269: 4c 89 e2                      movq    %r12, %rdx
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 04 24                   movq    (%r12), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 12                         js      0x288 <_JIT_ENTRY+0x288>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 0c 24                   decq    (%r12)
// 286: 74 5d                         je      0x2e5 <_JIT_ENTRY+0x2e5>
// 288: 4d 85 f6                      testq   %r14, %r14
// 28b: 74 6c                         je      0x2f9 <_JIT_ENTRY+0x2f9>
// 28d: 4a 8d 34 fd f0 ff ff ff       leaq    -0x10(,%r15,8), %rsi
// 295: 4c 01 ee                      addq    %r13, %rsi
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _JIT_OPARG
// 2a2: 0f b7 c0                      movzwl  %ax, %eax
// 2a5: b9 01 00 00 00                movl    $0x1, %ecx
// 2aa: 29 c1                         subl    %eax, %ecx
// 2ac: 48 63 c1                      movslq  %ecx, %rax
// 2af: 4d 89 74 c5 e8                movq    %r14, -0x18(%r13,%rax,8)
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_CONTINUE
// 2be: 48 89 df                      movq    %rbx, %rdi
// 2c1: 48 89 ea                      movq    %rbp, %rdx
// 2c4: 48 83 c4 18                   addq    $0x18, %rsp
// 2c8: 5b                            popq    %rbx
// 2c9: 41 5c                         popq    %r12
// 2cb: 41 5d                         popq    %r13
// 2cd: 41 5e                         popq    %r14
// 2cf: 41 5f                         popq    %r15
// 2d1: 5d                            popq    %rbp
// 2d2: ff e0                         jmpq    *%rax
// 2d4: 45 31 f6                      xorl    %r14d, %r14d
// 2d7: 49 8b 04 24                   movq    (%r12), %rax
// 2db: 48 85 c0                      testq   %rax, %rax
// 2de: 7f 92                         jg      0x272 <_JIT_ENTRY+0x272>
// 2e0: e9 6b ff ff ff                jmp     0x250 <_JIT_ENTRY+0x250>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_Dealloc
// 2ef: 4c 89 e7                      movq    %r12, %rdi
// 2f2: ff d0                         callq   *%rax
// 2f4: 4d 85 f6                      testq   %r14, %r14
// 2f7: 75 94                         jne     0x28d <_JIT_ENTRY+0x28d>
// 2f9: 4e 8d 3c fd 00 00 00 00       leaq    (,%r15,8), %r15
// 301: 4d 01 ef                      addq    %r13, %r15
// 304: 49 83 c7 e8                   addq    $-0x18, %r15
// 308: 49 29 df                      subq    %rbx, %r15
// 30b: 49 83 c7 b8                   addq    $-0x48, %r15
// 30f: 49 c1 ef 03                   shrq    $0x3, %r15
// 313: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 317: 31 c0                         xorl    %eax, %eax
// 319: 48 83 c4 18                   addq    $0x18, %rsp
// 31d: 5b                            popq    %rbx
// 31e: 41 5c                         popq    %r12
// 320: 41 5d                         popq    %r13
// 322: 41 5e                         popq    %r14
// 324: 41 5f                         popq    %r15
// 326: 5d                            popq    %rbp
// 327: c3                            retq
// 328: 
static const unsigned char _BUILD_SETplus_BINARY_SLICE_code_body[809] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0xe6, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xa1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x8b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x77, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4b, 0x8b, 0x74, 0xfe, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xe8, 0x4d, 0x89, 0xf5, 0x4b, 0x8b, 0x7c, 0xfe, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x5d, 0x4d, 0x85, 0xf6, 0x74, 0x6c, 0x4a, 0x8d, 0x34, 0xfd, 0xf0, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x74, 0xc5, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x45, 0x31, 0xf6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x92, 0xe9, 0x6b, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x75, 0x94, 0x4e, 0x8d, 0x3c, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x49, 0x83, 0xc7, 0xe8, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_SLICE_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_SLICE_data_holes[1];

// _BUILD_SETplus_BINARY_SUBSCR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_SUBSCR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 bc 01 00 00                jmp     0x2de <_JIT_ENTRY+0x2de>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 7c 01 00 00             js      0x2de <_JIT_ENTRY+0x2de>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 66 01 00 00             jne     0x2de <_JIT_ENTRY+0x2de>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 52 01 00 00                jmp     0x2de <_JIT_ENTRY+0x2de>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 c8                         subl    %ecx, %eax
// 1af: 48 63 d8                      movslq  %eax, %rbx
// 1b2: 4d 8b 74 dd f0                movq    -0x10(%r13,%rbx,8), %r14
// 1b7: 4d 89 ef                      movq    %r13, %r15
// 1ba: 4d 8b 6c dd f8                movq    -0x8(%r13,%rbx,8), %r13
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyObject_GetItem
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 4c 89 ee                      movq    %r13, %rsi
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 89 c4                      movq    %rax, %r12
// 1d4: 49 8b 06                      movq    (%r14), %rax
// 1d7: 48 85 c0                      testq   %rax, %rax
// 1da: 7e 06                         jle     0x1e2 <_JIT_ENTRY+0x1e2>
// 1dc: 85 c0                         testl   %eax, %eax
// 1de: 79 27                         jns     0x207 <_JIT_ENTRY+0x207>
// 1e0: eb 36                         jmp     0x218 <_JIT_ENTRY+0x218>
// 1e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e4:  R_X86_64_64  .rodata.str1.1
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_NegativeRefcount
// 1f6: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 1fb: 4c 89 f2                      movq    %r14, %rdx
// 1fe: ff d0                         callq   *%rax
// 200: 49 8b 06                      movq    (%r14), %rax
// 203: 85 c0                         testl   %eax, %eax
// 205: 78 11                         js      0x218 <_JIT_ENTRY+0x218>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 211: ff d0                         callq   *%rax
// 213: 49 ff 0e                      decq    (%r14)
// 216: 74 0f                         je      0x227 <_JIT_ENTRY+0x227>
// 218: 49 8b 45 00                   movq    (%r13), %rax
// 21c: 48 85 c0                      testq   %rax, %rax
// 21f: 7e 1e                         jle     0x23f <_JIT_ENTRY+0x23f>
// 221: 85 c0                         testl   %eax, %eax
// 223: 79 40                         jns     0x265 <_JIT_ENTRY+0x265>
// 225: eb 50                         jmp     0x277 <_JIT_ENTRY+0x277>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 4c 89 f7                      movq    %r14, %rdi
// 234: ff d0                         callq   *%rax
// 236: 49 8b 45 00                   movq    (%r13), %rax
// 23a: 48 85 c0                      testq   %rax, %rax
// 23d: 7f e2                         jg      0x221 <_JIT_ENTRY+0x221>
// 23f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000241:  R_X86_64_64  .rodata.str1.1
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_NegativeRefcount
// 253: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 258: 4c 89 ea                      movq    %r13, %rdx
// 25b: ff d0                         callq   *%rax
// 25d: 49 8b 45 00                   movq    (%r13), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 78 12                         js      0x277 <_JIT_ENTRY+0x277>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 49 ff 4d 00                   decq    (%r13)
// 275: 74 4b                         je      0x2c2 <_JIT_ENTRY+0x2c2>
// 277: 4d 85 e4                      testq   %r12, %r12
// 27a: 74 5a                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 27c: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 280: 48 83 c6 f8                   addq    $-0x8, %rsi
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 0f b7 c0                      movzwl  %ax, %eax
// 291: b9 01 00 00 00                movl    $0x1, %ecx
// 296: 29 c1                         subl    %eax, %ecx
// 298: 48 63 c1                      movslq  %ecx, %rax
// 29b: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_CONTINUE
// 2aa: 48 89 ef                      movq    %rbp, %rdi
// 2ad: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b2: 48 83 c4 18                   addq    $0x18, %rsp
// 2b6: 5b                            popq    %rbx
// 2b7: 41 5c                         popq    %r12
// 2b9: 41 5d                         popq    %r13
// 2bb: 41 5e                         popq    %r14
// 2bd: 41 5f                         popq    %r15
// 2bf: 5d                            popq    %rbp
// 2c0: ff e0                         jmpq    *%rax
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 4c 89 ef                      movq    %r13, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 4d 85 e4                      testq   %r12, %r12
// 2d4: 75 a6                         jne     0x27c <_JIT_ENTRY+0x27c>
// 2d6: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 2da: 49 83 c7 f0                   addq    $-0x10, %r15
// 2de: 49 29 ef                      subq    %rbp, %r15
// 2e1: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e5: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e9: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 2ed: 31 c0                         xorl    %eax, %eax
// 2ef: 48 83 c4 18                   addq    $0x18, %rsp
// 2f3: 5b                            popq    %rbx
// 2f4: 41 5c                         popq    %r12
// 2f6: 41 5d                         popq    %r13
// 2f8: 41 5e                         popq    %r14
// 2fa: 41 5f                         popq    %r15
// 2fc: 5d                            popq    %rbp
// 2fd: c3                            retq
// 2fe: 
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0xbc, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x7c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x66, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x52, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdd, 0xf0, 0x4d, 0x89, 0xef, 0x4d, 0x8b, 0x6c, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4b, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa6, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_data_holes[1];

// _BUILD_SETplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_SUBSCR_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 18                movq    %r14, 0x18(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 44 01 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 5a: 49 89 ee                      movq    %rbp, %r14
// 5d: 49 29 c6                      subq    %rax, %r14
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ee                      movq    %rbp, %r14
// 11d: e9 15 02 00 00                jmp     0x337 <_JIT_ENTRY+0x337>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 74 5d                         je      0x18d <_JIT_ENTRY+0x18d>
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 e2                      movq    %r12, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 d4 01 00 00             js      0x337 <_JIT_ENTRY+0x337>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 be 01 00 00             jne     0x337 <_JIT_ENTRY+0x337>
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: ff d0                         callq   *%rax
// 188: e9 aa 01 00 00                jmp     0x337 <_JIT_ENTRY+0x337>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c8                      movzwl  %ax, %ecx
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a1: 48 f7 d8                      negq    %rax
// 1a4: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1a9: b8 01 00 00 00                movl    $0x1, %eax
// 1ae: ba 01 00 00 00                movl    $0x1, %edx
// 1b3: 29 ca                         subl    %ecx, %edx
// 1b5: 4c 63 fa                      movslq  %edx, %r15
// 1b8: 4e 8b 6c fd f0                movq    -0x10(%rbp,%r15,8), %r13
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  PyDict_Type
// 1c7: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1cb: 74 46                         je      0x213 <_JIT_ENTRY+0x213>
// 1cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 0f b7 c9                      movzwl  %cx, %ecx
// 1da: 29 c8                         subl    %ecx, %eax
// 1dc: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 1e4: 48 01 e8                      addq    %rbp, %rax
// 1e7: 48 29 d8                      subq    %rbx, %rax
// 1ea: 48 83 c0 b8                   addq    $-0x48, %rax
// 1ee: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f2: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f5: 48 8b 03                      movq    (%rbx), %rax
// 1f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fa:  R_X86_64_64  _JIT_TARGET
// 202: 89 c9                         movl    %ecx, %ecx
// 204: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 208: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 20e: e9 35 01 00 00                jmp     0x348 <_JIT_ENTRY+0x348>
// 213: 49 89 ee                      movq    %rbp, %r14
// 216: 4e 8b 64 fd f8                movq    -0x8(%rbp,%r15,8), %r12
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  PyDict_GetItemRef
// 225: 48 8d 54 24 20                leaq    0x20(%rsp), %rdx
// 22a: 4c 89 ef                      movq    %r13, %rdi
// 22d: 4c 89 e6                      movq    %r12, %rsi
// 230: ff d0                         callq   *%rax
// 232: 89 c5                         movl    %eax, %ebp
// 234: 85 c0                         testl   %eax, %eax
// 236: 74 0f                         je      0x247 <_JIT_ENTRY+0x247>
// 238: 49 8b 45 00                   movq    (%r13), %rax
// 23c: 48 85 c0                      testq   %rax, %rax
// 23f: 7e 1e                         jle     0x25f <_JIT_ENTRY+0x25f>
// 241: 85 c0                         testl   %eax, %eax
// 243: 79 40                         jns     0x285 <_JIT_ENTRY+0x285>
// 245: eb 5f                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _PyErr_SetKeyError
// 251: 4c 89 e7                      movq    %r12, %rdi
// 254: ff d0                         callq   *%rax
// 256: 49 8b 45 00                   movq    (%r13), %rax
// 25a: 48 85 c0                      testq   %rax, %rax
// 25d: 7f e2                         jg      0x241 <_JIT_ENTRY+0x241>
// 25f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000261:  R_X86_64_64  .rodata.str1.1
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_NegativeRefcount
// 273: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 278: 4c 89 ea                      movq    %r13, %rdx
// 27b: ff d0                         callq   *%rax
// 27d: 49 8b 45 00                   movq    (%r13), %rax
// 281: 85 c0                         testl   %eax, %eax
// 283: 78 21                         js      0x2a6 <_JIT_ENTRY+0x2a6>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28f: ff d0                         callq   *%rax
// 291: 49 ff 4d 00                   decq    (%r13)
// 295: 75 0f                         jne     0x2a6 <_JIT_ENTRY+0x2a6>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_Dealloc
// 2a1: 4c 89 ef                      movq    %r13, %rdi
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 8b 04 24                   movq    (%r12), %rax
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 7f 22                         jg      0x2d1 <_JIT_ENTRY+0x2d1>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 2c8: 4c 89 e2                      movq    %r12, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 04 24                   movq    (%r12), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 21                         js      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 0c 24                   decq    (%r12)
// 2e5: 75 0f                         jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_Dealloc
// 2f1: 4c 89 e7                      movq    %r12, %rdi
// 2f4: ff d0                         callq   *%rax
// 2f6: 4c 89 f0                      movq    %r14, %rax
// 2f9: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 2fd: 49 83 c6 f0                   addq    $-0x10, %r14
// 301: 85 ed                         testl   %ebp, %ebp
// 303: 7e 32                         jle     0x337 <_JIT_ENTRY+0x337>
// 305: 4a 8d 34 f8                   leaq    (%rax,%r15,8), %rsi
// 309: 48 83 c6 f8                   addq    $-0x8, %rsi
// 30d: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 312: 49 89 06                      movq    %rax, (%r14)
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _JIT_CONTINUE
// 31f: 48 89 df                      movq    %rbx, %rdi
// 322: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 327: 48 83 c4 28                   addq    $0x28, %rsp
// 32b: 5b                            popq    %rbx
// 32c: 41 5c                         popq    %r12
// 32e: 41 5d                         popq    %r13
// 330: 41 5e                         popq    %r14
// 332: 41 5f                         popq    %r15
// 334: 5d                            popq    %rbp
// 335: ff e0                         jmpq    *%rax
// 337: 49 29 de                      subq    %rbx, %r14
// 33a: 49 83 c6 b8                   addq    $-0x48, %r14
// 33e: 49 c1 ee 03                   shrq    $0x3, %r14
// 342: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 346: 31 c0                         xorl    %eax, %eax
// 348: 48 83 c4 28                   addq    $0x28, %rsp
// 34c: 5b                            popq    %rbx
// 34d: 41 5c                         popq    %r12
// 34f: 41 5d                         popq    %r13
// 351: 41 5e                         popq    %r14
// 353: 41 5f                         popq    %r15
// 355: 5d                            popq    %rbp
// 356: c3                            retq
// 357: 
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_DICT_code_body[856] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x49, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xee, 0xe9, 0x15, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd4, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xbe, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xaa, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xfa, 0x4e, 0x8b, 0x6c, 0xfd, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x74, 0x46, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x35, 0x01, 0x00, 0x00, 0x49, 0x89, 0xee, 0x4e, 0x8b, 0x64, 0xfd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0xf0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xed, 0x7e, 0x32, 0x4a, 0x8d, 0x34, 0xf8, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_DICT_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_DICT_data_holes[1];

// _BUILD_SETplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_SUBSCR_LIST_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 31 01 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 3c 24                   movq    %r15, (%rsp)
// 35: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 66 85 c0                      testw   %ax, %ax
// 47: 0f 84 28 01 00 00             je      0x175 <_JIT_ENTRY+0x175>
// 4d: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4c 8b 3c 24                   movq    (%rsp), %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 08                         jmp     0x88 <_JIT_ENTRY+0x88>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 74 7e                         je      0x106 <_JIT_ENTRY+0x106>
// 88: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 8c: 85 ed                         testl   %ebp, %ebp
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 49 8b 06                      movq    (%r14), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7e 24                         jle     0xbc <_JIT_ENTRY+0xbc>
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 e4                         js      0x80 <_JIT_ENTRY+0x80>
// 9c: eb 43                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9e: 66 90                         nop
// a0: 4c 89 e7                      movq    %r12, %rdi
// a3: 4c 89 f6                      movq    %r14, %rsi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PySet_Add
// b0: ff d0                         callq   *%rax
// b2: 89 c5                         movl    %eax, %ebp
// b4: 49 8b 06                      movq    (%r14), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f dc                         jg      0x98 <_JIT_ENTRY+0x98>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: ff d0                         callq   *%rax
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 85 c0                         testl   %eax, %eax
// df: 78 9f                         js      0x80 <_JIT_ENTRY+0x80>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// eb: ff d0                         callq   *%rax
// ed: 49 ff 0e                      decq    (%r14)
// f0: 75 8e                         jne     0x80 <_JIT_ENTRY+0x80>
// f2: 4c 89 f7                      movq    %r14, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: e9 7a ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 10d: 74 66                         je      0x175 <_JIT_ENTRY+0x175>
// 10f: 49 8b 04 24                   movq    (%r12), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7f 22                         jg      0x13a <_JIT_ENTRY+0x13a>
// 118: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1
// 122: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 4c 89 e7                      movq    %r12, %rdi
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: ff d0                         callq   *%rax
// 15f: 49 29 ef                      subq    %rbp, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 16e: 31 c0                         xorl    %eax, %eax
// 170: e9 87 01 00 00                jmp     0x2fc <_JIT_ENTRY+0x2fc>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _JIT_OPARG
// 17f: 0f b7 c8                      movzwl  %ax, %ecx
// 182: 0f b7 c0                      movzwl  %ax, %eax
// 185: 48 c1 e0 03                   shlq    $0x3, %rax
// 189: 48 f7 d8                      negq    %rax
// 18c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 190: 4d 89 24 07                   movq    %r12, (%r15,%rax)
// 194: b8 01 00 00 00                movl    $0x1, %eax
// 199: 29 c8                         subl    %ecx, %eax
// 19b: 4c 63 f0                      movslq  %eax, %r14
// 19e: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyLong_Type
// 1ad: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1b1: 0f 85 19 01 00 00             jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 1b7: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  PyList_Type
// 1c6: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1cb: 0f 85 ff 00 00 00             jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 1d1: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1d6: 0f 87 f4 00 00 00             ja      0x2d0 <_JIT_ENTRY+0x2d0>
// 1dc: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1e0: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1e5: 0f 8e e5 00 00 00             jle     0x2d0 <_JIT_ENTRY+0x2d0>
// 1eb: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 1f0: 48 8b 1c c1                   movq    (%rcx,%rax,8), %rbx
// 1f4: 8b 03                         movl    (%rbx), %eax
// 1f6: ff c0                         incl    %eax
// 1f8: 74 0e                         je      0x208 <_JIT_ENTRY+0x208>
// 1fa: 89 03                         movl    %eax, (%rbx)
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 206: ff d0                         callq   *%rax
// 208: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 20d: 75 28                         jne     0x237 <_JIT_ENTRY+0x237>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  PyInterpreterState_Get
// 219: ff d0                         callq   *%rax
// 21b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 222: 49 ff 4d 00                   decq    (%r13)
// 226: 75 0f                         jne     0x237 <_JIT_ENTRY+0x237>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  PyObject_Free
// 232: 4c 89 ef                      movq    %r13, %rdi
// 235: ff d0                         callq   *%rax
// 237: 49 8b 04 24                   movq    (%r12), %rax
// 23b: 48 85 c0                      testq   %rax, %rax
// 23e: 7f 22                         jg      0x262 <_JIT_ENTRY+0x262>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_NegativeRefcount
// 254: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 259: 4c 89 e2                      movq    %r12, %rdx
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 04 24                   movq    (%r12), %rax
// 262: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 266: 49 83 c6 f8                   addq    $-0x8, %r14
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 21                         js      0x28f <_JIT_ENTRY+0x28f>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 0c 24                   decq    (%r12)
// 27e: 75 0f                         jne     0x28f <_JIT_ENTRY+0x28f>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 e7                      movq    %r12, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _JIT_OPARG
// 299: 0f b7 c0                      movzwl  %ax, %eax
// 29c: b9 01 00 00 00                movl    $0x1, %ecx
// 2a1: 29 c1                         subl    %eax, %ecx
// 2a3: 48 63 c1                      movslq  %ecx, %rax
// 2a6: 49 89 5c c7 f0                movq    %rbx, -0x10(%r15,%rax,8)
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _JIT_CONTINUE
// 2b5: 48 89 ef                      movq    %rbp, %rdi
// 2b8: 4c 89 f6                      movq    %r14, %rsi
// 2bb: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2d4: 48 29 e8                      subq    %rbp, %rax
// 2d7: 48 83 c0 b8                   addq    $-0x48, %rax
// 2db: 48 c1 e8 03                   shrq    $0x3, %rax
// 2df: 89 45 40                      movl    %eax, 0x40(%rbp)
// 2e2: 48 8b 45 00                   movq    (%rbp), %rax
// 2e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e8:  R_X86_64_64  _JIT_TARGET
// 2f0: 89 c9                         movl    %ecx, %ecx
// 2f2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2f6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2fc: 48 83 c4 18                   addq    $0x18, %rsp
// 300: 5b                            popq    %rbx
// 301: 41 5c                         popq    %r12
// 303: 41 5d                         popq    %r13
// 305: 41 5e                         popq    %r14
// 307: 41 5f                         popq    %r15
// 309: 5d                            popq    %rbp
// 30a: c3                            retq
// 30b: 
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_LIST_INT_code_body[780] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x08, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0x87, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x3c, 0x24, 0x4d, 0x89, 0x24, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x19, 0x01, 0x00, 0x00, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xff, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xf4, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xe5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x1c, 0xc1, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x5c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_LIST_INT_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _BUILD_SETplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_SUBSCR_STR_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 31 01 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 3c 24                   movq    %r15, (%rsp)
// 35: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 66 85 c0                      testw   %ax, %ax
// 47: 0f 84 28 01 00 00             je      0x175 <_JIT_ENTRY+0x175>
// 4d: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4c 8b 3c 24                   movq    (%rsp), %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 08                         jmp     0x88 <_JIT_ENTRY+0x88>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 74 7e                         je      0x106 <_JIT_ENTRY+0x106>
// 88: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 8c: 85 ed                         testl   %ebp, %ebp
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 49 8b 06                      movq    (%r14), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7e 24                         jle     0xbc <_JIT_ENTRY+0xbc>
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 e4                         js      0x80 <_JIT_ENTRY+0x80>
// 9c: eb 43                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9e: 66 90                         nop
// a0: 4c 89 e7                      movq    %r12, %rdi
// a3: 4c 89 f6                      movq    %r14, %rsi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PySet_Add
// b0: ff d0                         callq   *%rax
// b2: 89 c5                         movl    %eax, %ebp
// b4: 49 8b 06                      movq    (%r14), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f dc                         jg      0x98 <_JIT_ENTRY+0x98>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: ff d0                         callq   *%rax
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 85 c0                         testl   %eax, %eax
// df: 78 9f                         js      0x80 <_JIT_ENTRY+0x80>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// eb: ff d0                         callq   *%rax
// ed: 49 ff 0e                      decq    (%r14)
// f0: 75 8e                         jne     0x80 <_JIT_ENTRY+0x80>
// f2: 4c 89 f7                      movq    %r14, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: e9 7a ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 10d: 74 66                         je      0x175 <_JIT_ENTRY+0x175>
// 10f: 49 8b 04 24                   movq    (%r12), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7f 22                         jg      0x13a <_JIT_ENTRY+0x13a>
// 118: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1
// 122: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 4c 89 e7                      movq    %r12, %rdi
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: ff d0                         callq   *%rax
// 15f: 49 29 ef                      subq    %rbp, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 16e: 31 c0                         xorl    %eax, %eax
// 170: e9 35 01 00 00                jmp     0x2aa <_JIT_ENTRY+0x2aa>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _JIT_OPARG
// 17f: 0f b7 c8                      movzwl  %ax, %ecx
// 182: 0f b7 c0                      movzwl  %ax, %eax
// 185: 48 c1 e0 03                   shlq    $0x3, %rax
// 189: 48 f7 d8                      negq    %rax
// 18c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 190: 4d 89 24 07                   movq    %r12, (%r15,%rax)
// 194: b8 01 00 00 00                movl    $0x1, %eax
// 199: 29 c8                         subl    %ecx, %eax
// 19b: 4c 63 f0                      movslq  %eax, %r14
// 19e: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyLong_Type
// 1ad: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1b1: 0f 85 c7 00 00 00             jne     0x27e <_JIT_ENTRY+0x27e>
// 1b7: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  PyUnicode_Type
// 1c6: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1cb: 0f 85 ad 00 00 00             jne     0x27e <_JIT_ENTRY+0x27e>
// 1d1: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1d6: 0f 87 a2 00 00 00             ja      0x27e <_JIT_ENTRY+0x27e>
// 1dc: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1e0: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1e5: 0f 8e 93 00 00 00             jle     0x27e <_JIT_ENTRY+0x27e>
// 1eb: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 1f0: 89 ca                         movl    %ecx, %edx
// 1f2: c1 ea 02                      shrl    $0x2, %edx
// 1f5: 83 e2 07                      andl    $0x7, %edx
// 1f8: 83 fa 02                      cmpl    $0x2, %edx
// 1fb: 74 15                         je      0x212 <_JIT_ENTRY+0x212>
// 1fd: 83 fa 01                      cmpl    $0x1, %edx
// 200: 75 20                         jne     0x222 <_JIT_ENTRY+0x222>
// 202: f6 c1 20                      testb   $0x20, %cl
// 205: 75 27                         jne     0x22e <_JIT_ENTRY+0x22e>
// 207: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 20c: 0f b6 1c 01                   movzbl  (%rcx,%rax), %ebx
// 210: eb 67                         jmp     0x279 <_JIT_ENTRY+0x279>
// 212: f6 c1 20                      testb   $0x20, %cl
// 215: 75 31                         jne     0x248 <_JIT_ENTRY+0x248>
// 217: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 21c: 0f b7 1c 41                   movzwl  (%rcx,%rax,2), %ebx
// 220: eb 57                         jmp     0x279 <_JIT_ENTRY+0x279>
// 222: f6 c1 20                      testb   $0x20, %cl
// 225: 75 3b                         jne     0x262 <_JIT_ENTRY+0x262>
// 227: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 22c: eb 48                         jmp     0x276 <_JIT_ENTRY+0x276>
// 22e: 31 d2                         xorl    %edx, %edx
// 230: f6 c1 40                      testb   $0x40, %cl
// 233: 0f 94 c2                      sete    %dl
// 236: 48 c1 e2 04                   shlq    $0x4, %rdx
// 23a: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 23e: 48 83 c1 28                   addq    $0x28, %rcx
// 242: 0f b6 1c 01                   movzbl  (%rcx,%rax), %ebx
// 246: eb 31                         jmp     0x279 <_JIT_ENTRY+0x279>
// 248: 31 d2                         xorl    %edx, %edx
// 24a: f6 c1 40                      testb   $0x40, %cl
// 24d: 0f 94 c2                      sete    %dl
// 250: 48 c1 e2 04                   shlq    $0x4, %rdx
// 254: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 258: 48 83 c1 28                   addq    $0x28, %rcx
// 25c: 0f b7 1c 41                   movzwl  (%rcx,%rax,2), %ebx
// 260: eb 17                         jmp     0x279 <_JIT_ENTRY+0x279>
// 262: 31 d2                         xorl    %edx, %edx
// 264: f6 c1 40                      testb   $0x40, %cl
// 267: 0f 94 c2                      sete    %dl
// 26a: 48 c1 e2 04                   shlq    $0x4, %rdx
// 26e: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 272: 48 83 c1 28                   addq    $0x28, %rcx
// 276: 8b 1c 81                      movl    (%rcx,%rax,4), %ebx
// 279: 83 fb 7f                      cmpl    $0x7f, %ebx
// 27c: 76 3b                         jbe     0x2b9 <_JIT_ENTRY+0x2b9>
// 27e: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 282: 48 29 e8                      subq    %rbp, %rax
// 285: 48 83 c0 b8                   addq    $-0x48, %rax
// 289: 48 c1 e8 03                   shrq    $0x3, %rax
// 28d: 89 45 40                      movl    %eax, 0x40(%rbp)
// 290: 48 8b 45 00                   movq    (%rbp), %rax
// 294: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000296:  R_X86_64_64  _JIT_TARGET
// 29e: 89 c9                         movl    %ecx, %ecx
// 2a0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2aa: 48 83 c4 18                   addq    $0x18, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: c3                            retq
// 2b9: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2be: 75 28                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  PyInterpreterState_Get
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d3: 49 ff 4d 00                   decq    (%r13)
// 2d7: 75 0f                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  PyObject_Free
// 2e3: 4c 89 ef                      movq    %r13, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 8b 04 24                   movq    (%r12), %rax
// 2ec: 48 85 c0                      testq   %rax, %rax
// 2ef: 7f 22                         jg      0x313 <_JIT_ENTRY+0x313>
// 2f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f3:  R_X86_64_64  .rodata.str1.1
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_NegativeRefcount
// 305: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 30a: 4c 89 e2                      movq    %r12, %rdx
// 30d: ff d0                         callq   *%rax
// 30f: 49 8b 04 24                   movq    (%r12), %rax
// 313: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 317: 49 83 c6 f8                   addq    $-0x8, %r14
// 31b: 85 c0                         testl   %eax, %eax
// 31d: 78 21                         js      0x340 <_JIT_ENTRY+0x340>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 329: ff d0                         callq   *%rax
// 32b: 49 ff 0c 24                   decq    (%r12)
// 32f: 75 0f                         jne     0x340 <_JIT_ENTRY+0x340>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _Py_Dealloc
// 33b: 4c 89 e7                      movq    %r12, %rdi
// 33e: ff d0                         callq   *%rax
// 340: 89 d8                         movl    %ebx, %eax
// 342: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 346: 48 c1 e0 04                   shlq    $0x4, %rax
// 34a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000034c:  R_X86_64_64  _PyRuntime
// 354: 48 01 c8                      addq    %rcx, %rax
// 357: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 35d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000035f:  R_X86_64_64  _JIT_OPARG
// 367: 0f b7 c9                      movzwl  %cx, %ecx
// 36a: ba 01 00 00 00                movl    $0x1, %edx
// 36f: 29 ca                         subl    %ecx, %edx
// 371: 48 63 ca                      movslq  %edx, %rcx
// 374: 49 89 44 cf f0                movq    %rax, -0x10(%r15,%rcx,8)
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _JIT_CONTINUE
// 383: 48 89 ef                      movq    %rbp, %rdi
// 386: 4c 89 f6                      movq    %r14, %rsi
// 389: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 38e: 48 83 c4 18                   addq    $0x18, %rsp
// 392: 5b                            popq    %rbx
// 393: 41 5c                         popq    %r12
// 395: 41 5d                         popq    %r13
// 397: 41 5e                         popq    %r14
// 399: 41 5f                         popq    %r15
// 39b: 5d                            popq    %rbp
// 39c: ff e0                         jmpq    *%rax
// 39e: 
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_STR_INT_code_body[927] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x08, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0x35, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x3c, 0x24, 0x4d, 0x89, 0x24, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc7, 0x00, 0x00, 0x00, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xad, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa2, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x93, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x1c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x1c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x1c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x1c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x1c, 0x81, 0x83, 0xfb, 0x7f, 0x76, 0x3b, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xd8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xcf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_STR_INT_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _BUILD_SETplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BINARY_SUBSCR_TUPLE_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 31 01 00 00             je      0x15f <_JIT_ENTRY+0x15f>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 3c 24                   movq    %r15, (%rsp)
// 35: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 66 85 c0                      testw   %ax, %ax
// 47: 0f 84 28 01 00 00             je      0x175 <_JIT_ENTRY+0x175>
// 4d: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4c 8b 3c 24                   movq    (%rsp), %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 08                         jmp     0x88 <_JIT_ENTRY+0x88>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 74 7e                         je      0x106 <_JIT_ENTRY+0x106>
// 88: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 8c: 85 ed                         testl   %ebp, %ebp
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 49 8b 06                      movq    (%r14), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7e 24                         jle     0xbc <_JIT_ENTRY+0xbc>
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 e4                         js      0x80 <_JIT_ENTRY+0x80>
// 9c: eb 43                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9e: 66 90                         nop
// a0: 4c 89 e7                      movq    %r12, %rdi
// a3: 4c 89 f6                      movq    %r14, %rsi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PySet_Add
// b0: ff d0                         callq   *%rax
// b2: 89 c5                         movl    %eax, %ebp
// b4: 49 8b 06                      movq    (%r14), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f dc                         jg      0x98 <_JIT_ENTRY+0x98>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: ff d0                         callq   *%rax
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 85 c0                         testl   %eax, %eax
// df: 78 9f                         js      0x80 <_JIT_ENTRY+0x80>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// eb: ff d0                         callq   *%rax
// ed: 49 ff 0e                      decq    (%r14)
// f0: 75 8e                         jne     0x80 <_JIT_ENTRY+0x80>
// f2: 4c 89 f7                      movq    %r14, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: e9 7a ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 10d: 74 66                         je      0x175 <_JIT_ENTRY+0x175>
// 10f: 49 8b 04 24                   movq    (%r12), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7f 22                         jg      0x13a <_JIT_ENTRY+0x13a>
// 118: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1
// 122: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 127: 4c 89 e2                      movq    %r12, %rdx
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_NegativeRefcount
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 4c 89 e7                      movq    %r12, %rdi
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: ff d0                         callq   *%rax
// 15f: 49 29 ef                      subq    %rbp, %r15
// 162: 49 83 c7 b8                   addq    $-0x48, %r15
// 166: 49 c1 ef 03                   shrq    $0x3, %r15
// 16a: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 16e: 31 c0                         xorl    %eax, %eax
// 170: e9 83 01 00 00                jmp     0x2f8 <_JIT_ENTRY+0x2f8>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _JIT_OPARG
// 17f: 0f b7 c8                      movzwl  %ax, %ecx
// 182: 0f b7 c0                      movzwl  %ax, %eax
// 185: 48 c1 e0 03                   shlq    $0x3, %rax
// 189: 48 f7 d8                      negq    %rax
// 18c: 4c 8b 3c 24                   movq    (%rsp), %r15
// 190: 4d 89 24 07                   movq    %r12, (%r15,%rax)
// 194: b8 01 00 00 00                movl    $0x1, %eax
// 199: 29 c8                         subl    %ecx, %eax
// 19b: 4c 63 f0                      movslq  %eax, %r14
// 19e: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyLong_Type
// 1ad: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1b1: 0f 85 15 01 00 00             jne     0x2cc <_JIT_ENTRY+0x2cc>
// 1b7: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  PyTuple_Type
// 1c6: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1cb: 0f 85 fb 00 00 00             jne     0x2cc <_JIT_ENTRY+0x2cc>
// 1d1: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1d6: 0f 87 f0 00 00 00             ja      0x2cc <_JIT_ENTRY+0x2cc>
// 1dc: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1e0: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1e5: 0f 8e e1 00 00 00             jle     0x2cc <_JIT_ENTRY+0x2cc>
// 1eb: 49 8b 5c c4 18                movq    0x18(%r12,%rax,8), %rbx
// 1f0: 8b 03                         movl    (%rbx), %eax
// 1f2: ff c0                         incl    %eax
// 1f4: 74 0e                         je      0x204 <_JIT_ENTRY+0x204>
// 1f6: 89 03                         movl    %eax, (%rbx)
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 202: ff d0                         callq   *%rax
// 204: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 209: 75 28                         jne     0x233 <_JIT_ENTRY+0x233>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  PyInterpreterState_Get
// 215: ff d0                         callq   *%rax
// 217: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 21e: 49 ff 4d 00                   decq    (%r13)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  PyObject_Free
// 22e: 4c 89 ef                      movq    %r13, %rdi
// 231: ff d0                         callq   *%rax
// 233: 49 8b 04 24                   movq    (%r12), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 255: 4c 89 e2                      movq    %r12, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 04 24                   movq    (%r12), %rax
// 25e: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 262: 49 83 c6 f8                   addq    $-0x8, %r14
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 21                         js      0x28b <_JIT_ENTRY+0x28b>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 49 ff 0c 24                   decq    (%r12)
// 27a: 75 0f                         jne     0x28b <_JIT_ENTRY+0x28b>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_Dealloc
// 286: 4c 89 e7                      movq    %r12, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _JIT_OPARG
// 295: 0f b7 c0                      movzwl  %ax, %eax
// 298: b9 01 00 00 00                movl    $0x1, %ecx
// 29d: 29 c1                         subl    %eax, %ecx
// 29f: 48 63 c1                      movslq  %ecx, %rax
// 2a2: 49 89 5c c7 f0                movq    %rbx, -0x10(%r15,%rax,8)
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 89 ef                      movq    %rbp, %rdi
// 2b4: 4c 89 f6                      movq    %r14, %rsi
// 2b7: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2bc: 48 83 c4 18                   addq    $0x18, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: ff e0                         jmpq    *%rax
// 2cc: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 2d0: 48 29 e8                      subq    %rbp, %rax
// 2d3: 48 83 c0 b8                   addq    $-0x48, %rax
// 2d7: 48 c1 e8 03                   shrq    $0x3, %rax
// 2db: 89 45 40                      movl    %eax, 0x40(%rbp)
// 2de: 48 8b 45 00                   movq    (%rbp), %rax
// 2e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e4:  R_X86_64_64  _JIT_TARGET
// 2ec: 89 c9                         movl    %ecx, %ecx
// 2ee: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2f2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2f8: 48 83 c4 18                   addq    $0x18, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: c3                            retq
// 307: 
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_TUPLE_INT_code_body[776] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x08, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x3c, 0x24, 0x4d, 0x89, 0x24, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x15, 0x01, 0x00, 0x00, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xfb, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5c, 0xc4, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x5c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_TUPLE_INT_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _BUILD_SETplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BUILD_CONST_KEY_MAP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 49: 48 89 5c 24 18                movq    %rbx, 0x18(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 5a: 4d 89 fc                      movq    %r15, %r12
// 5d: 49 29 c4                      subq    %rax, %r12
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: bd 01 00 00 00                movl    $0x1, %ebp
// 75: 0f 43 e8                      cmovael %eax, %ebp
// 78: 45 31 ff                      xorl    %r15d, %r15d
// 7b: 45 31 f6                      xorl    %r14d, %r14d
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 fc                      movq    %r15, %r12
// 11e: e9 de 01 00 00                jmp     0x301 <_JIT_ENTRY+0x301>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 12b: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 130: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 135: 74 5d                         je      0x194 <_JIT_ENTRY+0x194>
// 137: 49 8b 45 00                   movq    (%r13), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7f 22                         jg      0x162 <_JIT_ENTRY+0x162>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 97 01 00 00             js      0x301 <_JIT_ENTRY+0x301>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 0f 85 81 01 00 00             jne     0x301 <_JIT_ENTRY+0x301>
// 180: 4c 89 ef                      movq    %r13, %rdi
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_Dealloc
// 18d: ff d0                         callq   *%rax
// 18f: e9 6d 01 00 00                jmp     0x301 <_JIT_ENTRY+0x301>
// 194: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c1                      movzwl  %cx, %eax
// 1a1: 0f b7 c9                      movzwl  %cx, %ecx
// 1a4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1a8: 48 f7 d9                      negq    %rcx
// 1ab: 4d 89 2c 0f                   movq    %r13, (%r15,%rcx)
// 1af: b9 01 00 00 00                movl    $0x1, %ecx
// 1b4: 29 c1                         subl    %eax, %ecx
// 1b6: 48 63 c9                      movslq  %ecx, %rcx
// 1b9: 4d 8b 6c cf f8                movq    -0x8(%r15,%rcx,8), %r13
// 1be: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c0:  R_X86_64_64  PyTuple_Type
// 1c8: 49 39 55 08                   cmpq    %rdx, 0x8(%r13)
// 1cc: 0f 85 05 01 00 00             jne     0x2d7 <_JIT_ENTRY+0x2d7>
// 1d2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d4:  R_X86_64_64  _JIT_OPARG
// 1dc: 0f b7 d2                      movzwl  %dx, %edx
// 1df: 49 39 55 10                   cmpq    %rdx, 0x10(%r13)
// 1e3: 0f 85 ee 00 00 00             jne     0x2d7 <_JIT_ENTRY+0x2d7>
// 1e9: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 1ee: 48 89 5c 24 18                movq    %rbx, 0x18(%rsp)
// 1f3: f7 d0                         notl    %eax
// 1f5: 48 98                         cltq
// 1f7: 48 01 c8                      addq    %rcx, %rax
// 1fa: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 1ff: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 203: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 207: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000209:  R_X86_64_64  _JIT_OPARG
// 211: 44 0f b7 c3                   movzwl  %bx, %r8d
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _PyDict_FromItems
// 21f: be 01 00 00 00                movl    $0x1, %esi
// 224: b9 01 00 00 00                movl    $0x1, %ecx
// 229: 4c 89 e2                      movq    %r12, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 233: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 239: 0f 8e e2 00 00 00             jle     0x321 <_JIT_ENTRY+0x321>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: 0f b7 e8                      movzwl  %ax, %ebp
// 24c: 48 ff c5                      incq    %rbp
// 24f: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000251:  R_X86_64_64  .rodata.str1.1
// 259: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000025b:  R_X86_64_64  _Py_NegativeRefcount
// 263: eb 18                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 265: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 270: 48 ff cd                      decq    %rbp
// 273: 48 83 fd 01                   cmpq    $0x1, %rbp
// 277: 0f 8e a4 00 00 00             jle     0x321 <_JIT_ENTRY+0x321>
// 27d: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 280: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// 284: 48 8b 03                      movq    (%rbx), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 7e 14                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 28c: 85 c0                         testl   %eax, %eax
// 28e: 78 e0                         js      0x270 <_JIT_ENTRY+0x270>
// 290: eb 23                         jmp     0x2b5 <_JIT_ENTRY+0x2b5>
// 292: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 2a0: 4c 89 f7                      movq    %r14, %rdi
// 2a3: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 2a8: 48 89 da                      movq    %rbx, %rdx
// 2ab: 41 ff d7                      callq   *%r15
// 2ae: 48 8b 03                      movq    (%rbx), %rax
// 2b1: 85 c0                         testl   %eax, %eax
// 2b3: 78 bb                         js      0x270 <_JIT_ENTRY+0x270>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bf: ff d0                         callq   *%rax
// 2c1: 48 ff 0b                      decq    (%rbx)
// 2c4: 75 aa                         jne     0x270 <_JIT_ENTRY+0x270>
// 2c6: 48 89 df                      movq    %rbx, %rdi
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_Dealloc
// 2d3: ff d0                         callq   *%rax
// 2d5: eb 99                         jmp     0x270 <_JIT_ENTRY+0x270>
// 2d7: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  PyExc_SystemError
// 2e5: 48 8b 30                      movq    (%rax), %rsi
// 2e8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ea:  R_X86_64_64  .rodata.str1.1+0x39
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _PyErr_SetString
// 2fc: 4c 89 f7                      movq    %r14, %rdi
// 2ff: ff d0                         callq   *%rax
// 301: 49 29 dc                      subq    %rbx, %r12
// 304: 49 83 c4 b8                   addq    $-0x48, %r12
// 308: 49 c1 ec 03                   shrq    $0x3, %r12
// 30c: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 310: 31 c0                         xorl    %eax, %eax
// 312: 48 83 c4 28                   addq    $0x28, %rsp
// 316: 5b                            popq    %rbx
// 317: 41 5c                         popq    %r12
// 319: 41 5d                         popq    %r13
// 31b: 41 5e                         popq    %r14
// 31d: 41 5f                         popq    %r15
// 31f: 5d                            popq    %rbp
// 320: c3                            retq
// 321: 49 8b 45 00                   movq    (%r13), %rax
// 325: 48 85 c0                      testq   %rax, %rax
// 328: 7f 22                         jg      0x34c <_JIT_ENTRY+0x34c>
// 32a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032c:  R_X86_64_64  .rodata.str1.1
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_NegativeRefcount
// 33e: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 343: 4c 89 ea                      movq    %r13, %rdx
// 346: ff d0                         callq   *%rax
// 348: 49 8b 45 00                   movq    (%r13), %rax
// 34c: 85 c0                         testl   %eax, %eax
// 34e: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 353: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 358: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 35d: 78 21                         js      0x380 <_JIT_ENTRY+0x380>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 369: ff d0                         callq   *%rax
// 36b: 49 ff 4d 00                   decq    (%r13)
// 36f: 75 0f                         jne     0x380 <_JIT_ENTRY+0x380>
// 371: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000373:  R_X86_64_64  _Py_Dealloc
// 37b: 4c 89 ef                      movq    %r13, %rdi
// 37e: ff d0                         callq   *%rax
// 380: 4d 85 ff                      testq   %r15, %r15
// 383: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 388: 0f 84 73 ff ff ff             je      0x301 <_JIT_ENTRY+0x301>
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _JIT_OPARG
// 398: 0f b7 c8                      movzwl  %ax, %ecx
// 39b: ba 01 00 00 00                movl    $0x1, %edx
// 3a0: 29 ca                         subl    %ecx, %edx
// 3a2: 48 63 d2                      movslq  %edx, %rdx
// 3a5: f7 d1                         notl    %ecx
// 3a7: 48 63 c9                      movslq  %ecx, %rcx
// 3aa: 48 01 d1                      addq    %rdx, %rcx
// 3ad: 4c 89 3c ce                   movq    %r15, (%rsi,%rcx,8)
// 3b1: 0f b7 c0                      movzwl  %ax, %eax
// 3b4: 48 29 c2                      subq    %rax, %rdx
// 3b7: 48 8d 34 d6                   leaq    (%rsi,%rdx,8), %rsi
// 3bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bd:  R_X86_64_64  _JIT_CONTINUE
// 3c5: 48 89 df                      movq    %rbx, %rdi
// 3c8: 4c 89 f2                      movq    %r14, %rdx
// 3cb: 48 83 c4 28                   addq    $0x28, %rsp
// 3cf: 5b                            popq    %rbx
// 3d0: 41 5c                         popq    %r12
// 3d2: 41 5d                         popq    %r13
// 3d4: 41 5e                         popq    %r14
// 3d6: 41 5f                         popq    %r15
// 3d8: 5d                            popq    %rbp
// 3d9: ff e0                         jmpq    *%rax
// 3db: 
static const unsigned char _BUILD_SETplus_BUILD_CONST_KEY_MAP_code_body[988] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x18, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xfc, 0xe9, 0xde, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x97, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x81, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x89, 0x2c, 0x0f, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x6c, 0xcf, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x55, 0x08, 0x0f, 0x85, 0x05, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x39, 0x55, 0x10, 0x0f, 0x85, 0xee, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x18, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa4, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0xaa, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x4d, 0x8d, 0x24, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x84, 0x73, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x4c, 0x89, 0x3c, 0xce, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc2, 0x48, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_BUILD_CONST_KEY_MAP_code_holes[32] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_SETplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_SETplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _BUILD_SETplus_BUILD_LIST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BUILD_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 ec                      movq    %rbp, %r12
// 11e: e9 0e 01 00 00                jmp     0x231 <_JIT_ENTRY+0x231>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 12b: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 130: 48 8b 2c 24                   movq    (%rsp), %rbp
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 45 00                   movq    (%r13), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 c8 00 00 00             js      0x231 <_JIT_ENTRY+0x231>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 4d 00                   decq    (%r13)
// 179: 0f 85 b2 00 00 00             jne     0x231 <_JIT_ENTRY+0x231>
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 9e 00 00 00                jmp     0x231 <_JIT_ENTRY+0x231>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 f0                      movzwl  %ax, %esi
// 1a3: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4c 89 6c 05 00                movq    %r13, (%rbp,%rax)
// 1b3: bb 01 00 00 00                movl    $0x1, %ebx
// 1b8: b8 01 00 00 00                movl    $0x1, %eax
// 1bd: 29 c8                         subl    %ecx, %eax
// 1bf: 48 98                         cltq
// 1c1: 48 29 f0                      subq    %rsi, %rax
// 1c4: 4c 8d 24 c5 00 00 00 00       leaq    (,%rax,8), %r12
// 1cc: 49 01 ec                      addq    %rbp, %r12
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _PyList_FromArraySteal
// 1d9: 4c 89 e7                      movq    %r12, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 74 4e                         je      0x231 <_JIT_ENTRY+0x231>
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_OPARG
// 1ed: 0f b7 d1                      movzwl  %cx, %edx
// 1f0: 29 d3                         subl    %edx, %ebx
// 1f2: 48 63 d3                      movslq  %ebx, %rdx
// 1f5: 0f b7 c9                      movzwl  %cx, %ecx
// 1f8: 48 89 d6                      movq    %rdx, %rsi
// 1fb: 48 29 ce                      subq    %rcx, %rsi
// 1fe: 48 89 44 f5 00                movq    %rax, (%rbp,%rsi,8)
// 203: 48 01 d2                      addq    %rdx, %rdx
// 206: 48 8d 34 d5 00 00 00 00       leaq    (,%rdx,8), %rsi
// 20e: 48 01 ee                      addq    %rbp, %rsi
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_CONTINUE
// 21b: 4c 89 f7                      movq    %r14, %rdi
// 21e: 4c 89 fa                      movq    %r15, %rdx
// 221: 48 83 c4 18                   addq    $0x18, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 4d 29 f4                      subq    %r14, %r12
// 234: 49 83 c4 b8                   addq    $-0x48, %r12
// 238: 49 c1 ec 03                   shrq    $0x3, %r12
// 23c: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 240: 31 c0                         xorl    %eax, %eax
// 242: 48 83 c4 18                   addq    $0x18, %rsp
// 246: 5b                            popq    %rbx
// 247: 41 5c                         popq    %r12
// 249: 41 5d                         popq    %r13
// 24b: 41 5e                         popq    %r14
// 24d: 41 5f                         popq    %r15
// 24f: 5d                            popq    %rbp
// 250: c3                            retq
// 251: 
static const unsigned char _BUILD_SETplus_BUILD_LIST_code_body[594] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xe9, 0x0e, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xc8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x6c, 0x05, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4c, 0x8d, 0x24, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd3, 0x48, 0x63, 0xd3, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xd6, 0x48, 0x29, 0xce, 0x48, 0x89, 0x44, 0xf5, 0x00, 0x48, 0x01, 0xd2, 0x48, 0x8d, 0x34, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BUILD_LIST_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BUILD_LIST_data_holes[1];

// _BUILD_SETplus_BUILD_MAP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BUILD_MAP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 36: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _JIT_OPARG
// 45: 66 85 c0                      testw   %ax, %ax
// 48: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 4d: 0f 84 3c 01 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// 53: 0f b7 c0                      movzwl  %ax, %eax
// 56: 48 c1 e0 03                   shlq    $0x3, %rax
// 5a: 4d 89 fc                      movq    %r15, %r12
// 5d: 49 29 c4                      subq    %rax, %r12
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: bd 01 00 00 00                movl    $0x1, %ebp
// 75: 0f 43 e8                      cmovael %eax, %ebp
// 78: 45 31 ff                      xorl    %r15d, %r15d
// 7b: 45 31 f6                      xorl    %r14d, %r14d
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 fc                      movq    %r15, %r12
// 11e: e9 ca 01 00 00                jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 74 62                         je      0x18f <_JIT_ENTRY+0x18f>
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7f 22                         jg      0x158 <_JIT_ENTRY+0x158>
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 145: 4c 89 ea                      movq    %r13, %rdx
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_NegativeRefcount
// 152: ff d0                         callq   *%rax
// 154: 49 8b 45 00                   movq    (%r13), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 15f: 0f 88 88 01 00 00             js      0x2ed <_JIT_ENTRY+0x2ed>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 4d 00                   decq    (%r13)
// 175: 0f 85 72 01 00 00             jne     0x2ed <_JIT_ENTRY+0x2ed>
// 17b: 4c 89 ef                      movq    %r13, %rdi
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: ff d0                         callq   *%rax
// 18a: e9 5e 01 00 00                jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _JIT_OPARG
// 199: 0f b7 d8                      movzwl  %ax, %ebx
// 19c: 89 d9                         movl    %ebx, %ecx
// 19e: f7 d9                         negl    %ecx
// 1a0: 48 63 c9                      movslq  %ecx, %rcx
// 1a3: 4d 89 2c cf                   movq    %r13, (%r15,%rcx,8)
// 1a7: ba 01 00 00 00                movl    $0x1, %edx
// 1ac: 29 da                         subl    %ebx, %edx
// 1ae: 48 63 d2                      movslq  %edx, %rdx
// 1b1: 01 c9                         addl    %ecx, %ecx
// 1b3: 48 63 c9                      movslq  %ecx, %rcx
// 1b6: 48 01 d1                      addq    %rdx, %rcx
// 1b9: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 1bd: 49 8d 14 cf                   leaq    (%r15,%rcx,8), %rdx
// 1c1: 48 83 c2 08                   addq    $0x8, %rdx
// 1c5: 44 0f b7 c0                   movzwl  %ax, %r8d
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _PyDict_FromItems
// 1d3: be 02 00 00 00                movl    $0x2, %esi
// 1d8: b9 02 00 00 00                movl    $0x2, %ecx
// 1dd: 4c 89 e7                      movq    %r12, %rdi
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 1e7: 01 db                         addl    %ebx, %ebx
// 1e9: 85 db                         testl   %ebx, %ebx
// 1eb: 0f 8e 8c 00 00 00             jle     0x27d <_JIT_ENTRY+0x27d>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_OPARG
// 1fb: 0f b7 c0                      movzwl  %ax, %eax
// 1fe: 4c 8d 3c 00                   leaq    (%rax,%rax), %r15
// 202: 49 ff c7                      incq    %r15
// 205: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000207:  R_X86_64_64  .rodata.str1.1
// 20f: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000211:  R_X86_64_64  _Py_NegativeRefcount
// 219: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000021b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 223: eb 14                         jmp     0x239 <_JIT_ENTRY+0x239>
// 225: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 230: 49 ff cf                      decq    %r15
// 233: 49 83 ff 01                   cmpq    $0x1, %r15
// 237: 7e 44                         jle     0x27d <_JIT_ENTRY+0x27d>
// 239: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 23d: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// 241: 48 8b 03                      movq    (%rbx), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7e 07                         jle     0x250 <_JIT_ENTRY+0x250>
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 e3                         js      0x230 <_JIT_ENTRY+0x230>
// 24d: eb 15                         jmp     0x264 <_JIT_ENTRY+0x264>
// 24f: 90                            nop
// 250: 4c 89 f7                      movq    %r14, %rdi
// 253: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 258: 48 89 da                      movq    %rbx, %rdx
// 25b: ff d5                         callq   *%rbp
// 25d: 48 8b 03                      movq    (%rbx), %rax
// 260: 85 c0                         testl   %eax, %eax
// 262: 78 cc                         js      0x230 <_JIT_ENTRY+0x230>
// 264: 41 ff d5                      callq   *%r13
// 267: 48 ff 0b                      decq    (%rbx)
// 26a: 75 c4                         jne     0x230 <_JIT_ENTRY+0x230>
// 26c: 48 89 df                      movq    %rbx, %rdi
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_Dealloc
// 279: ff d0                         callq   *%rax
// 27b: eb b3                         jmp     0x230 <_JIT_ENTRY+0x230>
// 27d: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 282: 4d 85 c0                      testq   %r8, %r8
// 285: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 28a: 74 61                         je      0x2ed <_JIT_ENTRY+0x2ed>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_OPARG
// 296: 0f b7 c0                      movzwl  %ax, %eax
// 299: b9 01 00 00 00                movl    $0x1, %ecx
// 29e: ba 01 00 00 00                movl    $0x1, %edx
// 2a3: 29 c2                         subl    %eax, %edx
// 2a5: 48 63 d2                      movslq  %edx, %rdx
// 2a8: 89 c6                         movl    %eax, %esi
// 2aa: f7 de                         negl    %esi
// 2ac: 01 f6                         addl    %esi, %esi
// 2ae: 48 63 f6                      movslq  %esi, %rsi
// 2b1: 48 01 d6                      addq    %rdx, %rsi
// 2b4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2b9: 4c 89 04 f7                   movq    %r8, (%rdi,%rsi,8)
// 2bd: 01 c0                         addl    %eax, %eax
// 2bf: 29 c1                         subl    %eax, %ecx
// 2c1: 48 63 c1                      movslq  %ecx, %rax
// 2c4: 48 01 d0                      addq    %rdx, %rax
// 2c7: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_CONTINUE
// 2d5: 48 89 df                      movq    %rbx, %rdi
// 2d8: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 2dd: 48 83 c4 28                   addq    $0x28, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: ff e0                         jmpq    *%rax
// 2ed: 49 29 dc                      subq    %rbx, %r12
// 2f0: 49 83 c4 b8                   addq    $-0x48, %r12
// 2f4: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f8: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2fc: 31 c0                         xorl    %eax, %eax
// 2fe: 48 83 c4 28                   addq    $0x28, %rsp
// 302: 5b                            popq    %rbx
// 303: 41 5c                         popq    %r12
// 305: 41 5d                         popq    %r13
// 307: 41 5e                         popq    %r14
// 309: 41 5f                         popq    %r15
// 30b: 5d                            popq    %rbp
// 30c: c3                            retq
// 30d: 
static const unsigned char _BUILD_SETplus_BUILD_MAP_code_body[782] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0x84, 0x3c, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xfc, 0xe9, 0xca, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x74, 0x62, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x88, 0x88, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x72, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x5e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd9, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x2c, 0xcf, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xda, 0x48, 0x63, 0xd2, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x8d, 0x14, 0xcf, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x8c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x3c, 0x00, 0x49, 0xff, 0xc7, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x14, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x4c, 0x89, 0xf7, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x4d, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x61, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0x48, 0x63, 0xd2, 0x89, 0xc6, 0xf7, 0xde, 0x01, 0xf6, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xd6, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x04, 0xf7, 0x01, 0xc0, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd0, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BUILD_MAP_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BUILD_MAP_data_holes[1];

// _BUILD_SETplus_BUILD_SET
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BUILD_SET.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 ea 00 00 00             je      0x133 <_JIT_ENTRY+0x133>
// 49: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ec                      movq    %rbp, %r12
// 11d: e9 00 02 00 00                jmp     0x322 <_JIT_ENTRY+0x322>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 129: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12d: 0f 85 44 01 00 00             jne     0x277 <_JIT_ENTRY+0x277>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: 0f b7 c8                      movzwl  %ax, %ecx
// 140: 44 0f b7 f8                   movzwl  %ax, %r15d
// 144: 4a 8d 04 fd 00 00 00 00       leaq    (,%r15,8), %rax
// 14c: 48 f7 d8                      negq    %rax
// 14f: 4c 89 74 05 00                movq    %r14, (%rbp,%rax)
// 154: b8 01 00 00 00                movl    $0x1, %eax
// 159: 29 c8                         subl    %ecx, %eax
// 15b: 48 63 d8                      movslq  %eax, %rbx
// 15e: 31 ff                         xorl    %edi, %edi
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  PySet_New
// 16a: ff d0                         callq   *%rax
// 16c: 48 85 c0                      testq   %rax, %rax
// 16f: 0f 84 e5 00 00 00             je      0x25a <_JIT_ENTRY+0x25a>
// 175: 49 89 c6                      movq    %rax, %r14
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _JIT_OPARG
// 182: 66 85 c0                      testw   %ax, %ax
// 185: 0f 84 fd 00 00 00             je      0x288 <_JIT_ENTRY+0x288>
// 18b: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 190: 4c 29 fb                      subq    %r15, %rbx
// 193: 0f b7 c0                      movzwl  %ax, %eax
// 196: 83 f8 02                      cmpl    $0x2, %eax
// 199: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 19f: 44 0f 43 e8                   cmovael %eax, %r13d
// 1a3: 48 89 2c 24                   movq    %rbp, (%rsp)
// 1a7: 4c 8d 24 dd 00 00 00 00       leaq    (,%rbx,8), %r12
// 1af: 49 01 ec                      addq    %rbp, %r12
// 1b2: 31 db                         xorl    %ebx, %ebx
// 1b4: 31 ed                         xorl    %ebp, %ebp
// 1b6: eb 14                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 1b8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1c0: 48 ff c3                      incq    %rbx
// 1c3: 49 39 dd                      cmpq    %rbx, %r13
// 1c6: 0f 84 9e 00 00 00             je      0x26a <_JIT_ENTRY+0x26a>
// 1cc: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 1d0: 85 ed                         testl   %ebp, %ebp
// 1d2: 74 1c                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 1d4: 49 8b 07                      movq    (%r15), %rax
// 1d7: 48 85 c0                      testq   %rax, %rax
// 1da: 7e 30                         jle     0x20c <_JIT_ENTRY+0x20c>
// 1dc: 85 c0                         testl   %eax, %eax
// 1de: 78 e0                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 1e0: eb 4f                         jmp     0x231 <_JIT_ENTRY+0x231>
// 1e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 1f0: 4c 89 f7                      movq    %r14, %rdi
// 1f3: 4c 89 fe                      movq    %r15, %rsi
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  PySet_Add
// 200: ff d0                         callq   *%rax
// 202: 89 c5                         movl    %eax, %ebp
// 204: 49 8b 07                      movq    (%r15), %rax
// 207: 48 85 c0                      testq   %rax, %rax
// 20a: 7f d0                         jg      0x1dc <_JIT_ENTRY+0x1dc>
// 20c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020e:  R_X86_64_64  .rodata.str1.1
// 216: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 21b: 4c 89 fa                      movq    %r15, %rdx
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_NegativeRefcount
// 228: ff d0                         callq   *%rax
// 22a: 49 8b 07                      movq    (%r15), %rax
// 22d: 85 c0                         testl   %eax, %eax
// 22f: 78 8f                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23b: ff d0                         callq   *%rax
// 23d: 49 ff 0f                      decq    (%r15)
// 240: 0f 85 7a ff ff ff             jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 246: 4c 89 ff                      movq    %r15, %rdi
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: ff d0                         callq   *%rax
// 255: e9 66 ff ff ff                jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 25a: 4c 8d 24 dd 00 00 00 00       leaq    (,%rbx,8), %r12
// 262: 49 01 ec                      addq    %rbp, %r12
// 265: e9 b8 00 00 00                jmp     0x322 <_JIT_ENTRY+0x322>
// 26a: 85 ed                         testl   %ebp, %ebp
// 26c: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 271: 48 8b 2c 24                   movq    (%rsp), %rbp
// 275: 74 11                         je      0x288 <_JIT_ENTRY+0x288>
// 277: 49 8b 06                      movq    (%r14), %rax
// 27a: 48 85 c0                      testq   %rax, %rax
// 27d: 7e 5e                         jle     0x2dd <_JIT_ENTRY+0x2dd>
// 27f: 85 c0                         testl   %eax, %eax
// 281: 79 7f                         jns     0x302 <_JIT_ENTRY+0x302>
// 283: e9 9a 00 00 00                jmp     0x322 <_JIT_ENTRY+0x322>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _JIT_OPARG
// 292: 0f b7 c8                      movzwl  %ax, %ecx
// 295: ba 01 00 00 00                movl    $0x1, %edx
// 29a: 29 ca                         subl    %ecx, %edx
// 29c: 48 63 ca                      movslq  %edx, %rcx
// 29f: 0f b7 c0                      movzwl  %ax, %eax
// 2a2: 48 89 ca                      movq    %rcx, %rdx
// 2a5: 48 29 c2                      subq    %rax, %rdx
// 2a8: 4c 89 74 d5 00                movq    %r14, (%rbp,%rdx,8)
// 2ad: 48 01 c9                      addq    %rcx, %rcx
// 2b0: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 2b8: 48 01 ee                      addq    %rbp, %rsi
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _JIT_CONTINUE
// 2c5: 4c 89 ef                      movq    %r13, %rdi
// 2c8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2cd: 48 83 c4 18                   addq    $0x18, %rsp
// 2d1: 5b                            popq    %rbx
// 2d2: 41 5c                         popq    %r12
// 2d4: 41 5d                         popq    %r13
// 2d6: 41 5e                         popq    %r14
// 2d8: 41 5f                         popq    %r15
// 2da: 5d                            popq    %rbp
// 2db: ff e0                         jmpq    *%rax
// 2dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002df:  R_X86_64_64  .rodata.str1.1
// 2e7: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 2ec: 4c 89 f2                      movq    %r14, %rdx
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_NegativeRefcount
// 2f9: ff d0                         callq   *%rax
// 2fb: 49 8b 06                      movq    (%r14), %rax
// 2fe: 85 c0                         testl   %eax, %eax
// 300: 78 20                         js      0x322 <_JIT_ENTRY+0x322>
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30c: ff d0                         callq   *%rax
// 30e: 49 ff 0e                      decq    (%r14)
// 311: 75 0f                         jne     0x322 <_JIT_ENTRY+0x322>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_Dealloc
// 31d: 4c 89 f7                      movq    %r14, %rdi
// 320: ff d0                         callq   *%rax
// 322: 4d 29 ec                      subq    %r13, %r12
// 325: 49 83 c4 b8                   addq    $-0x48, %r12
// 329: 49 c1 ec 03                   shrq    $0x3, %r12
// 32d: 45 89 65 40                   movl    %r12d, 0x40(%r13)
// 331: 31 c0                         xorl    %eax, %eax
// 333: 48 83 c4 18                   addq    $0x18, %rsp
// 337: 5b                            popq    %rbx
// 338: 41 5c                         popq    %r12
// 33a: 41 5d                         popq    %r13
// 33c: 41 5e                         popq    %r14
// 33e: 41 5f                         popq    %r15
// 340: 5d                            popq    %rbp
// 341: c3                            retq
// 342: 
static const unsigned char _BUILD_SETplus_BUILD_SET_code_body[835] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xe9, 0x00, 0x02, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x0f, 0x85, 0x44, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x44, 0x0f, 0xb7, 0xf8, 0x4a, 0x8d, 0x04, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x31, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0xfd, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x29, 0xfb, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x48, 0x89, 0x2c, 0x24, 0x4c, 0x8d, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4c, 0x8d, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0xe9, 0xb8, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x11, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x5e, 0x85, 0xc0, 0x79, 0x7f, 0xe9, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xca, 0x48, 0x29, 0xc2, 0x4c, 0x89, 0x74, 0xd5, 0x00, 0x48, 0x01, 0xc9, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x65, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BUILD_SET_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BUILD_SET_data_holes[1];

// _BUILD_SETplus_BUILD_SLICE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BUILD_SLICE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 0f b7 c0                      movzwl  %ax, %eax
// 43: 48 c1 e0 03                   shlq    $0x3, %rax
// 47: 49 89 ef                      movq    %rbp, %r15
// 4a: 49 29 c7                      subq    %rax, %r15
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 66 85 c0                      testw   %ax, %ax
// 5a: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 5f: 0f 84 27 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 65: 48 89 1c 24                   movq    %rbx, (%rsp)
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 3f 02 00 00                jmp     0x361 <_JIT_ENTRY+0x361>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 1c 24                   movq    (%rsp), %rbx
// 128: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 ff 01 00 00             js      0x361 <_JIT_ENTRY+0x361>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 e9 01 00 00             jne     0x361 <_JIT_ENTRY+0x361>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 d5 01 00 00                jmp     0x361 <_JIT_ENTRY+0x361>
// 18c: 4d 89 27                      movq    %r12, (%r15)
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _JIT_OPARG
// 199: 66 83 f8 03                   cmpw    $0x3, %ax
// 19d: 75 20                         jne     0x1bf <_JIT_ENTRY+0x1bf>
// 19f: 0f b7 c8                      movzwl  %ax, %ecx
// 1a2: ba 01 00 00 00                movl    $0x1, %edx
// 1a7: 29 ca                         subl    %ecx, %edx
// 1a9: 48 63 ca                      movslq  %edx, %rcx
// 1ac: 31 d2                         xorl    %edx, %edx
// 1ae: 66 83 f8 03                   cmpw    $0x3, %ax
// 1b2: 0f 94 c2                      sete    %dl
// 1b5: 48 29 d1                      subq    %rdx, %rcx
// 1b8: 4c 8b 64 cd 00                movq    (%rbp,%rcx,8), %r12
// 1bd: eb 03                         jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 1bf: 45 31 e4                      xorl    %r12d, %r12d
// 1c2: 0f b7 c8                      movzwl  %ax, %ecx
// 1c5: ba 01 00 00 00                movl    $0x1, %edx
// 1ca: 29 ca                         subl    %ecx, %edx
// 1cc: 48 63 ca                      movslq  %edx, %rcx
// 1cf: 31 d2                         xorl    %edx, %edx
// 1d1: 66 83 f8 03                   cmpw    $0x3, %ax
// 1d5: 0f 94 c2                      sete    %dl
// 1d8: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1dd: 29 d0                         subl    %edx, %eax
// 1df: f7 d2                         notl    %edx
// 1e1: 4c 63 ea                      movslq  %edx, %r13
// 1e4: 49 01 cd                      addq    %rcx, %r13
// 1e7: 48 89 ea                      movq    %rbp, %rdx
// 1ea: 4a 8b 6c ed 00                movq    (%rbp,%r13,8), %rbp
// 1ef: 4c 63 f8                      movslq  %eax, %r15
// 1f2: 49 01 cf                      addq    %rcx, %r15
// 1f5: 4e 8b 34 fa                   movq    (%rdx,%r15,8), %r14
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  PySlice_New
// 203: 4c 89 f7                      movq    %r14, %rdi
// 206: 48 89 ee                      movq    %rbp, %rsi
// 209: 4c 89 e2                      movq    %r12, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 48 89 04 24                   movq    %rax, (%rsp)
// 212: 49 8b 06                      movq    (%r14), %rax
// 215: 48 85 c0                      testq   %rax, %rax
// 218: 7e 06                         jle     0x220 <_JIT_ENTRY+0x220>
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 79 27                         jns     0x245 <_JIT_ENTRY+0x245>
// 21e: eb 36                         jmp     0x256 <_JIT_ENTRY+0x256>
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_NegativeRefcount
// 234: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 239: 4c 89 f2                      movq    %r14, %rdx
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 06                      movq    (%r14), %rax
// 241: 85 c0                         testl   %eax, %eax
// 243: 78 11                         js      0x256 <_JIT_ENTRY+0x256>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24f: ff d0                         callq   *%rax
// 251: 49 ff 0e                      decq    (%r14)
// 254: 74 0f                         je      0x265 <_JIT_ENTRY+0x265>
// 256: 48 8b 45 00                   movq    (%rbp), %rax
// 25a: 48 85 c0                      testq   %rax, %rax
// 25d: 7e 1e                         jle     0x27d <_JIT_ENTRY+0x27d>
// 25f: 85 c0                         testl   %eax, %eax
// 261: 79 40                         jns     0x2a3 <_JIT_ENTRY+0x2a3>
// 263: eb 5f                         jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_Dealloc
// 26f: 4c 89 f7                      movq    %r14, %rdi
// 272: ff d0                         callq   *%rax
// 274: 48 8b 45 00                   movq    (%rbp), %rax
// 278: 48 85 c0                      testq   %rax, %rax
// 27b: 7f e2                         jg      0x25f <_JIT_ENTRY+0x25f>
// 27d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027f:  R_X86_64_64  .rodata.str1.1
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_NegativeRefcount
// 291: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 296: 48 89 ea                      movq    %rbp, %rdx
// 299: ff d0                         callq   *%rax
// 29b: 48 8b 45 00                   movq    (%rbp), %rax
// 29f: 85 c0                         testl   %eax, %eax
// 2a1: 78 21                         js      0x2c4 <_JIT_ENTRY+0x2c4>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ad: ff d0                         callq   *%rax
// 2af: 48 ff 4d 00                   decq    (%rbp)
// 2b3: 75 0f                         jne     0x2c4 <_JIT_ENTRY+0x2c4>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_Dealloc
// 2bf: 48 89 ef                      movq    %rbp, %rdi
// 2c2: ff d0                         callq   *%rax
// 2c4: 4d 85 e4                      testq   %r12, %r12
// 2c7: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2cc: 74 41                         je      0x30f <_JIT_ENTRY+0x30f>
// 2ce: 49 8b 04 24                   movq    (%r12), %rax
// 2d2: 48 85 c0                      testq   %rax, %rax
// 2d5: 7f 22                         jg      0x2f9 <_JIT_ENTRY+0x2f9>
// 2d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d9:  R_X86_64_64  .rodata.str1.1+0x39
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_NegativeRefcount
// 2eb: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 2f0: 4c 89 e2                      movq    %r12, %rdx
// 2f3: ff d0                         callq   *%rax
// 2f5: 49 8b 04 24                   movq    (%r12), %rax
// 2f9: 85 c0                         testl   %eax, %eax
// 2fb: 78 12                         js      0x30f <_JIT_ENTRY+0x30f>
// 2fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 307: ff d0                         callq   *%rax
// 309: 49 ff 0c 24                   decq    (%r12)
// 30d: 74 36                         je      0x345 <_JIT_ENTRY+0x345>
// 30f: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 313: 48 8b 04 24                   movq    (%rsp), %rax
// 317: 48 85 c0                      testq   %rax, %rax
// 31a: 74 45                         je      0x361 <_JIT_ENTRY+0x361>
// 31c: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 320: 49 89 07                      movq    %rax, (%r15)
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _JIT_CONTINUE
// 32d: 48 89 df                      movq    %rbx, %rdi
// 330: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 335: 48 83 c4 18                   addq    $0x18, %rsp
// 339: 5b                            popq    %rbx
// 33a: 41 5c                         popq    %r12
// 33c: 41 5d                         popq    %r13
// 33e: 41 5e                         popq    %r14
// 340: 41 5f                         popq    %r15
// 342: 5d                            popq    %rbp
// 343: ff e0                         jmpq    *%rax
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_Dealloc
// 34f: 4c 89 e7                      movq    %r12, %rdi
// 352: ff d0                         callq   *%rax
// 354: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 358: 48 8b 04 24                   movq    (%rsp), %rax
// 35c: 48 85 c0                      testq   %rax, %rax
// 35f: 75 bb                         jne     0x31c <_JIT_ENTRY+0x31c>
// 361: 49 29 df                      subq    %rbx, %r15
// 364: 49 83 c7 b8                   addq    $-0x48, %r15
// 368: 49 c1 ef 03                   shrq    $0x3, %r15
// 36c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 370: 31 c0                         xorl    %eax, %eax
// 372: 48 83 c4 18                   addq    $0x18, %rsp
// 376: 5b                            popq    %rbx
// 377: 41 5c                         popq    %r12
// 379: 41 5d                         popq    %r13
// 37b: 41 5e                         popq    %r14
// 37d: 41 5f                         popq    %r15
// 37f: 5d                            popq    %rbp
// 380: c3                            retq
// 381: 
static const unsigned char _BUILD_SETplus_BUILD_SLICE_code_body[898] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x3f, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xff, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xe9, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xd5, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x20, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0x48, 0x29, 0xd1, 0x4c, 0x8b, 0x64, 0xcd, 0x00, 0xeb, 0x03, 0x45, 0x31, 0xe4, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x49, 0x01, 0xcd, 0x48, 0x89, 0xea, 0x4a, 0x8b, 0x6c, 0xed, 0x00, 0x4c, 0x63, 0xf8, 0x49, 0x01, 0xcf, 0x4e, 0x8b, 0x34, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x74, 0x41, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x36, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x4b, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x75, 0xbb, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BUILD_SLICE_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BUILD_SLICE_data_holes[1];

// _BUILD_SETplus_BUILD_STRING
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BUILD_STRING.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 36: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _JIT_OPARG
// 45: 66 85 c0                      testw   %ax, %ax
// 48: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 4d: 0f 84 3c 01 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// 53: 0f b7 c0                      movzwl  %ax, %eax
// 56: 48 c1 e0 03                   shlq    $0x3, %rax
// 5a: 4d 89 fc                      movq    %r15, %r12
// 5d: 49 29 c4                      subq    %rax, %r12
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: bd 01 00 00 00                movl    $0x1, %ebp
// 75: 0f 43 e8                      cmovael %eax, %ebp
// 78: 45 31 ff                      xorl    %r15d, %r15d
// 7b: 45 31 f6                      xorl    %r14d, %r14d
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 fc                      movq    %r15, %r12
// 11e: e9 ab 01 00 00                jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 74 62                         je      0x18f <_JIT_ENTRY+0x18f>
// 12d: 49 8b 45 00                   movq    (%r13), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7f 22                         jg      0x158 <_JIT_ENTRY+0x158>
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 145: 4c 89 ea                      movq    %r13, %rdx
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_NegativeRefcount
// 152: ff d0                         callq   *%rax
// 154: 49 8b 45 00                   movq    (%r13), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 15f: 0f 88 69 01 00 00             js      0x2ce <_JIT_ENTRY+0x2ce>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 4d 00                   decq    (%r13)
// 175: 0f 85 53 01 00 00             jne     0x2ce <_JIT_ENTRY+0x2ce>
// 17b: 4c 89 ef                      movq    %r13, %rdi
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_Dealloc
// 188: ff d0                         callq   *%rax
// 18a: e9 3f 01 00 00                jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _JIT_OPARG
// 199: 0f b7 d8                      movzwl  %ax, %ebx
// 19c: 0f b7 d0                      movzwl  %ax, %edx
// 19f: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 1a7: 48 f7 d8                      negq    %rax
// 1aa: 4d 89 2c 07                   movq    %r13, (%r15,%rax)
// 1ae: b8 01 00 00 00                movl    $0x1, %eax
// 1b3: 29 d8                         subl    %ebx, %eax
// 1b5: 48 98                         cltq
// 1b7: 48 29 d0                      subq    %rdx, %rax
// 1ba: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _PyUnicode_JoinArray
// 1c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ca:  R_X86_64_64  _PyRuntime
// 1d2: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 1d9: 4c 89 e6                      movq    %r12, %rsi
// 1dc: ff d0                         callq   *%rax
// 1de: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 1e3: 85 db                         testl   %ebx, %ebx
// 1e5: 0f 8e 82 00 00 00             jle     0x26d <_JIT_ENTRY+0x26d>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_OPARG
// 1f5: 44 0f b7 f8                   movzwl  %ax, %r15d
// 1f9: 49 ff c7                      incq    %r15
// 1fc: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000212:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21a: eb 0d                         jmp     0x229 <_JIT_ENTRY+0x229>
// 21c: 0f 1f 40 00                   nopl    (%rax)
// 220: 49 ff cf                      decq    %r15
// 223: 49 83 ff 01                   cmpq    $0x1, %r15
// 227: 7e 44                         jle     0x26d <_JIT_ENTRY+0x26d>
// 229: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 22d: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// 231: 48 8b 03                      movq    (%rbx), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 7e 07                         jle     0x240 <_JIT_ENTRY+0x240>
// 239: 85 c0                         testl   %eax, %eax
// 23b: 78 e3                         js      0x220 <_JIT_ENTRY+0x220>
// 23d: eb 15                         jmp     0x254 <_JIT_ENTRY+0x254>
// 23f: 90                            nop
// 240: 4c 89 f7                      movq    %r14, %rdi
// 243: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 248: 48 89 da                      movq    %rbx, %rdx
// 24b: ff d5                         callq   *%rbp
// 24d: 48 8b 03                      movq    (%rbx), %rax
// 250: 85 c0                         testl   %eax, %eax
// 252: 78 cc                         js      0x220 <_JIT_ENTRY+0x220>
// 254: 41 ff d5                      callq   *%r13
// 257: 48 ff 0b                      decq    (%rbx)
// 25a: 75 c4                         jne     0x220 <_JIT_ENTRY+0x220>
// 25c: 48 89 df                      movq    %rbx, %rdi
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_Dealloc
// 269: ff d0                         callq   *%rax
// 26b: eb b3                         jmp     0x220 <_JIT_ENTRY+0x220>
// 26d: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 272: 48 85 f6                      testq   %rsi, %rsi
// 275: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 27a: 74 52                         je      0x2ce <_JIT_ENTRY+0x2ce>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _JIT_OPARG
// 286: 0f b7 c8                      movzwl  %ax, %ecx
// 289: ba 01 00 00 00                movl    $0x1, %edx
// 28e: 29 ca                         subl    %ecx, %edx
// 290: 48 63 ca                      movslq  %edx, %rcx
// 293: 0f b7 c0                      movzwl  %ax, %eax
// 296: 48 89 ca                      movq    %rcx, %rdx
// 299: 48 29 c2                      subq    %rax, %rdx
// 29c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2a1: 48 89 34 d0                   movq    %rsi, (%rax,%rdx,8)
// 2a5: 48 01 c9                      addq    %rcx, %rcx
// 2a8: 48 8d 34 c8                   leaq    (%rax,%rcx,8), %rsi
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _JIT_CONTINUE
// 2b6: 48 89 df                      movq    %rbx, %rdi
// 2b9: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 2be: 48 83 c4 28                   addq    $0x28, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: ff e0                         jmpq    *%rax
// 2ce: 49 29 dc                      subq    %rbx, %r12
// 2d1: 49 83 c4 b8                   addq    $-0x48, %r12
// 2d5: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d9: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2dd: 31 c0                         xorl    %eax, %eax
// 2df: 48 83 c4 28                   addq    $0x28, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: c3                            retq
// 2ee: 
static const unsigned char _BUILD_SETplus_BUILD_STRING_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0x84, 0x3c, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xfc, 0xe9, 0xab, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x74, 0x62, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x88, 0x69, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x53, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x3f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x0f, 0xb7, 0xd0, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x2c, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd8, 0x48, 0x98, 0x48, 0x29, 0xd0, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x85, 0xdb, 0x0f, 0x8e, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0d, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x4c, 0x89, 0xf7, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xca, 0x48, 0x29, 0xc2, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x34, 0xd0, 0x48, 0x01, 0xc9, 0x48, 0x8d, 0x34, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BUILD_STRING_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BUILD_STRING_data_holes[1];

// _BUILD_SETplus_BUILD_TUPLE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_BUILD_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 ec                      movq    %rbp, %r12
// 11e: e9 0e 01 00 00                jmp     0x231 <_JIT_ENTRY+0x231>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 12b: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 130: 48 8b 2c 24                   movq    (%rsp), %rbp
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 45 00                   movq    (%r13), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 c8 00 00 00             js      0x231 <_JIT_ENTRY+0x231>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 4d 00                   decq    (%r13)
// 179: 0f 85 b2 00 00 00             jne     0x231 <_JIT_ENTRY+0x231>
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 9e 00 00 00                jmp     0x231 <_JIT_ENTRY+0x231>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 f0                      movzwl  %ax, %esi
// 1a3: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4c 89 6c 05 00                movq    %r13, (%rbp,%rax)
// 1b3: bb 01 00 00 00                movl    $0x1, %ebx
// 1b8: b8 01 00 00 00                movl    $0x1, %eax
// 1bd: 29 c8                         subl    %ecx, %eax
// 1bf: 48 98                         cltq
// 1c1: 48 29 f0                      subq    %rsi, %rax
// 1c4: 4c 8d 24 c5 00 00 00 00       leaq    (,%rax,8), %r12
// 1cc: 49 01 ec                      addq    %rbp, %r12
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _PyTuple_FromArraySteal
// 1d9: 4c 89 e7                      movq    %r12, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 74 4e                         je      0x231 <_JIT_ENTRY+0x231>
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_OPARG
// 1ed: 0f b7 d1                      movzwl  %cx, %edx
// 1f0: 29 d3                         subl    %edx, %ebx
// 1f2: 48 63 d3                      movslq  %ebx, %rdx
// 1f5: 0f b7 c9                      movzwl  %cx, %ecx
// 1f8: 48 89 d6                      movq    %rdx, %rsi
// 1fb: 48 29 ce                      subq    %rcx, %rsi
// 1fe: 48 89 44 f5 00                movq    %rax, (%rbp,%rsi,8)
// 203: 48 01 d2                      addq    %rdx, %rdx
// 206: 48 8d 34 d5 00 00 00 00       leaq    (,%rdx,8), %rsi
// 20e: 48 01 ee                      addq    %rbp, %rsi
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_CONTINUE
// 21b: 4c 89 f7                      movq    %r14, %rdi
// 21e: 4c 89 fa                      movq    %r15, %rdx
// 221: 48 83 c4 18                   addq    $0x18, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 4d 29 f4                      subq    %r14, %r12
// 234: 49 83 c4 b8                   addq    $-0x48, %r12
// 238: 49 c1 ec 03                   shrq    $0x3, %r12
// 23c: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 240: 31 c0                         xorl    %eax, %eax
// 242: 48 83 c4 18                   addq    $0x18, %rsp
// 246: 5b                            popq    %rbx
// 247: 41 5c                         popq    %r12
// 249: 41 5d                         popq    %r13
// 24b: 41 5e                         popq    %r14
// 24d: 41 5f                         popq    %r15
// 24f: 5d                            popq    %rbp
// 250: c3                            retq
// 251: 
static const unsigned char _BUILD_SETplus_BUILD_TUPLE_code_body[594] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xe9, 0x0e, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xc8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x6c, 0x05, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4c, 0x8d, 0x24, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd3, 0x48, 0x63, 0xd3, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xd6, 0x48, 0x29, 0xce, 0x48, 0x89, 0x44, 0xf5, 0x00, 0x48, 0x01, 0xd2, 0x48, 0x8d, 0x34, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_BUILD_TUPLE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_BUILD_TUPLE_data_holes[1];

// _BUILD_SETplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_BUILTIN_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 e1 01 00 00                jmp     0x303 <_JIT_ENTRY+0x303>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 a1 01 00 00             js      0x303 <_JIT_ENTRY+0x303>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 8b 01 00 00             jne     0x303 <_JIT_ENTRY+0x303>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 77 01 00 00                jmp     0x303 <_JIT_ENTRY+0x303>
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c1                      movzwl  %cx, %eax
// 199: 48 89 c2                      movq    %rax, %rdx
// 19c: 48 f7 da                      negq    %rdx
// 19f: 0f b7 f1                      movzwl  %cx, %esi
// 1a2: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1aa: 48 f7 d9                      negq    %rcx
// 1ad: 4d 89 64 0d 00                movq    %r12, (%r13,%rcx)
// 1b2: b9 01 00 00 00                movl    $0x1, %ecx
// 1b7: 29 f1                         subl    %esi, %ecx
// 1b9: 4c 63 c1                      movslq  %ecx, %r8
// 1bc: 4a 8d 0c c5 00 00 00 00       leaq    (,%r8,8), %rcx
// 1c4: 4c 01 e9                      addq    %r13, %rcx
// 1c7: 89 f7                         movl    %esi, %edi
// 1c9: f7 d7                         notl    %edi
// 1cb: 4c 63 d7                      movslq  %edi, %r10
// 1ce: 4d 01 c2                      addq    %r8, %r10
// 1d1: 4b 8b 7c d5 00                movq    (%r13,%r10,8), %rdi
// 1d6: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 1dc: 41 29 f1                      subl    %esi, %r9d
// 1df: 4d 63 f9                      movslq  %r9d, %r15
// 1e2: 4d 01 c7                      addq    %r8, %r15
// 1e5: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// 1e9: 48 85 ff                      testq   %rdi, %rdi
// 1ec: 48 f7 d0                      notq    %rax
// 1ef: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1f3: 44 0f 44 f6                   cmovel  %esi, %r14d
// 1f7: 4f 8b 64 fd 00                movq    (%r13,%r15,8), %r12
// 1fc: 49 8b 54 24 08                movq    0x8(%r12), %rdx
// 201: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 208: 0f 84 08 01 00 00             je      0x316 <_JIT_ENTRY+0x316>
// 20e: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 216: 4d 85 c0                      testq   %r8, %r8
// 219: 0f 84 f7 00 00 00             je      0x316 <_JIT_ENTRY+0x316>
// 21f: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 224: 4c 89 2c 24                   movq    %r13, (%rsp)
// 228: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 22d: 48 8d 2c c1                   leaq    (%rcx,%rax,8), %rbp
// 231: 48 85 ff                      testq   %rdi, %rdi
// 234: 0f 94 c3                      sete    %bl
// 237: 44 89 f2                      movl    %r14d, %edx
// 23a: 4c 89 e7                      movq    %r12, %rdi
// 23d: 48 89 ee                      movq    %rbp, %rsi
// 240: 31 c9                         xorl    %ecx, %ecx
// 242: 41 ff d0                      callq   *%r8
// 245: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _JIT_OPARG
// 254: 66 85 c0                      testw   %ax, %ax
// 257: 0f 94 c0                      sete    %al
// 25a: 84 c3                         testb   %al, %bl
// 25c: 0f 84 ea 00 00 00             je      0x34c <_JIT_ENTRY+0x34c>
// 262: 49 8b 04 24                   movq    (%r12), %rax
// 266: 48 85 c0                      testq   %rax, %rax
// 269: 7f 22                         jg      0x28d <_JIT_ENTRY+0x28d>
// 26b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026d:  R_X86_64_64  .rodata.str1.1
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_NegativeRefcount
// 27f: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 284: 4c 89 e2                      movq    %r12, %rdx
// 287: ff d0                         callq   *%rax
// 289: 49 8b 04 24                   movq    (%r12), %rax
// 28d: 85 c0                         testl   %eax, %eax
// 28f: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 294: 4c 8b 34 24                   movq    (%rsp), %r14
// 298: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 29d: 78 21                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 ff 0c 24                   decq    (%r12)
// 2af: 75 0f                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 4c 89 e7                      movq    %r12, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 2c4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2c9: 48 85 c0                      testq   %rax, %rax
// 2cc: 74 35                         je      0x303 <_JIT_ENTRY+0x303>
// 2ce: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2d2: 49 89 07                      movq    %rax, (%r15)
// 2d5: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2da: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2de: 48 8b 00                      movq    (%rax), %rax
// 2e1: 84 c0                         testb   %al, %al
// 2e3: 0f 84 de 00 00 00             je      0x3c7 <_JIT_ENTRY+0x3c7>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_HandlePending
// 2f3: 4c 89 ff                      movq    %r15, %rdi
// 2f6: ff d0                         callq   *%rax
// 2f8: 85 c0                         testl   %eax, %eax
// 2fa: 0f 84 c7 00 00 00             je      0x3c7 <_JIT_ENTRY+0x3c7>
// 300: 4d 89 f7                      movq    %r14, %r15
// 303: 49 29 df                      subq    %rbx, %r15
// 306: 49 83 c7 b8                   addq    $-0x48, %r15
// 30a: 49 c1 ef 03                   shrq    $0x3, %r15
// 30e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 312: 31 c0                         xorl    %eax, %eax
// 314: eb 27                         jmp     0x33d <_JIT_ENTRY+0x33d>
// 316: 48 29 d9                      subq    %rbx, %rcx
// 319: 48 83 c1 b8                   addq    $-0x48, %rcx
// 31d: 48 c1 e9 03                   shrq    $0x3, %rcx
// 321: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 324: 48 8b 03                      movq    (%rbx), %rax
// 327: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000329:  R_X86_64_64  _JIT_TARGET
// 331: 89 c9                         movl    %ecx, %ecx
// 333: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 337: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 33d: 48 83 c4 28                   addq    $0x28, %rsp
// 341: 5b                            popq    %rbx
// 342: 41 5c                         popq    %r12
// 344: 41 5d                         popq    %r13
// 346: 41 5e                         popq    %r14
// 348: 41 5f                         popq    %r15
// 34a: 5d                            popq    %rbp
// 34b: c3                            retq
// 34c: 41 83 fe 02                   cmpl    $0x2, %r14d
// 350: bb 01 00 00 00                movl    $0x1, %ebx
// 355: 41 0f 43 de                   cmovael %r14d, %ebx
// 359: 45 31 ed                      xorl    %r13d, %r13d
// 35c: eb 0e                         jmp     0x36c <_JIT_ENTRY+0x36c>
// 35e: 66 90                         nop
// 360: 49 ff c5                      incq    %r13
// 363: 4c 39 eb                      cmpq    %r13, %rbx
// 366: 0f 84 f6 fe ff ff             je      0x262 <_JIT_ENTRY+0x262>
// 36c: 4e 8b 74 ed 00                movq    (%rbp,%r13,8), %r14
// 371: 49 8b 06                      movq    (%r14), %rax
// 374: 48 85 c0                      testq   %rax, %rax
// 377: 7e 07                         jle     0x380 <_JIT_ENTRY+0x380>
// 379: 85 c0                         testl   %eax, %eax
// 37b: 78 e3                         js      0x360 <_JIT_ENTRY+0x360>
// 37d: eb 26                         jmp     0x3a5 <_JIT_ENTRY+0x3a5>
// 37f: 90                            nop
// 380: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000382:  R_X86_64_64  .rodata.str1.1
// 38a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 38f: 4c 89 f2                      movq    %r14, %rdx
// 392: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000394:  R_X86_64_64  _Py_NegativeRefcount
// 39c: ff d0                         callq   *%rax
// 39e: 49 8b 06                      movq    (%r14), %rax
// 3a1: 85 c0                         testl   %eax, %eax
// 3a3: 78 bb                         js      0x360 <_JIT_ENTRY+0x360>
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3af: ff d0                         callq   *%rax
// 3b1: 49 ff 0e                      decq    (%r14)
// 3b4: 75 aa                         jne     0x360 <_JIT_ENTRY+0x360>
// 3b6: 4c 89 f7                      movq    %r14, %rdi
// 3b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bb:  R_X86_64_64  _Py_Dealloc
// 3c3: ff d0                         callq   *%rax
// 3c5: eb 99                         jmp     0x360 <_JIT_ENTRY+0x360>
// 3c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c9:  R_X86_64_64  _JIT_CONTINUE
// 3d1: 48 89 df                      movq    %rbx, %rdi
// 3d4: 4c 89 f6                      movq    %r14, %rsi
// 3d7: 4c 89 fa                      movq    %r15, %rdx
// 3da: 48 83 c4 28                   addq    $0x28, %rsp
// 3de: 5b                            popq    %rbx
// 3df: 41 5c                         popq    %r12
// 3e1: 41 5d                         popq    %r13
// 3e3: 41 5e                         popq    %r14
// 3e5: 41 5f                         popq    %r15
// 3e7: 5d                            popq    %rbp
// 3e8: ff e0                         jmpq    *%rax
// 3ea: 
static const unsigned char _BUILD_SETplus_CALL_BUILTIN_CLASS_code_body[1003] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0xe1, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xa1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x8b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x77, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x0f, 0xb7, 0xf1, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4d, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf1, 0x4c, 0x63, 0xc1, 0x4a, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe9, 0x89, 0xf7, 0xf7, 0xd7, 0x4c, 0x63, 0xd7, 0x4d, 0x01, 0xc2, 0x4b, 0x8b, 0x7c, 0xd5, 0x00, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf1, 0x4d, 0x63, 0xf9, 0x4d, 0x01, 0xc7, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x44, 0x0f, 0x44, 0xf6, 0x4f, 0x8b, 0x64, 0xfd, 0x00, 0x49, 0x8b, 0x54, 0x24, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x2c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x8d, 0x2c, 0xc1, 0x48, 0x85, 0xff, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x35, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0x27, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xed, 0xeb, 0x0e, 0x66, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xeb, 0x0f, 0x84, 0xf6, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xed, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_BUILTIN_CLASS_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x394, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_BUILTIN_CLASS_data_holes[1];

// _BUILD_SETplus_CALL_BUILTIN_FAST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_BUILTIN_FAST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 e4 01 00 00                jmp     0x306 <_JIT_ENTRY+0x306>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 129: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 a4 01 00 00             js      0x306 <_JIT_ENTRY+0x306>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 8e 01 00 00             jne     0x306 <_JIT_ENTRY+0x306>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 7a 01 00 00                jmp     0x306 <_JIT_ENTRY+0x306>
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c1                      movzwl  %cx, %eax
// 199: 48 89 c2                      movq    %rax, %rdx
// 19c: 48 f7 da                      negq    %rdx
// 19f: 0f b7 f1                      movzwl  %cx, %esi
// 1a2: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1aa: 48 f7 d9                      negq    %rcx
// 1ad: 4c 89 64 0d 00                movq    %r12, (%rbp,%rcx)
// 1b2: b9 01 00 00 00                movl    $0x1, %ecx
// 1b7: 29 f1                         subl    %esi, %ecx
// 1b9: 4c 63 c1                      movslq  %ecx, %r8
// 1bc: 4a 8d 0c c5 00 00 00 00       leaq    (,%r8,8), %rcx
// 1c4: 48 01 e9                      addq    %rbp, %rcx
// 1c7: 89 f7                         movl    %esi, %edi
// 1c9: f7 d7                         notl    %edi
// 1cb: 4c 63 ef                      movslq  %edi, %r13
// 1ce: 4d 01 c5                      addq    %r8, %r13
// 1d1: 4a 8b 7c ed 00                movq    (%rbp,%r13,8), %rdi
// 1d6: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 1dc: 41 29 f1                      subl    %esi, %r9d
// 1df: 4d 63 f9                      movslq  %r9d, %r15
// 1e2: 4d 01 c7                      addq    %r8, %r15
// 1e5: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// 1e9: 48 85 ff                      testq   %rdi, %rdi
// 1ec: 48 f7 d0                      notq    %rax
// 1ef: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1f3: 44 0f 44 f6                   cmovel  %esi, %r14d
// 1f7: 4a 8b 74 fd 00                movq    (%rbp,%r15,8), %rsi
// 1fc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fe:  R_X86_64_64  PyCFunction_Type
// 206: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 20a: 0f 85 09 01 00 00             jne     0x319 <_JIT_ENTRY+0x319>
// 210: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 214: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 21c: 0f 85 f7 00 00 00             jne     0x319 <_JIT_ENTRY+0x319>
// 222: 48 89 2c 24                   movq    %rbp, (%rsp)
// 226: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 22b: 48 8d 2c c1                   leaq    (%rcx,%rax,8), %rbp
// 22f: 48 85 ff                      testq   %rdi, %rdi
// 232: 0f 94 c3                      sete    %bl
// 235: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 23a: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 23e: 44 89 f2                      movl    %r14d, %edx
// 241: 48 89 ee                      movq    %rbp, %rsi
// 244: 41 ff 50 08                   callq   *0x8(%r8)
// 248: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _JIT_OPARG
// 257: 66 85 c0                      testw   %ax, %ax
// 25a: 0f 94 c0                      sete    %al
// 25d: 84 c3                         testb   %al, %bl
// 25f: 0f 84 ea 00 00 00             je      0x34f <_JIT_ENTRY+0x34f>
// 265: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 26a: 49 8b 04 24                   movq    (%r12), %rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 7f 22                         jg      0x295 <_JIT_ENTRY+0x295>
// 273: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000275:  R_X86_64_64  .rodata.str1.1
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_NegativeRefcount
// 287: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 28c: 4c 89 e2                      movq    %r12, %rdx
// 28f: ff d0                         callq   *%rax
// 291: 49 8b 04 24                   movq    (%r12), %rax
// 295: 85 c0                         testl   %eax, %eax
// 297: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 29c: 4c 8b 34 24                   movq    (%rsp), %r14
// 2a0: 78 21                         js      0x2c3 <_JIT_ENTRY+0x2c3>
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 ff 0c 24                   decq    (%r12)
// 2b2: 75 0f                         jne     0x2c3 <_JIT_ENTRY+0x2c3>
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_Dealloc
// 2be: 4c 89 e7                      movq    %r12, %rdi
// 2c1: ff d0                         callq   *%rax
// 2c3: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 2c7: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2cc: 48 85 c0                      testq   %rax, %rax
// 2cf: 74 35                         je      0x306 <_JIT_ENTRY+0x306>
// 2d1: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2d5: 49 89 07                      movq    %rax, (%r15)
// 2d8: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2dd: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2e1: 48 8b 00                      movq    (%rax), %rax
// 2e4: 84 c0                         testb   %al, %al
// 2e6: 0f 84 eb 00 00 00             je      0x3d7 <_JIT_ENTRY+0x3d7>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_HandlePending
// 2f6: 4c 89 ff                      movq    %r15, %rdi
// 2f9: ff d0                         callq   *%rax
// 2fb: 85 c0                         testl   %eax, %eax
// 2fd: 0f 84 d4 00 00 00             je      0x3d7 <_JIT_ENTRY+0x3d7>
// 303: 4d 89 f7                      movq    %r14, %r15
// 306: 49 29 df                      subq    %rbx, %r15
// 309: 49 83 c7 b8                   addq    $-0x48, %r15
// 30d: 49 c1 ef 03                   shrq    $0x3, %r15
// 311: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 315: 31 c0                         xorl    %eax, %eax
// 317: eb 27                         jmp     0x340 <_JIT_ENTRY+0x340>
// 319: 48 29 d9                      subq    %rbx, %rcx
// 31c: 48 83 c1 b8                   addq    $-0x48, %rcx
// 320: 48 c1 e9 03                   shrq    $0x3, %rcx
// 324: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 327: 48 8b 03                      movq    (%rbx), %rax
// 32a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032c:  R_X86_64_64  _JIT_TARGET
// 334: 89 c9                         movl    %ecx, %ecx
// 336: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 33a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 340: 48 83 c4 28                   addq    $0x28, %rsp
// 344: 5b                            popq    %rbx
// 345: 41 5c                         popq    %r12
// 347: 41 5d                         popq    %r13
// 349: 41 5e                         popq    %r14
// 34b: 41 5f                         popq    %r15
// 34d: 5d                            popq    %rbp
// 34e: c3                            retq
// 34f: 41 83 fe 02                   cmpl    $0x2, %r14d
// 353: bb 01 00 00 00                movl    $0x1, %ebx
// 358: 41 0f 43 de                   cmovael %r14d, %ebx
// 35c: 45 31 e4                      xorl    %r12d, %r12d
// 35f: eb 1b                         jmp     0x37c <_JIT_ENTRY+0x37c>
// 361: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 370: 49 ff c4                      incq    %r12
// 373: 4c 39 e3                      cmpq    %r12, %rbx
// 376: 0f 84 e9 fe ff ff             je      0x265 <_JIT_ENTRY+0x265>
// 37c: 4e 8b 74 e5 00                movq    (%rbp,%r12,8), %r14
// 381: 49 8b 06                      movq    (%r14), %rax
// 384: 48 85 c0                      testq   %rax, %rax
// 387: 7e 07                         jle     0x390 <_JIT_ENTRY+0x390>
// 389: 85 c0                         testl   %eax, %eax
// 38b: 78 e3                         js      0x370 <_JIT_ENTRY+0x370>
// 38d: eb 26                         jmp     0x3b5 <_JIT_ENTRY+0x3b5>
// 38f: 90                            nop
// 390: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000392:  R_X86_64_64  .rodata.str1.1
// 39a: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 39f: 4c 89 f2                      movq    %r14, %rdx
// 3a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a4:  R_X86_64_64  _Py_NegativeRefcount
// 3ac: ff d0                         callq   *%rax
// 3ae: 49 8b 06                      movq    (%r14), %rax
// 3b1: 85 c0                         testl   %eax, %eax
// 3b3: 78 bb                         js      0x370 <_JIT_ENTRY+0x370>
// 3b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3bf: ff d0                         callq   *%rax
// 3c1: 49 ff 0e                      decq    (%r14)
// 3c4: 75 aa                         jne     0x370 <_JIT_ENTRY+0x370>
// 3c6: 4c 89 f7                      movq    %r14, %rdi
// 3c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cb:  R_X86_64_64  _Py_Dealloc
// 3d3: ff d0                         callq   *%rax
// 3d5: eb 99                         jmp     0x370 <_JIT_ENTRY+0x370>
// 3d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d9:  R_X86_64_64  _JIT_CONTINUE
// 3e1: 48 89 df                      movq    %rbx, %rdi
// 3e4: 4c 89 f6                      movq    %r14, %rsi
// 3e7: 4c 89 fa                      movq    %r15, %rdx
// 3ea: 48 83 c4 28                   addq    $0x28, %rsp
// 3ee: 5b                            popq    %rbx
// 3ef: 41 5c                         popq    %r12
// 3f1: 41 5d                         popq    %r13
// 3f3: 41 5e                         popq    %r14
// 3f5: 41 5f                         popq    %r15
// 3f7: 5d                            popq    %rbp
// 3f8: ff e0                         jmpq    *%rax
// 3fa: 
static const unsigned char _BUILD_SETplus_CALL_BUILTIN_FAST_code_body[1019] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xa4, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x8e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x0f, 0xb7, 0xf1, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf1, 0x4c, 0x63, 0xc1, 0x4a, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe9, 0x89, 0xf7, 0xf7, 0xd7, 0x4c, 0x63, 0xef, 0x4d, 0x01, 0xc5, 0x4a, 0x8b, 0x7c, 0xed, 0x00, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf1, 0x4d, 0x63, 0xf9, 0x4d, 0x01, 0xc7, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x44, 0x0f, 0x44, 0xf6, 0x4a, 0x8b, 0x74, 0xfd, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xf7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x8d, 0x2c, 0xc1, 0x48, 0x85, 0xff, 0x0f, 0x94, 0xc3, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x35, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0x27, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xe4, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0xe9, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xe5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_BUILTIN_FAST_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_BUILTIN_FAST_data_holes[1];

// _BUILD_SETplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 e6 01 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 129: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 a6 01 00 00             js      0x308 <_JIT_ENTRY+0x308>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 90 01 00 00             jne     0x308 <_JIT_ENTRY+0x308>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 7c 01 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c1                      movzwl  %cx, %eax
// 199: 48 89 c2                      movq    %rax, %rdx
// 19c: 48 f7 da                      negq    %rdx
// 19f: 0f b7 f1                      movzwl  %cx, %esi
// 1a2: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1aa: 48 f7 d9                      negq    %rcx
// 1ad: 4c 89 64 0d 00                movq    %r12, (%rbp,%rcx)
// 1b2: b9 01 00 00 00                movl    $0x1, %ecx
// 1b7: 29 f1                         subl    %esi, %ecx
// 1b9: 4c 63 c1                      movslq  %ecx, %r8
// 1bc: 4a 8d 0c c5 00 00 00 00       leaq    (,%r8,8), %rcx
// 1c4: 48 01 e9                      addq    %rbp, %rcx
// 1c7: 89 f7                         movl    %esi, %edi
// 1c9: f7 d7                         notl    %edi
// 1cb: 4c 63 ef                      movslq  %edi, %r13
// 1ce: 4d 01 c5                      addq    %r8, %r13
// 1d1: 4a 8b 7c ed 00                movq    (%rbp,%r13,8), %rdi
// 1d6: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 1dc: 41 29 f1                      subl    %esi, %r9d
// 1df: 4d 63 f9                      movslq  %r9d, %r15
// 1e2: 4d 01 c7                      addq    %r8, %r15
// 1e5: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// 1e9: 48 85 ff                      testq   %rdi, %rdi
// 1ec: 48 f7 d0                      notq    %rax
// 1ef: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1f3: 44 0f 44 f6                   cmovel  %esi, %r14d
// 1f7: 4a 8b 74 fd 00                movq    (%rbp,%r15,8), %rsi
// 1fc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fe:  R_X86_64_64  PyCFunction_Type
// 206: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 20a: 0f 85 0b 01 00 00             jne     0x31b <_JIT_ENTRY+0x31b>
// 210: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 214: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 21c: 0f 85 f9 00 00 00             jne     0x31b <_JIT_ENTRY+0x31b>
// 222: 48 89 2c 24                   movq    %rbp, (%rsp)
// 226: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 22b: 48 8d 2c c1                   leaq    (%rcx,%rax,8), %rbp
// 22f: 48 85 ff                      testq   %rdi, %rdi
// 232: 0f 94 c3                      sete    %bl
// 235: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 23a: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 23e: 44 89 f2                      movl    %r14d, %edx
// 241: 48 89 ee                      movq    %rbp, %rsi
// 244: 31 c9                         xorl    %ecx, %ecx
// 246: 41 ff 50 08                   callq   *0x8(%r8)
// 24a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _JIT_OPARG
// 259: 66 85 c0                      testw   %ax, %ax
// 25c: 0f 94 c0                      sete    %al
// 25f: 84 c3                         testb   %al, %bl
// 261: 0f 84 ea 00 00 00             je      0x351 <_JIT_ENTRY+0x351>
// 267: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 26c: 49 8b 04 24                   movq    (%r12), %rax
// 270: 48 85 c0                      testq   %rax, %rax
// 273: 7f 22                         jg      0x297 <_JIT_ENTRY+0x297>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_NegativeRefcount
// 289: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 28e: 4c 89 e2                      movq    %r12, %rdx
// 291: ff d0                         callq   *%rax
// 293: 49 8b 04 24                   movq    (%r12), %rax
// 297: 85 c0                         testl   %eax, %eax
// 299: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 29e: 4c 8b 34 24                   movq    (%rsp), %r14
// 2a2: 78 21                         js      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 ff 0c 24                   decq    (%r12)
// 2b4: 75 0f                         jne     0x2c5 <_JIT_ENTRY+0x2c5>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_Dealloc
// 2c0: 4c 89 e7                      movq    %r12, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 2c9: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2ce: 48 85 c0                      testq   %rax, %rax
// 2d1: 74 35                         je      0x308 <_JIT_ENTRY+0x308>
// 2d3: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2d7: 49 89 07                      movq    %rax, (%r15)
// 2da: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2df: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2e3: 48 8b 00                      movq    (%rax), %rax
// 2e6: 84 c0                         testb   %al, %al
// 2e8: 0f 84 e9 00 00 00             je      0x3d7 <_JIT_ENTRY+0x3d7>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_HandlePending
// 2f8: 4c 89 ff                      movq    %r15, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 85 c0                         testl   %eax, %eax
// 2ff: 0f 84 d2 00 00 00             je      0x3d7 <_JIT_ENTRY+0x3d7>
// 305: 4d 89 f7                      movq    %r14, %r15
// 308: 49 29 df                      subq    %rbx, %r15
// 30b: 49 83 c7 b8                   addq    $-0x48, %r15
// 30f: 49 c1 ef 03                   shrq    $0x3, %r15
// 313: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 317: 31 c0                         xorl    %eax, %eax
// 319: eb 27                         jmp     0x342 <_JIT_ENTRY+0x342>
// 31b: 48 29 d9                      subq    %rbx, %rcx
// 31e: 48 83 c1 b8                   addq    $-0x48, %rcx
// 322: 48 c1 e9 03                   shrq    $0x3, %rcx
// 326: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 329: 48 8b 03                      movq    (%rbx), %rax
// 32c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032e:  R_X86_64_64  _JIT_TARGET
// 336: 89 c9                         movl    %ecx, %ecx
// 338: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 33c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 342: 48 83 c4 28                   addq    $0x28, %rsp
// 346: 5b                            popq    %rbx
// 347: 41 5c                         popq    %r12
// 349: 41 5d                         popq    %r13
// 34b: 41 5e                         popq    %r14
// 34d: 41 5f                         popq    %r15
// 34f: 5d                            popq    %rbp
// 350: c3                            retq
// 351: 41 83 fe 02                   cmpl    $0x2, %r14d
// 355: bb 01 00 00 00                movl    $0x1, %ebx
// 35a: 41 0f 43 de                   cmovael %r14d, %ebx
// 35e: 45 31 e4                      xorl    %r12d, %r12d
// 361: eb 19                         jmp     0x37c <_JIT_ENTRY+0x37c>
// 363: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 370: 49 ff c4                      incq    %r12
// 373: 4c 39 e3                      cmpq    %r12, %rbx
// 376: 0f 84 eb fe ff ff             je      0x267 <_JIT_ENTRY+0x267>
// 37c: 4e 8b 74 e5 00                movq    (%rbp,%r12,8), %r14
// 381: 49 8b 06                      movq    (%r14), %rax
// 384: 48 85 c0                      testq   %rax, %rax
// 387: 7e 07                         jle     0x390 <_JIT_ENTRY+0x390>
// 389: 85 c0                         testl   %eax, %eax
// 38b: 78 e3                         js      0x370 <_JIT_ENTRY+0x370>
// 38d: eb 26                         jmp     0x3b5 <_JIT_ENTRY+0x3b5>
// 38f: 90                            nop
// 390: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000392:  R_X86_64_64  .rodata.str1.1
// 39a: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 39f: 4c 89 f2                      movq    %r14, %rdx
// 3a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a4:  R_X86_64_64  _Py_NegativeRefcount
// 3ac: ff d0                         callq   *%rax
// 3ae: 49 8b 06                      movq    (%r14), %rax
// 3b1: 85 c0                         testl   %eax, %eax
// 3b3: 78 bb                         js      0x370 <_JIT_ENTRY+0x370>
// 3b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3bf: ff d0                         callq   *%rax
// 3c1: 49 ff 0e                      decq    (%r14)
// 3c4: 75 aa                         jne     0x370 <_JIT_ENTRY+0x370>
// 3c6: 4c 89 f7                      movq    %r14, %rdi
// 3c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cb:  R_X86_64_64  _Py_Dealloc
// 3d3: ff d0                         callq   *%rax
// 3d5: eb 99                         jmp     0x370 <_JIT_ENTRY+0x370>
// 3d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d9:  R_X86_64_64  _JIT_CONTINUE
// 3e1: 48 89 df                      movq    %rbx, %rdi
// 3e4: 4c 89 f6                      movq    %r14, %rsi
// 3e7: 4c 89 fa                      movq    %r15, %rdx
// 3ea: 48 83 c4 28                   addq    $0x28, %rsp
// 3ee: 5b                            popq    %rbx
// 3ef: 41 5c                         popq    %r12
// 3f1: 41 5d                         popq    %r13
// 3f3: 41 5e                         popq    %r14
// 3f5: 41 5f                         popq    %r15
// 3f7: 5d                            popq    %rbp
// 3f8: ff e0                         jmpq    *%rax
// 3fa: 
static const unsigned char _BUILD_SETplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[1019] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0xe6, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xa6, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x90, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7c, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x0f, 0xb7, 0xf1, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf1, 0x4c, 0x63, 0xc1, 0x4a, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe9, 0x89, 0xf7, 0xf7, 0xd7, 0x4c, 0x63, 0xef, 0x4d, 0x01, 0xc5, 0x4a, 0x8b, 0x7c, 0xed, 0x00, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf1, 0x4d, 0x63, 0xf9, 0x4d, 0x01, 0xc7, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x44, 0x0f, 0x44, 0xf6, 0x4a, 0x8b, 0x74, 0xfd, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x0b, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xf9, 0x00, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x8d, 0x2c, 0xc1, 0x48, 0x85, 0xff, 0x0f, 0x94, 0xc3, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x35, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0x27, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xe4, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0xeb, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xe5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _BUILD_SETplus_CALL_BUILTIN_O
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_BUILTIN_O.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 1c 24                   movq    %rbx, (%rsp)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 66 85 c0                      testw   %ax, %ax
// 42: 0f 84 45 01 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// 48: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 93 02 00 00                jmp     0x3b5 <_JIT_ENTRY+0x3b5>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 129: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 12e: 74 5d                         je      0x18d <_JIT_ENTRY+0x18d>
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 e2                      movq    %r12, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 52 02 00 00             js      0x3b5 <_JIT_ENTRY+0x3b5>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 3c 02 00 00             jne     0x3b5 <_JIT_ENTRY+0x3b5>
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: ff d0                         callq   *%rax
// 188: e9 28 02 00 00                jmp     0x3b5 <_JIT_ENTRY+0x3b5>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 d8                      movzwl  %ax, %ebx
// 19a: 48 89 da                      movq    %rbx, %rdx
// 19d: 48 f7 da                      negq    %rdx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 8d 0c dd 00 00 00 00       leaq    (,%rbx,8), %rcx
// 1ab: 48 f7 d9                      negq    %rcx
// 1ae: 4d 89 64 0d 00                movq    %r12, (%r13,%rcx)
// 1b3: b9 01 00 00 00                movl    $0x1, %ecx
// 1b8: 29 c1                         subl    %eax, %ecx
// 1ba: 48 63 c9                      movslq  %ecx, %rcx
// 1bd: 89 c6                         movl    %eax, %esi
// 1bf: f7 d6                         notl    %esi
// 1c1: 4c 63 f6                      movslq  %esi, %r14
// 1c4: 49 01 ce                      addq    %rcx, %r14
// 1c7: 31 f6                         xorl    %esi, %esi
// 1c9: 66 85 db                      testw   %bx, %bx
// 1cc: 40 0f 94 c6                   sete    %sil
// 1d0: 31 ff                         xorl    %edi, %edi
// 1d2: 66 83 fb 01                   cmpw    $0x1, %bx
// 1d6: 40 0f 94 c7                   sete    %dil
// 1da: 4b 83 7c f5 00 00             cmpq    $0x0, (%r13,%r14,8)
// 1e0: 48 f7 d3                      notq    %rbx
// 1e3: 48 0f 44 da                   cmoveq  %rdx, %rbx
// 1e7: 4d 8d 7c cd 00                leaq    (%r13,%rcx,8), %r15
// 1ec: 0f 44 f7                      cmovel  %edi, %esi
// 1ef: 40 80 fe 01                   cmpb    $0x1, %sil
// 1f3: 75 60                         jne     0x255 <_JIT_ENTRY+0x255>
// 1f5: 4c 89 ee                      movq    %r13, %rsi
// 1f8: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1fd: 29 c2                         subl    %eax, %edx
// 1ff: 4c 63 ea                      movslq  %edx, %r13
// 202: 49 01 cd                      addq    %rcx, %r13
// 205: 4e 8b 24 ee                   movq    (%rsi,%r13,8), %r12
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  PyCFunction_Type
// 213: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 218: 75 3b                         jne     0x255 <_JIT_ENTRY+0x255>
// 21a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 21f: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 223: 75 30                         jne     0x255 <_JIT_ENTRY+0x255>
// 225: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 22a: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 22e: 48 8b 34 24                   movq    (%rsp), %rsi
// 232: 8b 4e 2c                      movl    0x2c(%rsi), %ecx
// 235: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 238: 89 56 2c                      movl    %edx, 0x2c(%rsi)
// 23b: 85 c9                         testl   %ecx, %ecx
// 23d: 7e 44                         jle     0x283 <_JIT_ENTRY+0x283>
// 23f: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 244: 49 8b 2c df                   movq    (%r15,%rbx,8), %rbp
// 248: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 24c: 75 75                         jne     0x2c3 <_JIT_ENTRY+0x2c3>
// 24e: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// 253: eb 70                         jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 255: 49 29 ef                      subq    %rbp, %r15
// 258: 49 83 c7 b8                   addq    $-0x48, %r15
// 25c: 49 c1 ef 03                   shrq    $0x3, %r15
// 260: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 264: 48 8b 45 00                   movq    (%rbp), %rax
// 268: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026a:  R_X86_64_64  _JIT_TARGET
// 272: 89 c9                         movl    %ecx, %ecx
// 274: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 278: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27e: e9 43 01 00 00                jmp     0x3c6 <_JIT_ENTRY+0x3c6>
// 283: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// 288: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000028a:  R_X86_64_64  .rodata.str1.1+0x39
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_CheckRecursiveCall
// 29c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2a0: ff d0                         callq   *%rax
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 0f 85 0b 01 00 00             jne     0x3b5 <_JIT_ENTRY+0x3b5>
// 2aa: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 2af: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 2b4: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 2b9: 49 8b 2c df                   movq    (%r15,%rbx,8), %rbp
// 2bd: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 2c1: 74 8b                         je      0x24e <_JIT_ENTRY+0x24e>
// 2c3: 31 ff                         xorl    %edi, %edi
// 2c5: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2c9: 48 89 ee                      movq    %rbp, %rsi
// 2cc: 41 ff d0                      callq   *%r8
// 2cf: ff 43 2c                      incl    0x2c(%rbx)
// 2d2: 48 89 04 24                   movq    %rax, (%rsp)
// 2d6: 48 8b 45 00                   movq    (%rbp), %rax
// 2da: 48 85 c0                      testq   %rax, %rax
// 2dd: 7f 22                         jg      0x301 <_JIT_ENTRY+0x301>
// 2df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e1:  R_X86_64_64  .rodata.str1.1
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_NegativeRefcount
// 2f3: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 2f8: 48 89 ea                      movq    %rbp, %rdx
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 8b 45 00                   movq    (%rbp), %rax
// 301: 85 c0                         testl   %eax, %eax
// 303: 78 21                         js      0x326 <_JIT_ENTRY+0x326>
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30f: ff d0                         callq   *%rax
// 311: 48 ff 4d 00                   decq    (%rbp)
// 315: 75 0f                         jne     0x326 <_JIT_ENTRY+0x326>
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_Dealloc
// 321: 48 89 ef                      movq    %rbp, %rdi
// 324: ff d0                         callq   *%rax
// 326: 49 8b 04 24                   movq    (%r12), %rax
// 32a: 48 85 c0                      testq   %rax, %rax
// 32d: 7f 22                         jg      0x351 <_JIT_ENTRY+0x351>
// 32f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000331:  R_X86_64_64  .rodata.str1.1
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _Py_NegativeRefcount
// 343: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 348: 4c 89 e2                      movq    %r12, %rdx
// 34b: ff d0                         callq   *%rax
// 34d: 49 8b 04 24                   movq    (%r12), %rax
// 351: 85 c0                         testl   %eax, %eax
// 353: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 358: 78 21                         js      0x37b <_JIT_ENTRY+0x37b>
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 364: ff d0                         callq   *%rax
// 366: 49 ff 0c 24                   decq    (%r12)
// 36a: 75 0f                         jne     0x37b <_JIT_ENTRY+0x37b>
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _Py_Dealloc
// 376: 4c 89 e7                      movq    %r12, %rdi
// 379: ff d0                         callq   *%rax
// 37b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 380: 4e 8d 3c e8                   leaq    (%rax,%r13,8), %r15
// 384: 48 8b 0c 24                   movq    (%rsp), %rcx
// 388: 48 85 c9                      testq   %rcx, %rcx
// 38b: 74 28                         je      0x3b5 <_JIT_ENTRY+0x3b5>
// 38d: 4e 8d 34 f0                   leaq    (%rax,%r14,8), %r14
// 391: 49 89 0f                      movq    %rcx, (%r15)
// 394: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 398: 48 8b 00                      movq    (%rax), %rax
// 39b: 84 c0                         testb   %al, %al
// 39d: 74 36                         je      0x3d5 <_JIT_ENTRY+0x3d5>
// 39f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a1:  R_X86_64_64  _Py_HandlePending
// 3a9: 48 89 df                      movq    %rbx, %rdi
// 3ac: ff d0                         callq   *%rax
// 3ae: 85 c0                         testl   %eax, %eax
// 3b0: 74 23                         je      0x3d5 <_JIT_ENTRY+0x3d5>
// 3b2: 4d 89 f7                      movq    %r14, %r15
// 3b5: 49 29 ef                      subq    %rbp, %r15
// 3b8: 49 83 c7 b8                   addq    $-0x48, %r15
// 3bc: 49 c1 ef 03                   shrq    $0x3, %r15
// 3c0: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 3c4: 31 c0                         xorl    %eax, %eax
// 3c6: 48 83 c4 18                   addq    $0x18, %rsp
// 3ca: 5b                            popq    %rbx
// 3cb: 41 5c                         popq    %r12
// 3cd: 41 5d                         popq    %r13
// 3cf: 41 5e                         popq    %r14
// 3d1: 41 5f                         popq    %r15
// 3d3: 5d                            popq    %rbp
// 3d4: c3                            retq
// 3d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d7:  R_X86_64_64  _JIT_CONTINUE
// 3df: 48 89 ef                      movq    %rbp, %rdi
// 3e2: 4c 89 f6                      movq    %r14, %rsi
// 3e5: 48 89 da                      movq    %rbx, %rdx
// 3e8: 48 83 c4 18                   addq    $0x18, %rsp
// 3ec: 5b                            popq    %rbx
// 3ed: 41 5c                         popq    %r12
// 3ef: 41 5d                         popq    %r13
// 3f1: 41 5e                         popq    %r14
// 3f3: 41 5f                         popq    %r15
// 3f5: 5d                            popq    %rbp
// 3f6: ff e0                         jmpq    *%rax
// 3f8: 
static const unsigned char _BUILD_SETplus_CALL_BUILTIN_O_code_body[1017] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x93, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x52, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x3c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x28, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0x89, 0xda, 0x48, 0xf7, 0xda, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x0c, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4d, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xf6, 0x49, 0x01, 0xce, 0x31, 0xf6, 0x66, 0x85, 0xdb, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xfb, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x7c, 0xf5, 0x00, 0x00, 0x48, 0xf7, 0xd3, 0x48, 0x0f, 0x44, 0xda, 0x4d, 0x8d, 0x7c, 0xcd, 0x00, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x60, 0x4c, 0x89, 0xee, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x49, 0x01, 0xcd, 0x4e, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x3b, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x30, 0x48, 0x89, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x34, 0x24, 0x8b, 0x4e, 0x2c, 0x8d, 0x51, 0xff, 0x89, 0x56, 0x2c, 0x85, 0xc9, 0x7e, 0x44, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xdf, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x75, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x70, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x43, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x0b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xdf, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x8b, 0x31, 0xff, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0xff, 0x43, 0x2c, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4e, 0x8d, 0x3c, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x28, 0x4e, 0x8d, 0x34, 0xf0, 0x49, 0x89, 0x0f, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x23, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_BUILTIN_O_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BUILD_SETplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BUILD_SETplus_CALL_BUILTIN_O_data_holes[1];

// _BUILD_SETplus_CALL_INTRINSIC_1
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_INTRINSIC_1.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 5f 01 00 00                jmp     0x281 <_JIT_ENTRY+0x281>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 1a 01 00 00             js      0x281 <_JIT_ENTRY+0x281>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 04 01 00 00             jne     0x281 <_JIT_ENTRY+0x281>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 f0 00 00 00                jmp     0x281 <_JIT_ENTRY+0x281>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 d0                      movzwl  %ax, %edx
// 1a1: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 1a9: 48 f7 d8                      negq    %rax
// 1ac: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 63 d8                      movslq  %eax, %rbx
// 1ba: 4d 89 f7                      movq    %r14, %r15
// 1bd: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1c2: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 1d0: 48 89 ef                      movq    %rbp, %rdi
// 1d3: 4c 89 f6                      movq    %r14, %rsi
// 1d6: ff 14 02                      callq   *(%rdx,%rax)
// 1d9: 49 89 c4                      movq    %rax, %r12
// 1dc: 49 8b 06                      movq    (%r14), %rax
// 1df: 48 85 c0                      testq   %rax, %rax
// 1e2: 7e 06                         jle     0x1ea <_JIT_ENTRY+0x1ea>
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 79 27                         jns     0x20f <_JIT_ENTRY+0x20f>
// 1e8: eb 36                         jmp     0x220 <_JIT_ENTRY+0x220>
// 1ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ec:  R_X86_64_64  .rodata.str1.1
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NegativeRefcount
// 1fe: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 203: 4c 89 f2                      movq    %r14, %rdx
// 206: ff d0                         callq   *%rax
// 208: 49 8b 06                      movq    (%r14), %rax
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 78 11                         js      0x220 <_JIT_ENTRY+0x220>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 219: ff d0                         callq   *%rax
// 21b: 49 ff 0e                      decq    (%r14)
// 21e: 74 45                         je      0x265 <_JIT_ENTRY+0x265>
// 220: 4d 85 e4                      testq   %r12, %r12
// 223: 74 54                         je      0x279 <_JIT_ENTRY+0x279>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _JIT_OPARG
// 22f: 0f b7 c0                      movzwl  %ax, %eax
// 232: b9 01 00 00 00                movl    $0x1, %ecx
// 237: 29 c1                         subl    %eax, %ecx
// 239: 48 63 c1                      movslq  %ecx, %rax
// 23c: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 240: 4d 89 64 c7 f8                movq    %r12, -0x8(%r15,%rax,8)
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 4c 89 ef                      movq    %r13, %rdi
// 252: 48 89 ea                      movq    %rbp, %rdx
// 255: 48 83 c4 18                   addq    $0x18, %rsp
// 259: 5b                            popq    %rbx
// 25a: 41 5c                         popq    %r12
// 25c: 41 5d                         popq    %r13
// 25e: 41 5e                         popq    %r14
// 260: 41 5f                         popq    %r15
// 262: 5d                            popq    %rbp
// 263: ff e0                         jmpq    *%rax
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_Dealloc
// 26f: 4c 89 f7                      movq    %r14, %rdi
// 272: ff d0                         callq   *%rax
// 274: 4d 85 e4                      testq   %r12, %r12
// 277: 75 ac                         jne     0x225 <_JIT_ENTRY+0x225>
// 279: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 27d: 49 83 c7 f8                   addq    $-0x8, %r15
// 281: 4d 29 ef                      subq    %r13, %r15
// 284: 49 83 c7 b8                   addq    $-0x48, %r15
// 288: 49 c1 ef 03                   shrq    $0x3, %r15
// 28c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 290: 31 c0                         xorl    %eax, %eax
// 292: 48 83 c4 18                   addq    $0x18, %rsp
// 296: 5b                            popq    %rbx
// 297: 41 5c                         popq    %r12
// 299: 41 5d                         popq    %r13
// 29b: 41 5e                         popq    %r14
// 29d: 41 5f                         popq    %r15
// 29f: 5d                            popq    %rbp
// 2a0: c3                            retq
// 2a1: 
static const unsigned char _BUILD_SETplus_CALL_INTRINSIC_1_code_body[674] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x5f, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x1a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x04, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xf0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0x14, 0x02, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x45, 0x4d, 0x85, 0xe4, 0x74, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x4d, 0x89, 0x64, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xac, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CALL_INTRINSIC_1_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_INTRINSIC_1_data_holes[1];

// _BUILD_SETplus_CALL_INTRINSIC_2
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_INTRINSIC_2.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 4c 89 2c 24                   movq    %r13, (%rsp)
// 47: 0f 84 3f 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 4d: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 d5 01 00 00                jmp     0x2f7 <_JIT_ENTRY+0x2f7>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 95 01 00 00             js      0x2f7 <_JIT_ENTRY+0x2f7>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 7f 01 00 00             jne     0x2f7 <_JIT_ENTRY+0x2f7>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 6b 01 00 00                jmp     0x2f7 <_JIT_ENTRY+0x2f7>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 44 0f b7 c0                   movzwl  %ax, %r8d
// 19d: 4a 8d 04 c5 00 00 00 00       leaq    (,%r8,8), %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 4c 63 f0                      movslq  %eax, %r14
// 1b7: 4b 8b 6c f5 f0                movq    -0x10(%r13,%r14,8), %rbp
// 1bc: 4f 8b 6c f5 f8                movq    -0x8(%r13,%r14,8), %r13
// 1c1: 49 c1 e0 04                   shlq    $0x4, %r8
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 1cf: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1d4: 4c 89 ff                      movq    %r15, %rdi
// 1d7: 48 89 ee                      movq    %rbp, %rsi
// 1da: 4c 89 ea                      movq    %r13, %rdx
// 1dd: 41 ff 14 00                   callq   *(%r8,%rax)
// 1e1: 49 89 c4                      movq    %rax, %r12
// 1e4: 48 8b 45 00                   movq    (%rbp), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7e 06                         jle     0x1f3 <_JIT_ENTRY+0x1f3>
// 1ed: 85 c0                         testl   %eax, %eax
// 1ef: 79 28                         jns     0x219 <_JIT_ENTRY+0x219>
// 1f1: eb 38                         jmp     0x22b <_JIT_ENTRY+0x22b>
// 1f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_NegativeRefcount
// 207: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 20c: 48 89 ea                      movq    %rbp, %rdx
// 20f: ff d0                         callq   *%rax
// 211: 48 8b 45 00                   movq    (%rbp), %rax
// 215: 85 c0                         testl   %eax, %eax
// 217: 78 12                         js      0x22b <_JIT_ENTRY+0x22b>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 223: ff d0                         callq   *%rax
// 225: 48 ff 4d 00                   decq    (%rbp)
// 229: 74 0f                         je      0x23a <_JIT_ENTRY+0x23a>
// 22b: 49 8b 45 00                   movq    (%r13), %rax
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 7e 1e                         jle     0x252 <_JIT_ENTRY+0x252>
// 234: 85 c0                         testl   %eax, %eax
// 236: 79 40                         jns     0x278 <_JIT_ENTRY+0x278>
// 238: eb 50                         jmp     0x28a <_JIT_ENTRY+0x28a>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 48 89 ef                      movq    %rbp, %rdi
// 247: ff d0                         callq   *%rax
// 249: 49 8b 45 00                   movq    (%r13), %rax
// 24d: 48 85 c0                      testq   %rax, %rax
// 250: 7f e2                         jg      0x234 <_JIT_ENTRY+0x234>
// 252: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000254:  R_X86_64_64  .rodata.str1.1
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_NegativeRefcount
// 266: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 26b: 4c 89 ea                      movq    %r13, %rdx
// 26e: ff d0                         callq   *%rax
// 270: 49 8b 45 00                   movq    (%r13), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 12                         js      0x28a <_JIT_ENTRY+0x28a>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 4d 00                   decq    (%r13)
// 288: 74 4d                         je      0x2d7 <_JIT_ENTRY+0x2d7>
// 28a: 4d 85 e4                      testq   %r12, %r12
// 28d: 74 5c                         je      0x2eb <_JIT_ENTRY+0x2eb>
// 28f: 48 8b 14 24                   movq    (%rsp), %rdx
// 293: 4a 8d 34 f2                   leaq    (%rdx,%r14,8), %rsi
// 297: 48 83 c6 f8                   addq    $-0x8, %rsi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_OPARG
// 2a5: 0f b7 c0                      movzwl  %ax, %eax
// 2a8: b9 01 00 00 00                movl    $0x1, %ecx
// 2ad: 29 c1                         subl    %eax, %ecx
// 2af: 48 63 c1                      movslq  %ecx, %rax
// 2b2: 4c 89 64 c2 f0                movq    %r12, -0x10(%rdx,%rax,8)
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _JIT_CONTINUE
// 2c1: 48 89 df                      movq    %rbx, %rdi
// 2c4: 4c 89 fa                      movq    %r15, %rdx
// 2c7: 48 83 c4 18                   addq    $0x18, %rsp
// 2cb: 5b                            popq    %rbx
// 2cc: 41 5c                         popq    %r12
// 2ce: 41 5d                         popq    %r13
// 2d0: 41 5e                         popq    %r14
// 2d2: 41 5f                         popq    %r15
// 2d4: 5d                            popq    %rbp
// 2d5: ff e0                         jmpq    *%rax
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_Dealloc
// 2e1: 4c 89 ef                      movq    %r13, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 4d 85 e4                      testq   %r12, %r12
// 2e9: 75 a4                         jne     0x28f <_JIT_ENTRY+0x28f>
// 2eb: 48 8b 04 24                   movq    (%rsp), %rax
// 2ef: 4e 8d 3c f0                   leaq    (%rax,%r14,8), %r15
// 2f3: 49 83 c7 f0                   addq    $-0x10, %r15
// 2f7: 49 29 df                      subq    %rbx, %r15
// 2fa: 49 83 c7 b8                   addq    $-0x48, %r15
// 2fe: 49 c1 ef 03                   shrq    $0x3, %r15
// 302: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 306: 31 c0                         xorl    %eax, %eax
// 308: 48 83 c4 18                   addq    $0x18, %rsp
// 30c: 5b                            popq    %rbx
// 30d: 41 5c                         popq    %r12
// 30f: 41 5d                         popq    %r13
// 311: 41 5e                         popq    %r14
// 313: 41 5f                         popq    %r15
// 315: 5d                            popq    %rbp
// 316: c3                            retq
// 317: 
static const unsigned char _BUILD_SETplus_CALL_INTRINSIC_2_code_body[792] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x4c, 0x89, 0x2c, 0x24, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0xd5, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x95, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x7f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x6b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x44, 0x0f, 0xb7, 0xc0, 0x4a, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x6c, 0xf5, 0xf0, 0x4f, 0x8b, 0x6c, 0xf5, 0xf8, 0x49, 0xc1, 0xe0, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0x41, 0xff, 0x14, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4d, 0x4d, 0x85, 0xe4, 0x74, 0x5c, 0x48, 0x8b, 0x14, 0x24, 0x4a, 0x8d, 0x34, 0xf2, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc2, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa4, 0x48, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x3c, 0xf0, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CALL_INTRINSIC_2_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_INTRINSIC_2_data_holes[1];

// _BUILD_SETplus_CALL_ISINSTANCE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_ISINSTANCE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4e 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 44: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 5a: 49 89 ef                      movq    %rbp, %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 9d 02 00 00                jmp     0x3bf <_JIT_ENTRY+0x3bf>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 129: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 12e: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 133: 74 5d                         je      0x192 <_JIT_ENTRY+0x192>
// 135: 49 8b 04 24                   movq    (%r12), %rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 7f 22                         jg      0x160 <_JIT_ENTRY+0x160>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14d: 4c 89 e2                      movq    %r12, %rdx
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: ff d0                         callq   *%rax
// 15c: 49 8b 04 24                   movq    (%r12), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 88 57 02 00 00             js      0x3bf <_JIT_ENTRY+0x3bf>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 85 41 02 00 00             jne     0x3bf <_JIT_ENTRY+0x3bf>
// 17e: 4c 89 e7                      movq    %r12, %rdi
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: ff d0                         callq   *%rax
// 18d: e9 2d 02 00 00                jmp     0x3bf <_JIT_ENTRY+0x3bf>
// 192: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 c1                      movzwl  %cx, %eax
// 19f: 48 89 c6                      movq    %rax, %rsi
// 1a2: 48 f7 de                      negq    %rsi
// 1a5: 0f b7 c9                      movzwl  %cx, %ecx
// 1a8: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b0: 48 f7 da                      negq    %rdx
// 1b3: 4c 89 64 15 00                movq    %r12, (%rbp,%rdx)
// 1b8: ba 01 00 00 00                movl    $0x1, %edx
// 1bd: 29 ca                         subl    %ecx, %edx
// 1bf: 48 63 d2                      movslq  %edx, %rdx
// 1c2: 89 cf                         movl    %ecx, %edi
// 1c4: f7 d7                         notl    %edi
// 1c6: 4c 63 f7                      movslq  %edi, %r14
// 1c9: 49 01 d6                      addq    %rdx, %r14
// 1cc: 31 ff                         xorl    %edi, %edi
// 1ce: 66 83 f8 01                   cmpw    $0x1, %ax
// 1d2: 40 0f 94 c7                   sete    %dil
// 1d6: 45 31 c0                      xorl    %r8d, %r8d
// 1d9: 66 83 f8 02                   cmpw    $0x2, %ax
// 1dd: 41 0f 94 c0                   sete    %r8b
// 1e1: 4a 83 7c f5 00 00             cmpq    $0x0, (%rbp,%r14,8)
// 1e7: 48 f7 d0                      notq    %rax
// 1ea: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1ee: 4c 8d 7c d5 00                leaq    (%rbp,%rdx,8), %r15
// 1f3: 41 0f 44 f8                   cmovel  %r8d, %edi
// 1f7: 40 80 ff 01                   cmpb    $0x1, %dil
// 1fb: 75 21                         jne     0x21e <_JIT_ENTRY+0x21e>
// 1fd: 48 89 ef                      movq    %rbp, %rdi
// 200: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 205: 29 ce                         subl    %ecx, %esi
// 207: 48 63 ee                      movslq  %esi, %rbp
// 20a: 48 01 d5                      addq    %rdx, %rbp
// 20d: 4c 8b 24 ef                   movq    (%rdi,%rbp,8), %r12
// 211: 49 8b 4d 10                   movq    0x10(%r13), %rcx
// 215: 4c 3b a1 b8 54 06 00          cmpq    0x654b8(%rcx), %r12
// 21c: 74 2d                         je      0x24b <_JIT_ENTRY+0x24b>
// 21e: 49 29 df                      subq    %rbx, %r15
// 221: 49 83 c7 b8                   addq    $-0x48, %r15
// 225: 49 c1 ef 03                   shrq    $0x3, %r15
// 229: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 22d: 48 8b 03                      movq    (%rbx), %rax
// 230: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000232:  R_X86_64_64  _JIT_TARGET
// 23a: 89 c9                         movl    %ecx, %ecx
// 23c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 240: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 246: e9 85 01 00 00                jmp     0x3d0 <_JIT_ENTRY+0x3d0>
// 24b: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 250: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 255: 4d 8b 2c c7                   movq    (%r15,%rax,8), %r13
// 259: 49 8b 74 c7 08                movq    0x8(%r15,%rax,8), %rsi
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  PyObject_IsInstance
// 268: 4c 89 ef                      movq    %r13, %rdi
// 26b: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 270: ff d0                         callq   *%rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 0f 88 45 01 00 00             js      0x3bf <_JIT_ENTRY+0x3bf>
// 27a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 27f: 89 c7                         movl    %eax, %edi
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  PyBool_FromLong
// 28b: ff d0                         callq   *%rax
// 28d: 48 89 c3                      movq    %rax, %rbx
// 290: 49 8b 45 00                   movq    (%r13), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7f 22                         jg      0x2bb <_JIT_ENTRY+0x2bb>
// 299: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029b:  R_X86_64_64  .rodata.str1.1
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_NegativeRefcount
// 2ad: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 2b2: 4c 89 ea                      movq    %r13, %rdx
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 8b 45 00                   movq    (%r13), %rax
// 2bb: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c5: 85 c0                         testl   %eax, %eax
// 2c7: 78 18                         js      0x2e1 <_JIT_ENTRY+0x2e1>
// 2c9: 41 ff d7                      callq   *%r15
// 2cc: 49 ff 4d 00                   decq    (%r13)
// 2d0: 75 0f                         jne     0x2e1 <_JIT_ENTRY+0x2e1>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_Dealloc
// 2dc: 4c 89 ef                      movq    %r13, %rdi
// 2df: ff d0                         callq   *%rax
// 2e1: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2e6: 48 8b 00                      movq    (%rax), %rax
// 2e9: 48 85 c0                      testq   %rax, %rax
// 2ec: 7f 27                         jg      0x315 <_JIT_ENTRY+0x315>
// 2ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f0:  R_X86_64_64  .rodata.str1.1
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_NegativeRefcount
// 302: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 307: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 30c: 4c 89 ea                      movq    %r13, %rdx
// 30f: ff d0                         callq   *%rax
// 311: 49 8b 45 00                   movq    (%r13), %rax
// 315: 85 c0                         testl   %eax, %eax
// 317: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 31c: 78 1e                         js      0x33c <_JIT_ENTRY+0x33c>
// 31e: 41 ff d7                      callq   *%r15
// 321: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 326: 48 ff 08                      decq    (%rax)
// 329: 75 11                         jne     0x33c <_JIT_ENTRY+0x33c>
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _Py_Dealloc
// 335: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 33a: ff d0                         callq   *%rax
// 33c: 49 8b 04 24                   movq    (%r12), %rax
// 340: 48 85 c0                      testq   %rax, %rax
// 343: 7f 22                         jg      0x367 <_JIT_ENTRY+0x367>
// 345: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000347:  R_X86_64_64  .rodata.str1.1
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _Py_NegativeRefcount
// 359: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 35e: 4c 89 e2                      movq    %r12, %rdx
// 361: ff d0                         callq   *%rax
// 363: 49 8b 04 24                   movq    (%r12), %rax
// 367: 85 c0                         testl   %eax, %eax
// 369: 78 18                         js      0x383 <_JIT_ENTRY+0x383>
// 36b: 41 ff d7                      callq   *%r15
// 36e: 49 ff 0c 24                   decq    (%r12)
// 372: 75 0f                         jne     0x383 <_JIT_ENTRY+0x383>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_Dealloc
// 37e: 4c 89 e7                      movq    %r12, %rdi
// 381: ff d0                         callq   *%rax
// 383: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 388: 4c 8d 3c e8                   leaq    (%rax,%rbp,8), %r15
// 38c: 48 85 db                      testq   %rbx, %rbx
// 38f: 74 29                         je      0x3ba <_JIT_ENTRY+0x3ba>
// 391: 4a 8d 34 f0                   leaq    (%rax,%r14,8), %rsi
// 395: 49 89 1f                      movq    %rbx, (%r15)
// 398: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039a:  R_X86_64_64  _JIT_CONTINUE
// 3a2: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 3a7: 4c 89 ea                      movq    %r13, %rdx
// 3aa: 48 83 c4 28                   addq    $0x28, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: ff e0                         jmpq    *%rax
// 3ba: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 3bf: 49 29 df                      subq    %rbx, %r15
// 3c2: 49 83 c7 b8                   addq    $-0x48, %r15
// 3c6: 49 c1 ef 03                   shrq    $0x3, %r15
// 3ca: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 3ce: 31 c0                         xorl    %eax, %eax
// 3d0: 48 83 c4 28                   addq    $0x28, %rsp
// 3d4: 5b                            popq    %rbx
// 3d5: 41 5c                         popq    %r12
// 3d7: 41 5d                         popq    %r13
// 3d9: 41 5e                         popq    %r14
// 3db: 41 5f                         popq    %r15
// 3dd: 5d                            popq    %rbp
// 3de: c3                            retq
// 3df: 
static const unsigned char _BUILD_SETplus_CALL_ISINSTANCE_code_body[992] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x9d, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x57, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x41, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x2d, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x64, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x89, 0xcf, 0xf7, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xd6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4a, 0x83, 0x7c, 0xf5, 0x00, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4c, 0x8d, 0x7c, 0xd5, 0x00, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x21, 0x48, 0x89, 0xef, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xee, 0x48, 0x01, 0xd5, 0x4c, 0x8b, 0x24, 0xef, 0x49, 0x8b, 0x4d, 0x10, 0x4c, 0x3b, 0xa1, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x2d, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x85, 0x01, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xc7, 0x49, 0x8b, 0x74, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x78, 0x1e, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xff, 0x08, 0x75, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4c, 0x8d, 0x3c, 0xe8, 0x48, 0x85, 0xdb, 0x74, 0x29, 0x4a, 0x8d, 0x34, 0xf0, 0x49, 0x89, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CALL_ISINSTANCE_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_ISINSTANCE_data_holes[1];

// _BUILD_SETplus_CALL_LEN
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_LEN.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 1c 24                   movq    %rbx, (%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 32 02 00 00                jmp     0x354 <_JIT_ENTRY+0x354>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 1c 24                   movq    (%rsp), %rbx
// 128: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 f2 01 00 00             js      0x354 <_JIT_ENTRY+0x354>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 dc 01 00 00             jne     0x354 <_JIT_ENTRY+0x354>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 c8 01 00 00                jmp     0x354 <_JIT_ENTRY+0x354>
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c1                      movzwl  %cx, %eax
// 199: 48 89 c6                      movq    %rax, %rsi
// 19c: 48 f7 de                      negq    %rsi
// 19f: 0f b7 c9                      movzwl  %cx, %ecx
// 1a2: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1aa: 48 f7 da                      negq    %rdx
// 1ad: 4d 89 64 15 00                movq    %r12, (%r13,%rdx)
// 1b2: ba 01 00 00 00                movl    $0x1, %edx
// 1b7: 29 ca                         subl    %ecx, %edx
// 1b9: 48 63 d2                      movslq  %edx, %rdx
// 1bc: 89 cf                         movl    %ecx, %edi
// 1be: f7 d7                         notl    %edi
// 1c0: 4c 63 f7                      movslq  %edi, %r14
// 1c3: 49 01 d6                      addq    %rdx, %r14
// 1c6: 31 ff                         xorl    %edi, %edi
// 1c8: 66 85 c0                      testw   %ax, %ax
// 1cb: 40 0f 94 c7                   sete    %dil
// 1cf: 45 31 c0                      xorl    %r8d, %r8d
// 1d2: 66 83 f8 01                   cmpw    $0x1, %ax
// 1d6: 41 0f 94 c0                   sete    %r8b
// 1da: 4b 83 7c f5 00 00             cmpq    $0x0, (%r13,%r14,8)
// 1e0: 48 f7 d0                      notq    %rax
// 1e3: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1e7: 4d 8d 7c d5 00                leaq    (%r13,%rdx,8), %r15
// 1ec: 41 0f 44 f8                   cmovel  %r8d, %edi
// 1f0: 40 80 ff 01                   cmpb    $0x1, %dil
// 1f4: 75 26                         jne     0x21c <_JIT_ENTRY+0x21c>
// 1f6: 4c 89 ef                      movq    %r13, %rdi
// 1f9: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1fe: 29 ce                         subl    %ecx, %esi
// 200: 4c 63 ee                      movslq  %esi, %r13
// 203: 49 01 d5                      addq    %rdx, %r13
// 206: 4a 8b 2c ef                   movq    (%rdi,%r13,8), %rbp
// 20a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 20f: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 213: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 21a: 74 2d                         je      0x249 <_JIT_ENTRY+0x249>
// 21c: 49 29 df                      subq    %rbx, %r15
// 21f: 49 83 c7 b8                   addq    $-0x48, %r15
// 223: 49 c1 ef 03                   shrq    $0x3, %r15
// 227: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 22b: 48 8b 03                      movq    (%rbx), %rax
// 22e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000230:  R_X86_64_64  _JIT_TARGET
// 238: 89 c9                         movl    %ecx, %ecx
// 23a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 23e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 244: e9 1c 01 00 00                jmp     0x365 <_JIT_ENTRY+0x365>
// 249: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 24e: 4d 8b 24 c7                   movq    (%r15,%rax,8), %r12
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyObject_Size
// 25c: 4c 89 e7                      movq    %r12, %rdi
// 25f: ff d0                         callq   *%rax
// 261: 48 85 c0                      testq   %rax, %rax
// 264: 0f 88 ea 00 00 00             js      0x354 <_JIT_ENTRY+0x354>
// 26a: 48 89 1c 24                   movq    %rbx, (%rsp)
// 26e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000270:  R_X86_64_64  PyLong_FromSsize_t
// 278: 48 89 c7                      movq    %rax, %rdi
// 27b: ff d1                         callq   *%rcx
// 27d: 48 89 c3                      movq    %rax, %rbx
// 280: 48 8b 45 00                   movq    (%rbp), %rax
// 284: 48 85 c0                      testq   %rax, %rax
// 287: 7f 22                         jg      0x2ab <_JIT_ENTRY+0x2ab>
// 289: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028b:  R_X86_64_64  .rodata.str1.1
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_NegativeRefcount
// 29d: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 2a2: 48 89 ea                      movq    %rbp, %rdx
// 2a5: ff d0                         callq   *%rax
// 2a7: 48 8b 45 00                   movq    (%rbp), %rax
// 2ab: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b5: 85 c0                         testl   %eax, %eax
// 2b7: 78 18                         js      0x2d1 <_JIT_ENTRY+0x2d1>
// 2b9: 41 ff d7                      callq   *%r15
// 2bc: 48 ff 4d 00                   decq    (%rbp)
// 2c0: 75 0f                         jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 48 89 ef                      movq    %rbp, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 8b 04 24                   movq    (%r12), %rax
// 2d5: 48 85 c0                      testq   %rax, %rax
// 2d8: 7f 22                         jg      0x2fc <_JIT_ENTRY+0x2fc>
// 2da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002dc:  R_X86_64_64  .rodata.str1.1
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_NegativeRefcount
// 2ee: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 2f3: 4c 89 e2                      movq    %r12, %rdx
// 2f6: ff d0                         callq   *%rax
// 2f8: 49 8b 04 24                   movq    (%r12), %rax
// 2fc: 85 c0                         testl   %eax, %eax
// 2fe: 78 18                         js      0x318 <_JIT_ENTRY+0x318>
// 300: 41 ff d7                      callq   *%r15
// 303: 49 ff 0c 24                   decq    (%r12)
// 307: 75 0f                         jne     0x318 <_JIT_ENTRY+0x318>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_Dealloc
// 313: 4c 89 e7                      movq    %r12, %rdi
// 316: ff d0                         callq   *%rax
// 318: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 31d: 4e 8d 3c e8                   leaq    (%rax,%r13,8), %r15
// 321: 48 85 db                      testq   %rbx, %rbx
// 324: 74 2a                         je      0x350 <_JIT_ENTRY+0x350>
// 326: 4a 8d 34 f0                   leaq    (%rax,%r14,8), %rsi
// 32a: 49 89 1f                      movq    %rbx, (%r15)
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _JIT_CONTINUE
// 337: 48 8b 3c 24                   movq    (%rsp), %rdi
// 33b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 340: 48 83 c4 18                   addq    $0x18, %rsp
// 344: 5b                            popq    %rbx
// 345: 41 5c                         popq    %r12
// 347: 41 5d                         popq    %r13
// 349: 41 5e                         popq    %r14
// 34b: 41 5f                         popq    %r15
// 34d: 5d                            popq    %rbp
// 34e: ff e0                         jmpq    *%rax
// 350: 48 8b 1c 24                   movq    (%rsp), %rbx
// 354: 49 29 df                      subq    %rbx, %r15
// 357: 49 83 c7 b8                   addq    $-0x48, %r15
// 35b: 49 c1 ef 03                   shrq    $0x3, %r15
// 35f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 363: 31 c0                         xorl    %eax, %eax
// 365: 48 83 c4 18                   addq    $0x18, %rsp
// 369: 5b                            popq    %rbx
// 36a: 41 5c                         popq    %r12
// 36c: 41 5d                         popq    %r13
// 36e: 41 5e                         popq    %r14
// 370: 41 5f                         popq    %r15
// 372: 5d                            popq    %rbp
// 373: c3                            retq
// 374: 
static const unsigned char _BUILD_SETplus_CALL_LEN_code_body[885] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x32, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xf2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xdc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xc8, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x64, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x89, 0xcf, 0xf7, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xd6, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x7c, 0xf5, 0x00, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x7c, 0xd5, 0x00, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x26, 0x4c, 0x89, 0xef, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xee, 0x49, 0x01, 0xd5, 0x4a, 0x8b, 0x2c, 0xef, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x2d, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1c, 0x01, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4d, 0x8b, 0x24, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xea, 0x00, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4e, 0x8d, 0x3c, 0xe8, 0x48, 0x85, 0xdb, 0x74, 0x2a, 0x4a, 0x8d, 0x34, 0xf0, 0x49, 0x89, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CALL_LEN_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_LEN_data_holes[1];

// _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 44 01 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 5a: 49 89 ef                      movq    %rbp, %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 1e 02 00 00                jmp     0x340 <_JIT_ENTRY+0x340>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 74 5d                         je      0x18d <_JIT_ENTRY+0x18d>
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 e2                      movq    %r12, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 dd 01 00 00             js      0x340 <_JIT_ENTRY+0x340>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 c7 01 00 00             jne     0x340 <_JIT_ENTRY+0x340>
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: ff d0                         callq   *%rax
// 188: e9 b3 01 00 00                jmp     0x340 <_JIT_ENTRY+0x340>
// 18d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c1                      movzwl  %cx, %eax
// 19a: 48 89 c6                      movq    %rax, %rsi
// 19d: 48 f7 de                      negq    %rsi
// 1a0: 0f b7 f9                      movzwl  %cx, %edi
// 1a3: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1ab: 48 f7 d9                      negq    %rcx
// 1ae: 4c 89 64 0d 00                movq    %r12, (%rbp,%rcx)
// 1b3: b9 01 00 00 00                movl    $0x1, %ecx
// 1b8: 29 f9                         subl    %edi, %ecx
// 1ba: 4c 63 c1                      movslq  %ecx, %r8
// 1bd: 4a 8d 0c c5 00 00 00 00       leaq    (,%r8,8), %rcx
// 1c5: 48 01 e9                      addq    %rbp, %rcx
// 1c8: 89 fa                         movl    %edi, %edx
// 1ca: f7 d2                         notl    %edx
// 1cc: 4c 63 ea                      movslq  %edx, %r13
// 1cf: 4d 01 c5                      addq    %r8, %r13
// 1d2: 4a 8b 54 ed 00                movq    (%rbp,%r13,8), %rdx
// 1d7: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 1dd: 41 29 f9                      subl    %edi, %r9d
// 1e0: 4d 63 f9                      movslq  %r9d, %r15
// 1e3: 4d 01 c7                      addq    %r8, %r15
// 1e6: 44 8d 77 01                   leal    0x1(%rdi), %r14d
// 1ea: 48 85 d2                      testq   %rdx, %rdx
// 1ed: 48 f7 d0                      notq    %rax
// 1f0: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1f4: 44 0f 44 f7                   cmovel  %edi, %r14d
// 1f8: 4e 8b 64 fd 00                movq    (%rbp,%r15,8), %r12
// 1fd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ff:  R_X86_64_64  PyMethodDescr_Type
// 207: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 20c: 75 21                         jne     0x22f <_JIT_ENTRY+0x22f>
// 20e: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 213: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 21b: 75 12                         jne     0x22f <_JIT_ENTRY+0x22f>
// 21d: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 221: 48 8b 3e                      movq    (%rsi), %rdi
// 224: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 228: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 22d: 74 2c                         je      0x25b <_JIT_ENTRY+0x25b>
// 22f: 48 29 d9                      subq    %rbx, %rcx
// 232: 48 83 c1 b8                   addq    $-0x48, %rcx
// 236: 48 c1 e9 03                   shrq    $0x3, %rcx
// 23a: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 23d: 48 8b 03                      movq    (%rbx), %rax
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  _JIT_TARGET
// 24a: 89 c9                         movl    %ecx, %ecx
// 24c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 250: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 256: e9 f6 00 00 00                jmp     0x351 <_JIT_ENTRY+0x351>
// 25b: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 260: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 265: 48 85 d2                      testq   %rdx, %rdx
// 268: 0f 94 c3                      sete    %bl
// 26b: 41 8d 46 ff                   leal    -0x1(%r14), %eax
// 26f: 48 89 34 24                   movq    %rsi, (%rsp)
// 273: 48 8b 0c 24                   movq    (%rsp), %rcx
// 277: 48 8d 71 08                   leaq    0x8(%rcx), %rsi
// 27b: 48 63 d0                      movslq  %eax, %rdx
// 27e: 41 ff 50 08                   callq   *0x8(%r8)
// 282: 48 8b 0c 24                   movq    (%rsp), %rcx
// 286: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _JIT_OPARG
// 295: 66 85 c0                      testw   %ax, %ax
// 298: 0f 94 c0                      sete    %al
// 29b: 84 c3                         testb   %al, %bl
// 29d: 0f 84 bd 00 00 00             je      0x360 <_JIT_ENTRY+0x360>
// 2a3: 49 8b 04 24                   movq    (%r12), %rax
// 2a7: 48 85 c0                      testq   %rax, %rax
// 2aa: 7f 22                         jg      0x2ce <_JIT_ENTRY+0x2ce>
// 2ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ae:  R_X86_64_64  .rodata.str1.1
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_NegativeRefcount
// 2c0: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 2c5: 4c 89 e2                      movq    %r12, %rdx
// 2c8: ff d0                         callq   *%rax
// 2ca: 49 8b 04 24                   movq    (%r12), %rax
// 2ce: 85 c0                         testl   %eax, %eax
// 2d0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2d5: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2da: 78 21                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 ff 0c 24                   decq    (%r12)
// 2ec: 75 0f                         jne     0x2fd <_JIT_ENTRY+0x2fd>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_Dealloc
// 2f8: 4c 89 e7                      movq    %r12, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 301: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 306: 48 85 c0                      testq   %rax, %rax
// 309: 74 35                         je      0x340 <_JIT_ENTRY+0x340>
// 30b: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 30f: 49 89 07                      movq    %rax, (%r15)
// 312: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 317: 49 8b 47 10                   movq    0x10(%r15), %rax
// 31b: 48 8b 00                      movq    (%rax), %rax
// 31e: 84 c0                         testb   %al, %al
// 320: 0f 84 cb 00 00 00             je      0x3f1 <_JIT_ENTRY+0x3f1>
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_HandlePending
// 330: 4c 89 ff                      movq    %r15, %rdi
// 333: ff d0                         callq   *%rax
// 335: 85 c0                         testl   %eax, %eax
// 337: 0f 84 b4 00 00 00             je      0x3f1 <_JIT_ENTRY+0x3f1>
// 33d: 4d 89 f7                      movq    %r14, %r15
// 340: 49 29 df                      subq    %rbx, %r15
// 343: 49 83 c7 b8                   addq    $-0x48, %r15
// 347: 49 c1 ef 03                   shrq    $0x3, %r15
// 34b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 34f: 31 c0                         xorl    %eax, %eax
// 351: 48 83 c4 28                   addq    $0x28, %rsp
// 355: 5b                            popq    %rbx
// 356: 41 5c                         popq    %r12
// 358: 41 5d                         popq    %r13
// 35a: 41 5e                         popq    %r14
// 35c: 41 5f                         popq    %r15
// 35e: 5d                            popq    %rbp
// 35f: c3                            retq
// 360: 41 83 fe 02                   cmpl    $0x2, %r14d
// 364: bd 01 00 00 00                movl    $0x1, %ebp
// 369: 41 0f 43 ee                   cmovael %r14d, %ebp
// 36d: 31 db                         xorl    %ebx, %ebx
// 36f: eb 1b                         jmp     0x38c <_JIT_ENTRY+0x38c>
// 371: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 380: 48 ff c3                      incq    %rbx
// 383: 48 39 dd                      cmpq    %rbx, %rbp
// 386: 0f 84 17 ff ff ff             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 38c: 4c 8b 34 d9                   movq    (%rcx,%rbx,8), %r14
// 390: 49 8b 06                      movq    (%r14), %rax
// 393: 48 85 c0                      testq   %rax, %rax
// 396: 7e 06                         jle     0x39e <_JIT_ENTRY+0x39e>
// 398: 85 c0                         testl   %eax, %eax
// 39a: 78 e4                         js      0x380 <_JIT_ENTRY+0x380>
// 39c: eb 29                         jmp     0x3c7 <_JIT_ENTRY+0x3c7>
// 39e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a0:  R_X86_64_64  .rodata.str1.1
// 3a8: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 3ad: 4c 89 f2                      movq    %r14, %rdx
// 3b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b2:  R_X86_64_64  _Py_NegativeRefcount
// 3ba: ff d0                         callq   *%rax
// 3bc: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3c0: 49 8b 06                      movq    (%r14), %rax
// 3c3: 85 c0                         testl   %eax, %eax
// 3c5: 78 b9                         js      0x380 <_JIT_ENTRY+0x380>
// 3c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3d1: ff d0                         callq   *%rax
// 3d3: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3d7: 49 ff 0e                      decq    (%r14)
// 3da: 75 a4                         jne     0x380 <_JIT_ENTRY+0x380>
// 3dc: 4c 89 f7                      movq    %r14, %rdi
// 3df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e1:  R_X86_64_64  _Py_Dealloc
// 3e9: ff d0                         callq   *%rax
// 3eb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3ef: eb 8f                         jmp     0x380 <_JIT_ENTRY+0x380>
// 3f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f3:  R_X86_64_64  _JIT_CONTINUE
// 3fb: 48 89 df                      movq    %rbx, %rdi
// 3fe: 4c 89 f6                      movq    %r14, %rsi
// 401: 4c 89 fa                      movq    %r15, %rdx
// 404: 48 83 c4 28                   addq    $0x28, %rsp
// 408: 5b                            popq    %rbx
// 409: 41 5c                         popq    %r12
// 40b: 41 5d                         popq    %r13
// 40d: 41 5e                         popq    %r14
// 40f: 41 5f                         popq    %r15
// 411: 5d                            popq    %rbp
// 412: ff e0                         jmpq    *%rax
// 414: 
static const unsigned char _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[1045] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x1e, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xdd, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xc7, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xb3, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xf9, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf9, 0x4c, 0x63, 0xc1, 0x4a, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe9, 0x89, 0xfa, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x4d, 0x01, 0xc5, 0x4a, 0x8b, 0x54, 0xed, 0x00, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf9, 0x4d, 0x63, 0xf9, 0x4d, 0x01, 0xc7, 0x44, 0x8d, 0x77, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x44, 0x0f, 0x44, 0xf7, 0x4e, 0x8b, 0x64, 0xfd, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x2c, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf6, 0x00, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x46, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x71, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x3c, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x35, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x07, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xee, 0x31, 0xdb, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x48, 0x39, 0xdd, 0x0f, 0x84, 0x17, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x34, 0xd9, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x29, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xb9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xeb, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 48: 0f 84 3e 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 4e: 48 89 1c 24                   movq    %rbx, (%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 13 02 00 00                jmp     0x335 <_JIT_ENTRY+0x335>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 1c 24                   movq    (%rsp), %rbx
// 128: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 d3 01 00 00             js      0x335 <_JIT_ENTRY+0x335>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 bd 01 00 00             jne     0x335 <_JIT_ENTRY+0x335>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 a9 01 00 00                jmp     0x335 <_JIT_ENTRY+0x335>
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c1                      movzwl  %cx, %eax
// 199: 48 89 c6                      movq    %rax, %rsi
// 19c: 48 f7 de                      negq    %rsi
// 19f: 0f b7 f9                      movzwl  %cx, %edi
// 1a2: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1aa: 48 f7 d9                      negq    %rcx
// 1ad: 4c 89 64 0d 00                movq    %r12, (%rbp,%rcx)
// 1b2: b9 01 00 00 00                movl    $0x1, %ecx
// 1b7: 29 f9                         subl    %edi, %ecx
// 1b9: 4c 63 c1                      movslq  %ecx, %r8
// 1bc: 4a 8d 0c c5 00 00 00 00       leaq    (,%r8,8), %rcx
// 1c4: 48 01 e9                      addq    %rbp, %rcx
// 1c7: 89 fa                         movl    %edi, %edx
// 1c9: f7 d2                         notl    %edx
// 1cb: 4c 63 ea                      movslq  %edx, %r13
// 1ce: 4d 01 c5                      addq    %r8, %r13
// 1d1: 4a 8b 54 ed 00                movq    (%rbp,%r13,8), %rdx
// 1d6: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 1dc: 41 29 f9                      subl    %edi, %r9d
// 1df: 49 89 ea                      movq    %rbp, %r10
// 1e2: 49 63 e9                      movslq  %r9d, %rbp
// 1e5: 4c 01 c5                      addq    %r8, %rbp
// 1e8: 44 8d 77 01                   leal    0x1(%rdi), %r14d
// 1ec: 48 85 d2                      testq   %rdx, %rdx
// 1ef: 48 f7 d0                      notq    %rax
// 1f2: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1f6: 44 0f 44 f7                   cmovel  %edi, %r14d
// 1fa: 4d 8b 24 ea                   movq    (%r10,%rbp,8), %r12
// 1fe: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000200:  R_X86_64_64  PyMethodDescr_Type
// 208: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 20d: 75 21                         jne     0x230 <_JIT_ENTRY+0x230>
// 20f: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 214: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 21c: 75 12                         jne     0x230 <_JIT_ENTRY+0x230>
// 21e: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 222: 48 8b 3e                      movq    (%rsi), %rdi
// 225: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 229: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 22e: 74 2c                         je      0x25c <_JIT_ENTRY+0x25c>
// 230: 48 29 d9                      subq    %rbx, %rcx
// 233: 48 83 c1 b8                   addq    $-0x48, %rcx
// 237: 48 c1 e9 03                   shrq    $0x3, %rcx
// 23b: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 23e: 48 8b 03                      movq    (%rbx), %rax
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  _JIT_TARGET
// 24b: 89 c9                         movl    %ecx, %ecx
// 24d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 251: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 257: e9 ea 00 00 00                jmp     0x346 <_JIT_ENTRY+0x346>
// 25c: 48 89 1c 24                   movq    %rbx, (%rsp)
// 260: 48 85 d2                      testq   %rdx, %rdx
// 263: 0f 94 c3                      sete    %bl
// 266: 41 8d 46 ff                   leal    -0x1(%r14), %eax
// 26a: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 26f: 48 83 c6 08                   addq    $0x8, %rsi
// 273: 48 63 d0                      movslq  %eax, %rdx
// 276: 31 c9                         xorl    %ecx, %ecx
// 278: 41 ff 50 08                   callq   *0x8(%r8)
// 27c: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _JIT_OPARG
// 28b: 66 85 c0                      testw   %ax, %ax
// 28e: 0f 94 c0                      sete    %al
// 291: 84 c3                         testb   %al, %bl
// 293: 0f 84 bc 00 00 00             je      0x355 <_JIT_ENTRY+0x355>
// 299: 49 8b 04 24                   movq    (%r12), %rax
// 29d: 48 85 c0                      testq   %rax, %rax
// 2a0: 7f 22                         jg      0x2c4 <_JIT_ENTRY+0x2c4>
// 2a2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a4:  R_X86_64_64  .rodata.str1.1
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_NegativeRefcount
// 2b6: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 2bb: 4c 89 e2                      movq    %r12, %rdx
// 2be: ff d0                         callq   *%rax
// 2c0: 49 8b 04 24                   movq    (%r12), %rax
// 2c4: 85 c0                         testl   %eax, %eax
// 2c6: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2ca: 78 21                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 ff 0c 24                   decq    (%r12)
// 2dc: 75 0f                         jne     0x2ed <_JIT_ENTRY+0x2ed>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_Dealloc
// 2e8: 4c 89 e7                      movq    %r12, %rdi
// 2eb: ff d0                         callq   *%rax
// 2ed: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2f2: 4c 8d 3c e8                   leaq    (%rax,%rbp,8), %r15
// 2f6: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2fb: 48 85 c9                      testq   %rcx, %rcx
// 2fe: 74 35                         je      0x335 <_JIT_ENTRY+0x335>
// 300: 4e 8d 34 e8                   leaq    (%rax,%r13,8), %r14
// 304: 49 89 0f                      movq    %rcx, (%r15)
// 307: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 30c: 49 8b 47 10                   movq    0x10(%r15), %rax
// 310: 48 8b 00                      movq    (%rax), %rax
// 313: 84 c0                         testb   %al, %al
// 315: 0f 84 bf 00 00 00             je      0x3da <_JIT_ENTRY+0x3da>
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_HandlePending
// 325: 4c 89 ff                      movq    %r15, %rdi
// 328: ff d0                         callq   *%rax
// 32a: 85 c0                         testl   %eax, %eax
// 32c: 0f 84 a8 00 00 00             je      0x3da <_JIT_ENTRY+0x3da>
// 332: 4d 89 f7                      movq    %r14, %r15
// 335: 49 29 df                      subq    %rbx, %r15
// 338: 49 83 c7 b8                   addq    $-0x48, %r15
// 33c: 49 c1 ef 03                   shrq    $0x3, %r15
// 340: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 344: 31 c0                         xorl    %eax, %eax
// 346: 48 83 c4 28                   addq    $0x28, %rsp
// 34a: 5b                            popq    %rbx
// 34b: 41 5c                         popq    %r12
// 34d: 41 5d                         popq    %r13
// 34f: 41 5e                         popq    %r14
// 351: 41 5f                         popq    %r15
// 353: 5d                            popq    %rbp
// 354: c3                            retq
// 355: 41 83 fe 02                   cmpl    $0x2, %r14d
// 359: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 35f: 45 0f 43 fe                   cmovael %r14d, %r15d
// 363: 31 db                         xorl    %ebx, %ebx
// 365: eb 15                         jmp     0x37c <_JIT_ENTRY+0x37c>
// 367: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 370: 48 ff c3                      incq    %rbx
// 373: 49 39 df                      cmpq    %rbx, %r15
// 376: 0f 84 1d ff ff ff             je      0x299 <_JIT_ENTRY+0x299>
// 37c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 381: 4c 8b 34 d8                   movq    (%rax,%rbx,8), %r14
// 385: 49 8b 06                      movq    (%r14), %rax
// 388: 48 85 c0                      testq   %rax, %rax
// 38b: 7e 06                         jle     0x393 <_JIT_ENTRY+0x393>
// 38d: 85 c0                         testl   %eax, %eax
// 38f: 78 df                         js      0x370 <_JIT_ENTRY+0x370>
// 391: eb 25                         jmp     0x3b8 <_JIT_ENTRY+0x3b8>
// 393: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000395:  R_X86_64_64  .rodata.str1.1
// 39d: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 3a2: 4c 89 f2                      movq    %r14, %rdx
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  _Py_NegativeRefcount
// 3af: ff d0                         callq   *%rax
// 3b1: 49 8b 06                      movq    (%r14), %rax
// 3b4: 85 c0                         testl   %eax, %eax
// 3b6: 78 b8                         js      0x370 <_JIT_ENTRY+0x370>
// 3b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3c2: ff d0                         callq   *%rax
// 3c4: 49 ff 0e                      decq    (%r14)
// 3c7: 75 a7                         jne     0x370 <_JIT_ENTRY+0x370>
// 3c9: 4c 89 f7                      movq    %r14, %rdi
// 3cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ce:  R_X86_64_64  _Py_Dealloc
// 3d6: ff d0                         callq   *%rax
// 3d8: eb 96                         jmp     0x370 <_JIT_ENTRY+0x370>
// 3da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003dc:  R_X86_64_64  _JIT_CONTINUE
// 3e4: 48 89 df                      movq    %rbx, %rdi
// 3e7: 4c 89 f6                      movq    %r14, %rsi
// 3ea: 4c 89 fa                      movq    %r15, %rdx
// 3ed: 48 83 c4 28                   addq    $0x28, %rsp
// 3f1: 5b                            popq    %rbx
// 3f2: 41 5c                         popq    %r12
// 3f4: 41 5d                         popq    %r13
// 3f6: 41 5e                         popq    %r14
// 3f8: 41 5f                         popq    %r15
// 3fa: 5d                            popq    %rbp
// 3fb: ff e0                         jmpq    *%rax
// 3fd: 
static const unsigned char _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[1022] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0x84, 0x3e, 0x01, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x13, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xbd, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xa9, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xf9, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf9, 0x4c, 0x63, 0xc1, 0x4a, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe9, 0x89, 0xfa, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x4d, 0x01, 0xc5, 0x4a, 0x8b, 0x54, 0xed, 0x00, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf9, 0x49, 0x89, 0xea, 0x49, 0x63, 0xe9, 0x4c, 0x01, 0xc5, 0x44, 0x8d, 0x77, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x44, 0x0f, 0x44, 0xf7, 0x4d, 0x8b, 0x24, 0xea, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x12, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x2c, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xea, 0x00, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x46, 0xff, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x8d, 0x3c, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x35, 0x4e, 0x8d, 0x34, 0xe8, 0x49, 0x89, 0x0f, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfe, 0x31, 0xdb, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x1d, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0xd8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xb8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xa7, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x96, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x395, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3dc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 54 01 00 00             je      0x19d <_JIT_ENTRY+0x19d>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 5a: 4d 89 ef                      movq    %r13, %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 98 00 00 00             je      0x124 <_JIT_ENTRY+0x124>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 11f: 4d 89 ef                      movq    %r13, %r15
// 122: eb 5e                         jmp     0x182 <_JIT_ENTRY+0x182>
// 124: 85 ed                         testl   %ebp, %ebp
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 130: 74 6b                         je      0x19d <_JIT_ENTRY+0x19d>
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14a: 4c 89 e2                      movq    %r12, %rdx
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_NegativeRefcount
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 21                         js      0x182 <_JIT_ENTRY+0x182>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 75 0f                         jne     0x182 <_JIT_ENTRY+0x182>
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_Dealloc
// 180: ff d0                         callq   *%rax
// 182: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 187: 49 29 c7                      subq    %rax, %r15
// 18a: 49 83 c7 b8                   addq    $-0x48, %r15
// 18e: 49 c1 ef 03                   shrq    $0x3, %r15
// 192: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 196: 31 c0                         xorl    %eax, %eax
// 198: e9 7e 01 00 00                jmp     0x31b <_JIT_ENTRY+0x31b>
// 19d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: 0f b7 c1                      movzwl  %cx, %eax
// 1aa: 48 89 c6                      movq    %rax, %rsi
// 1ad: 48 f7 de                      negq    %rsi
// 1b0: 0f b7 c9                      movzwl  %cx, %ecx
// 1b3: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1bb: 48 f7 da                      negq    %rdx
// 1be: 4d 89 64 15 00                movq    %r12, (%r13,%rdx)
// 1c3: ba 01 00 00 00                movl    $0x1, %edx
// 1c8: 29 ca                         subl    %ecx, %edx
// 1ca: 48 63 d2                      movslq  %edx, %rdx
// 1cd: 89 cf                         movl    %ecx, %edi
// 1cf: f7 d7                         notl    %edi
// 1d1: 4c 63 f7                      movslq  %edi, %r14
// 1d4: 49 01 d6                      addq    %rdx, %r14
// 1d7: 31 ff                         xorl    %edi, %edi
// 1d9: 66 85 c0                      testw   %ax, %ax
// 1dc: 40 0f 94 c7                   sete    %dil
// 1e0: 45 31 c0                      xorl    %r8d, %r8d
// 1e3: 66 83 f8 01                   cmpw    $0x1, %ax
// 1e7: 41 0f 94 c0                   sete    %r8b
// 1eb: 4b 83 7c f5 00 00             cmpq    $0x0, (%r13,%r14,8)
// 1f1: 48 f7 d0                      notq    %rax
// 1f4: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1f8: 4d 8d 7c d5 00                leaq    (%r13,%rdx,8), %r15
// 1fd: 41 0f 44 f8                   cmovel  %r8d, %edi
// 201: 40 80 ff 01                   cmpb    $0x1, %dil
// 205: 0f 85 e7 00 00 00             jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 213: 29 ce                         subl    %ecx, %esi
// 215: 48 63 de                      movslq  %esi, %rbx
// 218: 48 01 d3                      addq    %rdx, %rbx
// 21b: 4d 8b 64 dd 00                movq    (%r13,%rbx,8), %r12
// 220: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000222:  R_X86_64_64  PyMethodDescr_Type
// 22a: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 22f: 0f 85 bd 00 00 00             jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 235: 4d 8b 2c c7                   movq    (%r15,%rax,8), %r13
// 239: 49 8b 45 08                   movq    0x8(%r13), %rax
// 23d: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 242: 0f 85 aa 00 00 00             jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 248: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 24d: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 251: 0f 85 9b 00 00 00             jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 257: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 25c: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 261: 48 8b 50 08                   movq    0x8(%rax), %rdx
// 265: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 26a: 8b 45 2c                      movl    0x2c(%rbp), %eax
// 26d: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 270: 89 4d 2c                      movl    %ecx, 0x2c(%rbp)
// 273: 85 c0                         testl   %eax, %eax
// 275: 0f 8e af 00 00 00             jle     0x32a <_JIT_ENTRY+0x32a>
// 27b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 280: 4c 8d 3c d8                   leaq    (%rax,%rbx,8), %r15
// 284: 4c 89 ef                      movq    %r13, %rdi
// 287: 31 f6                         xorl    %esi, %esi
// 289: ff d2                         callq   *%rdx
// 28b: 48 89 c3                      movq    %rax, %rbx
// 28e: ff 45 2c                      incl    0x2c(%rbp)
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  .text+0x380
// 29b: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 2a0: 4c 89 ee                      movq    %r13, %rsi
// 2a3: 49 89 c5                      movq    %rax, %r13
// 2a6: ff d0                         callq   *%rax
// 2a8: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 2ad: 4c 89 e6                      movq    %r12, %rsi
// 2b0: 41 ff d5                      callq   *%r13
// 2b3: 48 85 db                      testq   %rbx, %rbx
// 2b6: 0f 84 c6 fe ff ff             je      0x182 <_JIT_ENTRY+0x182>
// 2bc: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2c1: 4e 8d 34 f0                   leaq    (%rax,%r14,8), %r14
// 2c5: 49 89 1f                      movq    %rbx, (%r15)
// 2c8: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 2cc: 48 8b 00                      movq    (%rax), %rax
// 2cf: 84 c0                         testb   %al, %al
// 2d1: 0f 84 83 00 00 00             je      0x35a <_JIT_ENTRY+0x35a>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_HandlePending
// 2e1: 48 89 ef                      movq    %rbp, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 85 c0                         testl   %eax, %eax
// 2e8: 74 70                         je      0x35a <_JIT_ENTRY+0x35a>
// 2ea: 4d 89 f7                      movq    %r14, %r15
// 2ed: e9 90 fe ff ff                jmp     0x182 <_JIT_ENTRY+0x182>
// 2f2: 49 29 ef                      subq    %rbp, %r15
// 2f5: 49 83 c7 b8                   addq    $-0x48, %r15
// 2f9: 49 c1 ef 03                   shrq    $0x3, %r15
// 2fd: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 301: 48 8b 45 00                   movq    (%rbp), %rax
// 305: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000307:  R_X86_64_64  _JIT_TARGET
// 30f: 89 c9                         movl    %ecx, %ecx
// 311: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 315: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 31b: 48 83 c4 28                   addq    $0x28, %rsp
// 31f: 5b                            popq    %rbx
// 320: 41 5c                         popq    %r12
// 322: 41 5d                         popq    %r13
// 324: 41 5e                         popq    %r14
// 326: 41 5f                         popq    %r15
// 328: 5d                            popq    %rbp
// 329: c3                            retq
// 32a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000032c:  R_X86_64_64  .rodata.str1.1+0x39
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_CheckRecursiveCall
// 33e: 48 89 ef                      movq    %rbp, %rdi
// 341: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 346: ff d0                         callq   *%rax
// 348: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 34d: 85 c0                         testl   %eax, %eax
// 34f: 0f 85 2d fe ff ff             jne     0x182 <_JIT_ENTRY+0x182>
// 355: e9 21 ff ff ff                jmp     0x27b <_JIT_ENTRY+0x27b>
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _JIT_CONTINUE
// 364: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 369: 4c 89 f6                      movq    %r14, %rsi
// 36c: 48 89 ea                      movq    %rbp, %rdx
// 36f: 48 83 c4 28                   addq    $0x28, %rsp
// 373: 5b                            popq    %rbx
// 374: 41 5c                         popq    %r12
// 376: 41 5d                         popq    %r13
// 378: 41 5e                         popq    %r14
// 37a: 41 5f                         popq    %r15
// 37c: 5d                            popq    %rbp
// 37d: ff e0                         jmpq    *%rax
// 37f: 90                            nop
// 
// 0000000000000380 <Py_DECREF>:
// 380: 53                            pushq   %rbx
// 381: 48 89 f3                      movq    %rsi, %rbx
// 384: 48 8b 06                      movq    (%rsi), %rax
// 387: 48 85 c0                      testq   %rax, %rax
// 38a: 7e 06                         jle     0x392 <Py_DECREF+0x12>
// 38c: 85 c0                         testl   %eax, %eax
// 38e: 79 24                         jns     0x3b4 <Py_DECREF+0x34>
// 390: eb 33                         jmp     0x3c5 <Py_DECREF+0x45>
// 392: 89 fe                         movl    %edi, %esi
// 394: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000396:  R_X86_64_64  .rodata.str1.1
// 39e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a0:  R_X86_64_64  _Py_NegativeRefcount
// 3a8: 48 89 da                      movq    %rbx, %rdx
// 3ab: ff d0                         callq   *%rax
// 3ad: 48 8b 03                      movq    (%rbx), %rax
// 3b0: 85 c0                         testl   %eax, %eax
// 3b2: 78 11                         js      0x3c5 <Py_DECREF+0x45>
// 3b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3be: ff d0                         callq   *%rax
// 3c0: 48 ff 0b                      decq    (%rbx)
// 3c3: 74 02                         je      0x3c7 <Py_DECREF+0x47>
// 3c5: 5b                            popq    %rbx
// 3c6: c3                            retq
// 3c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c9:  R_X86_64_64  _Py_Dealloc
// 3d1: 48 89 df                      movq    %rbx, %rdi
// 3d4: 5b                            popq    %rbx
// 3d5: ff e0                         jmpq    *%rax
// 3d7: 
static const unsigned char _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[984] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xef, 0xeb, 0x5e, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x6b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0xe9, 0x7e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x64, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x89, 0xcf, 0xf7, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xd6, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x7c, 0xf5, 0x00, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x7c, 0xd5, 0x00, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xde, 0x48, 0x01, 0xd3, 0x4d, 0x8b, 0x64, 0xdd, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xbd, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x2c, 0xc7, 0x49, 0x8b, 0x45, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0x9b, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x08, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x45, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4d, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0xaf, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8d, 0x3c, 0xd8, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0xff, 0xd2, 0x48, 0x89, 0xc3, 0xff, 0x45, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x49, 0x89, 0xc5, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xc6, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4e, 0x8d, 0x34, 0xf0, 0x49, 0x89, 0x1f, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x70, 0x4d, 0x89, 0xf7, 0xe9, 0x90, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x54, 0x24, 0x18, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x85, 0xc0, 0x0f, 0x85, 0x2d, 0xfe, 0xff, 0xff, 0xe9, 0x21, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x90, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x380},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_O.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 51 01 00 00             je      0x19a <_JIT_ENTRY+0x19a>
// 49: 48 89 2c 24                   movq    %rbp, (%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 48 89 2c 24                   movq    %rbp, (%rsp)
// 11e: 4d 89 ef                      movq    %r13, %r15
// 121: eb 5d                         jmp     0x180 <_JIT_ENTRY+0x180>
// 123: 85 ed                         testl   %ebp, %ebp
// 125: 48 8b 2c 24                   movq    (%rsp), %rbp
// 129: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12e: 74 6a                         je      0x19a <_JIT_ENTRY+0x19a>
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 e2                      movq    %r12, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 78 21                         js      0x180 <_JIT_ENTRY+0x180>
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 169: ff d0                         callq   *%rax
// 16b: 49 ff 0c 24                   decq    (%r12)
// 16f: 75 0f                         jne     0x180 <_JIT_ENTRY+0x180>
// 171: 4c 89 e7                      movq    %r12, %rdi
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: ff d0                         callq   *%rax
// 180: 48 8b 04 24                   movq    (%rsp), %rax
// 184: 49 29 c7                      subq    %rax, %r15
// 187: 49 83 c7 b8                   addq    $-0x48, %r15
// 18b: 49 c1 ef 03                   shrq    $0x3, %r15
// 18f: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 193: 31 c0                         xorl    %eax, %eax
// 195: e9 d4 00 00 00                jmp     0x26e <_JIT_ENTRY+0x26e>
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: 0f b7 c1                      movzwl  %cx, %eax
// 1a7: 48 89 c6                      movq    %rax, %rsi
// 1aa: 48 f7 de                      negq    %rsi
// 1ad: 0f b7 c9                      movzwl  %cx, %ecx
// 1b0: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b8: 48 f7 da                      negq    %rdx
// 1bb: 4d 89 64 15 00                movq    %r12, (%r13,%rdx)
// 1c0: ba 01 00 00 00                movl    $0x1, %edx
// 1c5: 29 ca                         subl    %ecx, %edx
// 1c7: 48 63 d2                      movslq  %edx, %rdx
// 1ca: 89 cf                         movl    %ecx, %edi
// 1cc: f7 d7                         notl    %edi
// 1ce: 4c 63 f7                      movslq  %edi, %r14
// 1d1: 49 01 d6                      addq    %rdx, %r14
// 1d4: 31 ff                         xorl    %edi, %edi
// 1d6: 66 83 f8 01                   cmpw    $0x1, %ax
// 1da: 40 0f 94 c7                   sete    %dil
// 1de: 45 31 c0                      xorl    %r8d, %r8d
// 1e1: 66 83 f8 02                   cmpw    $0x2, %ax
// 1e5: 41 0f 94 c0                   sete    %r8b
// 1e9: 4b 83 7c f5 00 00             cmpq    $0x0, (%r13,%r14,8)
// 1ef: 48 f7 d0                      notq    %rax
// 1f2: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 1f6: 4d 8d 7c d5 00                leaq    (%r13,%rdx,8), %r15
// 1fb: 41 0f 44 f8                   cmovel  %r8d, %edi
// 1ff: 40 80 ff 01                   cmpb    $0x1, %dil
// 203: 75 40                         jne     0x245 <_JIT_ENTRY+0x245>
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 20d: 29 ce                         subl    %ecx, %esi
// 20f: 48 63 de                      movslq  %esi, %rbx
// 212: 48 01 d3                      addq    %rdx, %rbx
// 215: 4d 8b 64 dd 00                movq    (%r13,%rbx,8), %r12
// 21a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021c:  R_X86_64_64  PyMethodDescr_Type
// 224: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 229: 75 1a                         jne     0x245 <_JIT_ENTRY+0x245>
// 22b: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 230: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 234: 75 0f                         jne     0x245 <_JIT_ENTRY+0x245>
// 236: 4d 8b 2c c7                   movq    (%r15,%rax,8), %r13
// 23a: 49 8b 55 08                   movq    0x8(%r13), %rdx
// 23e: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 243: 74 38                         je      0x27d <_JIT_ENTRY+0x27d>
// 245: 49 29 ef                      subq    %rbp, %r15
// 248: 49 83 c7 b8                   addq    $-0x48, %r15
// 24c: 49 c1 ef 03                   shrq    $0x3, %r15
// 250: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 254: 48 8b 45 00                   movq    (%rbp), %rax
// 258: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025a:  R_X86_64_64  _JIT_TARGET
// 262: 89 c9                         movl    %ecx, %ecx
// 264: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 268: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 282: 48 89 2c 24                   movq    %rbp, (%rsp)
// 286: 49 8b 54 c7 08                movq    0x8(%r15,%rax,8), %rdx
// 28b: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 28f: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 294: 8b 45 2c                      movl    0x2c(%rbp), %eax
// 297: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 29a: 89 4d 2c                      movl    %ecx, 0x2c(%rbp)
// 29d: 85 c0                         testl   %eax, %eax
// 29f: 0f 8e 8a 00 00 00             jle     0x32f <_JIT_ENTRY+0x32f>
// 2a5: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2aa: 4c 8d 3c d8                   leaq    (%rax,%rbx,8), %r15
// 2ae: 4c 89 ef                      movq    %r13, %rdi
// 2b1: 48 89 d3                      movq    %rdx, %rbx
// 2b4: 48 89 d6                      movq    %rdx, %rsi
// 2b7: 41 ff d0                      callq   *%r8
// 2ba: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2bf: ff 45 2c                      incl    0x2c(%rbp)
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  .text+0x390
// 2cc: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 2d1: 4c 89 ee                      movq    %r13, %rsi
// 2d4: 49 89 c5                      movq    %rax, %r13
// 2d7: ff d0                         callq   *%rax
// 2d9: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 2de: 48 89 de                      movq    %rbx, %rsi
// 2e1: 41 ff d5                      callq   *%r13
// 2e4: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 2e9: 4c 89 e6                      movq    %r12, %rsi
// 2ec: 41 ff d5                      callq   *%r13
// 2ef: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2f4: 48 85 c9                      testq   %rcx, %rcx
// 2f7: 0f 84 83 fe ff ff             je      0x180 <_JIT_ENTRY+0x180>
// 2fd: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 302: 4e 8d 34 f0                   leaq    (%rax,%r14,8), %r14
// 306: 49 89 0f                      movq    %rcx, (%r15)
// 309: 48 8b 45 10                   movq    0x10(%rbp), %rax
// 30d: 48 8b 00                      movq    (%rax), %rax
// 310: 84 c0                         testb   %al, %al
// 312: 74 55                         je      0x369 <_JIT_ENTRY+0x369>
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _Py_HandlePending
// 31e: 48 89 ef                      movq    %rbp, %rdi
// 321: ff d0                         callq   *%rax
// 323: 85 c0                         testl   %eax, %eax
// 325: 74 42                         je      0x369 <_JIT_ENTRY+0x369>
// 327: 4d 89 f7                      movq    %r14, %r15
// 32a: e9 51 fe ff ff                jmp     0x180 <_JIT_ENTRY+0x180>
// 32f: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 334: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000336:  R_X86_64_64  .rodata.str1.1+0x39
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _Py_CheckRecursiveCall
// 348: 48 89 ef                      movq    %rbp, %rdi
// 34b: 4c 89 44 24 18                movq    %r8, 0x18(%rsp)
// 350: ff d0                         callq   *%rax
// 352: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 357: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 35c: 85 c0                         testl   %eax, %eax
// 35e: 0f 85 1c fe ff ff             jne     0x180 <_JIT_ENTRY+0x180>
// 364: e9 3c ff ff ff                jmp     0x2a5 <_JIT_ENTRY+0x2a5>
// 369: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036b:  R_X86_64_64  _JIT_CONTINUE
// 373: 48 8b 3c 24                   movq    (%rsp), %rdi
// 377: 4c 89 f6                      movq    %r14, %rsi
// 37a: 48 89 ea                      movq    %rbp, %rdx
// 37d: 48 83 c4 28                   addq    $0x28, %rsp
// 381: 5b                            popq    %rbx
// 382: 41 5c                         popq    %r12
// 384: 41 5d                         popq    %r13
// 386: 41 5e                         popq    %r14
// 388: 41 5f                         popq    %r15
// 38a: 5d                            popq    %rbp
// 38b: ff e0                         jmpq    *%rax
// 38d: 0f 1f 00                      nopl    (%rax)
// 
// 0000000000000390 <Py_DECREF>:
// 390: 53                            pushq   %rbx
// 391: 48 89 f3                      movq    %rsi, %rbx
// 394: 48 8b 06                      movq    (%rsi), %rax
// 397: 48 85 c0                      testq   %rax, %rax
// 39a: 7e 06                         jle     0x3a2 <Py_DECREF+0x12>
// 39c: 85 c0                         testl   %eax, %eax
// 39e: 79 24                         jns     0x3c4 <Py_DECREF+0x34>
// 3a0: eb 33                         jmp     0x3d5 <Py_DECREF+0x45>
// 3a2: 89 fe                         movl    %edi, %esi
// 3a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a6:  R_X86_64_64  .rodata.str1.1
// 3ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b0:  R_X86_64_64  _Py_NegativeRefcount
// 3b8: 48 89 da                      movq    %rbx, %rdx
// 3bb: ff d0                         callq   *%rax
// 3bd: 48 8b 03                      movq    (%rbx), %rax
// 3c0: 85 c0                         testl   %eax, %eax
// 3c2: 78 11                         js      0x3d5 <Py_DECREF+0x45>
// 3c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ce: ff d0                         callq   *%rax
// 3d0: 48 ff 0b                      decq    (%rbx)
// 3d3: 74 02                         je      0x3d7 <Py_DECREF+0x47>
// 3d5: 5b                            popq    %rbx
// 3d6: c3                            retq
// 3d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d9:  R_X86_64_64  _Py_Dealloc
// 3e1: 48 89 df                      movq    %rbx, %rdi
// 3e4: 5b                            popq    %rbx
// 3e5: ff e0                         jmpq    *%rax
// 3e7: 
static const unsigned char _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_O_code_body[1000] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x51, 0x01, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x48, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0xeb, 0x5d, 0x85, 0xed, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x6a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0xe9, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x64, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x89, 0xcf, 0xf7, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xd6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x7c, 0xf5, 0x00, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x7c, 0xd5, 0x00, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x40, 0x4c, 0x89, 0xef, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xde, 0x48, 0x01, 0xd3, 0x4d, 0x8b, 0x64, 0xdd, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1a, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x0f, 0x4d, 0x8b, 0x2c, 0xc7, 0x49, 0x8b, 0x55, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x38, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x54, 0xc7, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x45, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4d, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0x8a, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x8d, 0x3c, 0xd8, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xd6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xff, 0x45, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x49, 0x89, 0xc5, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xde, 0x41, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x83, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4e, 0x8d, 0x34, 0xf0, 0x49, 0x89, 0x0f, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x55, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x42, 0x4d, 0x89, 0xf7, 0xe9, 0x51, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0x44, 0x24, 0x18, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x85, 0xc0, 0x0f, 0x85, 0x1c, 0xfe, 0xff, 0xff, 0xe9, 0x3c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0x1f, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_O_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x390},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x340, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x36b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BUILD_SETplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _BUILD_SETplus_CALL_STR_1
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_STR_1.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 1c 24                   movq    %rbx, (%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 12 02 00 00                jmp     0x334 <_JIT_ENTRY+0x334>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 1c 24                   movq    (%rsp), %rbx
// 128: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 d2 01 00 00             js      0x334 <_JIT_ENTRY+0x334>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 bc 01 00 00             jne     0x334 <_JIT_ENTRY+0x334>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 a8 01 00 00                jmp     0x334 <_JIT_ENTRY+0x334>
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c1                      movzwl  %cx, %eax
// 199: 0f b7 c9                      movzwl  %cx, %ecx
// 19c: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1a0: 48 f7 d9                      negq    %rcx
// 1a3: 4d 89 64 0d 00                movq    %r12, (%r13,%rcx)
// 1a8: b9 01 00 00 00                movl    $0x1, %ecx
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 89 c2                         movl    %eax, %edx
// 1b4: f7 d2                         notl    %edx
// 1b6: 48 63 ea                      movslq  %edx, %rbp
// 1b9: 48 01 cd                      addq    %rcx, %rbp
// 1bc: 49 83 7c ed 00 00             cmpq    $0x0, (%r13,%rbp,8)
// 1c2: 75 27                         jne     0x1eb <_JIT_ENTRY+0x1eb>
// 1c4: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1c9: 29 c2                         subl    %eax, %edx
// 1cb: 48 63 c2                      movslq  %edx, %rax
// 1ce: 48 01 c8                      addq    %rcx, %rax
// 1d1: 4c 8d 3c c5 00 00 00 00       leaq    (,%rax,8), %r15
// 1d9: 4d 01 ef                      addq    %r13, %r15
// 1dc: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001de:  R_X86_64_64  PyUnicode_Type
// 1e6: 4d 39 27                      cmpq    %r12, (%r15)
// 1e9: 74 37                         je      0x222 <_JIT_ENTRY+0x222>
// 1eb: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1f3: 4c 01 e8                      addq    %r13, %rax
// 1f6: 48 29 d8                      subq    %rbx, %rax
// 1f9: 48 83 c0 b8                   addq    $-0x48, %rax
// 1fd: 48 c1 e8 03                   shrq    $0x3, %rax
// 201: 89 43 40                      movl    %eax, 0x40(%rbx)
// 204: 48 8b 03                      movq    (%rbx), %rax
// 207: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000209:  R_X86_64_64  _JIT_TARGET
// 211: 89 c9                         movl    %ecx, %ecx
// 213: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 217: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21d: e9 23 01 00 00                jmp     0x345 <_JIT_ENTRY+0x345>
// 222: 48 89 1c 24                   movq    %rbx, (%rsp)
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: 0f b7 c8                      movzwl  %ax, %ecx
// 233: ba 01 00 00 00                movl    $0x1, %edx
// 238: 29 ca                         subl    %ecx, %edx
// 23a: 48 63 ca                      movslq  %edx, %rcx
// 23d: 0f b7 c0                      movzwl  %ax, %eax
// 240: 48 29 c1                      subq    %rax, %rcx
// 243: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 248: 4d 8b 74 cd 00                movq    (%r13,%rcx,8), %r14
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  PyObject_Str
// 257: 4c 89 f7                      movq    %r14, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 49 89 c5                      movq    %rax, %r13
// 25f: 49 8b 06                      movq    (%r14), %rax
// 262: 48 85 c0                      testq   %rax, %rax
// 265: 7f 21                         jg      0x288 <_JIT_ENTRY+0x288>
// 267: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000269:  R_X86_64_64  .rodata.str1.1
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_NegativeRefcount
// 27b: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 280: 4c 89 f2                      movq    %r14, %rdx
// 283: ff d0                         callq   *%rax
// 285: 49 8b 06                      movq    (%r14), %rax
// 288: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 16                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 296: ff d3                         callq   *%rbx
// 298: 49 ff 0e                      decq    (%r14)
// 29b: 75 0f                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_Dealloc
// 2a7: 4c 89 f7                      movq    %r14, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 04 24                   movq    (%r12), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 2ce: 4c 89 e2                      movq    %r12, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 04 24                   movq    (%r12), %rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 78 1e                         js      0x2f9 <_JIT_ENTRY+0x2f9>
// 2db: ff d3                         callq   *%rbx
// 2dd: 49 ff 0c 24                   decq    (%r12)
// 2e1: 75 16                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 2e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e5:  R_X86_64_64  PyUnicode_Type
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_Dealloc
// 2f7: ff d0                         callq   *%rax
// 2f9: 4d 85 ed                      testq   %r13, %r13
// 2fc: 74 32                         je      0x330 <_JIT_ENTRY+0x330>
// 2fe: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 303: 4c 8d 34 e8                   leaq    (%rax,%rbp,8), %r14
// 307: 4d 89 2f                      movq    %r13, (%r15)
// 30a: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 30f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 313: 48 8b 00                      movq    (%rax), %rax
// 316: 84 c0                         testb   %al, %al
// 318: 74 3a                         je      0x354 <_JIT_ENTRY+0x354>
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _Py_HandlePending
// 324: 48 89 df                      movq    %rbx, %rdi
// 327: ff d0                         callq   *%rax
// 329: 85 c0                         testl   %eax, %eax
// 32b: 74 27                         je      0x354 <_JIT_ENTRY+0x354>
// 32d: 4d 89 f7                      movq    %r14, %r15
// 330: 48 8b 1c 24                   movq    (%rsp), %rbx
// 334: 49 29 df                      subq    %rbx, %r15
// 337: 49 83 c7 b8                   addq    $-0x48, %r15
// 33b: 49 c1 ef 03                   shrq    $0x3, %r15
// 33f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 343: 31 c0                         xorl    %eax, %eax
// 345: 48 83 c4 18                   addq    $0x18, %rsp
// 349: 5b                            popq    %rbx
// 34a: 41 5c                         popq    %r12
// 34c: 41 5d                         popq    %r13
// 34e: 41 5e                         popq    %r14
// 350: 41 5f                         popq    %r15
// 352: 5d                            popq    %rbp
// 353: c3                            retq
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _JIT_CONTINUE
// 35e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 362: 4c 89 f6                      movq    %r14, %rsi
// 365: 48 89 da                      movq    %rbx, %rdx
// 368: 48 83 c4 18                   addq    $0x18, %rsp
// 36c: 5b                            popq    %rbx
// 36d: 41 5c                         popq    %r12
// 36f: 41 5d                         popq    %r13
// 371: 41 5e                         popq    %r14
// 373: 41 5f                         popq    %r15
// 375: 5d                            popq    %rbp
// 376: ff e0                         jmpq    *%rax
// 378: 
static const unsigned char _BUILD_SETplus_CALL_STR_1_code_body[889] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x12, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xbc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xa8, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x48, 0x01, 0xcd, 0x49, 0x83, 0x7c, 0xed, 0x00, 0x00, 0x75, 0x27, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4c, 0x8d, 0x3c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x27, 0x74, 0x37, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x23, 0x01, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x8b, 0x74, 0xcd, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x16, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x1e, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x32, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x8d, 0x34, 0xe8, 0x4d, 0x89, 0x2f, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x4d, 0x89, 0xf7, 0x48, 0x8b, 0x1c, 0x24, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_STR_1_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_STR_1_data_holes[1];

// _BUILD_SETplus_CALL_TUPLE_1
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_TUPLE_1.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 1c 24                   movq    %rbx, (%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 12 02 00 00                jmp     0x334 <_JIT_ENTRY+0x334>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 1c 24                   movq    (%rsp), %rbx
// 128: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 d2 01 00 00             js      0x334 <_JIT_ENTRY+0x334>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 bc 01 00 00             jne     0x334 <_JIT_ENTRY+0x334>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 a8 01 00 00                jmp     0x334 <_JIT_ENTRY+0x334>
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c1                      movzwl  %cx, %eax
// 199: 0f b7 c9                      movzwl  %cx, %ecx
// 19c: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1a0: 48 f7 d9                      negq    %rcx
// 1a3: 4d 89 64 0d 00                movq    %r12, (%r13,%rcx)
// 1a8: b9 01 00 00 00                movl    $0x1, %ecx
// 1ad: 29 c1                         subl    %eax, %ecx
// 1af: 48 63 c9                      movslq  %ecx, %rcx
// 1b2: 89 c2                         movl    %eax, %edx
// 1b4: f7 d2                         notl    %edx
// 1b6: 48 63 ea                      movslq  %edx, %rbp
// 1b9: 48 01 cd                      addq    %rcx, %rbp
// 1bc: 49 83 7c ed 00 00             cmpq    $0x0, (%r13,%rbp,8)
// 1c2: 75 27                         jne     0x1eb <_JIT_ENTRY+0x1eb>
// 1c4: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1c9: 29 c2                         subl    %eax, %edx
// 1cb: 48 63 c2                      movslq  %edx, %rax
// 1ce: 48 01 c8                      addq    %rcx, %rax
// 1d1: 4c 8d 3c c5 00 00 00 00       leaq    (,%rax,8), %r15
// 1d9: 4d 01 ef                      addq    %r13, %r15
// 1dc: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001de:  R_X86_64_64  PyTuple_Type
// 1e6: 4d 39 27                      cmpq    %r12, (%r15)
// 1e9: 74 37                         je      0x222 <_JIT_ENTRY+0x222>
// 1eb: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1f3: 4c 01 e8                      addq    %r13, %rax
// 1f6: 48 29 d8                      subq    %rbx, %rax
// 1f9: 48 83 c0 b8                   addq    $-0x48, %rax
// 1fd: 48 c1 e8 03                   shrq    $0x3, %rax
// 201: 89 43 40                      movl    %eax, 0x40(%rbx)
// 204: 48 8b 03                      movq    (%rbx), %rax
// 207: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000209:  R_X86_64_64  _JIT_TARGET
// 211: 89 c9                         movl    %ecx, %ecx
// 213: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 217: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21d: e9 23 01 00 00                jmp     0x345 <_JIT_ENTRY+0x345>
// 222: 48 89 1c 24                   movq    %rbx, (%rsp)
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_OPARG
// 230: 0f b7 c8                      movzwl  %ax, %ecx
// 233: ba 01 00 00 00                movl    $0x1, %edx
// 238: 29 ca                         subl    %ecx, %edx
// 23a: 48 63 ca                      movslq  %edx, %rcx
// 23d: 0f b7 c0                      movzwl  %ax, %eax
// 240: 48 29 c1                      subq    %rax, %rcx
// 243: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 248: 4d 8b 74 cd 00                movq    (%r13,%rcx,8), %r14
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  PySequence_Tuple
// 257: 4c 89 f7                      movq    %r14, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 49 89 c5                      movq    %rax, %r13
// 25f: 49 8b 06                      movq    (%r14), %rax
// 262: 48 85 c0                      testq   %rax, %rax
// 265: 7f 21                         jg      0x288 <_JIT_ENTRY+0x288>
// 267: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000269:  R_X86_64_64  .rodata.str1.1
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_NegativeRefcount
// 27b: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 280: 4c 89 f2                      movq    %r14, %rdx
// 283: ff d0                         callq   *%rax
// 285: 49 8b 06                      movq    (%r14), %rax
// 288: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 16                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 296: ff d3                         callq   *%rbx
// 298: 49 ff 0e                      decq    (%r14)
// 29b: 75 0f                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_Dealloc
// 2a7: 4c 89 f7                      movq    %r14, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 04 24                   movq    (%r12), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 2ce: 4c 89 e2                      movq    %r12, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 04 24                   movq    (%r12), %rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 78 1e                         js      0x2f9 <_JIT_ENTRY+0x2f9>
// 2db: ff d3                         callq   *%rbx
// 2dd: 49 ff 0c 24                   decq    (%r12)
// 2e1: 75 16                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 2e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e5:  R_X86_64_64  PyTuple_Type
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_Dealloc
// 2f7: ff d0                         callq   *%rax
// 2f9: 4d 85 ed                      testq   %r13, %r13
// 2fc: 74 32                         je      0x330 <_JIT_ENTRY+0x330>
// 2fe: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 303: 4c 8d 34 e8                   leaq    (%rax,%rbp,8), %r14
// 307: 4d 89 2f                      movq    %r13, (%r15)
// 30a: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 30f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 313: 48 8b 00                      movq    (%rax), %rax
// 316: 84 c0                         testb   %al, %al
// 318: 74 3a                         je      0x354 <_JIT_ENTRY+0x354>
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _Py_HandlePending
// 324: 48 89 df                      movq    %rbx, %rdi
// 327: ff d0                         callq   *%rax
// 329: 85 c0                         testl   %eax, %eax
// 32b: 74 27                         je      0x354 <_JIT_ENTRY+0x354>
// 32d: 4d 89 f7                      movq    %r14, %r15
// 330: 48 8b 1c 24                   movq    (%rsp), %rbx
// 334: 49 29 df                      subq    %rbx, %r15
// 337: 49 83 c7 b8                   addq    $-0x48, %r15
// 33b: 49 c1 ef 03                   shrq    $0x3, %r15
// 33f: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 343: 31 c0                         xorl    %eax, %eax
// 345: 48 83 c4 18                   addq    $0x18, %rsp
// 349: 5b                            popq    %rbx
// 34a: 41 5c                         popq    %r12
// 34c: 41 5d                         popq    %r13
// 34e: 41 5e                         popq    %r14
// 350: 41 5f                         popq    %r15
// 352: 5d                            popq    %rbp
// 353: c3                            retq
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _JIT_CONTINUE
// 35e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 362: 4c 89 f6                      movq    %r14, %rsi
// 365: 48 89 da                      movq    %rbx, %rdx
// 368: 48 83 c4 18                   addq    $0x18, %rsp
// 36c: 5b                            popq    %rbx
// 36d: 41 5c                         popq    %r12
// 36f: 41 5d                         popq    %r13
// 371: 41 5e                         popq    %r14
// 373: 41 5f                         popq    %r15
// 375: 5d                            popq    %rbp
// 376: ff e0                         jmpq    *%rax
// 378: 
static const unsigned char _BUILD_SETplus_CALL_TUPLE_1_code_body[889] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x12, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xbc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xa8, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x48, 0x01, 0xcd, 0x49, 0x83, 0x7c, 0xed, 0x00, 0x00, 0x75, 0x27, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4c, 0x8d, 0x3c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x27, 0x74, 0x37, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x23, 0x01, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x8b, 0x74, 0xcd, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x16, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x1e, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x32, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x8d, 0x34, 0xe8, 0x4d, 0x89, 0x2f, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x27, 0x4d, 0x89, 0xf7, 0x48, 0x8b, 0x1c, 0x24, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_TUPLE_1_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_TUPLE_1_data_holes[1];

// _BUILD_SETplus_CALL_TYPE_1
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CALL_TYPE_1.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 49 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: eb 5d                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 126: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12a: 74 66                         je      0x192 <_JIT_ENTRY+0x192>
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 0c 24                   decq    (%r12)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: ff d0                         callq   *%rax
// 17c: 49 29 ef                      subq    %rbp, %r15
// 17f: 49 83 c7 b8                   addq    $-0x48, %r15
// 183: 49 c1 ef 03                   shrq    $0x3, %r15
// 187: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: e9 9d 00 00 00                jmp     0x22f <_JIT_ENTRY+0x22f>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 d0                      movzwl  %ax, %edx
// 19f: 0f b7 c0                      movzwl  %ax, %eax
// 1a2: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a6: 48 f7 d8                      negq    %rax
// 1a9: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ae: b9 01 00 00 00                movl    $0x1, %ecx
// 1b3: b8 01 00 00 00                movl    $0x1, %eax
// 1b8: 29 d0                         subl    %edx, %eax
// 1ba: 48 98                         cltq
// 1bc: f7 d2                         notl    %edx
// 1be: 4c 63 f2                      movslq  %edx, %r14
// 1c1: 49 01 c6                      addq    %rax, %r14
// 1c4: 4b 83 7c f5 00 00             cmpq    $0x0, (%r13,%r14,8)
// 1ca: 75 30                         jne     0x1fc <_JIT_ENTRY+0x1fc>
// 1cc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ce:  R_X86_64_64  _JIT_OPARG
// 1d6: 0f b7 d2                      movzwl  %dx, %edx
// 1d9: 29 d1                         subl    %edx, %ecx
// 1db: 48 63 c9                      movslq  %ecx, %rcx
// 1de: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1e3: 29 d6                         subl    %edx, %esi
// 1e5: 48 63 d6                      movslq  %esi, %rdx
// 1e8: 48 01 ca                      addq    %rcx, %rdx
// 1eb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001ed:  R_X86_64_64  PyType_Type
// 1f5: 4d 39 64 d5 00                cmpq    %r12, (%r13,%rdx,8)
// 1fa: 74 42                         je      0x23e <_JIT_ENTRY+0x23e>
// 1fc: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 204: 4c 01 e8                      addq    %r13, %rax
// 207: 48 29 e8                      subq    %rbp, %rax
// 20a: 48 83 c0 b8                   addq    $-0x48, %rax
// 20e: 48 c1 e8 03                   shrq    $0x3, %rax
// 212: 89 45 40                      movl    %eax, 0x40(%rbp)
// 215: 48 8b 45 00                   movq    (%rbp), %rax
// 219: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021b:  R_X86_64_64  _JIT_TARGET
// 223: 89 c9                         movl    %ecx, %ecx
// 225: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 229: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22f: 48 83 c4 18                   addq    $0x18, %rsp
// 233: 5b                            popq    %rbx
// 234: 41 5c                         popq    %r12
// 236: 41 5d                         popq    %r13
// 238: 41 5e                         popq    %r14
// 23a: 41 5f                         popq    %r15
// 23c: 5d                            popq    %rbp
// 23d: c3                            retq
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_OPARG
// 248: 0f b7 c8                      movzwl  %ax, %ecx
// 24b: ba 01 00 00 00                movl    $0x1, %edx
// 250: 29 ca                         subl    %ecx, %edx
// 252: 48 63 ca                      movslq  %edx, %rcx
// 255: 0f b7 c0                      movzwl  %ax, %eax
// 258: 48 29 c1                      subq    %rax, %rcx
// 25b: 4c 89 eb                      movq    %r13, %rbx
// 25e: 4d 8b 6c cd 00                movq    (%r13,%rcx,8), %r13
// 263: 4d 8b 7d 08                   movq    0x8(%r13), %r15
// 267: 41 8b 07                      movl    (%r15), %eax
// 26a: ff c0                         incl    %eax
// 26c: 75 0f                         jne     0x27d <_JIT_ENTRY+0x27d>
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 48 85 c0                      testq   %rax, %rax
// 275: 7e 1e                         jle     0x295 <_JIT_ENTRY+0x295>
// 277: 85 c0                         testl   %eax, %eax
// 279: 79 40                         jns     0x2bb <_JIT_ENTRY+0x2bb>
// 27b: eb 5f                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 27d: 41 89 07                      movl    %eax, (%r15)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 49 8b 45 00                   movq    (%r13), %rax
// 290: 48 85 c0                      testq   %rax, %rax
// 293: 7f e2                         jg      0x277 <_JIT_ENTRY+0x277>
// 295: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000297:  R_X86_64_64  .rodata.str1.1
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_NegativeRefcount
// 2a9: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 2ae: 4c 89 ea                      movq    %r13, %rdx
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 8b 45 00                   movq    (%r13), %rax
// 2b7: 85 c0                         testl   %eax, %eax
// 2b9: 78 21                         js      0x2dc <_JIT_ENTRY+0x2dc>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 ff 4d 00                   decq    (%r13)
// 2cb: 75 0f                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_Dealloc
// 2d7: 4c 89 ef                      movq    %r13, %rdi
// 2da: ff d0                         callq   *%rax
// 2dc: 49 8b 04 24                   movq    (%r12), %rax
// 2e0: 48 85 c0                      testq   %rax, %rax
// 2e3: 7f 22                         jg      0x307 <_JIT_ENTRY+0x307>
// 2e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_NegativeRefcount
// 2f9: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 2fe: 4c 89 e2                      movq    %r12, %rdx
// 301: ff d0                         callq   *%rax
// 303: 49 8b 04 24                   movq    (%r12), %rax
// 307: 4e 8d 34 f3                   leaq    (%rbx,%r14,8), %r14
// 30b: 85 c0                         testl   %eax, %eax
// 30d: 78 28                         js      0x337 <_JIT_ENTRY+0x337>
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 319: ff d0                         callq   *%rax
// 31b: 49 ff 0c 24                   decq    (%r12)
// 31f: 75 16                         jne     0x337 <_JIT_ENTRY+0x337>
// 321: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000323:  R_X86_64_64  PyType_Type
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _Py_Dealloc
// 335: ff d0                         callq   *%rax
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _JIT_OPARG
// 341: 0f b7 c0                      movzwl  %ax, %eax
// 344: b9 01 00 00 00                movl    $0x1, %ecx
// 349: 29 c1                         subl    %eax, %ecx
// 34b: 48 63 c9                      movslq  %ecx, %rcx
// 34e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 353: 29 c2                         subl    %eax, %edx
// 355: 48 63 c2                      movslq  %edx, %rax
// 358: 48 01 c8                      addq    %rcx, %rax
// 35b: 4c 89 3c c3                   movq    %r15, (%rbx,%rax,8)
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _JIT_CONTINUE
// 369: 48 89 ef                      movq    %rbp, %rdi
// 36c: 4c 89 f6                      movq    %r14, %rsi
// 36f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 374: 48 83 c4 18                   addq    $0x18, %rsp
// 378: 5b                            popq    %rbx
// 379: 41 5c                         popq    %r12
// 37b: 41 5d                         popq    %r13
// 37d: 41 5e                         popq    %r14
// 37f: 41 5f                         popq    %r15
// 381: 5d                            popq    %rbp
// 382: ff e0                         jmpq    *%rax
// 384: 
static const unsigned char _BUILD_SETplus_CALL_TYPE_1_code_body[901] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xeb, 0x5d, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x49, 0x01, 0xc6, 0x4b, 0x83, 0x7c, 0xf5, 0x00, 0x00, 0x75, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x48, 0x01, 0xca, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x64, 0xd5, 0x00, 0x74, 0x42, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x4c, 0x89, 0xeb, 0x4d, 0x8b, 0x6c, 0xcd, 0x00, 0x4d, 0x8b, 0x7d, 0x08, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x34, 0xf3, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4c, 0x89, 0x3c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CALL_TYPE_1_code_holes[30] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CALL_TYPE_1_data_holes[1];

// _BUILD_SETplus_CHECK_ATTR_CLASS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_ATTR_CLASS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 9b 00 00 00                jmp     0x22f <_JIT_ENTRY+0x22f>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c9: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 1cd: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 1d4: 74 32                         je      0x208 <_JIT_ENTRY+0x208>
// 1d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d8:  R_X86_64_64  _JIT_OPERAND
// 1e0: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1e6: 75 20                         jne     0x208 <_JIT_ENTRY+0x208>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 f2                      movq    %r14, %rdx
// 1f8: 48 83 c4 18                   addq    $0x18, %rsp
// 1fc: 5b                            popq    %rbx
// 1fd: 41 5c                         popq    %r12
// 1ff: 41 5d                         popq    %r13
// 201: 41 5e                         popq    %r14
// 203: 41 5f                         popq    %r15
// 205: 5d                            popq    %rbp
// 206: ff e0                         jmpq    *%rax
// 208: 48 29 de                      subq    %rbx, %rsi
// 20b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 20f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 213: 89 73 40                      movl    %esi, 0x40(%rbx)
// 216: 48 8b 03                      movq    (%rbx), %rax
// 219: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021b:  R_X86_64_64  _JIT_TARGET
// 223: 89 c9                         movl    %ecx, %ecx
// 225: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 229: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22f: 48 83 c4 18                   addq    $0x18, %rsp
// 233: 5b                            popq    %rbx
// 234: 41 5c                         popq    %r12
// 236: 41 5d                         popq    %r13
// 238: 41 5e                         popq    %r14
// 23a: 41 5f                         popq    %r15
// 23c: 5d                            popq    %rbp
// 23d: c3                            retq
// 23e: 
static const unsigned char _BUILD_SETplus_CHECK_ATTR_CLASS_code_body[575] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x32, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CHECK_ATTR_CLASS_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_ATTR_CLASS_data_holes[1];

// _BUILD_SETplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_ATTR_METHOD_LAZY_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 6e                         jmp     0x1ff <_JIT_ENTRY+0x1ff>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1be: 4c 01 ee                      addq    %r13, %rsi
// 1c1: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c6: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 1ca: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 1d1: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 1d6: 74 36                         je      0x20e <_JIT_ENTRY+0x20e>
// 1d8: 48 29 de                      subq    %rbx, %rsi
// 1db: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1df: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e3: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e6: 48 8b 03                      movq    (%rbx), %rax
// 1e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001eb:  R_X86_64_64  _JIT_TARGET
// 1f3: 89 c9                         movl    %ecx, %ecx
// 1f5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ff: 48 83 c4 18                   addq    $0x18, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: c3                            retq
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_CONTINUE
// 218: 48 89 df                      movq    %rbx, %rdi
// 21b: 4c 89 fa                      movq    %r15, %rdx
// 21e: 48 83 c4 18                   addq    $0x18, %rsp
// 222: 5b                            popq    %rbx
// 223: 41 5c                         popq    %r12
// 225: 41 5d                         popq    %r13
// 227: 41 5e                         popq    %r14
// 229: 41 5f                         popq    %r15
// 22b: 5d                            popq    %rbp
// 22c: ff e0                         jmpq    *%rax
// 22e: 
static const unsigned char _BUILD_SETplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[559] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _BUILD_SETplus_CHECK_ATTR_MODULE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_ATTR_MODULE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 a3 00 00 00                jmp     0x237 <_JIT_ENTRY+0x237>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  PyModule_Type
// 1d3: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1d7: 75 37                         jne     0x210 <_JIT_ENTRY+0x210>
// 1d9: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1dd: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1e1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e3:  R_X86_64_64  _JIT_OPERAND
// 1eb: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1ee: 75 20                         jne     0x210 <_JIT_ENTRY+0x210>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _JIT_CONTINUE
// 1fa: 48 89 df                      movq    %rbx, %rdi
// 1fd: 4c 89 f2                      movq    %r14, %rdx
// 200: 48 83 c4 18                   addq    $0x18, %rsp
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: 5d                            popq    %rbp
// 20e: ff e0                         jmpq    *%rax
// 210: 48 29 de                      subq    %rbx, %rsi
// 213: 48 83 c6 b8                   addq    $-0x48, %rsi
// 217: 48 c1 ee 03                   shrq    $0x3, %rsi
// 21b: 89 73 40                      movl    %esi, 0x40(%rbx)
// 21e: 48 8b 03                      movq    (%rbx), %rax
// 221: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000223:  R_X86_64_64  _JIT_TARGET
// 22b: 89 c9                         movl    %ecx, %ecx
// 22d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 231: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 237: 48 83 c4 18                   addq    $0x18, %rsp
// 23b: 5b                            popq    %rbx
// 23c: 41 5c                         popq    %r12
// 23e: 41 5d                         popq    %r13
// 240: 41 5e                         popq    %r14
// 242: 41 5f                         popq    %r15
// 244: 5d                            popq    %rbp
// 245: c3                            retq
// 246: 
static const unsigned char _BUILD_SETplus_CHECK_ATTR_MODULE_code_body[583] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x37, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CHECK_ATTR_MODULE_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_ATTR_MODULE_data_holes[1];

// _BUILD_SETplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_ATTR_WITH_HINT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 89 00 00 00                jmp     0x21d <_JIT_ENTRY+0x21d>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c9: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 1cd: a8 01                         testb   $0x1, %al
// 1cf: 75 25                         jne     0x1f6 <_JIT_ENTRY+0x1f6>
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 74 20                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_CONTINUE
// 1e0: 48 89 df                      movq    %rbx, %rdi
// 1e3: 4c 89 fa                      movq    %r15, %rdx
// 1e6: 48 83 c4 18                   addq    $0x18, %rsp
// 1ea: 5b                            popq    %rbx
// 1eb: 41 5c                         popq    %r12
// 1ed: 41 5d                         popq    %r13
// 1ef: 41 5e                         popq    %r14
// 1f1: 41 5f                         popq    %r15
// 1f3: 5d                            popq    %rbp
// 1f4: ff e0                         jmpq    *%rax
// 1f6: 48 29 de                      subq    %rbx, %rsi
// 1f9: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1fd: 48 c1 ee 03                   shrq    $0x3, %rsi
// 201: 89 73 40                      movl    %esi, 0x40(%rbx)
// 204: 48 8b 03                      movq    (%rbx), %rax
// 207: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000209:  R_X86_64_64  _JIT_TARGET
// 211: 89 c9                         movl    %ecx, %ecx
// 213: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 217: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21d: 48 83 c4 18                   addq    $0x18, %rsp
// 221: 5b                            popq    %rbx
// 222: 41 5c                         popq    %r12
// 224: 41 5d                         popq    %r13
// 226: 41 5e                         popq    %r14
// 228: 41 5f                         popq    %r15
// 22a: 5d                            popq    %rbp
// 22b: c3                            retq
// 22c: 
static const unsigned char _BUILD_SETplus_CHECK_ATTR_WITH_HINT_code_body[557] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x25, 0x48, 0x85, 0xc0, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CHECK_ATTR_WITH_HINT_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _BUILD_SETplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 49 29 df                      subq    %rbx, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 a0 00 00 00                jmp     0x237 <_JIT_ENTRY+0x237>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1b3: b8 01 00 00 00                movl    $0x1, %eax
// 1b8: ba 01 00 00 00                movl    $0x1, %edx
// 1bd: 29 ca                         subl    %ecx, %edx
// 1bf: 48 63 d2                      movslq  %edx, %rdx
// 1c2: 48 8d 34 d5 00 00 00 00       leaq    (,%rdx,8), %rsi
// 1ca: 4c 01 ee                      addq    %r13, %rsi
// 1cd: f7 d1                         notl    %ecx
// 1cf: 48 63 c9                      movslq  %ecx, %rcx
// 1d2: 48 01 d1                      addq    %rdx, %rcx
// 1d5: 49 83 7c cd 00 00             cmpq    $0x0, (%r13,%rcx,8)
// 1db: 75 33                         jne     0x210 <_JIT_ENTRY+0x210>
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: 0f b7 c9                      movzwl  %cx, %ecx
// 1ea: 29 c8                         subl    %ecx, %eax
// 1ec: 48 98                         cltq
// 1ee: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1f3: 29 ca                         subl    %ecx, %edx
// 1f5: 48 63 ca                      movslq  %edx, %rcx
// 1f8: 48 01 c1                      addq    %rax, %rcx
// 1fb: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
// 200: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000202:  R_X86_64_64  PyMethod_Type
// 20a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20e: 74 36                         je      0x246 <_JIT_ENTRY+0x246>
// 210: 48 29 de                      subq    %rbx, %rsi
// 213: 48 83 c6 b8                   addq    $-0x48, %rsi
// 217: 48 c1 ee 03                   shrq    $0x3, %rsi
// 21b: 89 73 40                      movl    %esi, 0x40(%rbx)
// 21e: 48 8b 03                      movq    (%rbx), %rax
// 221: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000223:  R_X86_64_64  _JIT_TARGET
// 22b: 89 c9                         movl    %ecx, %ecx
// 22d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 231: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 237: 48 83 c4 18                   addq    $0x18, %rsp
// 23b: 5b                            popq    %rbx
// 23c: 41 5c                         popq    %r12
// 23e: 41 5d                         popq    %r13
// 240: 41 5e                         popq    %r14
// 242: 41 5f                         popq    %r15
// 244: 5d                            popq    %rbp
// 245: c3                            retq
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_CONTINUE
// 250: 48 89 df                      movq    %rbx, %rdi
// 253: 4c 89 f2                      movq    %r14, %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 
static const unsigned char _BUILD_SETplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x48, 0x8d, 0x34, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x49, 0x83, 0x7c, 0xcd, 0x00, 0x00, 0x75, 0x33, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x98, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x44, 0xcd, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _BUILD_SETplus_CHECK_EG_MATCH
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_EG_MATCH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 44 01 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// 49: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 5a: 49 89 ee                      movq    %rbp, %r14
// 5d: 49 29 c6                      subq    %rax, %r14
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ee                      movq    %rbp, %r14
// 11d: e9 bc 02 00 00                jmp     0x3de <_JIT_ENTRY+0x3de>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 129: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 12e: 74 5d                         je      0x18d <_JIT_ENTRY+0x18d>
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 e2                      movq    %r12, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 7b 02 00 00             js      0x3de <_JIT_ENTRY+0x3de>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 65 02 00 00             jne     0x3de <_JIT_ENTRY+0x3de>
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: ff d0                         callq   *%rax
// 188: e9 51 02 00 00                jmp     0x3de <_JIT_ENTRY+0x3de>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c8                      movzwl  %ax, %ecx
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a1: 48 f7 d8                      negq    %rax
// 1a4: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1a9: b8 01 00 00 00                movl    $0x1, %eax
// 1ae: 29 c8                         subl    %ecx, %eax
// 1b0: 4c 63 f8                      movslq  %eax, %r15
// 1b3: 4e 8b 6c fd f0                movq    -0x10(%rbp,%r15,8), %r13
// 1b8: 4e 8b 64 fd f8                movq    -0x8(%rbp,%r15,8), %r12
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 1c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1cc: 4c 89 e6                      movq    %r12, %rsi
// 1cf: ff d0                         callq   *%rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 0f 88 5a 01 00 00             js      0x333 <_JIT_ENTRY+0x333>
// 1d9: 49 89 ee                      movq    %rbp, %r14
// 1dc: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 1e4: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 1f7: 48 89 e2                      movq    %rsp, %rdx
// 1fa: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 1ff: 4c 89 ef                      movq    %r13, %rdi
// 202: 4c 89 e6                      movq    %r12, %rsi
// 205: ff d0                         callq   *%rax
// 207: 89 c5                         movl    %eax, %ebp
// 209: 49 8b 45 00                   movq    (%r13), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 7f 22                         jg      0x234 <_JIT_ENTRY+0x234>
// 212: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000214:  R_X86_64_64  .rodata.str1.1
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_NegativeRefcount
// 226: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 22b: 4c 89 ea                      movq    %r13, %rdx
// 22e: ff d0                         callq   *%rax
// 230: 49 8b 45 00                   movq    (%r13), %rax
// 234: 85 c0                         testl   %eax, %eax
// 236: 78 21                         js      0x259 <_JIT_ENTRY+0x259>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 242: ff d0                         callq   *%rax
// 244: 49 ff 4d 00                   decq    (%r13)
// 248: 75 0f                         jne     0x259 <_JIT_ENTRY+0x259>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: 4c 89 ef                      movq    %r13, %rdi
// 257: ff d0                         callq   *%rax
// 259: 49 8b 04 24                   movq    (%r12), %rax
// 25d: 48 85 c0                      testq   %rax, %rax
// 260: 7f 22                         jg      0x284 <_JIT_ENTRY+0x284>
// 262: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000264:  R_X86_64_64  .rodata.str1.1
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_NegativeRefcount
// 276: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 27b: 4c 89 e2                      movq    %r12, %rdx
// 27e: ff d0                         callq   *%rax
// 280: 49 8b 04 24                   movq    (%r12), %rax
// 284: 85 c0                         testl   %eax, %eax
// 286: 78 21                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 0c 24                   decq    (%r12)
// 298: 75 0f                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 85 ed                         testl   %ebp, %ebp
// 2ab: 4c 89 f5                      movq    %r14, %rbp
// 2ae: 0f 88 1f 01 00 00             js      0x3d3 <_JIT_ENTRY+0x3d3>
// 2b4: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2b8: 48 85 ff                      testq   %rdi, %rdi
// 2bb: 0f 84 12 01 00 00             je      0x3d3 <_JIT_ENTRY+0x3d3>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_NoneStruct
// 2cb: 48 39 c7                      cmpq    %rax, %rdi
// 2ce: 74 10                         je      0x2e0 <_JIT_ENTRY+0x2e0>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  PyErr_SetHandledException
// 2da: ff d0                         callq   *%rax
// 2dc: 48 8b 04 24                   movq    (%rsp), %rax
// 2e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e2:  R_X86_64_64  _JIT_OPARG
// 2ea: 0f b7 c9                      movzwl  %cx, %ecx
// 2ed: ba 01 00 00 00                movl    $0x1, %edx
// 2f2: 29 ca                         subl    %ecx, %edx
// 2f4: 48 63 ca                      movslq  %edx, %rcx
// 2f7: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 2ff: 48 01 ee                      addq    %rbp, %rsi
// 302: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 307: 48 89 54 cd f0                movq    %rdx, -0x10(%rbp,%rcx,8)
// 30c: 48 89 44 cd f8                movq    %rax, -0x8(%rbp,%rcx,8)
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _JIT_CONTINUE
// 31b: 48 89 df                      movq    %rbx, %rdi
// 31e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 323: 48 83 c4 28                   addq    $0x28, %rsp
// 327: 5b                            popq    %rbx
// 328: 41 5c                         popq    %r12
// 32a: 41 5d                         popq    %r13
// 32c: 41 5e                         popq    %r14
// 32e: 41 5f                         popq    %r15
// 330: 5d                            popq    %rbp
// 331: ff e0                         jmpq    *%rax
// 333: 49 8b 45 00                   movq    (%r13), %rax
// 337: 48 85 c0                      testq   %rax, %rax
// 33a: 7f 22                         jg      0x35e <_JIT_ENTRY+0x35e>
// 33c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033e:  R_X86_64_64  .rodata.str1.1
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_NegativeRefcount
// 350: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 355: 4c 89 ea                      movq    %r13, %rdx
// 358: ff d0                         callq   *%rax
// 35a: 49 8b 45 00                   movq    (%r13), %rax
// 35e: 85 c0                         testl   %eax, %eax
// 360: 78 21                         js      0x383 <_JIT_ENTRY+0x383>
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 36c: ff d0                         callq   *%rax
// 36e: 49 ff 4d 00                   decq    (%r13)
// 372: 75 0f                         jne     0x383 <_JIT_ENTRY+0x383>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_Dealloc
// 37e: 4c 89 ef                      movq    %r13, %rdi
// 381: ff d0                         callq   *%rax
// 383: 49 8b 04 24                   movq    (%r12), %rax
// 387: 48 85 c0                      testq   %rax, %rax
// 38a: 7f 22                         jg      0x3ae <_JIT_ENTRY+0x3ae>
// 38c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000038e:  R_X86_64_64  .rodata.str1.1
// 396: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000398:  R_X86_64_64  _Py_NegativeRefcount
// 3a0: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 3a5: 4c 89 e2                      movq    %r12, %rdx
// 3a8: ff d0                         callq   *%rax
// 3aa: 49 8b 04 24                   movq    (%r12), %rax
// 3ae: 85 c0                         testl   %eax, %eax
// 3b0: 78 21                         js      0x3d3 <_JIT_ENTRY+0x3d3>
// 3b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3bc: ff d0                         callq   *%rax
// 3be: 49 ff 0c 24                   decq    (%r12)
// 3c2: 75 0f                         jne     0x3d3 <_JIT_ENTRY+0x3d3>
// 3c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c6:  R_X86_64_64  _Py_Dealloc
// 3ce: 4c 89 e7                      movq    %r12, %rdi
// 3d1: ff d0                         callq   *%rax
// 3d3: 4e 8d 34 fd f0 ff ff ff       leaq    -0x10(,%r15,8), %r14
// 3db: 49 01 ee                      addq    %rbp, %r14
// 3de: 49 29 de                      subq    %rbx, %r14
// 3e1: 49 83 c6 b8                   addq    $-0x48, %r14
// 3e5: 49 c1 ee 03                   shrq    $0x3, %r14
// 3e9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3ed: 31 c0                         xorl    %eax, %eax
// 3ef: 48 83 c4 28                   addq    $0x28, %rsp
// 3f3: 5b                            popq    %rbx
// 3f4: 41 5c                         popq    %r12
// 3f6: 41 5d                         popq    %r13
// 3f8: 41 5e                         popq    %r14
// 3fa: 41 5f                         popq    %r15
// 3fc: 5d                            popq    %rbp
// 3fd: c3                            retq
// 3fe: 
static const unsigned char _BUILD_SETplus_CHECK_EG_MATCH_code_body[1023] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x49, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xee, 0xe9, 0xbc, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x7b, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x65, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x51, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4e, 0x8b, 0x6c, 0xfd, 0xf0, 0x4e, 0x8b, 0x64, 0xfd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x5a, 0x01, 0x00, 0x00, 0x49, 0x89, 0xee, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x89, 0xf5, 0x0f, 0x88, 0x1f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x12, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x54, 0xcd, 0xf0, 0x48, 0x89, 0x44, 0xcd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4e, 0x8d, 0x34, 0xfd, 0xf0, 0xff, 0xff, 0xff, 0x49, 0x01, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CHECK_EG_MATCH_code_holes[36] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x398, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_EG_MATCH_data_holes[1];

// _BUILD_SETplus_CHECK_EXC_MATCH
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_EXC_MATCH.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ef 00 00 00             je      0x11d <_JIT_ENTRY+0x11d>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 1b 01 00 00             je      0x164 <_JIT_ENTRY+0x164>
// 49: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 99 00 00 00             je      0x125 <_JIT_ENTRY+0x125>
// 8c: 4d 8b 24 df                   movq    (%r15,%rbx,8), %r12
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 04 24                   movq    (%r12), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 50                         jmp     0xf3 <_JIT_ENTRY+0xf3>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 e6                      movq    %r12, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 4c 89 e2                      movq    %r12, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 78 8d                         js      0x80 <_JIT_ENTRY+0x80>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fd: ff d0                         callq   *%rax
// ff: 49 ff 0c 24                   decq    (%r12)
// 103: 0f 85 77 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 109: 4c 89 e7                      movq    %r12, %rdi
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_Dealloc
// 116: ff d0                         callq   *%rax
// 118: e9 63 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11d: 49 89 ef                      movq    %rbp, %r15
// 120: e9 12 01 00 00                jmp     0x237 <_JIT_ENTRY+0x237>
// 125: 85 ed                         testl   %ebp, %ebp
// 127: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12c: 48 8b 2c 24                   movq    (%rsp), %rbp
// 130: 74 32                         je      0x164 <_JIT_ENTRY+0x164>
// 132: 49 8b 06                      movq    (%r14), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 0f 8f d5 00 00 00             jg      0x213 <_JIT_ENTRY+0x213>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14d: 4c 89 f2                      movq    %r14, %rdx
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: ff d0                         callq   *%rax
// 15c: 49 8b 06                      movq    (%r14), %rax
// 15f: e9 af 00 00 00                jmp     0x213 <_JIT_ENTRY+0x213>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _JIT_OPARG
// 16e: 0f b7 c8                      movzwl  %ax, %ecx
// 171: 0f b7 c0                      movzwl  %ax, %eax
// 174: 48 c1 e0 03                   shlq    $0x3, %rax
// 178: 48 f7 d8                      negq    %rax
// 17b: 4c 89 74 05 00                movq    %r14, (%rbp,%rax)
// 180: b8 01 00 00 00                movl    $0x1, %eax
// 185: 29 c8                         subl    %ecx, %eax
// 187: 48 63 d8                      movslq  %eax, %rbx
// 18a: 4c 8b 64 dd f0                movq    -0x10(%rbp,%rbx,8), %r12
// 18f: 4c 8b 74 dd f8                movq    -0x8(%rbp,%rbx,8), %r14
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 19e: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1a3: 4c 89 ff                      movq    %r15, %rdi
// 1a6: 4c 89 f6                      movq    %r14, %rsi
// 1a9: ff d0                         callq   *%rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 30                         js      0x1df <_JIT_ENTRY+0x1df>
// 1af: 48 89 eb                      movq    %rbp, %rbx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  PyErr_GivenExceptionMatches
// 1bc: 4c 89 e7                      movq    %r12, %rdi
// 1bf: 4c 89 f6                      movq    %r14, %rsi
// 1c2: ff d0                         callq   *%rax
// 1c4: 89 c5                         movl    %eax, %ebp
// 1c6: 49 8b 06                      movq    (%r14), %rax
// 1c9: 48 85 c0                      testq   %rax, %rax
// 1cc: 0f 8e 85 00 00 00             jle     0x257 <_JIT_ENTRY+0x257>
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 0f 89 a2 00 00 00             jns     0x27c <_JIT_ENTRY+0x27c>
// 1da: e9 bd 00 00 00                jmp     0x29c <_JIT_ENTRY+0x29c>
// 1df: 49 8b 06                      movq    (%r14), %rax
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 7f 21                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NegativeRefcount
// 1fb: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 200: 4c 89 f2                      movq    %r14, %rdx
// 203: ff d0                         callq   *%rax
// 205: 49 8b 06                      movq    (%r14), %rax
// 208: 4c 8d 3c dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %r15
// 210: 49 01 ef                      addq    %rbp, %r15
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 20                         js      0x237 <_JIT_ENTRY+0x237>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 0e                      decq    (%r14)
// 226: 75 0f                         jne     0x237 <_JIT_ENTRY+0x237>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 f7                      movq    %r14, %rdi
// 235: ff d0                         callq   *%rax
// 237: 4d 29 ef                      subq    %r13, %r15
// 23a: 49 83 c7 b8                   addq    $-0x48, %r15
// 23e: 49 c1 ef 03                   shrq    $0x3, %r15
// 242: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 246: 31 c0                         xorl    %eax, %eax
// 248: 48 83 c4 18                   addq    $0x18, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: c3                            retq
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 270: 4c 89 f2                      movq    %r14, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 06                      movq    (%r14), %rax
// 278: 85 c0                         testl   %eax, %eax
// 27a: 78 20                         js      0x29c <_JIT_ENTRY+0x29c>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 286: ff d0                         callq   *%rax
// 288: 49 ff 0e                      decq    (%r14)
// 28b: 75 0f                         jne     0x29c <_JIT_ENTRY+0x29c>
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_Dealloc
// 297: 4c 89 f7                      movq    %r14, %rdi
// 29a: ff d0                         callq   *%rax
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_OPARG
// 2a6: 0f b7 c0                      movzwl  %ax, %eax
// 2a9: b9 01 00 00 00                movl    $0x1, %ecx
// 2ae: 29 c1                         subl    %eax, %ecx
// 2b0: 48 63 c1                      movslq  %ecx, %rax
// 2b3: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 2b7: 85 ed                         testl   %ebp, %ebp
// 2b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bb:  R_X86_64_64  _Py_FalseStruct
// 2c3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002c5:  R_X86_64_64  _Py_TrueStruct
// 2cd: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2d1: 48 89 54 c3 f8                movq    %rdx, -0x8(%rbx,%rax,8)
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _JIT_CONTINUE
// 2e0: 4c 89 ef                      movq    %r13, %rdi
// 2e3: 4c 89 fa                      movq    %r15, %rdx
// 2e6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ea: 5b                            popq    %rbx
// 2eb: 41 5c                         popq    %r12
// 2ed: 41 5d                         popq    %r13
// 2ef: 41 5e                         popq    %r14
// 2f1: 41 5f                         popq    %r15
// 2f3: 5d                            popq    %rbp
// 2f4: ff e0                         jmpq    *%rax
// 2f6: 
static const unsigned char _BUILD_SETplus_CHECK_EXC_MATCH_code_body[759] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x24, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x50, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x8d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x77, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x63, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x12, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x32, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x64, 0xdd, 0xf0, 0x4c, 0x8b, 0x74, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x30, 0x48, 0x89, 0xeb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa2, 0x00, 0x00, 0x00, 0xe9, 0xbd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4c, 0x8d, 0x3c, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x49, 0x01, 0xef, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0x34, 0xc3, 0x85, 0xed, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x54, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CHECK_EXC_MATCH_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_EXC_MATCH_data_holes[1];

// _BUILD_SETplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_FUNCTION_EXACT_ARGS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 49 29 df                      subq    %rbx, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 d2 00 00 00                jmp     0x269 <_JIT_ENTRY+0x269>
// 197: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c1                      movzwl  %cx, %eax
// 1a4: 0f b7 c9                      movzwl  %cx, %ecx
// 1a7: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1ab: 48 f7 d9                      negq    %rcx
// 1ae: 4d 89 64 0d 00                movq    %r12, (%r13,%rcx)
// 1b3: b9 01 00 00 00                movl    $0x1, %ecx
// 1b8: 29 c1                         subl    %eax, %ecx
// 1ba: 48 63 c9                      movslq  %ecx, %rcx
// 1bd: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1c5: 4c 01 ee                      addq    %r13, %rsi
// 1c8: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1cd: 29 c2                         subl    %eax, %edx
// 1cf: 48 63 d2                      movslq  %edx, %rdx
// 1d2: 48 01 ca                      addq    %rcx, %rdx
// 1d5: 49 8b 54 d5 00                movq    (%r13,%rdx,8), %rdx
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  PyFunction_Type
// 1e4: 48 39 7a 08                   cmpq    %rdi, 0x8(%rdx)
// 1e8: 75 58                         jne     0x242 <_JIT_ENTRY+0x242>
// 1ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ec:  R_X86_64_64  _JIT_OPERAND
// 1f4: 39 ba 88 00 00 00             cmpl    %edi, 0x88(%rdx)
// 1fa: 75 46                         jne     0x242 <_JIT_ENTRY+0x242>
// 1fc: f7 d0                         notl    %eax
// 1fe: 48 98                         cltq
// 200: 48 01 c8                      addq    %rcx, %rax
// 203: 48 8b 4a 30                   movq    0x30(%rdx), %rcx
// 207: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000209:  R_X86_64_64  _JIT_OPARG
// 211: 0f b7 d2                      movzwl  %dx, %edx
// 214: 49 83 7c c5 00 01             cmpq    $0x1, (%r13,%rax,8)
// 21a: 83 da ff                      sbbl    $-0x1, %edx
// 21d: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 220: 75 20                         jne     0x242 <_JIT_ENTRY+0x242>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: 4c 89 f2                      movq    %r14, %rdx
// 232: 48 83 c4 18                   addq    $0x18, %rsp
// 236: 5b                            popq    %rbx
// 237: 41 5c                         popq    %r12
// 239: 41 5d                         popq    %r13
// 23b: 41 5e                         popq    %r14
// 23d: 41 5f                         popq    %r15
// 23f: 5d                            popq    %rbp
// 240: ff e0                         jmpq    *%rax
// 242: 48 29 de                      subq    %rbx, %rsi
// 245: 48 83 c6 b8                   addq    $-0x48, %rsi
// 249: 48 c1 ee 03                   shrq    $0x3, %rsi
// 24d: 89 73 40                      movl    %esi, 0x40(%rbx)
// 250: 48 8b 03                      movq    (%rbx), %rax
// 253: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000255:  R_X86_64_64  _JIT_TARGET
// 25d: 89 c9                         movl    %ecx, %ecx
// 25f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 263: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 269: 48 83 c4 18                   addq    $0x18, %rsp
// 26d: 5b                            popq    %rbx
// 26e: 41 5c                         popq    %r12
// 270: 41 5d                         popq    %r13
// 272: 41 5e                         popq    %r14
// 274: 41 5f                         popq    %r15
// 276: 5d                            popq    %rbp
// 277: c3                            retq
// 278: 
static const unsigned char _BUILD_SETplus_CHECK_FUNCTION_EXACT_ARGS_code_body[633] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x89, 0x64, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x49, 0x8b, 0x54, 0xd5, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x7a, 0x08, 0x75, 0x58, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xba, 0x88, 0x00, 0x00, 0x00, 0x75, 0x46, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x48, 0x8b, 0x4a, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x7c, 0xc5, 0x00, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _BUILD_SETplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ec                      movq    %rbp, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4c 89 7c 05 00                movq    %r15, (%rbp,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 4c 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %r14
// 1cb: 49 01 ee                      addq    %rbp, %r14
// 1ce: 48 8b 7c c5 f8                movq    -0x8(%rbp,%rax,8), %rdi
// 1d3: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 1d7: 75 14                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 1d9: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 1e7: ff d0                         callq   *%rax
// 1e9: 84 c0                         testb   %al, %al
// 1eb: 74 23                         je      0x210 <_JIT_ENTRY+0x210>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_CONTINUE
// 1f7: 48 89 df                      movq    %rbx, %rdi
// 1fa: 4c 89 f6                      movq    %r14, %rsi
// 1fd: 4c 89 ea                      movq    %r13, %rdx
// 200: 48 83 c4 18                   addq    $0x18, %rsp
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: 5d                            popq    %rbp
// 20e: ff e0                         jmpq    *%rax
// 210: 49 29 de                      subq    %rbx, %r14
// 213: 49 83 c6 b8                   addq    $-0x48, %r14
// 217: 49 c1 ee 03                   shrq    $0x3, %r14
// 21b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21f: 48 8b 03                      movq    (%rbx), %rax
// 222: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000224:  R_X86_64_64  _JIT_TARGET
// 22c: 89 c9                         movl    %ecx, %ecx
// 22e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 232: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 238: e9 52 ff ff ff                jmp     0x18f <_JIT_ENTRY+0x18f>
// 23d: 
static const unsigned char _BUILD_SETplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[574] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xee, 0x48, 0x8b, 0x7c, 0xc5, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x52, 0xff, 0xff, 0xff};
static const Hole _BUILD_SETplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _BUILD_SETplus_CHECK_PEP_523
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_PEP_523.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 65                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1be: 4c 01 ee                      addq    %r13, %rsi
// 1c1: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1c5: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 1cd: 74 36                         je      0x205 <_JIT_ENTRY+0x205>
// 1cf: 48 29 de                      subq    %rbx, %rsi
// 1d2: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1d6: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1da: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1dd: 48 8b 03                      movq    (%rbx), %rax
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  _JIT_TARGET
// 1ea: 89 c9                         movl    %ecx, %ecx
// 1ec: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f6: 48 83 c4 18                   addq    $0x18, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: c3                            retq
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _JIT_CONTINUE
// 20f: 48 89 df                      movq    %rbx, %rdi
// 212: 4c 89 fa                      movq    %r15, %rdx
// 215: 48 83 c4 18                   addq    $0x18, %rsp
// 219: 5b                            popq    %rbx
// 21a: 41 5c                         popq    %r12
// 21c: 41 5d                         popq    %r13
// 21e: 41 5e                         popq    %r14
// 220: 41 5f                         popq    %r15
// 222: 5d                            popq    %rbp
// 223: ff e0                         jmpq    *%rax
// 225: 
static const unsigned char _BUILD_SETplus_CHECK_PEP_523_code_body[550] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CHECK_PEP_523_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_PEP_523_data_holes[1];

// _BUILD_SETplus_CHECK_STACK_SPACE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_STACK_SPACE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 49 29 df                      subq    %rbx, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 ae 00 00 00                jmp     0x245 <_JIT_ENTRY+0x245>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 d0                      movzwl  %ax, %edx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1b3: b9 01 00 00 00                movl    $0x1, %ecx
// 1b8: b8 01 00 00 00                movl    $0x1, %eax
// 1bd: 29 d0                         subl    %edx, %eax
// 1bf: 48 98                         cltq
// 1c1: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c9: 4c 01 ee                      addq    %r13, %rsi
// 1cc: 49 8b 86 00 01 00 00          movq    0x100(%r14), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 74 46                         je      0x21e <_JIT_ENTRY+0x21e>
// 1d8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001da:  R_X86_64_64  _JIT_OPARG
// 1e2: 0f b7 d2                      movzwl  %dx, %edx
// 1e5: 29 d1                         subl    %edx, %ecx
// 1e7: 48 63 c9                      movslq  %ecx, %rcx
// 1ea: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1ef: 29 d7                         subl    %edx, %edi
// 1f1: 48 63 d7                      movslq  %edi, %rdx
// 1f4: 48 01 ca                      addq    %rcx, %rdx
// 1f7: 49 8b 4c d5 00                movq    (%r13,%rdx,8), %rcx
// 1fc: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 200: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 204: 49 8b 96 08 01 00 00          movq    0x108(%r14), %rdx
// 20b: 48 29 c2                      subq    %rax, %rdx
// 20e: 48 c1 fa 03                   sarq    $0x3, %rdx
// 212: 48 39 ca                      cmpq    %rcx, %rdx
// 215: 7e 07                         jle     0x21e <_JIT_ENTRY+0x21e>
// 217: 41 83 7e 24 02                cmpl    $0x2, 0x24(%r14)
// 21c: 7d 36                         jge     0x254 <_JIT_ENTRY+0x254>
// 21e: 48 29 de                      subq    %rbx, %rsi
// 221: 48 83 c6 b8                   addq    $-0x48, %rsi
// 225: 48 c1 ee 03                   shrq    $0x3, %rsi
// 229: 89 73 40                      movl    %esi, 0x40(%rbx)
// 22c: 48 8b 03                      movq    (%rbx), %rax
// 22f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000231:  R_X86_64_64  _JIT_TARGET
// 239: 89 c9                         movl    %ecx, %ecx
// 23b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 23f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 245: 48 83 c4 18                   addq    $0x18, %rsp
// 249: 5b                            popq    %rbx
// 24a: 41 5c                         popq    %r12
// 24c: 41 5d                         popq    %r13
// 24e: 41 5e                         popq    %r14
// 250: 41 5f                         popq    %r15
// 252: 5d                            popq    %rbp
// 253: c3                            retq
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 89 df                      movq    %rbx, %rdi
// 261: 4c 89 f2                      movq    %r14, %rdx
// 264: 48 83 c4 18                   addq    $0x18, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 
static const unsigned char _BUILD_SETplus_CHECK_STACK_SPACE_code_body[629] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x86, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x46, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd7, 0x48, 0x63, 0xd7, 0x48, 0x01, 0xca, 0x49, 0x8b, 0x4c, 0xd5, 0x00, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x96, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83, 0x7e, 0x24, 0x02, 0x7d, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_CHECK_STACK_SPACE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_STACK_SPACE_data_holes[1];

// _BUILD_SETplus_CHECK_VALIDITY
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CHECK_VALIDITY.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 87 00 00 00                jmp     0x21b <_JIT_ENTRY+0x21b>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_EXECUTOR
// 1ce: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1d2: 74 20                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_CONTINUE
// 1de: 48 89 df                      movq    %rbx, %rdi
// 1e1: 4c 89 fa                      movq    %r15, %rdx
// 1e4: 48 83 c4 18                   addq    $0x18, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 48 29 de                      subq    %rbx, %rsi
// 1f7: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1fb: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1ff: 89 73 40                      movl    %esi, 0x40(%rbx)
// 202: 48 8b 03                      movq    (%rbx), %rax
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  _JIT_TARGET
// 20f: 89 c9                         movl    %ecx, %ecx
// 211: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 215: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21b: 48 83 c4 18                   addq    $0x18, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: c3                            retq
// 22a: 
static const unsigned char _BUILD_SETplus_CHECK_VALIDITY_code_body[555] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CHECK_VALIDITY_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CHECK_VALIDITY_data_holes[1];

// _BUILD_SETplus_COMPARE_OP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_COMPARE_OP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 59 02 00 00                jmp     0x37b <_JIT_ENTRY+0x37b>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 19 02 00 00             js      0x37b <_JIT_ENTRY+0x37b>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 03 02 00 00             jne     0x37b <_JIT_ENTRY+0x37b>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 ef 01 00 00                jmp     0x37b <_JIT_ENTRY+0x37b>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 d0                      movzwl  %ax, %edx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 d0                         subl    %edx, %eax
// 1af: 4c 63 f0                      movslq  %eax, %r14
// 1b2: 4b 8b 6c f5 f0                movq    -0x10(%r13,%r14,8), %rbp
// 1b7: 4d 89 ef                      movq    %r13, %r15
// 1ba: 4f 8b 6c f5 f8                movq    -0x8(%r13,%r14,8), %r13
// 1bf: c1 ea 05                      shrl    $0x5, %edx
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  PyObject_RichCompare
// 1cc: 48 89 ef                      movq    %rbp, %rdi
// 1cf: 4c 89 ee                      movq    %r13, %rsi
// 1d2: ff d0                         callq   *%rax
// 1d4: 49 89 c4                      movq    %rax, %r12
// 1d7: 48 8b 45 00                   movq    (%rbp), %rax
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 7e 06                         jle     0x1e6 <_JIT_ENTRY+0x1e6>
// 1e0: 85 c0                         testl   %eax, %eax
// 1e2: 79 28                         jns     0x20c <_JIT_ENTRY+0x20c>
// 1e4: eb 38                         jmp     0x21e <_JIT_ENTRY+0x21e>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 1ff: 48 89 ea                      movq    %rbp, %rdx
// 202: ff d0                         callq   *%rax
// 204: 48 8b 45 00                   movq    (%rbp), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 12                         js      0x21e <_JIT_ENTRY+0x21e>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 48 ff 4d 00                   decq    (%rbp)
// 21c: 74 0f                         je      0x22d <_JIT_ENTRY+0x22d>
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 7e 1e                         jle     0x245 <_JIT_ENTRY+0x245>
// 227: 85 c0                         testl   %eax, %eax
// 229: 79 40                         jns     0x26b <_JIT_ENTRY+0x26b>
// 22b: eb 54                         jmp     0x281 <_JIT_ENTRY+0x281>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 48 89 ef                      movq    %rbp, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 49 8b 45 00                   movq    (%r13), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 7f e2                         jg      0x227 <_JIT_ENTRY+0x227>
// 245: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_NegativeRefcount
// 259: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 25e: 4c 89 ea                      movq    %r13, %rdx
// 261: ff d0                         callq   *%rax
// 263: 49 8b 45 00                   movq    (%r13), %rax
// 267: 85 c0                         testl   %eax, %eax
// 269: 78 16                         js      0x281 <_JIT_ENTRY+0x281>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: ff d0                         callq   *%rax
// 277: 49 ff 4d 00                   decq    (%r13)
// 27b: 0f 84 da 00 00 00             je      0x35b <_JIT_ENTRY+0x35b>
// 281: 4d 85 e4                      testq   %r12, %r12
// 284: 0f 84 e9 00 00 00             je      0x373 <_JIT_ENTRY+0x373>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_OPARG
// 294: a8 10                         testb   $0x10, %al
// 296: 74 7d                         je      0x315 <_JIT_ENTRY+0x315>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  PyObject_IsTrue
// 2a2: 4c 89 e7                      movq    %r12, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 89 c5                         movl    %eax, %ebp
// 2a9: 49 8b 04 24                   movq    (%r12), %rax
// 2ad: 48 85 c0                      testq   %rax, %rax
// 2b0: 7f 22                         jg      0x2d4 <_JIT_ENTRY+0x2d4>
// 2b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b4:  R_X86_64_64  .rodata.str1.1
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_NegativeRefcount
// 2c6: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 2cb: 4c 89 e2                      movq    %r12, %rdx
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 8b 04 24                   movq    (%r12), %rax
// 2d4: 85 c0                         testl   %eax, %eax
// 2d6: 78 21                         js      0x2f9 <_JIT_ENTRY+0x2f9>
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 ff 0c 24                   decq    (%r12)
// 2e8: 75 0f                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_Dealloc
// 2f4: 4c 89 e7                      movq    %r12, %rdi
// 2f7: ff d0                         callq   *%rax
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_FalseStruct
// 303: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000305:  R_X86_64_64  _Py_TrueStruct
// 30d: 85 ed                         testl   %ebp, %ebp
// 30f: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 313: 78 5e                         js      0x373 <_JIT_ENTRY+0x373>
// 315: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 319: 48 83 c6 f8                   addq    $-0x8, %rsi
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _JIT_OPARG
// 327: 0f b7 c0                      movzwl  %ax, %eax
// 32a: b9 01 00 00 00                movl    $0x1, %ecx
// 32f: 29 c1                         subl    %eax, %ecx
// 331: 48 63 c1                      movslq  %ecx, %rax
// 334: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _JIT_CONTINUE
// 343: 48 89 df                      movq    %rbx, %rdi
// 346: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 34b: 48 83 c4 18                   addq    $0x18, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: ff e0                         jmpq    *%rax
// 35b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035d:  R_X86_64_64  _Py_Dealloc
// 365: 4c 89 ef                      movq    %r13, %rdi
// 368: ff d0                         callq   *%rax
// 36a: 4d 85 e4                      testq   %r12, %r12
// 36d: 0f 85 17 ff ff ff             jne     0x28a <_JIT_ENTRY+0x28a>
// 373: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 377: 49 83 c7 f0                   addq    $-0x10, %r15
// 37b: 49 29 df                      subq    %rbx, %r15
// 37e: 49 83 c7 b8                   addq    $-0x48, %r15
// 382: 49 c1 ef 03                   shrq    $0x3, %r15
// 386: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 38a: 31 c0                         xorl    %eax, %eax
// 38c: 48 83 c4 18                   addq    $0x18, %rsp
// 390: 5b                            popq    %rbx
// 391: 41 5c                         popq    %r12
// 393: 41 5d                         popq    %r13
// 395: 41 5e                         popq    %r14
// 397: 41 5f                         popq    %r15
// 399: 5d                            popq    %rbp
// 39a: c3                            retq
// 39b: 
static const unsigned char _BUILD_SETplus_COMPARE_OP_code_body[924] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x59, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x19, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x03, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xef, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x6c, 0xf5, 0xf0, 0x4d, 0x89, 0xef, 0x4f, 0x8b, 0x6c, 0xf5, 0xf8, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x5e, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0x17, 0xff, 0xff, 0xff, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_COMPARE_OP_code_holes[33] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x35d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_COMPARE_OP_data_holes[1];

// _BUILD_SETplus_COMPARE_OP_FLOAT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_COMPARE_OP_FLOAT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 36 01 00 00             je      0x164 <_JIT_ENTRY+0x164>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 3c 24                   movq    %r15, (%rsp)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 66 85 c0                      testw   %ax, %ax
// 42: 0f 84 2f 01 00 00             je      0x177 <_JIT_ENTRY+0x177>
// 48: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4d: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4c 8b 3c 24                   movq    (%rsp), %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 08                         jmp     0x88 <_JIT_ENTRY+0x88>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 74 7e                         je      0x106 <_JIT_ENTRY+0x106>
// 88: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 8c: 85 ed                         testl   %ebp, %ebp
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 49 8b 06                      movq    (%r14), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7e 24                         jle     0xbc <_JIT_ENTRY+0xbc>
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 e4                         js      0x80 <_JIT_ENTRY+0x80>
// 9c: eb 43                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9e: 66 90                         nop
// a0: 4c 89 e7                      movq    %r12, %rdi
// a3: 4c 89 f6                      movq    %r14, %rsi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PySet_Add
// b0: ff d0                         callq   *%rax
// b2: 89 c5                         movl    %eax, %ebp
// b4: 49 8b 06                      movq    (%r14), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f dc                         jg      0x98 <_JIT_ENTRY+0x98>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: ff d0                         callq   *%rax
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 85 c0                         testl   %eax, %eax
// df: 78 9f                         js      0x80 <_JIT_ENTRY+0x80>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// eb: ff d0                         callq   *%rax
// ed: 49 ff 0e                      decq    (%r14)
// f0: 75 8e                         jne     0x80 <_JIT_ENTRY+0x80>
// f2: 4c 89 f7                      movq    %r14, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: e9 7a ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 10d: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 112: 74 63                         je      0x177 <_JIT_ENTRY+0x177>
// 114: 49 8b 04 24                   movq    (%r12), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7f 22                         jg      0x13f <_JIT_ENTRY+0x13f>
// 11d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011f:  R_X86_64_64  .rodata.str1.1
// 127: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 12c: 4c 89 e2                      movq    %r12, %rdx
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 78 21                         js      0x164 <_JIT_ENTRY+0x164>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 49 ff 0c 24                   decq    (%r12)
// 153: 75 0f                         jne     0x164 <_JIT_ENTRY+0x164>
// 155: 4c 89 e7                      movq    %r12, %rdi
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_Dealloc
// 162: ff d0                         callq   *%rax
// 164: 4d 29 ef                      subq    %r13, %r15
// 167: 49 83 c7 b8                   addq    $-0x48, %r15
// 16b: 49 c1 ef 03                   shrq    $0x3, %r15
// 16f: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 173: 31 c0                         xorl    %eax, %eax
// 175: eb 77                         jmp     0x1ee <_JIT_ENTRY+0x1ee>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _JIT_OPARG
// 181: 0f b7 c8                      movzwl  %ax, %ecx
// 184: 0f b7 c0                      movzwl  %ax, %eax
// 187: 48 c1 e0 03                   shlq    $0x3, %rax
// 18b: 48 f7 d8                      negq    %rax
// 18e: 48 8b 14 24                   movq    (%rsp), %rdx
// 192: 4c 89 24 02                   movq    %r12, (%rdx,%rax)
// 196: b8 01 00 00 00                movl    $0x1, %eax
// 19b: 29 c8                         subl    %ecx, %eax
// 19d: 48 63 d8                      movslq  %eax, %rbx
// 1a0: 4c 8b 64 da f0                movq    -0x10(%rdx,%rbx,8), %r12
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  PyFloat_Type
// 1af: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1b4: 75 0b                         jne     0x1c1 <_JIT_ENTRY+0x1c1>
// 1b6: 4c 8b 74 da f8                movq    -0x8(%rdx,%rbx,8), %r14
// 1bb: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 1bf: 74 3c                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1c1: 48 8d 04 da                   leaq    (%rdx,%rbx,8), %rax
// 1c5: 4c 29 e8                      subq    %r13, %rax
// 1c8: 48 83 c0 b8                   addq    $-0x48, %rax
// 1cc: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d0: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 1d4: 49 8b 45 00                   movq    (%r13), %rax
// 1d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001da:  R_X86_64_64  _JIT_TARGET
// 1e2: 89 c9                         movl    %ecx, %ecx
// 1e4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ee: 48 83 c4 18                   addq    $0x18, %rsp
// 1f2: 5b                            popq    %rbx
// 1f3: 41 5c                         popq    %r12
// 1f5: 41 5d                         popq    %r13
// 1f7: 41 5e                         popq    %r14
// 1f9: 41 5f                         popq    %r15
// 1fb: 5d                            popq    %rbp
// 1fc: c3                            retq
// 1fd: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 204: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 20a: f2 41 0f 10 46 10             movsd   0x10(%r14), %xmm0       # xmm0 = mem[0],zero
// 210: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 216: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 21c: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000021e:  R_X86_64_64  PyInterpreterState_Get
// 226: 75 1f                         jne     0x247 <_JIT_ENTRY+0x247>
// 228: 41 ff d7                      callq   *%r15
// 22b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 232: 49 ff 0c 24                   decq    (%r12)
// 236: 75 0f                         jne     0x247 <_JIT_ENTRY+0x247>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _PyFloat_ExactDealloc
// 242: 4c 89 e7                      movq    %r12, %rdi
// 245: ff d0                         callq   *%rax
// 247: 48 8b 04 24                   movq    (%rsp), %rax
// 24b: 4c 8d 24 d8                   leaq    (%rax,%rbx,8), %r12
// 24f: 49 83 c4 f8                   addq    $-0x8, %r12
// 253: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 258: 75 1e                         jne     0x278 <_JIT_ENTRY+0x278>
// 25a: 41 ff d7                      callq   *%r15
// 25d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 264: 49 ff 0e                      decq    (%r14)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _PyFloat_ExactDealloc
// 273: 4c 89 f7                      movq    %r14, %rdi
// 276: ff d0                         callq   *%rax
// 278: 31 c0                         xorl    %eax, %eax
// 27a: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0       # xmm0 = mem[0],zero
// 280: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
// 286: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 28a: 0f 93 c0                      setae   %al
// 28d: 01 c0                         addl    %eax, %eax
// 28f: 31 c9                         xorl    %ecx, %ecx
// 291: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 295: 0f 93 c1                      setae   %cl
// 298: 09 c1                         orl     %eax, %ecx
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _JIT_OPARG
// 2a4: 0f b7 c0                      movzwl  %ax, %eax
// 2a7: 0f a3 c8                      btl     %ecx, %eax
// 2aa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ac:  R_X86_64_64  _Py_FalseStruct
// 2b4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002b6:  R_X86_64_64  _Py_TrueStruct
// 2be: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 2c2: b9 01 00 00 00                movl    $0x1, %ecx
// 2c7: 29 c1                         subl    %eax, %ecx
// 2c9: 48 63 c1                      movslq  %ecx, %rax
// 2cc: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2d0: 48 89 54 c1 f0                movq    %rdx, -0x10(%rcx,%rax,8)
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _JIT_CONTINUE
// 2df: 4c 89 ef                      movq    %r13, %rdi
// 2e2: 4c 89 e6                      movq    %r12, %rsi
// 2e5: 48 89 ea                      movq    %rbp, %rdx
// 2e8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ec: 5b                            popq    %rbx
// 2ed: 41 5c                         popq    %r12
// 2ef: 41 5d                         popq    %r13
// 2f1: 41 5e                         popq    %r14
// 2f3: 41 5f                         popq    %r15
// 2f5: 5d                            popq    %rbp
// 2f6: ff e0                         jmpq    *%rax
// 2f8: 
static const unsigned char _BUILD_SETplus_COMPARE_OP_FLOAT_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x2f, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x08, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x63, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xeb, 0x77, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x14, 0x24, 0x4c, 0x89, 0x24, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x64, 0xda, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x0b, 0x4c, 0x8b, 0x74, 0xda, 0xf8, 0x49, 0x39, 0x46, 0x08, 0x74, 0x3c, 0x48, 0x8d, 0x04, 0xda, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x10, 0x46, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1f, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x24, 0xd8, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x1e, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x08, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x54, 0xc1, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_COMPARE_OP_FLOAT_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_COMPARE_OP_FLOAT_data_holes[1];

// _BUILD_SETplus_COMPARE_OP_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_COMPARE_OP_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 36: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _JIT_OPARG
// 45: 66 85 c0                      testw   %ax, %ax
// 48: 0f 84 45 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 5a: 4d 89 ef                      movq    %r13, %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: eb 5e                         jmp     0x17d <_JIT_ENTRY+0x17d>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 126: 74 6b                         je      0x193 <_JIT_ENTRY+0x193>
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 48 85 c0                      testq   %rax, %rax
// 12f: 7f 22                         jg      0x153 <_JIT_ENTRY+0x153>
// 131: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000133:  R_X86_64_64  .rodata.str1.1
// 13b: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 140: 4c 89 e2                      movq    %r12, %rdx
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 85 c0                         testl   %eax, %eax
// 155: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 15a: 78 21                         js      0x17d <_JIT_ENTRY+0x17d>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 166: ff d0                         callq   *%rax
// 168: 49 ff 0c 24                   decq    (%r12)
// 16c: 75 0f                         jne     0x17d <_JIT_ENTRY+0x17d>
// 16e: 4c 89 e7                      movq    %r12, %rdi
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: ff d0                         callq   *%rax
// 17d: 49 29 df                      subq    %rbx, %r15
// 180: 49 83 c7 b8                   addq    $-0x48, %r15
// 184: 49 c1 ef 03                   shrq    $0x3, %r15
// 188: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 18c: 31 c0                         xorl    %eax, %eax
// 18e: e9 8d 00 00 00                jmp     0x220 <_JIT_ENTRY+0x220>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a7: 48 f7 d8                      negq    %rax
// 1aa: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1af: b8 01 00 00 00                movl    $0x1, %eax
// 1b4: 29 c8                         subl    %ecx, %eax
// 1b6: 48 63 e8                      movslq  %eax, %rbp
// 1b9: 4d 8b 74 ed f0                movq    -0x10(%r13,%rbp,8), %r14
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyLong_Type
// 1c8: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 1cc: 4d 89 ec                      movq    %r13, %r12
// 1cf: 75 1f                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1d1: 4d 8b 6c ec f8                movq    -0x8(%r12,%rbp,8), %r13
// 1d6: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1da: 75 14                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1dc: 4d 8b 7e 10                   movq    0x10(%r14), %r15
// 1e0: 49 83 ff 0f                   cmpq    $0xf, %r15
// 1e4: 77 0a                         ja      0x1f0 <_JIT_ENTRY+0x1f0>
// 1e6: 49 8b 5d 10                   movq    0x10(%r13), %rbx
// 1ea: 48 83 fb 0f                   cmpq    $0xf, %rbx
// 1ee: 76 3f                         jbe     0x22f <_JIT_ENTRY+0x22f>
// 1f0: 49 8d 04 ec                   leaq    (%r12,%rbp,8), %rax
// 1f4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f9: 48 29 c8                      subq    %rcx, %rax
// 1fc: 48 83 c0 b8                   addq    $-0x48, %rax
// 200: 48 c1 e8 03                   shrq    $0x3, %rax
// 204: 89 41 40                      movl    %eax, 0x40(%rcx)
// 207: 48 8b 01                      movq    (%rcx), %rax
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  _JIT_TARGET
// 214: 89 c9                         movl    %ecx, %ecx
// 216: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 220: 48 83 c4 28                   addq    $0x28, %rsp
// 224: 5b                            popq    %rbx
// 225: 41 5c                         popq    %r12
// 227: 41 5d                         popq    %r13
// 229: 41 5e                         popq    %r14
// 22b: 41 5f                         popq    %r15
// 22d: 5d                            popq    %rbp
// 22e: c3                            retq
// 22f: 41 8b 46 18                   movl    0x18(%r14), %eax
// 233: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 238: 41 8b 45 18                   movl    0x18(%r13), %eax
// 23c: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 241: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 246: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000248:  R_X86_64_64  PyInterpreterState_Get
// 250: 75 3b                         jne     0x28d <_JIT_ENTRY+0x28d>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyInterpreterState_Get
// 25c: ff d0                         callq   *%rax
// 25e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 265: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000267:  R_X86_64_64  PyInterpreterState_Get
// 26f: 49 ff 0e                      decq    (%r14)
// 272: 75 19                         jne     0x28d <_JIT_ENTRY+0x28d>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  PyObject_Free
// 27e: 4c 89 f7                      movq    %r14, %rdi
// 281: ff d0                         callq   *%rax
// 283: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000285:  R_X86_64_64  PyInterpreterState_Get
// 28d: 4d 8d 34 ec                   leaq    (%r12,%rbp,8), %r14
// 291: 49 83 c6 f8                   addq    $-0x8, %r14
// 295: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 29a: 75 1e                         jne     0x2ba <_JIT_ENTRY+0x2ba>
// 29c: ff d1                         callq   *%rcx
// 29e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2a5: 49 ff 4d 00                   decq    (%r13)
// 2a9: 75 0f                         jne     0x2ba <_JIT_ENTRY+0x2ba>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  PyObject_Free
// 2b5: 4c 89 ef                      movq    %r13, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: 41 83 e7 03                   andl    $0x3, %r15d
// 2be: b8 01 00 00 00                movl    $0x1, %eax
// 2c3: b9 01 00 00 00                movl    $0x1, %ecx
// 2c8: 4c 29 f9                      subq    %r15, %rcx
// 2cb: 48 0f af 4c 24 18             imulq   0x18(%rsp), %rcx
// 2d1: 83 e3 03                      andl    $0x3, %ebx
// 2d4: 48 29 d8                      subq    %rbx, %rax
// 2d7: 48 0f af 44 24 08             imulq   0x8(%rsp), %rax
// 2dd: 31 d2                         xorl    %edx, %edx
// 2df: 31 f6                         xorl    %esi, %esi
// 2e1: 48 39 c1                      cmpq    %rax, %rcx
// 2e4: 0f 9d c2                      setge   %dl
// 2e7: 40 0f 9e c6                   setle   %sil
// 2eb: 01 d2                         addl    %edx, %edx
// 2ed: 09 d6                         orl     %edx, %esi
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _JIT_OPARG
// 2f9: 0f b7 c0                      movzwl  %ax, %eax
// 2fc: 0f a3 f0                      btl     %esi, %eax
// 2ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000301:  R_X86_64_64  _Py_FalseStruct
// 309: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000030b:  R_X86_64_64  _Py_TrueStruct
// 313: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 317: b9 01 00 00 00                movl    $0x1, %ecx
// 31c: 29 c1                         subl    %eax, %ecx
// 31e: 48 63 c1                      movslq  %ecx, %rax
// 321: 49 89 54 c4 f0                movq    %rdx, -0x10(%r12,%rax,8)
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _JIT_CONTINUE
// 330: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 335: 4c 89 f6                      movq    %r14, %rsi
// 338: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 33d: 48 83 c4 28                   addq    $0x28, %rsp
// 341: 5b                            popq    %rbx
// 342: 41 5c                         popq    %r12
// 344: 41 5d                         popq    %r13
// 346: 41 5e                         popq    %r14
// 348: 41 5f                         popq    %r15
// 34a: 5d                            popq    %rbp
// 34b: ff e0                         jmpq    *%rax
// 34d: 
static const unsigned char _BUILD_SETplus_COMPARE_OP_INT_code_body[846] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xeb, 0x5e, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x6b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x74, 0xed, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x4d, 0x89, 0xec, 0x75, 0x1f, 0x4d, 0x8b, 0x6c, 0xec, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x75, 0x14, 0x4d, 0x8b, 0x7e, 0x10, 0x49, 0x83, 0xff, 0x0f, 0x77, 0x0a, 0x49, 0x8b, 0x5d, 0x10, 0x48, 0x83, 0xfb, 0x0f, 0x76, 0x3f, 0x49, 0x8d, 0x04, 0xec, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x46, 0x18, 0x48, 0x89, 0x44, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xec, 0x49, 0x83, 0xc6, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0x83, 0xe7, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf9, 0x48, 0x0f, 0xaf, 0x4c, 0x24, 0x18, 0x83, 0xe3, 0x03, 0x48, 0x29, 0xd8, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x08, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_COMPARE_OP_INT_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_COMPARE_OP_INT_data_holes[1];

// _BUILD_SETplus_COMPARE_OP_STR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_COMPARE_OP_STR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 46 01 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// 49: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: eb 5d                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 126: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12a: 74 63                         je      0x18f <_JIT_ENTRY+0x18f>
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 0c 24                   decq    (%r12)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: ff d0                         callq   *%rax
// 17c: 4d 29 ef                      subq    %r13, %r15
// 17f: 49 83 c7 b8                   addq    $-0x48, %r15
// 183: 49 c1 ef 03                   shrq    $0x3, %r15
// 187: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: eb 7b                         jmp     0x20a <_JIT_ENTRY+0x20a>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _JIT_OPARG
// 199: 0f b7 c8                      movzwl  %ax, %ecx
// 19c: 0f b7 c0                      movzwl  %ax, %eax
// 19f: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a3: 48 f7 d8                      negq    %rax
// 1a6: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1ab: b8 01 00 00 00                movl    $0x1, %eax
// 1b0: 29 c8                         subl    %ecx, %eax
// 1b2: 48 63 d8                      movslq  %eax, %rbx
// 1b5: 4c 8b 74 dd f0                movq    -0x10(%rbp,%rbx,8), %r14
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  PyUnicode_Type
// 1c4: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 1c8: 75 0c                         jne     0x1d6 <_JIT_ENTRY+0x1d6>
// 1ca: 4c 8b 64 dd f8                movq    -0x8(%rbp,%rbx,8), %r12
// 1cf: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d4: 74 43                         je      0x219 <_JIT_ENTRY+0x219>
// 1d6: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 1de: 48 01 e8                      addq    %rbp, %rax
// 1e1: 4c 29 e8                      subq    %r13, %rax
// 1e4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ec: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 1f0: 49 8b 45 00                   movq    (%r13), %rax
// 1f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f6:  R_X86_64_64  _JIT_TARGET
// 1fe: 89 c9                         movl    %ecx, %ecx
// 200: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 204: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 20a: 48 83 c4 18                   addq    $0x18, %rsp
// 20e: 5b                            popq    %rbx
// 20f: 41 5c                         popq    %r12
// 211: 41 5d                         popq    %r13
// 213: 41 5e                         popq    %r14
// 215: 41 5f                         popq    %r15
// 217: 5d                            popq    %rbp
// 218: c3                            retq
// 219: 49 89 ef                      movq    %rbp, %r15
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _PyUnicode_Equal
// 226: 4c 89 f7                      movq    %r14, %rdi
// 229: 4c 89 e6                      movq    %r12, %rsi
// 22c: ff d0                         callq   *%rax
// 22e: 89 c5                         movl    %eax, %ebp
// 230: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 235: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000237:  R_X86_64_64  PyInterpreterState_Get
// 23f: 75 3b                         jne     0x27c <_JIT_ENTRY+0x27c>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  PyInterpreterState_Get
// 24b: ff d0                         callq   *%rax
// 24d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 254: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000256:  R_X86_64_64  PyInterpreterState_Get
// 25e: 49 ff 0e                      decq    (%r14)
// 261: 75 19                         jne     0x27c <_JIT_ENTRY+0x27c>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _PyUnicode_ExactDealloc
// 26d: 4c 89 f7                      movq    %r14, %rdi
// 270: ff d0                         callq   *%rax
// 272: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000274:  R_X86_64_64  PyInterpreterState_Get
// 27c: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 280: 49 83 c6 f8                   addq    $-0x8, %r14
// 284: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 28a: 75 1e                         jne     0x2aa <_JIT_ENTRY+0x2aa>
// 28c: ff d1                         callq   *%rcx
// 28e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 295: 49 ff 0c 24                   decq    (%r12)
// 299: 75 0f                         jne     0x2aa <_JIT_ENTRY+0x2aa>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2a5: 4c 89 e7                      movq    %r12, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 83 c5 07                      addl    $0x7, %ebp
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _JIT_OPARG
// 2b7: 0f b7 c0                      movzwl  %ax, %eax
// 2ba: 85 c5                         testl   %eax, %ebp
// 2bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002be:  R_X86_64_64  _Py_FalseStruct
// 2c6: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002c8:  R_X86_64_64  _Py_TrueStruct
// 2d0: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2d4: b9 01 00 00 00                movl    $0x1, %ecx
// 2d9: 29 c1                         subl    %eax, %ecx
// 2db: 48 63 c1                      movslq  %ecx, %rax
// 2de: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _JIT_CONTINUE
// 2ed: 4c 89 ef                      movq    %r13, %rdi
// 2f0: 4c 89 f6                      movq    %r14, %rsi
// 2f3: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2f8: 48 83 c4 18                   addq    $0x18, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: ff e0                         jmpq    *%rax
// 308: 
static const unsigned char _BUILD_SETplus_COMPARE_OP_STR_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xeb, 0x5d, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xeb, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x74, 0xdd, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x75, 0x0c, 0x4c, 0x8b, 0x64, 0xdd, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x43, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x83, 0xc6, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x85, 0xc5, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_COMPARE_OP_STR_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_COMPARE_OP_STR_data_holes[1];

// _BUILD_SETplus_CONTAINS_OP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CONTAINS_OP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 d3 01 00 00                jmp     0x2f5 <_JIT_ENTRY+0x2f5>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 129: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 93 01 00 00             js      0x2f5 <_JIT_ENTRY+0x2f5>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 7d 01 00 00             jne     0x2f5 <_JIT_ENTRY+0x2f5>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 69 01 00 00                jmp     0x2f5 <_JIT_ENTRY+0x2f5>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 c8                         subl    %ecx, %eax
// 1af: 48 63 d8                      movslq  %eax, %rbx
// 1b2: 4c 8b 74 dd f0                movq    -0x10(%rbp,%rbx,8), %r14
// 1b7: 49 89 ef                      movq    %rbp, %r15
// 1ba: 4c 8b 64 dd f8                movq    -0x8(%rbp,%rbx,8), %r12
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PySequence_Contains
// 1c9: 4c 89 e7                      movq    %r12, %rdi
// 1cc: 4c 89 f6                      movq    %r14, %rsi
// 1cf: ff d0                         callq   *%rax
// 1d1: 89 c5                         movl    %eax, %ebp
// 1d3: 49 8b 06                      movq    (%r14), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7e 06                         jle     0x1e1 <_JIT_ENTRY+0x1e1>
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 79 27                         jns     0x206 <_JIT_ENTRY+0x206>
// 1df: eb 36                         jmp     0x217 <_JIT_ENTRY+0x217>
// 1e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_NegativeRefcount
// 1f5: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 1fa: 4c 89 f2                      movq    %r14, %rdx
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 8b 06                      movq    (%r14), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 11                         js      0x217 <_JIT_ENTRY+0x217>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 49 ff 0e                      decq    (%r14)
// 215: 74 0f                         je      0x226 <_JIT_ENTRY+0x226>
// 217: 49 8b 04 24                   movq    (%r12), %rax
// 21b: 48 85 c0                      testq   %rax, %rax
// 21e: 7e 1e                         jle     0x23e <_JIT_ENTRY+0x23e>
// 220: 85 c0                         testl   %eax, %eax
// 222: 79 40                         jns     0x264 <_JIT_ENTRY+0x264>
// 224: eb 50                         jmp     0x276 <_JIT_ENTRY+0x276>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_Dealloc
// 230: 4c 89 f7                      movq    %r14, %rdi
// 233: ff d0                         callq   *%rax
// 235: 49 8b 04 24                   movq    (%r12), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 7f e2                         jg      0x220 <_JIT_ENTRY+0x220>
// 23e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000240:  R_X86_64_64  .rodata.str1.1
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_NegativeRefcount
// 252: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 257: 4c 89 e2                      movq    %r12, %rdx
// 25a: ff d0                         callq   *%rax
// 25c: 49 8b 04 24                   movq    (%r12), %rax
// 260: 85 c0                         testl   %eax, %eax
// 262: 78 12                         js      0x276 <_JIT_ENTRY+0x276>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26e: ff d0                         callq   *%rax
// 270: 49 ff 0c 24                   decq    (%r12)
// 274: 74 64                         je      0x2da <_JIT_ENTRY+0x2da>
// 276: 85 ed                         testl   %ebp, %ebp
// 278: 78 73                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 27a: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 27e: 48 83 c6 f8                   addq    $-0x8, %rsi
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: 0f b7 c0                      movzwl  %ax, %eax
// 28f: 39 c5                         cmpl    %eax, %ebp
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  _Py_FalseStruct
// 29b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000029d:  R_X86_64_64  _Py_TrueStruct
// 2a5: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2a9: b9 01 00 00 00                movl    $0x1, %ecx
// 2ae: 29 c1                         subl    %eax, %ecx
// 2b0: 48 63 c1                      movslq  %ecx, %rax
// 2b3: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _JIT_CONTINUE
// 2c2: 4c 89 ef                      movq    %r13, %rdi
// 2c5: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2ca: 48 83 c4 18                   addq    $0x18, %rsp
// 2ce: 5b                            popq    %rbx
// 2cf: 41 5c                         popq    %r12
// 2d1: 41 5d                         popq    %r13
// 2d3: 41 5e                         popq    %r14
// 2d5: 41 5f                         popq    %r15
// 2d7: 5d                            popq    %rbp
// 2d8: ff e0                         jmpq    *%rax
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_Dealloc
// 2e4: 4c 89 e7                      movq    %r12, %rdi
// 2e7: ff d0                         callq   *%rax
// 2e9: 85 ed                         testl   %ebp, %ebp
// 2eb: 79 8d                         jns     0x27a <_JIT_ENTRY+0x27a>
// 2ed: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 2f1: 49 83 c7 f0                   addq    $-0x10, %r15
// 2f5: 4d 29 ef                      subq    %r13, %r15
// 2f8: 49 83 c7 b8                   addq    $-0x48, %r15
// 2fc: 49 c1 ef 03                   shrq    $0x3, %r15
// 300: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 304: 31 c0                         xorl    %eax, %eax
// 306: 48 83 c4 18                   addq    $0x18, %rsp
// 30a: 5b                            popq    %rbx
// 30b: 41 5c                         popq    %r12
// 30d: 41 5d                         popq    %r13
// 30f: 41 5e                         popq    %r14
// 311: 41 5f                         popq    %r15
// 313: 5d                            popq    %rbp
// 314: c3                            retq
// 315: 
static const unsigned char _BUILD_SETplus_CONTAINS_OP_code_body[790] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0xd3, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x93, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x7d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x69, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x74, 0xdd, 0xf0, 0x49, 0x89, 0xef, 0x4c, 0x8b, 0x64, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x64, 0x85, 0xed, 0x78, 0x73, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x39, 0xc5, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x8d, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CONTAINS_OP_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CONTAINS_OP_data_holes[1];

// _BUILD_SETplus_CONVERT_VALUE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_CONVERT_VALUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 58 01 00 00                jmp     0x27a <_JIT_ENTRY+0x27a>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 13 01 00 00             js      0x27a <_JIT_ENTRY+0x27a>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 fd 00 00 00             jne     0x27a <_JIT_ENTRY+0x27a>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 e9 00 00 00                jmp     0x27a <_JIT_ENTRY+0x27a>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1a9: 48 f7 da                      negq    %rdx
// 1ac: 4d 89 24 16                   movq    %r12, (%r14,%rdx)
// 1b0: ba 01 00 00 00                movl    $0x1, %edx
// 1b5: 29 ca                         subl    %ecx, %edx
// 1b7: 48 63 da                      movslq  %edx, %rbx
// 1ba: 4d 89 f7                      movq    %r14, %r15
// 1bd: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c4:  R_X86_64_64  .rodata
// 1cc: 4c 89 f7                      movq    %r14, %rdi
// 1cf: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1d2: 49 89 c4                      movq    %rax, %r12
// 1d5: 49 8b 06                      movq    (%r14), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 7e 06                         jle     0x1e3 <_JIT_ENTRY+0x1e3>
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 79 27                         jns     0x208 <_JIT_ENTRY+0x208>
// 1e1: eb 36                         jmp     0x219 <_JIT_ENTRY+0x219>
// 1e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NegativeRefcount
// 1f7: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 1fc: 4c 89 f2                      movq    %r14, %rdx
// 1ff: ff d0                         callq   *%rax
// 201: 49 8b 06                      movq    (%r14), %rax
// 204: 85 c0                         testl   %eax, %eax
// 206: 78 11                         js      0x219 <_JIT_ENTRY+0x219>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 212: ff d0                         callq   *%rax
// 214: 49 ff 0e                      decq    (%r14)
// 217: 74 45                         je      0x25e <_JIT_ENTRY+0x25e>
// 219: 4d 85 e4                      testq   %r12, %r12
// 21c: 74 54                         je      0x272 <_JIT_ENTRY+0x272>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_OPARG
// 228: 0f b7 c0                      movzwl  %ax, %eax
// 22b: b9 01 00 00 00                movl    $0x1, %ecx
// 230: 29 c1                         subl    %eax, %ecx
// 232: 48 63 c1                      movslq  %ecx, %rax
// 235: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 239: 4d 89 64 c7 f8                movq    %r12, -0x8(%r15,%rax,8)
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_CONTINUE
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: 48 89 ea                      movq    %rbp, %rdx
// 24e: 48 83 c4 18                   addq    $0x18, %rsp
// 252: 5b                            popq    %rbx
// 253: 41 5c                         popq    %r12
// 255: 41 5d                         popq    %r13
// 257: 41 5e                         popq    %r14
// 259: 41 5f                         popq    %r15
// 25b: 5d                            popq    %rbp
// 25c: ff e0                         jmpq    *%rax
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_Dealloc
// 268: 4c 89 f7                      movq    %r14, %rdi
// 26b: ff d0                         callq   *%rax
// 26d: 4d 85 e4                      testq   %r12, %r12
// 270: 75 ac                         jne     0x21e <_JIT_ENTRY+0x21e>
// 272: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 276: 49 83 c7 f8                   addq    $-0x8, %r15
// 27a: 4d 29 ef                      subq    %r13, %r15
// 27d: 49 83 c7 b8                   addq    $-0x48, %r15
// 281: 49 c1 ef 03                   shrq    $0x3, %r15
// 285: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 289: 31 c0                         xorl    %eax, %eax
// 28b: 48 83 c4 18                   addq    $0x18, %rsp
// 28f: 5b                            popq    %rbx
// 290: 41 5c                         popq    %r12
// 292: 41 5d                         popq    %r13
// 294: 41 5e                         popq    %r14
// 296: 41 5f                         popq    %r15
// 298: 5d                            popq    %rbp
// 299: c3                            retq
// 29a: 
static const unsigned char _BUILD_SETplus_CONVERT_VALUE_code_body[667] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x58, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x13, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xfd, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x24, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x45, 0x4d, 0x85, 0xe4, 0x74, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x4d, 0x89, 0x64, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xac, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_CONVERT_VALUE_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _BUILD_SETplus_COPY
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_COPY.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b9: 48 f7 da                      negq    %rdx
// 1bc: 4d 89 24 16                   movq    %r12, (%r14,%rdx)
// 1c0: bb 01 00 00 00                movl    $0x1, %ebx
// 1c5: ba 01 00 00 00                movl    $0x1, %edx
// 1ca: 29 ca                         subl    %ecx, %edx
// 1cc: 48 63 ca                      movslq  %edx, %rcx
// 1cf: 48 29 c1                      subq    %rax, %rcx
// 1d2: 4d 89 f7                      movq    %r14, %r15
// 1d5: 4d 8b 34 ce                   movq    (%r14,%rcx,8), %r14
// 1d9: 41 8b 06                      movl    (%r14), %eax
// 1dc: ff c0                         incl    %eax
// 1de: 74 0f                         je      0x1ef <_JIT_ENTRY+0x1ef>
// 1e0: 41 89 06                      movl    %eax, (%r14)
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ed: ff d0                         callq   *%rax
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _JIT_OPARG
// 1f9: 0f b7 c0                      movzwl  %ax, %eax
// 1fc: 29 c3                         subl    %eax, %ebx
// 1fe: 48 63 c3                      movslq  %ebx, %rax
// 201: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 205: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 209: 48 83 c6 08                   addq    $0x8, %rsi
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _JIT_CONTINUE
// 217: 4c 89 ef                      movq    %r13, %rdi
// 21a: 48 89 ea                      movq    %rbp, %rdx
// 21d: 48 83 c4 18                   addq    $0x18, %rsp
// 221: 5b                            popq    %rbx
// 222: 41 5c                         popq    %r12
// 224: 41 5d                         popq    %r13
// 226: 41 5e                         popq    %r14
// 228: 41 5f                         popq    %r15
// 22a: 5d                            popq    %rbp
// 22b: ff e0                         jmpq    *%rax
// 22d: 
static const unsigned char _BUILD_SETplus_COPY_code_body[558] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x24, 0x16, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x29, 0xc1, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x34, 0xce, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_COPY_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_COPY_data_holes[1];

// _BUILD_SETplus_COPY_FREE_VARS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_COPY_FREE_VARS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 30 01 00 00             je      0x15e <_JIT_ENTRY+0x15e>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 36: 48 89 1c 24                   movq    %rbx, (%rsp)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 0f b7 c0                      movzwl  %ax, %eax
// 47: 48 c1 e0 03                   shlq    $0x3, %rax
// 4b: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 50: 49 29 c7                      subq    %rax, %r15
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 66 85 c0                      testw   %ax, %ax
// 60: 0f 84 18 01 00 00             je      0x17e <_JIT_ENTRY+0x17e>
// 66: 0f b7 c0                      movzwl  %ax, %eax
// 69: 83 f8 02                      cmpl    $0x2, %eax
// 6c: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 72: 44 0f 43 e8                   cmovael %eax, %r13d
// 76: 31 db                         xorl    %ebx, %ebx
// 78: 31 ed                         xorl    %ebp, %ebp
// 7a: eb 0c                         jmp     0x88 <_JIT_ENTRY+0x88>
// 7c: 0f 1f 40 00                   nopl    (%rax)
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 74 7e                         je      0x106 <_JIT_ENTRY+0x106>
// 88: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 8c: 85 ed                         testl   %ebp, %ebp
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 49 8b 06                      movq    (%r14), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7e 24                         jle     0xbc <_JIT_ENTRY+0xbc>
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 e4                         js      0x80 <_JIT_ENTRY+0x80>
// 9c: eb 43                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9e: 66 90                         nop
// a0: 4c 89 e7                      movq    %r12, %rdi
// a3: 4c 89 f6                      movq    %r14, %rsi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PySet_Add
// b0: ff d0                         callq   *%rax
// b2: 89 c5                         movl    %eax, %ebp
// b4: 49 8b 06                      movq    (%r14), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f dc                         jg      0x98 <_JIT_ENTRY+0x98>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: ff d0                         callq   *%rax
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 85 c0                         testl   %eax, %eax
// df: 78 9f                         js      0x80 <_JIT_ENTRY+0x80>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// eb: ff d0                         callq   *%rax
// ed: 49 ff 0e                      decq    (%r14)
// f0: 75 8e                         jne     0x80 <_JIT_ENTRY+0x80>
// f2: 4c 89 f7                      movq    %r14, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: e9 7a ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 74 74                         je      0x17e <_JIT_ENTRY+0x17e>
// 10a: 49 8b 04 24                   movq    (%r12), %rax
// 10e: 48 85 c0                      testq   %rax, %rax
// 111: 7f 22                         jg      0x135 <_JIT_ENTRY+0x135>
// 113: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000115:  R_X86_64_64  .rodata.str1.1
// 11d: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 122: 4c 89 e2                      movq    %r12, %rdx
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 85 c0                         testl   %eax, %eax
// 137: 48 8b 1c 24                   movq    (%rsp), %rbx
// 13b: 78 21                         js      0x15e <_JIT_ENTRY+0x15e>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 147: ff d0                         callq   *%rax
// 149: 49 ff 0c 24                   decq    (%r12)
// 14d: 75 0f                         jne     0x15e <_JIT_ENTRY+0x15e>
// 14f: 4c 89 e7                      movq    %r12, %rdi
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: ff d0                         callq   *%rax
// 15e: 49 29 df                      subq    %rbx, %r15
// 161: 49 83 c7 b8                   addq    $-0x48, %r15
// 165: 49 c1 ef 03                   shrq    $0x3, %r15
// 169: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 16d: 31 c0                         xorl    %eax, %eax
// 16f: 48 83 c4 18                   addq    $0x18, %rsp
// 173: 5b                            popq    %rbx
// 174: 41 5c                         popq    %r12
// 176: 41 5d                         popq    %r13
// 178: 41 5e                         popq    %r14
// 17a: 41 5f                         popq    %r15
// 17c: 5d                            popq    %rbp
// 17d: c3                            retq
// 17e: 4d 89 27                      movq    %r12, (%r15)
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 66 85 c0                      testw   %ax, %ax
// 18e: 74 70                         je      0x200 <_JIT_ENTRY+0x200>
// 190: 48 8b 14 24                   movq    (%rsp), %rdx
// 194: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 198: 48 8b 58 48                   movq    0x48(%rax), %rbx
// 19c: 48 8b 02                      movq    (%rdx), %rax
// 19f: 8b 40 48                      movl    0x48(%rax), %eax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  _JIT_OPARG
// 1ac: 0f b7 c9                      movzwl  %cx, %ecx
// 1af: 29 c8                         subl    %ecx, %eax
// 1b1: 83 f9 02                      cmpl    $0x2, %ecx
// 1b4: 41 be 01 00 00 00             movl    $0x1, %r14d
// 1ba: 44 0f 43 f1                   cmovael %ecx, %r14d
// 1be: 48 98                         cltq
// 1c0: 4c 8d 3c c2                   leaq    (%rdx,%rax,8), %r15
// 1c4: 49 83 c7 48                   addq    $0x48, %r15
// 1c8: 45 31 e4                      xorl    %r12d, %r12d
// 1cb: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001cd:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d5: eb 15                         jmp     0x1ec <_JIT_ENTRY+0x1ec>
// 1d7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1e0: 4b 89 2c e7                   movq    %rbp, (%r15,%r12,8)
// 1e4: 49 ff c4                      incq    %r12
// 1e7: 4d 39 e6                      cmpq    %r12, %r14
// 1ea: 74 14                         je      0x200 <_JIT_ENTRY+0x200>
// 1ec: 4a 8b 6c e3 18                movq    0x18(%rbx,%r12,8), %rbp
// 1f1: 8b 45 00                      movl    (%rbp), %eax
// 1f4: ff c0                         incl    %eax
// 1f6: 74 e8                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 1f8: 89 45 00                      movl    %eax, (%rbp)
// 1fb: 41 ff d5                      callq   *%r13
// 1fe: eb e0                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_OPARG
// 20a: 0f b7 c0                      movzwl  %ax, %eax
// 20d: b9 01 00 00 00                movl    $0x1, %ecx
// 212: 29 c1                         subl    %eax, %ecx
// 214: 48 63 c1                      movslq  %ecx, %rax
// 217: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 21c: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_CONTINUE
// 22a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 22e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 233: 48 83 c4 18                   addq    $0x18, %rsp
// 237: 5b                            popq    %rbx
// 238: 41 5c                         popq    %r12
// 23a: 41 5d                         popq    %r13
// 23c: 41 5e                         popq    %r14
// 23e: 41 5f                         popq    %r15
// 240: 5d                            popq    %rbp
// 241: ff e0                         jmpq    *%rax
// 243: 
static const unsigned char _BUILD_SETplus_COPY_FREE_VARS_code_body[580] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x18, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x74, 0x74, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x70, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x58, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf1, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0xc2, 0x49, 0x83, 0xc7, 0x48, 0x45, 0x31, 0xe4, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x15, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x89, 0x2c, 0xe7, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x74, 0x14, 0x4a, 0x8b, 0x6c, 0xe3, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe8, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0xeb, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_COPY_FREE_VARS_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_COPY_FREE_VARS_data_holes[1];

// _BUILD_SETplus_DELETE_ATTR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_DELETE_ATTR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 45 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 e4                      xorl    %r12d, %r12d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c4                      incq    %r12
// 83: 4c 39 e5                      cmpq    %r12, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c e7                   movq    (%r15,%r12,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 f7                      movq    %r14, %r15
// 11e: e9 36 01 00 00                jmp     0x259 <_JIT_ENTRY+0x259>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 5d                         je      0x18e <_JIT_ENTRY+0x18e>
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 88 f5 00 00 00             js      0x259 <_JIT_ENTRY+0x259>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 0f 85 df 00 00 00             jne     0x259 <_JIT_ENTRY+0x259>
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: ff d0                         callq   *%rax
// 189: e9 cb 00 00 00                jmp     0x259 <_JIT_ENTRY+0x259>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1a6: 48 f7 da                      negq    %rdx
// 1a9: 4d 89 2c 16                   movq    %r13, (%r14,%rdx)
// 1ad: ba 01 00 00 00                movl    $0x1, %edx
// 1b2: 29 ca                         subl    %ecx, %edx
// 1b4: 4c 63 e2                      movslq  %edx, %r12
// 1b7: 4d 89 f5                      movq    %r14, %r13
// 1ba: 4f 8b 74 e6 f8                movq    -0x8(%r14,%r12,8), %r14
// 1bf: 48 8b 4d 00                   movq    (%rbp), %rcx
// 1c3: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1c7: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  PyObject_DelAttr
// 1d6: 4c 89 f7                      movq    %r14, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 89 c3                         movl    %eax, %ebx
// 1dd: 49 8b 06                      movq    (%r14), %rax
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 7e 1c                         jle     0x201 <_JIT_ENTRY+0x201>
// 1e5: 4e 8d 3c e5 00 00 00 00       leaq    (,%r12,8), %r15
// 1ed: 4d 01 ef                      addq    %r13, %r15
// 1f0: 4e 8d 24 e5 f8 ff ff ff       leaq    -0x8(,%r12,8), %r12
// 1f8: 4d 01 ec                      addq    %r13, %r12
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 79 3d                         jns     0x23c <_JIT_ENTRY+0x23c>
// 1ff: eb 4c                         jmp     0x24d <_JIT_ENTRY+0x24d>
// 201: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000203:  R_X86_64_64  .rodata.str1.1
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_NegativeRefcount
// 215: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 21a: 4c 89 f2                      movq    %r14, %rdx
// 21d: ff d0                         callq   *%rax
// 21f: 49 8b 06                      movq    (%r14), %rax
// 222: 4e 8d 3c e5 00 00 00 00       leaq    (,%r12,8), %r15
// 22a: 4d 01 ef                      addq    %r13, %r15
// 22d: 4e 8d 24 e5 f8 ff ff ff       leaq    -0x8(,%r12,8), %r12
// 235: 4d 01 ec                      addq    %r13, %r12
// 238: 85 c0                         testl   %eax, %eax
// 23a: 78 11                         js      0x24d <_JIT_ENTRY+0x24d>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 49 ff 0e                      decq    (%r14)
// 24b: 74 2c                         je      0x279 <_JIT_ENTRY+0x279>
// 24d: 85 db                         testl   %ebx, %ebx
// 24f: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 253: 74 3b                         je      0x290 <_JIT_ENTRY+0x290>
// 255: 49 83 c7 f8                   addq    $-0x8, %r15
// 259: 49 29 ef                      subq    %rbp, %r15
// 25c: 49 83 c7 b8                   addq    $-0x48, %r15
// 260: 49 c1 ef 03                   shrq    $0x3, %r15
// 264: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 268: 31 c0                         xorl    %eax, %eax
// 26a: 48 83 c4 18                   addq    $0x18, %rsp
// 26e: 5b                            popq    %rbx
// 26f: 41 5c                         popq    %r12
// 271: 41 5d                         popq    %r13
// 273: 41 5e                         popq    %r14
// 275: 41 5f                         popq    %r15
// 277: 5d                            popq    %rbp
// 278: c3                            retq
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 f7                      movq    %r14, %rdi
// 286: ff d0                         callq   *%rax
// 288: 85 db                         testl   %ebx, %ebx
// 28a: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 28e: 75 c5                         jne     0x255 <_JIT_ENTRY+0x255>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _JIT_CONTINUE
// 29a: 48 89 ef                      movq    %rbp, %rdi
// 29d: 4c 89 fe                      movq    %r15, %rsi
// 2a0: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2a5: 48 83 c4 18                   addq    $0x18, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: ff e0                         jmpq    *%rax
// 2b5: 
static const unsigned char _BUILD_SETplus_DELETE_ATTR_code_body[694] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe5, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xe7, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x36, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xdf, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x2c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xe2, 0x4d, 0x89, 0xf5, 0x4f, 0x8b, 0x74, 0xe6, 0xf8, 0x48, 0x8b, 0x4d, 0x00, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x89, 0xc3, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x4e, 0x8d, 0x3c, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x4e, 0x8d, 0x24, 0xe5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xec, 0x85, 0xc0, 0x79, 0x3d, 0xeb, 0x4c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4e, 0x8d, 0x3c, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x4e, 0x8d, 0x24, 0xe5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xec, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x2c, 0x85, 0xdb, 0x4d, 0x0f, 0x44, 0xfc, 0x74, 0x3b, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xdb, 0x4d, 0x0f, 0x44, 0xfc, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_DELETE_ATTR_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_DELETE_ATTR_data_holes[1];

// _BUILD_SETplus_DELETE_DEREF
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_DELETE_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 de                      movq    %rbx, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ed                      xorl    %r13d, %r13d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c5                      incq    %r13
// 83: 4c 39 ed                      cmpq    %r13, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c ee                   movq    (%r14,%r13,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 de                      movq    %rbx, %r14
// 11e: e9 42 01 00 00                jmp     0x265 <_JIT_ENTRY+0x265>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12b: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 fc 00 00 00             js      0x265 <_JIT_ENTRY+0x265>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 e6 00 00 00             jne     0x265 <_JIT_ENTRY+0x265>
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 d2 00 00 00                jmp     0x265 <_JIT_ENTRY+0x265>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1ab: 48 f7 da                      negq    %rdx
// 1ae: 4c 89 24 13                   movq    %r12, (%rbx,%rdx)
// 1b2: ba 01 00 00 00                movl    $0x1, %edx
// 1b7: 29 ca                         subl    %ecx, %edx
// 1b9: 48 63 ca                      movslq  %edx, %rcx
// 1bc: 4c 8d 34 cb                   leaq    (%rbx,%rcx,8), %r14
// 1c0: 49 8b 44 c7 48                movq    0x48(%r15,%rax,8), %rax
// 1c5: 48 8b 58 10                   movq    0x10(%rax), %rbx
// 1c9: 48 85 db                      testq   %rbx, %rbx
// 1cc: 74 78                         je      0x246 <_JIT_ENTRY+0x246>
// 1ce: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 1d6: 48 8b 03                      movq    (%rbx), %rax
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 7f 21                         jg      0x1ff <_JIT_ENTRY+0x1ff>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 1f7: 48 89 da                      movq    %rbx, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 48 8b 03                      movq    (%rbx), %rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 20                         js      0x223 <_JIT_ENTRY+0x223>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 48 ff 0b                      decq    (%rbx)
// 212: 75 0f                         jne     0x223 <_JIT_ENTRY+0x223>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 48 89 df                      movq    %rbx, %rdi
// 221: ff d0                         callq   *%rax
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 4c 89 ff                      movq    %r15, %rdi
// 230: 4c 89 f6                      movq    %r14, %rsi
// 233: 4c 89 ea                      movq    %r13, %rdx
// 236: 48 83 c4 18                   addq    $0x18, %rsp
// 23a: 5b                            popq    %rbx
// 23b: 41 5c                         popq    %r12
// 23d: 41 5d                         popq    %r13
// 23f: 41 5e                         popq    %r14
// 241: 41 5f                         popq    %r15
// 243: 5d                            popq    %rbp
// 244: ff e0                         jmpq    *%rax
// 246: 49 8b 37                      movq    (%r15), %rsi
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_OPARG
// 253: 0f b7 d0                      movzwl  %ax, %edx
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _PyEval_FormatExcUnbound
// 260: 4c 89 ef                      movq    %r13, %rdi
// 263: ff d0                         callq   *%rax
// 265: 4d 29 fe                      subq    %r15, %r14
// 268: 49 83 c6 b8                   addq    $-0x48, %r14
// 26c: 49 c1 ee 03                   shrq    $0x3, %r14
// 270: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 274: 31 c0                         xorl    %eax, %eax
// 276: 48 83 c4 18                   addq    $0x18, %rsp
// 27a: 5b                            popq    %rbx
// 27b: 41 5c                         popq    %r12
// 27d: 41 5d                         popq    %r13
// 27f: 41 5e                         popq    %r14
// 281: 41 5f                         popq    %r15
// 283: 5d                            popq    %rbp
// 284: c3                            retq
// 285: 
static const unsigned char _BUILD_SETplus_DELETE_DEREF_code_body[646] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xee, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xde, 0xe9, 0x42, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x24, 0x13, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x34, 0xcb, 0x49, 0x8b, 0x44, 0xc7, 0x48, 0x48, 0x8b, 0x58, 0x10, 0x48, 0x85, 0xdb, 0x74, 0x78, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_DELETE_DEREF_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_DELETE_DEREF_data_holes[1];

// _BUILD_SETplus_DELETE_FAST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_DELETE_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 de                      movq    %rbx, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ed                      xorl    %r13d, %r13d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c5                      incq    %r13
// 83: 4c 39 ed                      cmpq    %r13, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c ee                   movq    (%r14,%r13,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 de                      movq    %rbx, %r14
// 11e: e9 7e 01 00 00                jmp     0x2a1 <_JIT_ENTRY+0x2a1>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12b: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 38 01 00 00             js      0x2a1 <_JIT_ENTRY+0x2a1>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 22 01 00 00             jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 0e 01 00 00                jmp     0x2a1 <_JIT_ENTRY+0x2a1>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1ab: 48 f7 da                      negq    %rdx
// 1ae: 4c 89 24 13                   movq    %r12, (%rbx,%rdx)
// 1b2: ba 01 00 00 00                movl    $0x1, %edx
// 1b7: 29 ca                         subl    %ecx, %edx
// 1b9: 48 63 ca                      movslq  %edx, %rcx
// 1bc: 4c 8d 34 cb                   leaq    (%rbx,%rcx,8), %r14
// 1c0: 49 8b 5c c7 48                movq    0x48(%r15,%rax,8), %rbx
// 1c5: 48 85 db                      testq   %rbx, %rbx
// 1c8: 0f 84 86 00 00 00             je      0x254 <_JIT_ENTRY+0x254>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: 0f b7 c0                      movzwl  %ax, %eax
// 1db: 49 c7 44 c7 48 00 00 00 00    movq    $0x0, 0x48(%r15,%rax,8)
// 1e4: 48 8b 03                      movq    (%rbx), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 7f 21                         jg      0x20d <_JIT_ENTRY+0x20d>
// 1ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ee:  R_X86_64_64  .rodata.str1.1+0x83
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_NegativeRefcount
// 200: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 205: 48 89 da                      movq    %rbx, %rdx
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 78 20                         js      0x231 <_JIT_ENTRY+0x231>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 48 ff 0b                      decq    (%rbx)
// 220: 75 0f                         jne     0x231 <_JIT_ENTRY+0x231>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 4c 89 ff                      movq    %r15, %rdi
// 23e: 4c 89 f6                      movq    %r14, %rsi
// 241: 4c 89 ea                      movq    %r13, %rdx
// 244: 48 83 c4 18                   addq    $0x18, %rsp
// 248: 5b                            popq    %rbx
// 249: 41 5c                         popq    %r12
// 24b: 41 5d                         popq    %r13
// 24d: 41 5e                         popq    %r14
// 24f: 41 5f                         popq    %r15
// 251: 5d                            popq    %rbp
// 252: ff e0                         jmpq    *%rax
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  PyExc_UnboundLocalError
// 25e: 48 8b 18                      movq    (%rax), %rbx
// 261: 49 8b 07                      movq    (%r15), %rax
// 264: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: 0f b7 f0                      movzwl  %ax, %esi
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  PyTuple_GetItem
// 27f: ff d0                         callq   *%rax
// 281: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000283:  R_X86_64_64  .rodata.str1.1+0x39
// 28b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028d:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 295: 4c 89 ef                      movq    %r13, %rdi
// 298: 48 89 de                      movq    %rbx, %rsi
// 29b: 48 89 c1                      movq    %rax, %rcx
// 29e: 41 ff d0                      callq   *%r8
// 2a1: 4d 29 fe                      subq    %r15, %r14
// 2a4: 49 83 c6 b8                   addq    $-0x48, %r14
// 2a8: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ac: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 2b0: 31 c0                         xorl    %eax, %eax
// 2b2: 48 83 c4 18                   addq    $0x18, %rsp
// 2b6: 5b                            popq    %rbx
// 2b7: 41 5c                         popq    %r12
// 2b9: 41 5d                         popq    %r13
// 2bb: 41 5e                         popq    %r14
// 2bd: 41 5f                         popq    %r15
// 2bf: 5d                            popq    %rbp
// 2c0: c3                            retq
// 2c1: 
static const unsigned char _BUILD_SETplus_DELETE_FAST_code_body[706] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xee, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xde, 0xe9, 0x7e, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x38, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x22, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x0e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x24, 0x13, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x34, 0xcb, 0x49, 0x8b, 0x5c, 0xc7, 0x48, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0xc7, 0x44, 0xc7, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x18, 0x49, 0x8b, 0x07, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_DELETE_FAST_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _BUILD_SETplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_DELETE_FAST_data_holes[1];

// _BUILD_SETplus_DELETE_GLOBAL
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_DELETE_GLOBAL.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 de                      movq    %rbx, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ed                      xorl    %r13d, %r13d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c5                      incq    %r13
// 83: 4c 39 ed                      cmpq    %r13, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c ee                   movq    (%r14,%r13,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 de                      movq    %rbx, %r14
// 11e: e9 09 01 00 00                jmp     0x22c <_JIT_ENTRY+0x22c>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12b: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 c3 00 00 00             js      0x22c <_JIT_ENTRY+0x22c>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 ad 00 00 00             jne     0x22c <_JIT_ENTRY+0x22c>
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 99 00 00 00                jmp     0x22c <_JIT_ENTRY+0x22c>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1ab: 48 f7 da                      negq    %rdx
// 1ae: 4c 89 24 13                   movq    %r12, (%rbx,%rdx)
// 1b2: ba 01 00 00 00                movl    $0x1, %edx
// 1b7: 29 ca                         subl    %ecx, %edx
// 1b9: 48 63 ca                      movslq  %edx, %rcx
// 1bc: 4c 8d 34 cb                   leaq    (%rbx,%rcx,8), %r14
// 1c0: 49 8b 0f                      movq    (%r15), %rcx
// 1c3: 49 8b 7f 18                   movq    0x18(%r15), %rdi
// 1c7: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1cb: 48 8b 5c c1 18                movq    0x18(%rcx,%rax,8), %rbx
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  PyDict_DelItem
// 1da: 48 89 de                      movq    %rbx, %rsi
// 1dd: ff d0                         callq   *%rax
// 1df: 85 c0                         testl   %eax, %eax
// 1e1: 74 69                         je      0x24c <_JIT_ENTRY+0x24c>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  PyExc_KeyError
// 1ed: 48 8b 30                      movq    (%rax), %rsi
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _PyErr_ExceptionMatches
// 1fa: 4c 89 ef                      movq    %r13, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 74 29                         je      0x22c <_JIT_ENTRY+0x22c>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyExc_NameError
// 20d: 48 8b 30                      movq    (%rax), %rsi
// 210: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000212:  R_X86_64_64  .rodata.str1.1+0x39
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 224: 4c 89 ef                      movq    %r13, %rdi
// 227: 48 89 d9                      movq    %rbx, %rcx
// 22a: ff d0                         callq   *%rax
// 22c: 4d 29 fe                      subq    %r15, %r14
// 22f: 49 83 c6 b8                   addq    $-0x48, %r14
// 233: 49 c1 ee 03                   shrq    $0x3, %r14
// 237: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 23b: 31 c0                         xorl    %eax, %eax
// 23d: 48 83 c4 18                   addq    $0x18, %rsp
// 241: 5b                            popq    %rbx
// 242: 41 5c                         popq    %r12
// 244: 41 5d                         popq    %r13
// 246: 41 5e                         popq    %r14
// 248: 41 5f                         popq    %r15
// 24a: 5d                            popq    %rbp
// 24b: c3                            retq
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _JIT_CONTINUE
// 256: 4c 89 ff                      movq    %r15, %rdi
// 259: 4c 89 f6                      movq    %r14, %rsi
// 25c: 4c 89 ea                      movq    %r13, %rdx
// 25f: 48 83 c4 18                   addq    $0x18, %rsp
// 263: 5b                            popq    %rbx
// 264: 41 5c                         popq    %r12
// 266: 41 5d                         popq    %r13
// 268: 41 5e                         popq    %r14
// 26a: 41 5f                         popq    %r15
// 26c: 5d                            popq    %rbp
// 26d: ff e0                         jmpq    *%rax
// 26f: 
static const unsigned char _BUILD_SETplus_DELETE_GLOBAL_code_body[624] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xee, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xde, 0xe9, 0x09, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xad, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x24, 0x13, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x34, 0xcb, 0x49, 0x8b, 0x0f, 0x49, 0x8b, 0x7f, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x5c, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xd9, 0xff, 0xd0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_DELETE_GLOBAL_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BUILD_SETplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_DELETE_GLOBAL_data_holes[1];

// _BUILD_SETplus_DELETE_NAME
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_DELETE_NAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 de                      movq    %rbx, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ed                      xorl    %r13d, %r13d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c5                      incq    %r13
// 83: 4c 39 ed                      cmpq    %r13, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c ee                   movq    (%r14,%r13,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 de                      movq    %rbx, %r14
// 11e: e9 1c 01 00 00                jmp     0x23f <_JIT_ENTRY+0x23f>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12b: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 d6 00 00 00             js      0x23f <_JIT_ENTRY+0x23f>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 c0 00 00 00             jne     0x23f <_JIT_ENTRY+0x23f>
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 ac 00 00 00                jmp     0x23f <_JIT_ENTRY+0x23f>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1ab: 48 f7 da                      negq    %rdx
// 1ae: 4c 89 24 13                   movq    %r12, (%rbx,%rdx)
// 1b2: ba 01 00 00 00                movl    $0x1, %edx
// 1b7: 29 ca                         subl    %ecx, %edx
// 1b9: 48 63 ca                      movslq  %edx, %rcx
// 1bc: 4c 8d 34 cb                   leaq    (%rbx,%rcx,8), %r14
// 1c0: 49 8b 0f                      movq    (%r15), %rcx
// 1c3: 49 8b 7f 28                   movq    0x28(%r15), %rdi
// 1c7: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1cb: 48 8b 5c c1 18                movq    0x18(%rcx,%rax,8), %rbx
// 1d0: 48 85 ff                      testq   %rdi, %rdi
// 1d3: 74 3e                         je      0x213 <_JIT_ENTRY+0x213>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  PyObject_DelItem
// 1df: 48 89 de                      movq    %rbx, %rsi
// 1e2: ff d0                         callq   *%rax
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 74 77                         je      0x25f <_JIT_ENTRY+0x25f>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  PyExc_NameError
// 1f2: 48 8b 30                      movq    (%rax), %rsi
// 1f5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1+0x54
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 209: 4c 89 ef                      movq    %r13, %rdi
// 20c: 48 89 d9                      movq    %rbx, %rcx
// 20f: ff d0                         callq   *%rax
// 211: eb 2c                         jmp     0x23f <_JIT_ENTRY+0x23f>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  PyExc_SystemError
// 21d: 48 8b 30                      movq    (%rax), %rsi
// 220: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000222:  R_X86_64_64  .rodata.str1.1+0x39
// 22a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000022c:  R_X86_64_64  _PyErr_Format
// 234: 4c 89 ef                      movq    %r13, %rdi
// 237: 48 89 d9                      movq    %rbx, %rcx
// 23a: 31 c0                         xorl    %eax, %eax
// 23c: 41 ff d0                      callq   *%r8
// 23f: 4d 29 fe                      subq    %r15, %r14
// 242: 49 83 c6 b8                   addq    $-0x48, %r14
// 246: 49 c1 ee 03                   shrq    $0x3, %r14
// 24a: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 24e: 31 c0                         xorl    %eax, %eax
// 250: 48 83 c4 18                   addq    $0x18, %rsp
// 254: 5b                            popq    %rbx
// 255: 41 5c                         popq    %r12
// 257: 41 5d                         popq    %r13
// 259: 41 5e                         popq    %r14
// 25b: 41 5f                         popq    %r15
// 25d: 5d                            popq    %rbp
// 25e: c3                            retq
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_CONTINUE
// 269: 4c 89 ff                      movq    %r15, %rdi
// 26c: 4c 89 f6                      movq    %r14, %rsi
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: 48 83 c4 18                   addq    $0x18, %rsp
// 276: 5b                            popq    %rbx
// 277: 41 5c                         popq    %r12
// 279: 41 5d                         popq    %r13
// 27b: 41 5e                         popq    %r14
// 27d: 41 5f                         popq    %r15
// 27f: 5d                            popq    %rbp
// 280: ff e0                         jmpq    *%rax
// 282: 
static const unsigned char _BUILD_SETplus_DELETE_NAME_code_body[643] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xee, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xde, 0xe9, 0x1c, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xc0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xac, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x24, 0x13, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x34, 0xcb, 0x49, 0x8b, 0x0f, 0x49, 0x8b, 0x7f, 0x28, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x5c, 0xc1, 0x18, 0x48, 0x85, 0xff, 0x74, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x77, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xd9, 0xff, 0xd0, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xd9, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_DELETE_NAME_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_DELETE_NAME_data_holes[1];

// _BUILD_SETplus_DELETE_SUBSCR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_DELETE_SUBSCR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 45 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 49: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 ec                      movq    %rbp, %r12
// 11e: e9 52 01 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 5d                         je      0x18e <_JIT_ENTRY+0x18e>
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 88 11 01 00 00             js      0x275 <_JIT_ENTRY+0x275>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 0f 85 fb 00 00 00             jne     0x275 <_JIT_ENTRY+0x275>
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: ff d0                         callq   *%rax
// 189: e9 e7 00 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a2: 48 f7 d8                      negq    %rax
// 1a5: 4c 89 6c 05 00                movq    %r13, (%rbp,%rax)
// 1aa: b8 01 00 00 00                movl    $0x1, %eax
// 1af: 29 c8                         subl    %ecx, %eax
// 1b1: 4c 63 f0                      movslq  %eax, %r14
// 1b4: 4a 8b 5c f5 f0                movq    -0x10(%rbp,%r14,8), %rbx
// 1b9: 49 89 ec                      movq    %rbp, %r12
// 1bc: 4e 8b 6c f5 f8                movq    -0x8(%rbp,%r14,8), %r13
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyObject_DelItem
// 1cb: 48 89 df                      movq    %rbx, %rdi
// 1ce: 4c 89 ee                      movq    %r13, %rsi
// 1d1: ff d0                         callq   *%rax
// 1d3: 89 c5                         movl    %eax, %ebp
// 1d5: 48 8b 03                      movq    (%rbx), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 7e 06                         jle     0x1e3 <_JIT_ENTRY+0x1e3>
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 79 27                         jns     0x208 <_JIT_ENTRY+0x208>
// 1e1: eb 36                         jmp     0x219 <_JIT_ENTRY+0x219>
// 1e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NegativeRefcount
// 1f7: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 1fc: 48 89 da                      movq    %rbx, %rdx
// 1ff: ff d0                         callq   *%rax
// 201: 48 8b 03                      movq    (%rbx), %rax
// 204: 85 c0                         testl   %eax, %eax
// 206: 78 11                         js      0x219 <_JIT_ENTRY+0x219>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 212: ff d0                         callq   *%rax
// 214: 48 ff 0b                      decq    (%rbx)
// 217: 74 7c                         je      0x295 <_JIT_ENTRY+0x295>
// 219: 49 8b 45 00                   movq    (%r13), %rax
// 21d: 48 85 c0                      testq   %rax, %rax
// 220: 7f 22                         jg      0x244 <_JIT_ENTRY+0x244>
// 222: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_NegativeRefcount
// 236: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 23b: 4c 89 ea                      movq    %r13, %rdx
// 23e: ff d0                         callq   *%rax
// 240: 49 8b 45 00                   movq    (%r13), %rax
// 244: 4c 89 e1                      movq    %r12, %rcx
// 247: 4f 8d 24 f4                   leaq    (%r12,%r14,8), %r12
// 24b: 4a 8d 1c f1                   leaq    (%rcx,%r14,8), %rbx
// 24f: 48 83 c3 f0                   addq    $-0x10, %rbx
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 12                         js      0x269 <_JIT_ENTRY+0x269>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 4d 00                   decq    (%r13)
// 267: 74 49                         je      0x2b2 <_JIT_ENTRY+0x2b2>
// 269: 85 ed                         testl   %ebp, %ebp
// 26b: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 26f: 74 58                         je      0x2c9 <_JIT_ENTRY+0x2c9>
// 271: 49 83 c4 f0                   addq    $-0x10, %r12
// 275: 4d 29 fc                      subq    %r15, %r12
// 278: 49 83 c4 b8                   addq    $-0x48, %r12
// 27c: 49 c1 ec 03                   shrq    $0x3, %r12
// 280: 45 89 67 40                   movl    %r12d, 0x40(%r15)
// 284: 31 c0                         xorl    %eax, %eax
// 286: 48 83 c4 18                   addq    $0x18, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: c3                            retq
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 48 89 df                      movq    %rbx, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8b 45 00                   movq    (%r13), %rax
// 2a8: 48 85 c0                      testq   %rax, %rax
// 2ab: 7f 97                         jg      0x244 <_JIT_ENTRY+0x244>
// 2ad: e9 70 ff ff ff                jmp     0x222 <_JIT_ENTRY+0x222>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 4c 89 ef                      movq    %r13, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 85 ed                         testl   %ebp, %ebp
// 2c3: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2c7: 75 a8                         jne     0x271 <_JIT_ENTRY+0x271>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _JIT_CONTINUE
// 2d3: 4c 89 ff                      movq    %r15, %rdi
// 2d6: 4c 89 e6                      movq    %r12, %rsi
// 2d9: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2de: 48 83 c4 18                   addq    $0x18, %rsp
// 2e2: 5b                            popq    %rbx
// 2e3: 41 5c                         popq    %r12
// 2e5: 41 5d                         popq    %r13
// 2e7: 41 5e                         popq    %r14
// 2e9: 41 5f                         popq    %r15
// 2eb: 5d                            popq    %rbp
// 2ec: ff e0                         jmpq    *%rax
// 2ee: 
static const unsigned char _BUILD_SETplus_DELETE_SUBSCR_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xe9, 0x52, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x11, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xfb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xe7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x6c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x5c, 0xf5, 0xf0, 0x49, 0x89, 0xec, 0x4e, 0x8b, 0x6c, 0xf5, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x7c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4c, 0x89, 0xe1, 0x4f, 0x8d, 0x24, 0xf4, 0x4a, 0x8d, 0x1c, 0xf1, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x49, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x58, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x97, 0xe9, 0x70, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x75, 0xa8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_DELETE_SUBSCR_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_DELETE_SUBSCR_data_holes[1];

// _BUILD_SETplus_DICT_MERGE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_DICT_MERGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 1c 24                   movq    %rbx, (%rsp)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 66 85 c0                      testw   %ax, %ax
// 42: 0f 84 45 01 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// 48: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 59: 49 89 ee                      movq    %rbp, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ee                      movq    %rbp, %r14
// 11d: e9 c0 01 00 00                jmp     0x2e2 <_JIT_ENTRY+0x2e2>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 74 5d                         je      0x18d <_JIT_ENTRY+0x18d>
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 e2                      movq    %r12, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 7f 01 00 00             js      0x2e2 <_JIT_ENTRY+0x2e2>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 69 01 00 00             jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: ff d0                         callq   *%rax
// 188: e9 55 01 00 00                jmp     0x2e2 <_JIT_ENTRY+0x2e2>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c8                      movzwl  %ax, %ecx
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a1: 48 f7 d8                      negq    %rax
// 1a4: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1a9: b8 01 00 00 00                movl    $0x1, %eax
// 1ae: 29 c8                         subl    %ecx, %eax
// 1b0: 48 63 d8                      movslq  %eax, %rbx
// 1b3: 4c 8b 64 dd f8                movq    -0x8(%rbp,%rbx,8), %r12
// 1b8: b8 fc ff ff ff                movl    $0xfffffffc, %eax       # imm = 0xFFFFFFFC
// 1bd: 29 c8                         subl    %ecx, %eax
// 1bf: f7 d1                         notl    %ecx
// 1c1: 48 63 c9                      movslq  %ecx, %rcx
// 1c4: 48 01 d9                      addq    %rbx, %rcx
// 1c7: 48 8b 7c cd 00                movq    (%rbp,%rcx,8), %rdi
// 1cc: 48 98                         cltq
// 1ce: 48 01 d8                      addq    %rbx, %rax
// 1d1: 4c 8b 7c c5 00                movq    (%rbp,%rax,8), %r15
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _PyDict_MergeEx
// 1e0: 4c 89 e6                      movq    %r12, %rsi
// 1e3: ba 02 00 00 00                movl    $0x2, %edx
// 1e8: ff d0                         callq   *%rax
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 7f                         js      0x26d <_JIT_ENTRY+0x26d>
// 1ee: 49 8b 04 24                   movq    (%r12), %rax
// 1f2: 48 85 c0                      testq   %rax, %rax
// 1f5: 7f 22                         jg      0x219 <_JIT_ENTRY+0x219>
// 1f7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f9:  R_X86_64_64  .rodata.str1.1
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_NegativeRefcount
// 20b: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 210: 4c 89 e2                      movq    %r12, %rdx
// 213: ff d0                         callq   *%rax
// 215: 49 8b 04 24                   movq    (%r12), %rax
// 219: 4c 8d 34 dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %r14
// 221: 49 01 ee                      addq    %rbp, %r14
// 224: 85 c0                         testl   %eax, %eax
// 226: 78 21                         js      0x249 <_JIT_ENTRY+0x249>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 232: ff d0                         callq   *%rax
// 234: 49 ff 0c 24                   decq    (%r12)
// 238: 75 0f                         jne     0x249 <_JIT_ENTRY+0x249>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 4c 89 e7                      movq    %r12, %rdi
// 247: ff d0                         callq   *%rax
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_CONTINUE
// 253: 4c 89 ef                      movq    %r13, %rdi
// 256: 4c 89 f6                      movq    %r14, %rsi
// 259: 48 8b 14 24                   movq    (%rsp), %rdx
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _PyEval_FormatKwargsError
// 277: 48 8b 3c 24                   movq    (%rsp), %rdi
// 27b: 4c 89 fe                      movq    %r15, %rsi
// 27e: 4c 89 e2                      movq    %r12, %rdx
// 281: ff d0                         callq   *%rax
// 283: 49 8b 04 24                   movq    (%r12), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 7f 22                         jg      0x2ae <_JIT_ENTRY+0x2ae>
// 28c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_NegativeRefcount
// 2a0: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 2a5: 4c 89 e2                      movq    %r12, %rdx
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8b 04 24                   movq    (%r12), %rax
// 2ae: 4c 8d 34 dd 00 00 00 00       leaq    (,%rbx,8), %r14
// 2b6: 49 01 ee                      addq    %rbp, %r14
// 2b9: 85 c0                         testl   %eax, %eax
// 2bb: 78 21                         js      0x2de <_JIT_ENTRY+0x2de>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c7: ff d0                         callq   *%rax
// 2c9: 49 ff 0c 24                   decq    (%r12)
// 2cd: 75 0f                         jne     0x2de <_JIT_ENTRY+0x2de>
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _Py_Dealloc
// 2d9: 4c 89 e7                      movq    %r12, %rdi
// 2dc: ff d0                         callq   *%rax
// 2de: 49 83 c6 f8                   addq    $-0x8, %r14
// 2e2: 4d 29 ee                      subq    %r13, %r14
// 2e5: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e9: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ed: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 2f1: 31 c0                         xorl    %eax, %eax
// 2f3: 48 83 c4 18                   addq    $0x18, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: c3                            retq
// 302: 
static const unsigned char _BUILD_SETplus_DICT_MERGE_code_body[771] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x49, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xee, 0xe9, 0xc0, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x7f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x64, 0xdd, 0xf8, 0xb8, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd9, 0x48, 0x8b, 0x7c, 0xcd, 0x00, 0x48, 0x98, 0x48, 0x01, 0xd8, 0x4c, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x7f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x34, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x49, 0x01, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x34, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_DICT_MERGE_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_DICT_MERGE_data_holes[1];

// _BUILD_SETplus_DICT_UPDATE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_DICT_UPDATE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 2c 24                   movq    %rbp, (%rsp)
// 48: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 59: 4d 89 ee                      movq    %r13, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ee                      movq    %r13, %r14
// 11d: e9 e9 01 00 00                jmp     0x30b <_JIT_ENTRY+0x30b>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 129: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 a4 01 00 00             js      0x30b <_JIT_ENTRY+0x30b>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 8e 01 00 00             jne     0x30b <_JIT_ENTRY+0x30b>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 7a 01 00 00                jmp     0x30b <_JIT_ENTRY+0x30b>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 63 d8                      movslq  %eax, %rbx
// 1b7: 4d 8b 64 dd f8                movq    -0x8(%r13,%rbx,8), %r12
// 1bc: f7 d1                         notl    %ecx
// 1be: 48 63 c1                      movslq  %ecx, %rax
// 1c1: 48 01 d8                      addq    %rbx, %rax
// 1c4: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  PyDict_Update
// 1d3: 4c 89 e6                      movq    %r12, %rsi
// 1d6: ff d0                         callq   *%rax
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 78 7e                         js      0x25a <_JIT_ENTRY+0x25a>
// 1dc: 49 8b 04 24                   movq    (%r12), %rax
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 7f 22                         jg      0x207 <_JIT_ENTRY+0x207>
// 1e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e7:  R_X86_64_64  .rodata.str1.1
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_NegativeRefcount
// 1f9: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 1fe: 4c 89 e2                      movq    %r12, %rdx
// 201: ff d0                         callq   *%rax
// 203: 49 8b 04 24                   movq    (%r12), %rax
// 207: 4c 8d 34 dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %r14
// 20f: 4d 01 ee                      addq    %r13, %r14
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 21                         js      0x237 <_JIT_ENTRY+0x237>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 0c 24                   decq    (%r12)
// 226: 75 0f                         jne     0x237 <_JIT_ENTRY+0x237>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_CONTINUE
// 241: 4c 89 ff                      movq    %r15, %rdi
// 244: 4c 89 f6                      movq    %r14, %rsi
// 247: 48 89 ea                      movq    %rbp, %rdx
// 24a: 48 83 c4 18                   addq    $0x18, %rsp
// 24e: 5b                            popq    %rbx
// 24f: 41 5c                         popq    %r12
// 251: 41 5d                         popq    %r13
// 253: 41 5e                         popq    %r14
// 255: 41 5f                         popq    %r15
// 257: 5d                            popq    %rbp
// 258: ff e0                         jmpq    *%rax
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  PyExc_AttributeError
// 264: 48 8b 30                      movq    (%rax), %rsi
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _PyErr_ExceptionMatches
// 271: 48 89 ef                      movq    %rbp, %rdi
// 274: ff d0                         callq   *%rax
// 276: 85 c0                         testl   %eax, %eax
// 278: 74 32                         je      0x2ac <_JIT_ENTRY+0x2ac>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  PyExc_TypeError
// 284: 48 8b 30                      movq    (%rax), %rsi
// 287: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 28c: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 290: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000292:  R_X86_64_64  .rodata.str1.1+0x39
// 29a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000029c:  R_X86_64_64  _PyErr_Format
// 2a4: 48 89 ef                      movq    %rbp, %rdi
// 2a7: 31 c0                         xorl    %eax, %eax
// 2a9: 41 ff d0                      callq   *%r8
// 2ac: 49 8b 04 24                   movq    (%r12), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 2ce: 4c 89 e2                      movq    %r12, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 04 24                   movq    (%r12), %rax
// 2d7: 4c 8d 34 dd 00 00 00 00       leaq    (,%rbx,8), %r14
// 2df: 4d 01 ee                      addq    %r13, %r14
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 21                         js      0x307 <_JIT_ENTRY+0x307>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 0c 24                   decq    (%r12)
// 2f6: 75 0f                         jne     0x307 <_JIT_ENTRY+0x307>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_Dealloc
// 302: 4c 89 e7                      movq    %r12, %rdi
// 305: ff d0                         callq   *%rax
// 307: 49 83 c6 f8                   addq    $-0x8, %r14
// 30b: 4d 29 fe                      subq    %r15, %r14
// 30e: 49 83 c6 b8                   addq    $-0x48, %r14
// 312: 49 c1 ee 03                   shrq    $0x3, %r14
// 316: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 31a: 31 c0                         xorl    %eax, %eax
// 31c: 48 83 c4 18                   addq    $0x18, %rsp
// 320: 5b                            popq    %rbx
// 321: 41 5c                         popq    %r12
// 323: 41 5d                         popq    %r13
// 325: 41 5e                         popq    %r14
// 327: 41 5f                         popq    %r15
// 329: 5d                            popq    %rbp
// 32a: c3                            retq
// 32b: 
static const unsigned char _BUILD_SETplus_DICT_UPDATE_code_body[812] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0xe9, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xa4, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x8e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xdd, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd8, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x7e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x34, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x34, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_DICT_UPDATE_code_holes[29] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_DICT_UPDATE_data_holes[1];

// _BUILD_SETplus_END_SEND
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_END_SEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 49: 4c 89 2c 24                   movq    %r13, (%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 2c 24                   movq    (%rsp), %r13
// 125: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 12a: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1bc: b8 01 00 00 00                movl    $0x1, %eax
// 1c1: 29 c8                         subl    %ecx, %eax
// 1c3: 4c 63 f8                      movslq  %eax, %r15
// 1c6: 4e 8b 74 fb f0                movq    -0x10(%rbx,%r15,8), %r14
// 1cb: 49 89 dc                      movq    %rbx, %r12
// 1ce: 4a 8b 44 fb f8                movq    -0x8(%rbx,%r15,8), %rax
// 1d3: 48 89 04 24                   movq    %rax, (%rsp)
// 1d7: 49 8b 06                      movq    (%r14), %rax
// 1da: 48 85 c0                      testq   %rax, %rax
// 1dd: 7e 11                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1df: 4c 89 e3                      movq    %r12, %rbx
// 1e2: 4f 8d 24 fc                   leaq    (%r12,%r15,8), %r12
// 1e6: 49 83 c4 f8                   addq    $-0x8, %r12
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 79 32                         jns     0x220 <_JIT_ENTRY+0x220>
// 1ee: eb 50                         jmp     0x240 <_JIT_ENTRY+0x240>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_NegativeRefcount
// 204: be 66 00 00 00                movl    $0x66, %esi
// 209: 4c 89 f2                      movq    %r14, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 06                      movq    (%r14), %rax
// 211: 4c 89 e3                      movq    %r12, %rbx
// 214: 4f 8d 24 fc                   leaq    (%r12,%r15,8), %r12
// 218: 49 83 c4 f8                   addq    $-0x8, %r12
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 20                         js      0x240 <_JIT_ENTRY+0x240>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 0e                      decq    (%r14)
// 22f: 75 0f                         jne     0x240 <_JIT_ENTRY+0x240>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_Dealloc
// 23b: 4c 89 f7                      movq    %r14, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _JIT_OPARG
// 24a: 0f b7 c0                      movzwl  %ax, %eax
// 24d: b9 01 00 00 00                movl    $0x1, %ecx
// 252: 29 c1                         subl    %eax, %ecx
// 254: 48 63 c1                      movslq  %ecx, %rax
// 257: 48 8b 0c 24                   movq    (%rsp), %rcx
// 25b: 48 89 4c c3 f0                movq    %rcx, -0x10(%rbx,%rax,8)
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 4c 89 ef                      movq    %r13, %rdi
// 26d: 4c 89 e6                      movq    %r12, %rsi
// 270: 48 89 ea                      movq    %rbp, %rdx
// 273: 48 83 c4 18                   addq    $0x18, %rsp
// 277: 5b                            popq    %rbx
// 278: 41 5c                         popq    %r12
// 27a: 41 5d                         popq    %r13
// 27c: 41 5e                         popq    %r14
// 27e: 41 5f                         popq    %r15
// 280: 5d                            popq    %rbp
// 281: ff e0                         jmpq    *%rax
// 283: 
static const unsigned char _BUILD_SETplus_END_SEND_code_body[644] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x4c, 0x89, 0x2c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4e, 0x8b, 0x74, 0xfb, 0xf0, 0x49, 0x89, 0xdc, 0x4a, 0x8b, 0x44, 0xfb, 0xf8, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x4c, 0x89, 0xe3, 0x4f, 0x8d, 0x24, 0xfc, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x79, 0x32, 0xeb, 0x50, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4c, 0x89, 0xe3, 0x4f, 0x8d, 0x24, 0xfc, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x4c, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_END_SEND_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_END_SEND_data_holes[1];

// _BUILD_SETplus_EXIT_INIT_CHECK
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_EXIT_INIT_CHECK.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ef 00 00 00             je      0x11d <_JIT_ENTRY+0x11d>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 2c 24                   movq    %r13, (%rsp)
// 48: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// 59: 4d 89 e7                      movq    %r12, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 99 00 00 00             je      0x125 <_JIT_ENTRY+0x125>
// 8c: 4d 8b 24 df                   movq    (%r15,%rbx,8), %r12
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 04 24                   movq    (%r12), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 50                         jmp     0xf3 <_JIT_ENTRY+0xf3>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 e6                      movq    %r12, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 4c 89 e2                      movq    %r12, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 78 8d                         js      0x80 <_JIT_ENTRY+0x80>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fd: ff d0                         callq   *%rax
// ff: 49 ff 0c 24                   decq    (%r12)
// 103: 0f 85 77 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 109: 4c 89 e7                      movq    %r12, %rdi
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_Dealloc
// 116: ff d0                         callq   *%rax
// 118: e9 63 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11d: 4d 89 e7                      movq    %r12, %r15
// 120: e9 ed 00 00 00                jmp     0x212 <_JIT_ENTRY+0x212>
// 125: 85 ed                         testl   %ebp, %ebp
// 127: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 12c: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 131: 4c 8b 2c 24                   movq    (%rsp), %r13
// 135: 74 5a                         je      0x191 <_JIT_ENTRY+0x191>
// 137: 49 8b 06                      movq    (%r14), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 21                         jg      0x160 <_JIT_ENTRY+0x160>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 f2                      movq    %r14, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 06                      movq    (%r14), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 88 aa 00 00 00             js      0x212 <_JIT_ENTRY+0x212>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0e                      decq    (%r14)
// 177: 0f 85 95 00 00 00             jne     0x212 <_JIT_ENTRY+0x212>
// 17d: 4c 89 f7                      movq    %r14, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 81 00 00 00                jmp     0x212 <_JIT_ENTRY+0x212>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 d0                      movzwl  %ax, %edx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 34 04                   movq    %r14, (%r12,%rax)
// 1ac: b9 01 00 00 00                movl    $0x1, %ecx
// 1b1: b8 01 00 00 00                movl    $0x1, %eax
// 1b6: 29 d0                         subl    %edx, %eax
// 1b8: 48 63 d0                      movslq  %eax, %rdx
// 1bb: 49 8b 44 d4 f8                movq    -0x8(%r12,%rdx,8), %rax
// 1c0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c2:  R_X86_64_64  _Py_NoneStruct
// 1ca: 48 39 f0                      cmpq    %rsi, %rax
// 1cd: 74 63                         je      0x232 <_JIT_ENTRY+0x232>
// 1cf: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d1:  R_X86_64_64  _JIT_OPARG
// 1d9: 0f b7 d2                      movzwl  %dx, %edx
// 1dc: 29 d1                         subl    %edx, %ecx
// 1de: 48 63 c9                      movslq  %ecx, %rcx
// 1e1: 4d 8d 3c cc                   leaq    (%r12,%rcx,8), %r15
// 1e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e7:  R_X86_64_64  PyExc_TypeError
// 1ef: 48 8b 39                      movq    (%rcx), %rdi
// 1f2: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1f6: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1fa: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1+0x39
// 204: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000206:  R_X86_64_64  PyErr_Format
// 20e: 31 c0                         xorl    %eax, %eax
// 210: ff d1                         callq   *%rcx
// 212: 49 29 df                      subq    %rbx, %r15
// 215: 49 83 c7 b8                   addq    $-0x48, %r15
// 219: 49 c1 ef 03                   shrq    $0x3, %r15
// 21d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 221: 31 c0                         xorl    %eax, %eax
// 223: 48 83 c4 18                   addq    $0x18, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: c3                            retq
// 232: 49 8d 34 d4                   leaq    (%r12,%rdx,8), %rsi
// 236: 48 83 c6 f8                   addq    $-0x8, %rsi
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _JIT_CONTINUE
// 244: 48 89 df                      movq    %rbx, %rdi
// 247: 4c 89 ea                      movq    %r13, %rdx
// 24a: 48 83 c4 18                   addq    $0x18, %rsp
// 24e: 5b                            popq    %rbx
// 24f: 41 5c                         popq    %r12
// 251: 41 5d                         popq    %r13
// 253: 41 5e                         popq    %r14
// 255: 41 5f                         popq    %r15
// 257: 5d                            popq    %rbp
// 258: ff e0                         jmpq    *%rax
// 25a: 
static const unsigned char _BUILD_SETplus_EXIT_INIT_CHECK_code_body[603] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x2c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x24, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x50, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x8d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x77, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x63, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xe7, 0xe9, 0xed, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x95, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x34, 0x04, 0xb9, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x63, 0xd0, 0x49, 0x8b, 0x44, 0xd4, 0xf8, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf0, 0x74, 0x63, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x3c, 0xcc, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8d, 0x34, 0xd4, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_EXIT_INIT_CHECK_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _BUILD_SETplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_EXIT_INIT_CHECK_data_holes[1];

// _BUILD_SETplus_EXIT_TRACE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_EXIT_TRACE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f4                      movq    %rsi, %r12
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  PySet_New
// 1e: 31 ff                         xorl    %edi, %edi
// 20: ff d0                         callq   *%rax
// 22: 48 85 c0                      testq   %rax, %rax
// 25: 0f 84 f2 00 00 00             je      0x11d <_JIT_ENTRY+0x11d>
// 2b: 49 89 c6                      movq    %rax, %r14
// 2e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000030:  R_X86_64_64  _JIT_OPARG
// 38: 66 85 c0                      testw   %ax, %ax
// 3b: 0f 84 4f 01 00 00             je      0x190 <_JIT_ENTRY+0x190>
// 41: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 46: 0f b7 c0                      movzwl  %ax, %eax
// 49: 48 c1 e0 03                   shlq    $0x3, %rax
// 4d: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// 52: 4d 89 e7                      movq    %r12, %r15
// 55: 49 29 c7                      subq    %rax, %r15
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _JIT_OPARG
// 62: 0f b7 c0                      movzwl  %ax, %eax
// 65: 83 f8 02                      cmpl    $0x2, %eax
// 68: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 6e: 44 0f 43 e0                   cmovael %eax, %r12d
// 72: 31 db                         xorl    %ebx, %ebx
// 74: 31 ed                         xorl    %ebp, %ebp
// 76: eb 14                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 78: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dc                      cmpq    %rbx, %r12
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 2c df                   movq    (%r15,%rbx,8), %r13
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 45 00                   movq    (%r13), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 50                         jmp     0xf3 <_JIT_ENTRY+0xf3>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 ee                      movq    %r13, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 45 00                   movq    (%r13), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 4c 89 ea                      movq    %r13, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 49 8b 45 00                   movq    (%r13), %rax
// ef: 85 c0                         testl   %eax, %eax
// f1: 78 8d                         js      0x80 <_JIT_ENTRY+0x80>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fd: ff d0                         callq   *%rax
// ff: 49 ff 4d 00                   decq    (%r13)
// 103: 0f 85 77 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 109: 4c 89 ef                      movq    %r13, %rdi
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_Dealloc
// 116: ff d0                         callq   *%rax
// 118: e9 63 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11d: 4d 89 e7                      movq    %r12, %r15
// 120: eb 5b                         jmp     0x17d <_JIT_ENTRY+0x17d>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 129: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 12e: 74 60                         je      0x190 <_JIT_ENTRY+0x190>
// 130: 49 8b 06                      movq    (%r14), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 21                         jg      0x159 <_JIT_ENTRY+0x159>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 f2                      movq    %r14, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 06                      movq    (%r14), %rax
// 159: 85 c0                         testl   %eax, %eax
// 15b: 78 20                         js      0x17d <_JIT_ENTRY+0x17d>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 167: ff d0                         callq   *%rax
// 169: 49 ff 0e                      decq    (%r14)
// 16c: 75 0f                         jne     0x17d <_JIT_ENTRY+0x17d>
// 16e: 4c 89 f7                      movq    %r14, %rdi
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: ff d0                         callq   *%rax
// 17d: 49 29 df                      subq    %rbx, %r15
// 180: 49 83 c7 b8                   addq    $-0x48, %r15
// 184: 49 c1 ef 03                   shrq    $0x3, %r15
// 188: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 18c: 31 c0                         xorl    %eax, %eax
// 18e: eb 4d                         jmp     0x1dd <_JIT_ENTRY+0x1dd>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c8                      movzwl  %ax, %ecx
// 19d: 0f b7 c0                      movzwl  %ax, %eax
// 1a0: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a4: 48 f7 d8                      negq    %rax
// 1a7: 4d 89 34 04                   movq    %r14, (%r12,%rax)
// 1ab: b8 01 00 00 00                movl    $0x1, %eax
// 1b0: 29 c8                         subl    %ecx, %eax
// 1b2: 49 8d 04 c4                   leaq    (%r12,%rax,8), %rax
// 1b6: 48 29 d8                      subq    %rbx, %rax
// 1b9: 48 83 c0 b8                   addq    $-0x48, %rax
// 1bd: 48 c1 e8 03                   shrq    $0x3, %rax
// 1c1: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1c4: 48 8b 03                      movq    (%rbx), %rax
// 1c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c9:  R_X86_64_64  _JIT_TARGET
// 1d1: 89 c9                         movl    %ecx, %ecx
// 1d3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1dd: 48 83 c4 18                   addq    $0x18, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: c3                            retq
// 1ec: 
static const unsigned char _BUILD_SETplus_EXIT_TRACE_code_body[493] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe0, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdc, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x2c, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x50, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x8d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x77, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x63, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xe7, 0xeb, 0x5b, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x34, 0x04, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x49, 0x8d, 0x04, 0xc4, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_EXIT_TRACE_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_EXIT_TRACE_data_holes[1];

// _BUILD_SETplus_FORMAT_SIMPLE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_FORMAT_SIMPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 4c 89 34 24                   movq    %r14, (%rsp)
// 42: 0f 84 49 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 48: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4d: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 6e 01 00 00                jmp     0x290 <_JIT_ENTRY+0x290>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 29 01 00 00             js      0x290 <_JIT_ENTRY+0x290>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 13 01 00 00             jne     0x290 <_JIT_ENTRY+0x290>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 ff 00 00 00                jmp     0x290 <_JIT_ENTRY+0x290>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ac: bb 01 00 00 00                movl    $0x1, %ebx
// 1b1: b8 01 00 00 00                movl    $0x1, %eax
// 1b6: 29 c8                         subl    %ecx, %eax
// 1b8: 4c 63 f8                      movslq  %eax, %r15
// 1bb: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  PyUnicode_Type
// 1ca: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1cf: 74 61                         je      0x232 <_JIT_ENTRY+0x232>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  PyObject_Format
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: 31 f6                         xorl    %esi, %esi
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 89 c6                      movq    %rax, %r14
// 1e5: 49 8b 04 24                   movq    (%r12), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7f 22                         jg      0x210 <_JIT_ENTRY+0x210>
// 1ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_NegativeRefcount
// 202: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 207: 4c 89 e2                      movq    %r12, %rdx
// 20a: ff d0                         callq   *%rax
// 20c: 49 8b 04 24                   movq    (%r12), %rax
// 210: 85 c0                         testl   %eax, %eax
// 212: 78 12                         js      0x226 <_JIT_ENTRY+0x226>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21e: ff d0                         callq   *%rax
// 220: 49 ff 0c 24                   decq    (%r12)
// 224: 74 47                         je      0x26d <_JIT_ENTRY+0x26d>
// 226: 4d 89 f4                      movq    %r14, %r12
// 229: 4d 85 f6                      testq   %r14, %r14
// 22c: 4c 8b 34 24                   movq    (%rsp), %r14
// 230: 74 56                         je      0x288 <_JIT_ENTRY+0x288>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _JIT_OPARG
// 23c: 0f b7 c0                      movzwl  %ax, %eax
// 23f: 29 c3                         subl    %eax, %ebx
// 241: 48 63 c3                      movslq  %ebx, %rax
// 244: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 248: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _JIT_CONTINUE
// 257: 4c 89 ef                      movq    %r13, %rdi
// 25a: 48 89 ea                      movq    %rbp, %rdx
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_Dealloc
// 277: 4c 89 e7                      movq    %r12, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 4d 89 f4                      movq    %r14, %r12
// 27f: 4d 85 f6                      testq   %r14, %r14
// 282: 4c 8b 34 24                   movq    (%rsp), %r14
// 286: 75 aa                         jne     0x232 <_JIT_ENTRY+0x232>
// 288: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 28c: 49 83 c7 f8                   addq    $-0x8, %r15
// 290: 4d 29 ef                      subq    %r13, %r15
// 293: 49 83 c7 b8                   addq    $-0x48, %r15
// 297: 49 c1 ef 03                   shrq    $0x3, %r15
// 29b: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 29f: 31 c0                         xorl    %eax, %eax
// 2a1: 48 83 c4 18                   addq    $0x18, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: c3                            retq
// 2b0: 
static const unsigned char _BUILD_SETplus_FORMAT_SIMPLE_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x4c, 0x89, 0x34, 0x24, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x6e, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x29, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x13, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x61, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x47, 0x4d, 0x89, 0xf4, 0x4d, 0x85, 0xf6, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x4d, 0x85, 0xf6, 0x4c, 0x8b, 0x34, 0x24, 0x75, 0xaa, 0x4f, 0x8d, 0x3c, 0xfe, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_FORMAT_SIMPLE_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_FORMAT_SIMPLE_data_holes[1];

// _BUILD_SETplus_FORMAT_WITH_SPEC
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_FORMAT_WITH_SPEC.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 bc 01 00 00                jmp     0x2de <_JIT_ENTRY+0x2de>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 129: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 7c 01 00 00             js      0x2de <_JIT_ENTRY+0x2de>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 66 01 00 00             jne     0x2de <_JIT_ENTRY+0x2de>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 52 01 00 00                jmp     0x2de <_JIT_ENTRY+0x2de>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 c8                         subl    %ecx, %eax
// 1af: 48 63 d8                      movslq  %eax, %rbx
// 1b2: 4d 8b 74 dd f0                movq    -0x10(%r13,%rbx,8), %r14
// 1b7: 4d 89 ef                      movq    %r13, %r15
// 1ba: 4d 8b 6c dd f8                movq    -0x8(%r13,%rbx,8), %r13
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyObject_Format
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 4c 89 ee                      movq    %r13, %rsi
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 89 c4                      movq    %rax, %r12
// 1d4: 49 8b 06                      movq    (%r14), %rax
// 1d7: 48 85 c0                      testq   %rax, %rax
// 1da: 7e 06                         jle     0x1e2 <_JIT_ENTRY+0x1e2>
// 1dc: 85 c0                         testl   %eax, %eax
// 1de: 79 27                         jns     0x207 <_JIT_ENTRY+0x207>
// 1e0: eb 36                         jmp     0x218 <_JIT_ENTRY+0x218>
// 1e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e4:  R_X86_64_64  .rodata.str1.1
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_NegativeRefcount
// 1f6: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 1fb: 4c 89 f2                      movq    %r14, %rdx
// 1fe: ff d0                         callq   *%rax
// 200: 49 8b 06                      movq    (%r14), %rax
// 203: 85 c0                         testl   %eax, %eax
// 205: 78 11                         js      0x218 <_JIT_ENTRY+0x218>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 211: ff d0                         callq   *%rax
// 213: 49 ff 0e                      decq    (%r14)
// 216: 74 0f                         je      0x227 <_JIT_ENTRY+0x227>
// 218: 49 8b 45 00                   movq    (%r13), %rax
// 21c: 48 85 c0                      testq   %rax, %rax
// 21f: 7e 1e                         jle     0x23f <_JIT_ENTRY+0x23f>
// 221: 85 c0                         testl   %eax, %eax
// 223: 79 40                         jns     0x265 <_JIT_ENTRY+0x265>
// 225: eb 50                         jmp     0x277 <_JIT_ENTRY+0x277>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 4c 89 f7                      movq    %r14, %rdi
// 234: ff d0                         callq   *%rax
// 236: 49 8b 45 00                   movq    (%r13), %rax
// 23a: 48 85 c0                      testq   %rax, %rax
// 23d: 7f e2                         jg      0x221 <_JIT_ENTRY+0x221>
// 23f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000241:  R_X86_64_64  .rodata.str1.1
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_NegativeRefcount
// 253: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 258: 4c 89 ea                      movq    %r13, %rdx
// 25b: ff d0                         callq   *%rax
// 25d: 49 8b 45 00                   movq    (%r13), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 78 12                         js      0x277 <_JIT_ENTRY+0x277>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 49 ff 4d 00                   decq    (%r13)
// 275: 74 4b                         je      0x2c2 <_JIT_ENTRY+0x2c2>
// 277: 4d 85 e4                      testq   %r12, %r12
// 27a: 74 5a                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 27c: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 280: 48 83 c6 f8                   addq    $-0x8, %rsi
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 0f b7 c0                      movzwl  %ax, %eax
// 291: b9 01 00 00 00                movl    $0x1, %ecx
// 296: 29 c1                         subl    %eax, %ecx
// 298: 48 63 c1                      movslq  %ecx, %rax
// 29b: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_CONTINUE
// 2aa: 48 89 ef                      movq    %rbp, %rdi
// 2ad: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b2: 48 83 c4 18                   addq    $0x18, %rsp
// 2b6: 5b                            popq    %rbx
// 2b7: 41 5c                         popq    %r12
// 2b9: 41 5d                         popq    %r13
// 2bb: 41 5e                         popq    %r14
// 2bd: 41 5f                         popq    %r15
// 2bf: 5d                            popq    %rbp
// 2c0: ff e0                         jmpq    *%rax
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 4c 89 ef                      movq    %r13, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 4d 85 e4                      testq   %r12, %r12
// 2d4: 75 a6                         jne     0x27c <_JIT_ENTRY+0x27c>
// 2d6: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 2da: 49 83 c7 f0                   addq    $-0x10, %r15
// 2de: 49 29 ef                      subq    %rbp, %r15
// 2e1: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e5: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e9: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 2ed: 31 c0                         xorl    %eax, %eax
// 2ef: 48 83 c4 18                   addq    $0x18, %rsp
// 2f3: 5b                            popq    %rbx
// 2f4: 41 5c                         popq    %r12
// 2f6: 41 5d                         popq    %r13
// 2f8: 41 5e                         popq    %r14
// 2fa: 41 5f                         popq    %r15
// 2fc: 5d                            popq    %rbp
// 2fd: c3                            retq
// 2fe: 
static const unsigned char _BUILD_SETplus_FORMAT_WITH_SPEC_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0xbc, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x7c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x66, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x52, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x74, 0xdd, 0xf0, 0x4d, 0x89, 0xef, 0x4d, 0x8b, 0x6c, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4b, 0x4d, 0x85, 0xe4, 0x74, 0x5a, 0x49, 0x8d, 0x34, 0xdf, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa6, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_FORMAT_WITH_SPEC_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_FORMAT_WITH_SPEC_data_holes[1];

// _BUILD_SETplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_FOR_ITER_TIER_TWO.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 1c 24                   movq    %rbx, (%rsp)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 66 85 c0                      testw   %ax, %ax
// 42: 0f 84 45 01 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// 48: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 59: 4d 89 ee                      movq    %r13, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ee                      movq    %r13, %r14
// 11d: e9 c8 01 00 00                jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 129: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12e: 74 5d                         je      0x18d <_JIT_ENTRY+0x18d>
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 e2                      movq    %r12, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 87 01 00 00             js      0x2ea <_JIT_ENTRY+0x2ea>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 71 01 00 00             jne     0x2ea <_JIT_ENTRY+0x2ea>
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: ff d0                         callq   *%rax
// 188: e9 5d 01 00 00                jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c8                      movzwl  %ax, %ecx
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a1: 48 f7 d8                      negq    %rax
// 1a4: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a9: bd 01 00 00 00                movl    $0x1, %ebp
// 1ae: b8 01 00 00 00                movl    $0x1, %eax
// 1b3: 29 c8                         subl    %ecx, %eax
// 1b5: 48 63 d8                      movslq  %eax, %rbx
// 1b8: 4d 8b 64 dd f8                movq    -0x8(%r13,%rbx,8), %r12
// 1bd: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1c2: 4c 89 e7                      movq    %r12, %rdi
// 1c5: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 1cb: 48 85 c0                      testq   %rax, %rax
// 1ce: 74 43                         je      0x213 <_JIT_ENTRY+0x213>
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: 0f b7 c9                      movzwl  %cx, %ecx
// 1dd: 29 cd                         subl    %ecx, %ebp
// 1df: 48 63 cd                      movslq  %ebp, %rcx
// 1e2: 49 89 44 cd 00                movq    %rax, (%r13,%rcx,8)
// 1e7: 48 8d 34 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rsi
// 1ef: 4c 01 ee                      addq    %r13, %rsi
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_CONTINUE
// 1fc: 4c 89 ff                      movq    %r15, %rdi
// 1ff: 48 8b 14 24                   movq    (%rsp), %rdx
// 203: 48 83 c4 18                   addq    $0x18, %rsp
// 207: 5b                            popq    %rbx
// 208: 41 5c                         popq    %r12
// 20a: 41 5d                         popq    %r13
// 20c: 41 5e                         popq    %r14
// 20e: 41 5f                         popq    %r15
// 210: 5d                            popq    %rbp
// 211: ff e0                         jmpq    *%rax
// 213: 4c 8b 34 24                   movq    (%rsp), %r14
// 217: 49 8b 46 68                   movq    0x68(%r14), %rax
// 21b: 48 85 c0                      testq   %rax, %rax
// 21e: 74 3a                         je      0x25a <_JIT_ENTRY+0x25a>
// 220: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 225: 74 33                         je      0x25a <_JIT_ENTRY+0x25a>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyExc_StopIteration
// 231: 48 8b 30                      movq    (%rax), %rsi
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _PyErr_ExceptionMatches
// 23e: 4c 89 f7                      movq    %r14, %rdi
// 241: ff d0                         callq   *%rax
// 243: 85 c0                         testl   %eax, %eax
// 245: 0f 84 94 00 00 00             je      0x2df <_JIT_ENTRY+0x2df>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _PyErr_Clear
// 255: 4c 89 f7                      movq    %r14, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 04 24                   movq    (%r12), %rax
// 25e: 48 85 c0                      testq   %rax, %rax
// 261: 7f 22                         jg      0x285 <_JIT_ENTRY+0x285>
// 263: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_NegativeRefcount
// 277: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 27c: 4c 89 e2                      movq    %r12, %rdx
// 27f: ff d0                         callq   *%rax
// 281: 49 8b 04 24                   movq    (%r12), %rax
// 285: 48 8d 1c dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %rbx
// 28d: 4c 01 eb                      addq    %r13, %rbx
// 290: 85 c0                         testl   %eax, %eax
// 292: 78 21                         js      0x2b5 <_JIT_ENTRY+0x2b5>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29e: ff d0                         callq   *%rax
// 2a0: 49 ff 0c 24                   decq    (%r12)
// 2a4: 75 0f                         jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_Dealloc
// 2b0: 4c 89 e7                      movq    %r12, %rdi
// 2b3: ff d0                         callq   *%rax
// 2b5: 4c 29 fb                      subq    %r15, %rbx
// 2b8: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2bc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2c0: 41 89 5f 40                   movl    %ebx, 0x40(%r15)
// 2c4: 49 8b 07                      movq    (%r15), %rax
// 2c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c9:  R_X86_64_64  _JIT_TARGET
// 2d1: 89 c9                         movl    %ecx, %ecx
// 2d3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2d7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2dd: eb 1c                         jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 2df: 4c 8d 34 dd 00 00 00 00       leaq    (,%rbx,8), %r14
// 2e7: 4d 01 ee                      addq    %r13, %r14
// 2ea: 4d 29 fe                      subq    %r15, %r14
// 2ed: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f1: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f5: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 2f9: 31 c0                         xorl    %eax, %eax
// 2fb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: c3                            retq
// 30a: 
static const unsigned char _BUILD_SETplus_FOR_ITER_TIER_TWO_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0xc8, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x87, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x71, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x5d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xbd, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xdd, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x43, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xcd, 0x48, 0x63, 0xcd, 0x49, 0x89, 0x44, 0xcd, 0x00, 0x48, 0x8d, 0x34, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x1c, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xeb, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5f, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x4c, 0x8d, 0x34, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_FOR_ITER_TIER_TWO_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_FOR_ITER_TIER_TWO_data_holes[1];

// _BUILD_SETplus_GET_AITER
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GET_AITER.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 1d 01 00 00             je      0x161 <_JIT_ENTRY+0x161>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ec                      movq    %rbp, %r12
// 11d: e9 4c 02 00 00                jmp     0x36e <_JIT_ENTRY+0x36e>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 129: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 132: 74 2d                         je      0x161 <_JIT_ENTRY+0x161>
// 134: 49 8b 06                      movq    (%r14), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 0f 8f 8b 01 00 00             jg      0x2cb <_JIT_ENTRY+0x2cb>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14f: 4c 89 f2                      movq    %r14, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: e9 65 01 00 00                jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _JIT_OPARG
// 16b: 0f b7 c8                      movzwl  %ax, %ecx
// 16e: 0f b7 c0                      movzwl  %ax, %eax
// 171: 48 c1 e0 03                   shlq    $0x3, %rax
// 175: 48 f7 d8                      negq    %rax
// 178: 4c 89 74 05 00                movq    %r14, (%rbp,%rax)
// 17d: b8 01 00 00 00                movl    $0x1, %eax
// 182: 29 c8                         subl    %ecx, %eax
// 184: 48 98                         cltq
// 186: 4c 8d 24 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %r12
// 18e: 49 01 ec                      addq    %rbp, %r12
// 191: 4c 8b 74 c5 f8                movq    -0x8(%rbp,%rax,8), %r14
// 196: 49 8b 46 08                   movq    0x8(%r14), %rax
// 19a: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 19e: 48 85 c9                      testq   %rcx, %rcx
// 1a1: 0f 84 ce 00 00 00             je      0x275 <_JIT_ENTRY+0x275>
// 1a7: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1ab: 48 85 c9                      testq   %rcx, %rcx
// 1ae: 0f 84 c1 00 00 00             je      0x275 <_JIT_ENTRY+0x275>
// 1b4: 4c 89 f7                      movq    %r14, %rdi
// 1b7: ff d1                         callq   *%rcx
// 1b9: 49 89 c5                      movq    %rax, %r13
// 1bc: 49 8b 06                      movq    (%r14), %rax
// 1bf: 48 85 c0                      testq   %rax, %rax
// 1c2: 7f 21                         jg      0x1e5 <_JIT_ENTRY+0x1e5>
// 1c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c6:  R_X86_64_64  .rodata.str1.1
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NegativeRefcount
// 1d8: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 1dd: 4c 89 f2                      movq    %r14, %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 8b 06                      movq    (%r14), %rax
// 1e5: 85 c0                         testl   %eax, %eax
// 1e7: 78 20                         js      0x209 <_JIT_ENTRY+0x209>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 ff 0e                      decq    (%r14)
// 1f8: 75 0f                         jne     0x209 <_JIT_ENTRY+0x209>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_Dealloc
// 204: 4c 89 f7                      movq    %r14, %rdi
// 207: ff d0                         callq   *%rax
// 209: 4d 85 ed                      testq   %r13, %r13
// 20c: 0f 84 5c 01 00 00             je      0x36e <_JIT_ENTRY+0x36e>
// 212: 49 8b 45 08                   movq    0x8(%r13), %rax
// 216: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 21a: 48 85 c9                      testq   %rcx, %rcx
// 21d: 0f 84 d6 00 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 223: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 228: 0f 84 cb 00 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: 0f b7 c0                      movzwl  %ax, %eax
// 23b: b9 01 00 00 00                movl    $0x1, %ecx
// 240: 29 c1                         subl    %eax, %ecx
// 242: 48 63 c1                      movslq  %ecx, %rax
// 245: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 24d: 48 01 ee                      addq    %rbp, %rsi
// 250: 4c 89 6c c5 f8                movq    %r13, -0x8(%rbp,%rax,8)
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_CONTINUE
// 25f: 48 89 df                      movq    %rbx, %rdi
// 262: 4c 89 fa                      movq    %r15, %rdx
// 265: 48 83 c4 18                   addq    $0x18, %rsp
// 269: 5b                            popq    %rbx
// 26a: 41 5c                         popq    %r12
// 26c: 41 5d                         popq    %r13
// 26e: 41 5e                         popq    %r14
// 270: 41 5f                         popq    %r15
// 272: 5d                            popq    %rbp
// 273: ff e0                         jmpq    *%rax
// 275: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000277:  R_X86_64_64  PyExc_TypeError
// 27f: 48 8b 31                      movq    (%rcx), %rsi
// 282: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 286: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000288:  R_X86_64_64  .rodata.str1.1+0x39
// 290: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000292:  R_X86_64_64  _PyErr_Format
// 29a: 4c 89 ff                      movq    %r15, %rdi
// 29d: 31 c0                         xorl    %eax, %eax
// 29f: 41 ff d0                      callq   *%r8
// 2a2: 49 8b 06                      movq    (%r14), %rax
// 2a5: 48 85 c0                      testq   %rax, %rax
// 2a8: 7f 21                         jg      0x2cb <_JIT_ENTRY+0x2cb>
// 2aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ac:  R_X86_64_64  .rodata.str1.1
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_NegativeRefcount
// 2be: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 2c3: 4c 89 f2                      movq    %r14, %rdx
// 2c6: ff d0                         callq   *%rax
// 2c8: 49 8b 06                      movq    (%r14), %rax
// 2cb: 85 c0                         testl   %eax, %eax
// 2cd: 0f 88 9b 00 00 00             js      0x36e <_JIT_ENTRY+0x36e>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2dd: ff d0                         callq   *%rax
// 2df: 49 ff 0e                      decq    (%r14)
// 2e2: 0f 85 86 00 00 00             jne     0x36e <_JIT_ENTRY+0x36e>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_Dealloc
// 2f2: 4c 89 f7                      movq    %r14, %rdi
// 2f5: ff d0                         callq   *%rax
// 2f7: eb 75                         jmp     0x36e <_JIT_ENTRY+0x36e>
// 2f9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fb:  R_X86_64_64  PyExc_TypeError
// 303: 48 8b 31                      movq    (%rcx), %rsi
// 306: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 30a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000030c:  R_X86_64_64  .rodata.str1.1+0x7a
// 314: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000316:  R_X86_64_64  _PyErr_Format
// 31e: 4c 89 ff                      movq    %r15, %rdi
// 321: 31 c0                         xorl    %eax, %eax
// 323: 41 ff d0                      callq   *%r8
// 326: 49 8b 45 00                   movq    (%r13), %rax
// 32a: 48 85 c0                      testq   %rax, %rax
// 32d: 7f 22                         jg      0x351 <_JIT_ENTRY+0x351>
// 32f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000331:  R_X86_64_64  .rodata.str1.1
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _Py_NegativeRefcount
// 343: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 348: 4c 89 ea                      movq    %r13, %rdx
// 34b: ff d0                         callq   *%rax
// 34d: 49 8b 45 00                   movq    (%r13), %rax
// 351: 85 c0                         testl   %eax, %eax
// 353: 78 19                         js      0x36e <_JIT_ENTRY+0x36e>
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35f: ff d0                         callq   *%rax
// 361: 49 ff 4d 00                   decq    (%r13)
// 365: 4d 89 ee                      movq    %r13, %r14
// 368: 0f 84 7a ff ff ff             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 36e: 49 29 dc                      subq    %rbx, %r12
// 371: 49 83 c4 b8                   addq    $-0x48, %r12
// 375: 49 c1 ec 03                   shrq    $0x3, %r12
// 379: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 37d: 31 c0                         xorl    %eax, %eax
// 37f: 48 83 c4 18                   addq    $0x18, %rsp
// 383: 5b                            popq    %rbx
// 384: 41 5c                         popq    %r12
// 386: 41 5d                         popq    %r13
// 388: 41 5e                         popq    %r14
// 38a: 41 5f                         popq    %r15
// 38c: 5d                            popq    %rbp
// 38d: c3                            retq
// 38e: 
static const unsigned char _BUILD_SETplus_GET_AITER_code_body[911] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xe9, 0x4c, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x2d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x8b, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x65, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x49, 0x01, 0xec, 0x4c, 0x8b, 0x74, 0xc5, 0xf8, 0x49, 0x8b, 0x46, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x5c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x4c, 0x89, 0x6c, 0xc5, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x75, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x4d, 0x89, 0xee, 0x0f, 0x84, 0x7a, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GET_AITER_code_holes[31] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GET_AITER_data_holes[1];

// _BUILD_SETplus_GET_ANEXT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GET_ANEXT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 47 02 00 00                jmp     0x369 <_JIT_ENTRY+0x369>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 129: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 02 02 00 00             js      0x369 <_JIT_ENTRY+0x369>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 ec 01 00 00             jne     0x369 <_JIT_ENTRY+0x369>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 d8 01 00 00                jmp     0x369 <_JIT_ENTRY+0x369>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 4c 8d 3c c5 00 00 00 00       leaq    (,%rax,8), %r15
// 1be: 49 01 ef                      addq    %rbp, %r15
// 1c1: 48 8b 7c c5 f8                movq    -0x8(%rbp,%rax,8), %rdi
// 1c6: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  PyAsyncGen_Type
// 1d4: 48 39 c8                      cmpq    %rcx, %rax
// 1d7: 0f 84 c3 00 00 00             je      0x2a0 <_JIT_ENTRY+0x2a0>
// 1dd: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1e1: 48 85 c9                      testq   %rcx, %rcx
// 1e4: 0f 84 84 00 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 1ea: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1ee: 48 85 c9                      testq   %rcx, %rcx
// 1f1: 74 7b                         je      0x26e <_JIT_ENTRY+0x26e>
// 1f3: ff d1                         callq   *%rcx
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 0f 84 6b 01 00 00             je      0x369 <_JIT_ENTRY+0x369>
// 1fe: 49 89 c4                      movq    %rax, %r12
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 20b: 4c 89 e7                      movq    %r12, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 48 85 c0                      testq   %rax, %rax
// 213: 0f 84 e1 00 00 00             je      0x2fa <_JIT_ENTRY+0x2fa>
// 219: 49 89 c5                      movq    %rax, %r13
// 21c: 49 8b 04 24                   movq    (%r12), %rax
// 220: 48 85 c0                      testq   %rax, %rax
// 223: 7f 22                         jg      0x247 <_JIT_ENTRY+0x247>
// 225: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000227:  R_X86_64_64  .rodata.str1.1
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_NegativeRefcount
// 239: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 23e: 4c 89 e2                      movq    %r12, %rdx
// 241: ff d0                         callq   *%rax
// 243: 49 8b 04 24                   movq    (%r12), %rax
// 247: 85 c0                         testl   %eax, %eax
// 249: 78 68                         js      0x2b3 <_JIT_ENTRY+0x2b3>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 255: ff d0                         callq   *%rax
// 257: 49 ff 0c 24                   decq    (%r12)
// 25b: 75 56                         jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_Dealloc
// 267: 4c 89 e7                      movq    %r12, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: eb 45                         jmp     0x2b3 <_JIT_ENTRY+0x2b3>
// 26e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000270:  R_X86_64_64  PyExc_TypeError
// 278: 48 8b 31                      movq    (%rcx), %rsi
// 27b: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 27f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000281:  R_X86_64_64  .rodata.str1.1+0x39
// 289: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028b:  R_X86_64_64  _PyErr_Format
// 293: 4c 89 f7                      movq    %r14, %rdi
// 296: 31 c0                         xorl    %eax, %eax
// 298: 41 ff d0                      callq   *%r8
// 29b: e9 c9 00 00 00                jmp     0x369 <_JIT_ENTRY+0x369>
// 2a0: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 2a4: ff 50 10                      callq   *0x10(%rax)
// 2a7: 49 89 c5                      movq    %rax, %r13
// 2aa: 48 85 c0                      testq   %rax, %rax
// 2ad: 0f 84 b6 00 00 00             je      0x369 <_JIT_ENTRY+0x369>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_OPARG
// 2bd: 0f b7 c0                      movzwl  %ax, %eax
// 2c0: b9 01 00 00 00                movl    $0x1, %ecx
// 2c5: 29 c1                         subl    %eax, %ecx
// 2c7: 48 63 c1                      movslq  %ecx, %rax
// 2ca: 4c 89 6c c5 00                movq    %r13, (%rbp,%rax,8)
// 2cf: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 2d7: 48 01 ee                      addq    %rbp, %rsi
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _JIT_CONTINUE
// 2e4: 48 89 df                      movq    %rbx, %rdi
// 2e7: 4c 89 f2                      movq    %r14, %rdx
// 2ea: 48 83 c4 18                   addq    $0x18, %rsp
// 2ee: 5b                            popq    %rbx
// 2ef: 41 5c                         popq    %r12
// 2f1: 41 5d                         popq    %r13
// 2f3: 41 5e                         popq    %r14
// 2f5: 41 5f                         popq    %r15
// 2f7: 5d                            popq    %rbp
// 2f8: ff e0                         jmpq    *%rax
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  PyExc_TypeError
// 304: 48 8b 38                      movq    (%rax), %rdi
// 307: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 30c: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 310: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000312:  R_X86_64_64  .rodata.str1.1+0x7c
// 31a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031c:  R_X86_64_64  _PyErr_FormatFromCause
// 324: 31 c0                         xorl    %eax, %eax
// 326: ff d1                         callq   *%rcx
// 328: 49 8b 04 24                   movq    (%r12), %rax
// 32c: 48 85 c0                      testq   %rax, %rax
// 32f: 7f 22                         jg      0x353 <_JIT_ENTRY+0x353>
// 331: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000333:  R_X86_64_64  .rodata.str1.1
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _Py_NegativeRefcount
// 345: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 34a: 4c 89 e2                      movq    %r12, %rdx
// 34d: ff d0                         callq   *%rax
// 34f: 49 8b 04 24                   movq    (%r12), %rax
// 353: 85 c0                         testl   %eax, %eax
// 355: 78 12                         js      0x369 <_JIT_ENTRY+0x369>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 361: ff d0                         callq   *%rax
// 363: 49 ff 0c 24                   decq    (%r12)
// 367: 74 20                         je      0x389 <_JIT_ENTRY+0x389>
// 369: 49 29 df                      subq    %rbx, %r15
// 36c: 49 83 c7 b8                   addq    $-0x48, %r15
// 370: 49 c1 ef 03                   shrq    $0x3, %r15
// 374: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 378: 31 c0                         xorl    %eax, %eax
// 37a: 48 83 c4 18                   addq    $0x18, %rsp
// 37e: 5b                            popq    %rbx
// 37f: 41 5c                         popq    %r12
// 381: 41 5d                         popq    %r13
// 383: 41 5e                         popq    %r14
// 385: 41 5f                         popq    %r15
// 387: 5d                            popq    %rbp
// 388: c3                            retq
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_Dealloc
// 393: 4c 89 e7                      movq    %r12, %rdi
// 396: e9 ef fd ff ff                jmp     0x18a <_JIT_ENTRY+0x18a>
// 39b: 
static const unsigned char _BUILD_SETplus_GET_ANEXT_code_body[924] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x47, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x02, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xec, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xd8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xef, 0x48, 0x8b, 0x7c, 0xc5, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7b, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xc9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x6c, 0xc5, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x20, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xe9, 0xef, 0xfd, 0xff, 0xff};
static const Hole _BUILD_SETplus_GET_ANEXT_code_holes[32] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GET_ANEXT_data_holes[1];

// _BUILD_SETplus_GET_AWAITABLE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GET_AWAITABLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 1c 24                   movq    %rbx, (%rsp)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 66 85 c0                      testw   %ax, %ax
// 42: 0f 84 45 01 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// 48: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 7a 02 00 00                jmp     0x39c <_JIT_ENTRY+0x39c>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 129: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12e: 74 5d                         je      0x18d <_JIT_ENTRY+0x18d>
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 22                         jg      0x15b <_JIT_ENTRY+0x15b>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 e2                      movq    %r12, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 39 02 00 00             js      0x39c <_JIT_ENTRY+0x39c>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 23 02 00 00             jne     0x39c <_JIT_ENTRY+0x39c>
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: ff d0                         callq   *%rax
// 188: e9 0f 02 00 00                jmp     0x39c <_JIT_ENTRY+0x39c>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c8                      movzwl  %ax, %ecx
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a1: 48 f7 d8                      negq    %rax
// 1a4: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 c8                         subl    %ecx, %eax
// 1af: 48 63 d8                      movslq  %eax, %rbx
// 1b2: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1c1: 4c 89 ef                      movq    %r13, %rdi
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 89 c4                      movq    %rax, %r12
// 1c9: 48 85 c0                      testq   %rax, %rax
// 1cc: 74 0f                         je      0x1dd <_JIT_ENTRY+0x1dd>
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 7e 30                         jle     0x207 <_JIT_ENTRY+0x207>
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 79 52                         jns     0x22d <_JIT_ENTRY+0x22d>
// 1db: eb 66                         jmp     0x243 <_JIT_ENTRY+0x243>
// 1dd: 49 8b 75 08                   movq    0x8(%r13), %rsi
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 d0                      movzwl  %ax, %edx
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _PyEval_FormatAwaitableError
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 48 85 c0                      testq   %rax, %rax
// 205: 7f d0                         jg      0x1d7 <_JIT_ENTRY+0x1d7>
// 207: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000209:  R_X86_64_64  .rodata.str1.1
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_NegativeRefcount
// 21b: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 220: 4c 89 ea                      movq    %r13, %rdx
// 223: ff d0                         callq   *%rax
// 225: 49 8b 45 00                   movq    (%r13), %rax
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 16                         js      0x243 <_JIT_ENTRY+0x243>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 237: ff d0                         callq   *%rax
// 239: 49 ff 4d 00                   decq    (%r13)
// 23d: 0f 84 39 01 00 00             je      0x37c <_JIT_ENTRY+0x37c>
// 243: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 247: 49 83 c7 f8                   addq    $-0x8, %r15
// 24b: 4d 85 e4                      testq   %r12, %r12
// 24e: 0f 84 48 01 00 00             je      0x39c <_JIT_ENTRY+0x39c>
// 254: 4c 89 f3                      movq    %r14, %rbx
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  PyCoro_Type
// 261: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 266: 74 41                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: 0f b7 c0                      movzwl  %ax, %eax
// 275: b9 01 00 00 00                movl    $0x1, %ecx
// 27a: 29 c1                         subl    %eax, %ecx
// 27c: 48 63 c1                      movslq  %ecx, %rax
// 27f: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 283: 4c 89 64 c3 f8                movq    %r12, -0x8(%rbx,%rax,8)
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _JIT_CONTINUE
// 292: 48 89 ef                      movq    %rbp, %rdi
// 295: 48 8b 14 24                   movq    (%rsp), %rdx
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _PyGen_yf
// 2b3: 4c 89 e7                      movq    %r12, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 74 ab                         je      0x268 <_JIT_ENTRY+0x268>
// 2bd: 49 89 c6                      movq    %rax, %r14
// 2c0: 48 8b 00                      movq    (%rax), %rax
// 2c3: 48 85 c0                      testq   %rax, %rax
// 2c6: 7f 21                         jg      0x2e9 <_JIT_ENTRY+0x2e9>
// 2c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 2e1: 4c 89 f2                      movq    %r14, %rdx
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 8b 06                      movq    (%r14), %rax
// 2e9: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f3: 85 c0                         testl   %eax, %eax
// 2f5: 78 16                         js      0x30d <_JIT_ENTRY+0x30d>
// 2f7: ff d3                         callq   *%rbx
// 2f9: 49 ff 0e                      decq    (%r14)
// 2fc: 75 0f                         jne     0x30d <_JIT_ENTRY+0x30d>
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_Dealloc
// 308: 4c 89 f7                      movq    %r14, %rdi
// 30b: ff d0                         callq   *%rax
// 30d: 49 8b 04 24                   movq    (%r12), %rax
// 311: 48 85 c0                      testq   %rax, %rax
// 314: 7f 22                         jg      0x338 <_JIT_ENTRY+0x338>
// 316: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000318:  R_X86_64_64  .rodata.str1.1
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_NegativeRefcount
// 32a: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 32f: 4c 89 e2                      movq    %r12, %rdx
// 332: ff d0                         callq   *%rax
// 334: 49 8b 04 24                   movq    (%r12), %rax
// 338: 85 c0                         testl   %eax, %eax
// 33a: 78 17                         js      0x353 <_JIT_ENTRY+0x353>
// 33c: ff d3                         callq   *%rbx
// 33e: 49 ff 0c 24                   decq    (%r12)
// 342: 75 0f                         jne     0x353 <_JIT_ENTRY+0x353>
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _Py_Dealloc
// 34e: 4c 89 e7                      movq    %r12, %rdi
// 351: ff d0                         callq   *%rax
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  PyExc_RuntimeError
// 35d: 48 8b 30                      movq    (%rax), %rsi
// 360: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000362:  R_X86_64_64  .rodata.str1.1+0x39
// 36a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036c:  R_X86_64_64  _PyErr_SetString
// 374: 48 8b 3c 24                   movq    (%rsp), %rdi
// 378: ff d0                         callq   *%rax
// 37a: eb 20                         jmp     0x39c <_JIT_ENTRY+0x39c>
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_Dealloc
// 386: 4c 89 ef                      movq    %r13, %rdi
// 389: ff d0                         callq   *%rax
// 38b: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 38f: 49 83 c7 f8                   addq    $-0x8, %r15
// 393: 4d 85 e4                      testq   %r12, %r12
// 396: 0f 85 b8 fe ff ff             jne     0x254 <_JIT_ENTRY+0x254>
// 39c: 49 29 ef                      subq    %rbp, %r15
// 39f: 49 83 c7 b8                   addq    $-0x48, %r15
// 3a3: 49 c1 ef 03                   shrq    $0x3, %r15
// 3a7: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 3ab: 31 c0                         xorl    %eax, %eax
// 3ad: 48 83 c4 18                   addq    $0x18, %rsp
// 3b1: 5b                            popq    %rbx
// 3b2: 41 5c                         popq    %r12
// 3b4: 41 5d                         popq    %r13
// 3b6: 41 5e                         popq    %r14
// 3b8: 41 5f                         popq    %r15
// 3ba: 5d                            popq    %rbp
// 3bb: c3                            retq
// 3bc: 
static const unsigned char _BUILD_SETplus_GET_AWAITABLE_code_body[957] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x7a, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x39, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x23, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x0f, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x79, 0x52, 0xeb, 0x66, 0x49, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x39, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x3c, 0xde, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x48, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x41, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0x34, 0xc3, 0x4c, 0x89, 0x64, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xab, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x16, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0xeb, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x3c, 0xde, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GET_AWAITABLE_code_holes[35] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _BUILD_SETplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GET_AWAITABLE_data_holes[1];

// _BUILD_SETplus_GET_ITER
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GET_ITER.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 53 01 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 0e 01 00 00             js      0x275 <_JIT_ENTRY+0x275>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 f8 00 00 00             jne     0x275 <_JIT_ENTRY+0x275>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 e4 00 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 c8                         subl    %ecx, %eax
// 1b3: 48 63 d8                      movslq  %eax, %rbx
// 1b6: 4d 89 f7                      movq    %r14, %r15
// 1b9: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyObject_GetIter
// 1c8: 4c 89 f7                      movq    %r14, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 89 c4                      movq    %rax, %r12
// 1d0: 49 8b 06                      movq    (%r14), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 7e 06                         jle     0x1de <_JIT_ENTRY+0x1de>
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 79 27                         jns     0x203 <_JIT_ENTRY+0x203>
// 1dc: eb 36                         jmp     0x214 <_JIT_ENTRY+0x214>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 1f7: 4c 89 f2                      movq    %r14, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 06                      movq    (%r14), %rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 11                         js      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 49 ff 0e                      decq    (%r14)
// 212: 74 45                         je      0x259 <_JIT_ENTRY+0x259>
// 214: 4d 85 e4                      testq   %r12, %r12
// 217: 74 54                         je      0x26d <_JIT_ENTRY+0x26d>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 c0                      movzwl  %ax, %eax
// 226: b9 01 00 00 00                movl    $0x1, %ecx
// 22b: 29 c1                         subl    %eax, %ecx
// 22d: 48 63 c1                      movslq  %ecx, %rax
// 230: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 234: 4d 89 64 c7 f8                movq    %r12, -0x8(%r15,%rax,8)
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_CONTINUE
// 243: 4c 89 ef                      movq    %r13, %rdi
// 246: 48 89 ea                      movq    %rbp, %rdx
// 249: 48 83 c4 18                   addq    $0x18, %rsp
// 24d: 5b                            popq    %rbx
// 24e: 41 5c                         popq    %r12
// 250: 41 5d                         popq    %r13
// 252: 41 5e                         popq    %r14
// 254: 41 5f                         popq    %r15
// 256: 5d                            popq    %rbp
// 257: ff e0                         jmpq    *%rax
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_Dealloc
// 263: 4c 89 f7                      movq    %r14, %rdi
// 266: ff d0                         callq   *%rax
// 268: 4d 85 e4                      testq   %r12, %r12
// 26b: 75 ac                         jne     0x219 <_JIT_ENTRY+0x219>
// 26d: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 271: 49 83 c7 f8                   addq    $-0x8, %r15
// 275: 4d 29 ef                      subq    %r13, %r15
// 278: 49 83 c7 b8                   addq    $-0x48, %r15
// 27c: 49 c1 ef 03                   shrq    $0x3, %r15
// 280: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 284: 31 c0                         xorl    %eax, %eax
// 286: 48 83 c4 18                   addq    $0x18, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: c3                            retq
// 295: 
static const unsigned char _BUILD_SETplus_GET_ITER_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x53, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x0e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xf8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x45, 0x4d, 0x85, 0xe4, 0x74, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x4d, 0x89, 0x64, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xac, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GET_ITER_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GET_ITER_data_holes[1];

// _BUILD_SETplus_GET_LEN
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GET_LEN.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 10 01 00 00                jmp     0x232 <_JIT_ENTRY+0x232>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 129: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12e: 4c 8b 2c 24                   movq    (%rsp), %r13
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 cb 00 00 00             js      0x232 <_JIT_ENTRY+0x232>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 b5 00 00 00             jne     0x232 <_JIT_ENTRY+0x232>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 a1 00 00 00                jmp     0x232 <_JIT_ENTRY+0x232>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 4c 8d 3c c5 00 00 00 00       leaq    (,%rax,8), %r15
// 1be: 4d 01 ef                      addq    %r13, %r15
// 1c1: 49 8b 7c c5 f8                movq    -0x8(%r13,%rax,8), %rdi
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  PyObject_Size
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 78 5b                         js      0x232 <_JIT_ENTRY+0x232>
// 1d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d9:  R_X86_64_64  PyLong_FromSsize_t
// 1e1: 48 89 c7                      movq    %rax, %rdi
// 1e4: ff d1                         callq   *%rcx
// 1e6: 48 85 c0                      testq   %rax, %rax
// 1e9: 74 47                         je      0x232 <_JIT_ENTRY+0x232>
// 1eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ed:  R_X86_64_64  _JIT_OPARG
// 1f5: 0f b7 c9                      movzwl  %cx, %ecx
// 1f8: ba 01 00 00 00                movl    $0x1, %edx
// 1fd: 29 ca                         subl    %ecx, %edx
// 1ff: 48 63 ca                      movslq  %edx, %rcx
// 202: 49 89 44 cd 00                movq    %rax, (%r13,%rcx,8)
// 207: 48 8d 34 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rsi
// 20f: 4c 01 ee                      addq    %r13, %rsi
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_CONTINUE
// 21c: 48 89 df                      movq    %rbx, %rdi
// 21f: 4c 89 f2                      movq    %r14, %rdx
// 222: 48 83 c4 18                   addq    $0x18, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: ff e0                         jmpq    *%rax
// 232: 49 29 df                      subq    %rbx, %r15
// 235: 49 83 c7 b8                   addq    $-0x48, %r15
// 239: 49 c1 ef 03                   shrq    $0x3, %r15
// 23d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 241: 31 c0                         xorl    %eax, %eax
// 243: 48 83 c4 18                   addq    $0x18, %rsp
// 247: 5b                            popq    %rbx
// 248: 41 5c                         popq    %r12
// 24a: 41 5d                         popq    %r13
// 24c: 41 5e                         popq    %r14
// 24e: 41 5f                         popq    %r15
// 250: 5d                            popq    %rbp
// 251: c3                            retq
// 252: 
static const unsigned char _BUILD_SETplus_GET_LEN_code_body[595] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x10, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xb5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x49, 0x8b, 0x7c, 0xc5, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x5b, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xcd, 0x00, 0x48, 0x8d, 0x34, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GET_LEN_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GET_LEN_data_holes[1];

// _BUILD_SETplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GET_YIELD_FROM_ITER.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// 49: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ee                      movq    %rbp, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 e4                      xorl    %r12d, %r12d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c4                      incq    %r12
// 83: 4c 39 e5                      cmpq    %r12, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c e6                   movq    (%r14,%r12,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 ee                      movq    %rbp, %r14
// 11e: e9 aa 01 00 00                jmp     0x2cd <_JIT_ENTRY+0x2cd>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12b: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 130: 48 8b 2c 24                   movq    (%rsp), %rbp
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 45 00                   movq    (%r13), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 64 01 00 00             js      0x2cd <_JIT_ENTRY+0x2cd>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 4d 00                   decq    (%r13)
// 179: 0f 85 4e 01 00 00             jne     0x2cd <_JIT_ENTRY+0x2cd>
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 3a 01 00 00                jmp     0x2cd <_JIT_ENTRY+0x2cd>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a7: 48 f7 d8                      negq    %rax
// 1aa: 4c 89 6c 05 00                movq    %r13, (%rbp,%rax)
// 1af: b8 01 00 00 00                movl    $0x1, %eax
// 1b4: 29 c8                         subl    %ecx, %eax
// 1b6: 48 98                         cltq
// 1b8: 4c 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %r14
// 1c0: 49 01 ee                      addq    %rbp, %r14
// 1c3: 4c 8b 6c c5 f8                movq    -0x8(%rbp,%rax,8), %r13
// 1c8: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  PyCoro_Type
// 1d6: 48 39 c8                      cmpq    %rcx, %rax
// 1d9: 74 7f                         je      0x25a <_JIT_ENTRY+0x25a>
// 1db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dd:  R_X86_64_64  PyGen_Type
// 1e5: 48 39 c8                      cmpq    %rcx, %rax
// 1e8: 74 7e                         je      0x268 <_JIT_ENTRY+0x268>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  PyObject_GetIter
// 1f4: 4c 89 ef                      movq    %r13, %rdi
// 1f7: ff d0                         callq   *%rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 0f 84 cb 00 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 202: 48 89 c3                      movq    %rax, %rbx
// 205: 49 8b 45 00                   movq    (%r13), %rax
// 209: 48 85 c0                      testq   %rax, %rax
// 20c: 7f 22                         jg      0x230 <_JIT_ENTRY+0x230>
// 20e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000210:  R_X86_64_64  .rodata.str1.1
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_NegativeRefcount
// 222: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 227: 4c 89 ea                      movq    %r13, %rdx
// 22a: ff d0                         callq   *%rax
// 22c: 49 8b 45 00                   movq    (%r13), %rax
// 230: 85 c0                         testl   %eax, %eax
// 232: 78 21                         js      0x255 <_JIT_ENTRY+0x255>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23e: ff d0                         callq   *%rax
// 240: 49 ff 4d 00                   decq    (%r13)
// 244: 75 0f                         jne     0x255 <_JIT_ENTRY+0x255>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_Dealloc
// 250: 4c 89 ef                      movq    %r13, %rdi
// 253: ff d0                         callq   *%rax
// 255: 49 89 dd                      movq    %rbx, %r13
// 258: eb 0e                         jmp     0x268 <_JIT_ENTRY+0x268>
// 25a: 49 8b 07                      movq    (%r15), %rax
// 25d: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 261: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 266: 74 3f                         je      0x2a7 <_JIT_ENTRY+0x2a7>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_OPARG
// 272: 0f b7 c0                      movzwl  %ax, %eax
// 275: b9 01 00 00 00                movl    $0x1, %ecx
// 27a: 29 c1                         subl    %eax, %ecx
// 27c: 48 63 c1                      movslq  %ecx, %rax
// 27f: 4c 89 6c c5 f8                movq    %r13, -0x8(%rbp,%rax,8)
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_CONTINUE
// 28e: 4c 89 ff                      movq    %r15, %rdi
// 291: 4c 89 f6                      movq    %r14, %rsi
// 294: 4c 89 e2                      movq    %r12, %rdx
// 297: 48 83 c4 18                   addq    $0x18, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  PyExc_TypeError
// 2b1: 48 8b 30                      movq    (%rax), %rsi
// 2b4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002b6:  R_X86_64_64  .rodata.str1.1+0x39
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _PyErr_SetString
// 2c8: 4c 89 e7                      movq    %r12, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 4d 29 fe                      subq    %r15, %r14
// 2d0: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d4: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d8: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 2dc: 31 c0                         xorl    %eax, %eax
// 2de: 48 83 c4 18                   addq    $0x18, %rsp
// 2e2: 5b                            popq    %rbx
// 2e3: 41 5c                         popq    %r12
// 2e5: 41 5d                         popq    %r13
// 2e7: 41 5e                         popq    %r14
// 2e9: 41 5f                         popq    %r15
// 2eb: 5d                            popq    %rbp
// 2ec: c3                            retq
// 2ed: 
static const unsigned char _BUILD_SETplus_GET_YIELD_FROM_ITER_code_body[750] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe5, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xe6, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xee, 0xe9, 0xaa, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x64, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x4e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x3a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x6c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xee, 0x4c, 0x8b, 0x6c, 0xc5, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xdd, 0xeb, 0x0e, 0x49, 0x8b, 0x07, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x6c, 0xc5, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GET_YIELD_FROM_ITER_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _BUILD_SETplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GET_YIELD_FROM_ITER_data_holes[1];

// _BUILD_SETplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_BOTH_FLOAT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 8e 00 00 00                jmp     0x222 <_JIT_ENTRY+0x222>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: ba 01 00 00 00                movl    $0x1, %edx
// 1ba: 29 ca                         subl    %ecx, %edx
// 1bc: 48 63 ca                      movslq  %edx, %rcx
// 1bf: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1c7: 4c 01 ee                      addq    %r13, %rsi
// 1ca: 49 8b 54 cd f0                movq    -0x10(%r13,%rcx,8), %rdx
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  PyFloat_Type
// 1d9: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 1dd: 75 1c                         jne     0x1fb <_JIT_ENTRY+0x1fb>
// 1df: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 0f b7 d2                      movzwl  %dx, %edx
// 1ec: 29 d0                         subl    %edx, %eax
// 1ee: 48 98                         cltq
// 1f0: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1f5: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1f9: 74 36                         je      0x231 <_JIT_ENTRY+0x231>
// 1fb: 48 29 de                      subq    %rbx, %rsi
// 1fe: 48 83 c6 b8                   addq    $-0x48, %rsi
// 202: 48 c1 ee 03                   shrq    $0x3, %rsi
// 206: 89 73 40                      movl    %esi, 0x40(%rbx)
// 209: 48 8b 03                      movq    (%rbx), %rax
// 20c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020e:  R_X86_64_64  _JIT_TARGET
// 216: 89 c9                         movl    %ecx, %ecx
// 218: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 222: 48 83 c4 18                   addq    $0x18, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: c3                            retq
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 df                      movq    %rbx, %rdi
// 23e: 4c 89 f2                      movq    %r14, %rdx
// 241: 48 83 c4 18                   addq    $0x18, %rsp
// 245: 5b                            popq    %rbx
// 246: 41 5c                         popq    %r12
// 248: 41 5d                         popq    %r13
// 24a: 41 5e                         popq    %r14
// 24c: 41 5f                         popq    %r15
// 24e: 5d                            popq    %rbp
// 24f: ff e0                         jmpq    *%rax
// 251: 
static const unsigned char _BUILD_SETplus_GUARD_BOTH_FLOAT_code_body[594] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x54, 0xcd, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x1c, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x39, 0x48, 0x08, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_GUARD_BOTH_FLOAT_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_BOTH_FLOAT_data_holes[1];

// _BUILD_SETplus_GUARD_BOTH_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_BOTH_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 8e 00 00 00                jmp     0x222 <_JIT_ENTRY+0x222>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: ba 01 00 00 00                movl    $0x1, %edx
// 1ba: 29 ca                         subl    %ecx, %edx
// 1bc: 48 63 ca                      movslq  %edx, %rcx
// 1bf: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1c7: 4c 01 ee                      addq    %r13, %rsi
// 1ca: 49 8b 54 cd f0                movq    -0x10(%r13,%rcx,8), %rdx
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  PyLong_Type
// 1d9: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 1dd: 75 1c                         jne     0x1fb <_JIT_ENTRY+0x1fb>
// 1df: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 0f b7 d2                      movzwl  %dx, %edx
// 1ec: 29 d0                         subl    %edx, %eax
// 1ee: 48 98                         cltq
// 1f0: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1f5: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1f9: 74 36                         je      0x231 <_JIT_ENTRY+0x231>
// 1fb: 48 29 de                      subq    %rbx, %rsi
// 1fe: 48 83 c6 b8                   addq    $-0x48, %rsi
// 202: 48 c1 ee 03                   shrq    $0x3, %rsi
// 206: 89 73 40                      movl    %esi, 0x40(%rbx)
// 209: 48 8b 03                      movq    (%rbx), %rax
// 20c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020e:  R_X86_64_64  _JIT_TARGET
// 216: 89 c9                         movl    %ecx, %ecx
// 218: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 222: 48 83 c4 18                   addq    $0x18, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: c3                            retq
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 df                      movq    %rbx, %rdi
// 23e: 4c 89 f2                      movq    %r14, %rdx
// 241: 48 83 c4 18                   addq    $0x18, %rsp
// 245: 5b                            popq    %rbx
// 246: 41 5c                         popq    %r12
// 248: 41 5d                         popq    %r13
// 24a: 41 5e                         popq    %r14
// 24c: 41 5f                         popq    %r15
// 24e: 5d                            popq    %rbp
// 24f: ff e0                         jmpq    *%rax
// 251: 
static const unsigned char _BUILD_SETplus_GUARD_BOTH_INT_code_body[594] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x54, 0xcd, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x1c, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x39, 0x48, 0x08, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_GUARD_BOTH_INT_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_BOTH_INT_data_holes[1];

// _BUILD_SETplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_BOTH_UNICODE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 8e 00 00 00                jmp     0x222 <_JIT_ENTRY+0x222>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: ba 01 00 00 00                movl    $0x1, %edx
// 1ba: 29 ca                         subl    %ecx, %edx
// 1bc: 48 63 ca                      movslq  %edx, %rcx
// 1bf: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1c7: 4c 01 ee                      addq    %r13, %rsi
// 1ca: 49 8b 54 cd f0                movq    -0x10(%r13,%rcx,8), %rdx
// 1cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d1:  R_X86_64_64  PyUnicode_Type
// 1d9: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 1dd: 75 1c                         jne     0x1fb <_JIT_ENTRY+0x1fb>
// 1df: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 0f b7 d2                      movzwl  %dx, %edx
// 1ec: 29 d0                         subl    %edx, %eax
// 1ee: 48 98                         cltq
// 1f0: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1f5: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1f9: 74 36                         je      0x231 <_JIT_ENTRY+0x231>
// 1fb: 48 29 de                      subq    %rbx, %rsi
// 1fe: 48 83 c6 b8                   addq    $-0x48, %rsi
// 202: 48 c1 ee 03                   shrq    $0x3, %rsi
// 206: 89 73 40                      movl    %esi, 0x40(%rbx)
// 209: 48 8b 03                      movq    (%rbx), %rax
// 20c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020e:  R_X86_64_64  _JIT_TARGET
// 216: 89 c9                         movl    %ecx, %ecx
// 218: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 222: 48 83 c4 18                   addq    $0x18, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: c3                            retq
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 df                      movq    %rbx, %rdi
// 23e: 4c 89 f2                      movq    %r14, %rdx
// 241: 48 83 c4 18                   addq    $0x18, %rsp
// 245: 5b                            popq    %rbx
// 246: 41 5c                         popq    %r12
// 248: 41 5d                         popq    %r13
// 24a: 41 5e                         popq    %r14
// 24c: 41 5f                         popq    %r15
// 24e: 5d                            popq    %rbp
// 24f: ff e0                         jmpq    *%rax
// 251: 
static const unsigned char _BUILD_SETplus_GUARD_BOTH_UNICODE_code_body[594] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x54, 0xcd, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x1c, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x39, 0x48, 0x08, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_GUARD_BOTH_UNICODE_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_BOTH_UNICODE_data_holes[1];

// _BUILD_SETplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_BUILTINS_VERSION.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 a1 00 00 00                jmp     0x235 <_JIT_ENTRY+0x235>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  PyDict_Type
// 1d2: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1d6: 75 36                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1d8: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001de:  R_X86_64_64  _JIT_OPERAND
// 1e6: 0f b7 c9                      movzwl  %cx, %ecx
// 1e9: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1ec: 75 20                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_CONTINUE
// 1f8: 48 89 df                      movq    %rbx, %rdi
// 1fb: 4c 89 f2                      movq    %r14, %rdx
// 1fe: 48 83 c4 18                   addq    $0x18, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 48 29 de                      subq    %rbx, %rsi
// 211: 48 83 c6 b8                   addq    $-0x48, %rsi
// 215: 48 c1 ee 03                   shrq    $0x3, %rsi
// 219: 89 73 40                      movl    %esi, 0x40(%rbx)
// 21c: 48 8b 03                      movq    (%rbx), %rax
// 21f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000221:  R_X86_64_64  _JIT_TARGET
// 229: 89 c9                         movl    %ecx, %ecx
// 22b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 235: 48 83 c4 18                   addq    $0x18, %rsp
// 239: 5b                            popq    %rbx
// 23a: 41 5c                         popq    %r12
// 23c: 41 5d                         popq    %r13
// 23e: 41 5e                         popq    %r14
// 240: 41 5f                         popq    %r15
// 242: 5d                            popq    %rbp
// 243: c3                            retq
// 244: 
static const unsigned char _BUILD_SETplus_GUARD_BUILTINS_VERSION_code_body[581] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0x8b, 0x43, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x36, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_BUILTINS_VERSION_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _BUILD_SETplus_GUARD_DORV_VALUES
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_DORV_VALUES.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 62                         jmp     0x1f3 <_JIT_ENTRY+0x1f3>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1be: 4c 01 ee                      addq    %r13, %rsi
// 1c1: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c6: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 1ca: 75 36                         jne     0x202 <_JIT_ENTRY+0x202>
// 1cc: 48 29 de                      subq    %rbx, %rsi
// 1cf: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1d3: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1d7: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1da: 48 8b 03                      movq    (%rbx), %rax
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_TARGET
// 1e7: 89 c9                         movl    %ecx, %ecx
// 1e9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ed: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f3: 48 83 c4 18                   addq    $0x18, %rsp
// 1f7: 5b                            popq    %rbx
// 1f8: 41 5c                         popq    %r12
// 1fa: 41 5d                         popq    %r13
// 1fc: 41 5e                         popq    %r14
// 1fe: 41 5f                         popq    %r15
// 200: 5d                            popq    %rbp
// 201: c3                            retq
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _JIT_CONTINUE
// 20c: 48 89 df                      movq    %rbx, %rdi
// 20f: 4c 89 fa                      movq    %r15, %rdx
// 212: 48 83 c4 18                   addq    $0x18, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _BUILD_SETplus_GUARD_DORV_VALUES_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x62, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_GUARD_DORV_VALUES_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_DORV_VALUES_data_holes[1];

// _BUILD_SETplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ec                      movq    %rbp, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4c 89 7c 05 00                movq    %r15, (%rbp,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 4c 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %r14
// 1cb: 49 01 ee                      addq    %rbp, %r14
// 1ce: 48 8b 7c c5 f8                movq    -0x8(%rbp,%rax,8), %rdi
// 1d3: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 1d7: 75 14                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 1d9: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 1e7: ff d0                         callq   *%rax
// 1e9: 84 c0                         testb   %al, %al
// 1eb: 74 23                         je      0x210 <_JIT_ENTRY+0x210>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_CONTINUE
// 1f7: 48 89 df                      movq    %rbx, %rdi
// 1fa: 4c 89 f6                      movq    %r14, %rsi
// 1fd: 4c 89 ea                      movq    %r13, %rdx
// 200: 48 83 c4 18                   addq    $0x18, %rsp
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: 5d                            popq    %rbp
// 20e: ff e0                         jmpq    *%rax
// 210: 49 29 de                      subq    %rbx, %r14
// 213: 49 83 c6 b8                   addq    $-0x48, %r14
// 217: 49 c1 ee 03                   shrq    $0x3, %r14
// 21b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21f: 48 8b 03                      movq    (%rbx), %rax
// 222: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000224:  R_X86_64_64  _JIT_TARGET
// 22c: 89 c9                         movl    %ecx, %ecx
// 22e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 232: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 238: e9 52 ff ff ff                jmp     0x18f <_JIT_ENTRY+0x18f>
// 23d: 
static const unsigned char _BUILD_SETplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[574] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xee, 0x48, 0x8b, 0x7c, 0xc5, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x52, 0xff, 0xff, 0xff};
static const Hole _BUILD_SETplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _BUILD_SETplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_GLOBALS_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 a1 00 00 00                jmp     0x235 <_JIT_ENTRY+0x235>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  PyDict_Type
// 1d2: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1d6: 75 36                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1d8: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001de:  R_X86_64_64  _JIT_OPERAND
// 1e6: 0f b7 c9                      movzwl  %cx, %ecx
// 1e9: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1ec: 75 20                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_CONTINUE
// 1f8: 48 89 df                      movq    %rbx, %rdi
// 1fb: 4c 89 f2                      movq    %r14, %rdx
// 1fe: 48 83 c4 18                   addq    $0x18, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 48 29 de                      subq    %rbx, %rsi
// 211: 48 83 c6 b8                   addq    $-0x48, %rsi
// 215: 48 c1 ee 03                   shrq    $0x3, %rsi
// 219: 89 73 40                      movl    %esi, 0x40(%rbx)
// 21c: 48 8b 03                      movq    (%rbx), %rax
// 21f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000221:  R_X86_64_64  _JIT_TARGET
// 229: 89 c9                         movl    %ecx, %ecx
// 22b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 235: 48 83 c4 18                   addq    $0x18, %rsp
// 239: 5b                            popq    %rbx
// 23a: 41 5c                         popq    %r12
// 23c: 41 5d                         popq    %r13
// 23e: 41 5e                         popq    %r14
// 240: 41 5f                         popq    %r15
// 242: 5d                            popq    %rbp
// 243: c3                            retq
// 244: 
static const unsigned char _BUILD_SETplus_GUARD_GLOBALS_VERSION_code_body[581] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0x8b, 0x43, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x36, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_GLOBALS_VERSION_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _BUILD_SETplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_IS_FALSE_POP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 97 00 00 00                jmp     0x22b <_JIT_ENTRY+0x22b>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1c1: 4c 01 e9                      addq    %r13, %rcx
// 1c4: 48 8d 34 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %rsi
// 1cc: 4c 01 ee                      addq    %r13, %rsi
// 1cf: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d1:  R_X86_64_64  _Py_TrueStruct
// 1d9: 49 39 54 c5 f8                cmpq    %rdx, -0x8(%r13,%rax,8)
// 1de: 48 0f 44 f1                   cmoveq  %rcx, %rsi
// 1e2: 74 20                         je      0x204 <_JIT_ENTRY+0x204>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _JIT_CONTINUE
// 1ee: 48 89 df                      movq    %rbx, %rdi
// 1f1: 4c 89 fa                      movq    %r15, %rdx
// 1f4: 48 83 c4 18                   addq    $0x18, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: ff e0                         jmpq    *%rax
// 204: 48 29 de                      subq    %rbx, %rsi
// 207: 48 83 c6 b8                   addq    $-0x48, %rsi
// 20b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 20f: 89 73 40                      movl    %esi, 0x40(%rbx)
// 212: 48 8b 03                      movq    (%rbx), %rax
// 215: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000217:  R_X86_64_64  _JIT_TARGET
// 21f: 89 c9                         movl    %ecx, %ecx
// 221: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 225: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22b: 48 83 c4 18                   addq    $0x18, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: c3                            retq
// 23a: 
static const unsigned char _BUILD_SETplus_GUARD_IS_FALSE_POP_code_body[571] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe9, 0x48, 0x8d, 0x34, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xee, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0xc5, 0xf8, 0x48, 0x0f, 0x44, 0xf1, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_IS_FALSE_POP_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_IS_FALSE_POP_data_holes[1];

// _BUILD_SETplus_GUARD_IS_NONE_POP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_IS_NONE_POP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 77                         jmp     0x208 <_JIT_ENTRY+0x208>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1be: 4c 01 e9                      addq    %r13, %rcx
// 1c1: 48 8d 34 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %rsi
// 1c9: 4c 01 ee                      addq    %r13, %rsi
// 1cc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ce:  R_X86_64_64  _Py_NoneStruct
// 1d6: 49 39 54 c5 f8                cmpq    %rdx, -0x8(%r13,%rax,8)
// 1db: 48 0f 45 f1                   cmovneq %rcx, %rsi
// 1df: 74 36                         je      0x217 <_JIT_ENTRY+0x217>
// 1e1: 48 29 de                      subq    %rbx, %rsi
// 1e4: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1e8: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1ec: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1ef: 48 8b 03                      movq    (%rbx), %rax
// 1f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f4:  R_X86_64_64  _JIT_TARGET
// 1fc: 89 c9                         movl    %ecx, %ecx
// 1fe: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 202: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 208: 48 83 c4 18                   addq    $0x18, %rsp
// 20c: 5b                            popq    %rbx
// 20d: 41 5c                         popq    %r12
// 20f: 41 5d                         popq    %r13
// 211: 41 5e                         popq    %r14
// 213: 41 5f                         popq    %r15
// 215: 5d                            popq    %rbp
// 216: c3                            retq
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_CONTINUE
// 221: 48 89 df                      movq    %rbx, %rdi
// 224: 4c 89 fa                      movq    %r15, %rdx
// 227: 48 83 c4 18                   addq    $0x18, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: ff e0                         jmpq    *%rax
// 237: 
static const unsigned char _BUILD_SETplus_GUARD_IS_NONE_POP_code_body[568] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x77, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe9, 0x48, 0x8d, 0x34, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xee, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0xc5, 0xf8, 0x48, 0x0f, 0x45, 0xf1, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_GUARD_IS_NONE_POP_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_IS_NONE_POP_data_holes[1];

// _BUILD_SETplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_IS_NOT_NONE_POP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 f5 00 00 00                jmp     0x28c <_JIT_ENTRY+0x28c>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1b2: b8 01 00 00 00                movl    $0x1, %eax
// 1b7: ba 01 00 00 00                movl    $0x1, %edx
// 1bc: 29 ca                         subl    %ecx, %edx
// 1be: 48 63 da                      movslq  %edx, %rbx
// 1c1: 4d 89 f7                      movq    %r14, %r15
// 1c4: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  _Py_NoneStruct
// 1d3: 49 39 ce                      cmpq    %rcx, %r14
// 1d6: 74 78                         je      0x250 <_JIT_ENTRY+0x250>
// 1d8: 49 8b 06                      movq    (%r14), %rax
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 7f 21                         jg      0x201 <_JIT_ENTRY+0x201>
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_NegativeRefcount
// 1f4: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 1f9: 4c 89 f2                      movq    %r14, %rdx
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 8b 06                      movq    (%r14), %rax
// 201: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 20                         js      0x22d <_JIT_ENTRY+0x22d>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 217: ff d0                         callq   *%rax
// 219: 49 ff 0e                      decq    (%r14)
// 21c: 75 0f                         jne     0x22d <_JIT_ENTRY+0x22d>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 4c 89 f7                      movq    %r14, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_CONTINUE
// 237: 4c 89 ef                      movq    %r13, %rdi
// 23a: 4c 89 fe                      movq    %r15, %rsi
// 23d: 48 89 ea                      movq    %rbp, %rdx
// 240: 48 83 c4 18                   addq    $0x18, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: ff e0                         jmpq    *%rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  _JIT_OPARG
// 25a: 0f b7 c9                      movzwl  %cx, %ecx
// 25d: 29 c8                         subl    %ecx, %eax
// 25f: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 263: 4c 29 e8                      subq    %r13, %rax
// 266: 48 83 c0 b8                   addq    $-0x48, %rax
// 26a: 48 c1 e8 03                   shrq    $0x3, %rax
// 26e: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 272: 49 8b 45 00                   movq    (%r13), %rax
// 276: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000278:  R_X86_64_64  _JIT_TARGET
// 280: 89 c9                         movl    %ecx, %ecx
// 282: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 286: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28c: 48 83 c4 18                   addq    $0x18, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: c3                            retq
// 29b: 
static const unsigned char _BUILD_SETplus_GUARD_IS_NOT_NONE_POP_code_body[668] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xce, 0x74, 0x78, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x49, 0x8d, 0x04, 0xc7, 0x4c, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x45, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_IS_NOT_NONE_POP_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _BUILD_SETplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_IS_TRUE_POP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 97 00 00 00                jmp     0x22b <_JIT_ENTRY+0x22b>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1c1: 4c 01 e9                      addq    %r13, %rcx
// 1c4: 48 8d 34 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %rsi
// 1cc: 4c 01 ee                      addq    %r13, %rsi
// 1cf: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d1:  R_X86_64_64  _Py_FalseStruct
// 1d9: 49 39 54 c5 f8                cmpq    %rdx, -0x8(%r13,%rax,8)
// 1de: 48 0f 44 f1                   cmoveq  %rcx, %rsi
// 1e2: 74 20                         je      0x204 <_JIT_ENTRY+0x204>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _JIT_CONTINUE
// 1ee: 48 89 df                      movq    %rbx, %rdi
// 1f1: 4c 89 fa                      movq    %r15, %rdx
// 1f4: 48 83 c4 18                   addq    $0x18, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: ff e0                         jmpq    *%rax
// 204: 48 29 de                      subq    %rbx, %rsi
// 207: 48 83 c6 b8                   addq    $-0x48, %rsi
// 20b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 20f: 89 73 40                      movl    %esi, 0x40(%rbx)
// 212: 48 8b 03                      movq    (%rbx), %rax
// 215: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000217:  R_X86_64_64  _JIT_TARGET
// 21f: 89 c9                         movl    %ecx, %ecx
// 221: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 225: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22b: 48 83 c4 18                   addq    $0x18, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: c3                            retq
// 23a: 
static const unsigned char _BUILD_SETplus_GUARD_IS_TRUE_POP_code_body[571] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe9, 0x48, 0x8d, 0x34, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xee, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0xc5, 0xf8, 0x48, 0x0f, 0x44, 0xf1, 0x74, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_IS_TRUE_POP_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_IS_TRUE_POP_data_holes[1];

// _BUILD_SETplus_GUARD_KEYS_VERSION
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_KEYS_VERSION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 96 00 00 00                jmp     0x22a <_JIT_ENTRY+0x22a>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c9: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1cd: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  _JIT_OPERAND
// 1de: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1e1: 75 20                         jne     0x203 <_JIT_ENTRY+0x203>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _JIT_CONTINUE
// 1ed: 48 89 df                      movq    %rbx, %rdi
// 1f0: 4c 89 fa                      movq    %r15, %rdx
// 1f3: 48 83 c4 18                   addq    $0x18, %rsp
// 1f7: 5b                            popq    %rbx
// 1f8: 41 5c                         popq    %r12
// 1fa: 41 5d                         popq    %r13
// 1fc: 41 5e                         popq    %r14
// 1fe: 41 5f                         popq    %r15
// 200: 5d                            popq    %rbp
// 201: ff e0                         jmpq    *%rax
// 203: 48 29 de                      subq    %rbx, %rsi
// 206: 48 83 c6 b8                   addq    $-0x48, %rsi
// 20a: 48 c1 ee 03                   shrq    $0x3, %rsi
// 20e: 89 73 40                      movl    %esi, 0x40(%rbx)
// 211: 48 8b 03                      movq    (%rbx), %rax
// 214: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000216:  R_X86_64_64  _JIT_TARGET
// 21e: 89 c9                         movl    %ecx, %ecx
// 220: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 224: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22a: 48 83 c4 18                   addq    $0x18, %rsp
// 22e: 5b                            popq    %rbx
// 22f: 41 5c                         popq    %r12
// 231: 41 5d                         popq    %r13
// 233: 41 5e                         popq    %r14
// 235: 41 5f                         popq    %r15
// 237: 5d                            popq    %rbp
// 238: c3                            retq
// 239: 
static const unsigned char _BUILD_SETplus_GUARD_KEYS_VERSION_code_body[570] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x96, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_KEYS_VERSION_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_KEYS_VERSION_data_holes[1];

// _BUILD_SETplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_NOT_EXHAUSTED_LIST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 8f 00 00 00                jmp     0x223 <_JIT_ENTRY+0x223>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1cd: 48 85 c9                      testq   %rcx, %rcx
// 1d0: 74 2a                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1d2: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1d6: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 1da: 7d 20                         jge     0x1fc <_JIT_ENTRY+0x1fc>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_CONTINUE
// 1e6: 48 89 df                      movq    %rbx, %rdi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 18                   addq    $0x18, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 48 29 de                      subq    %rbx, %rsi
// 1ff: 48 83 c6 b8                   addq    $-0x48, %rsi
// 203: 48 c1 ee 03                   shrq    $0x3, %rsi
// 207: 89 73 40                      movl    %esi, 0x40(%rbx)
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020f:  R_X86_64_64  _JIT_TARGET
// 217: 89 c9                         movl    %ecx, %ecx
// 219: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 223: 48 83 c4 18                   addq    $0x18, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: c3                            retq
// 232: 
static const unsigned char _BUILD_SETplus_GUARD_NOT_EXHAUSTED_LIST_code_body[563] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _BUILD_SETplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_NOT_EXHAUSTED_RANGE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 83 00 00 00                jmp     0x217 <_JIT_ENTRY+0x217>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c9: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 1ce: 7e 20                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 89 df                      movq    %rbx, %rdi
// 1dd: 4c 89 fa                      movq    %r15, %rdx
// 1e0: 48 83 c4 18                   addq    $0x18, %rsp
// 1e4: 5b                            popq    %rbx
// 1e5: 41 5c                         popq    %r12
// 1e7: 41 5d                         popq    %r13
// 1e9: 41 5e                         popq    %r14
// 1eb: 41 5f                         popq    %r15
// 1ed: 5d                            popq    %rbp
// 1ee: ff e0                         jmpq    *%rax
// 1f0: 48 29 de                      subq    %rbx, %rsi
// 1f3: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1f7: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1fb: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1fe: 48 8b 03                      movq    (%rbx), %rax
// 201: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000203:  R_X86_64_64  _JIT_TARGET
// 20b: 89 c9                         movl    %ecx, %ecx
// 20d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 211: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 217: 48 83 c4 18                   addq    $0x18, %rsp
// 21b: 5b                            popq    %rbx
// 21c: 41 5c                         popq    %r12
// 21e: 41 5d                         popq    %r13
// 220: 41 5e                         popq    %r14
// 222: 41 5f                         popq    %r15
// 224: 5d                            popq    %rbp
// 225: c3                            retq
// 226: 
static const unsigned char _BUILD_SETplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[551] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _BUILD_SETplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_NOT_EXHAUSTED_TUPLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 8f 00 00 00                jmp     0x223 <_JIT_ENTRY+0x223>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1cd: 48 85 c9                      testq   %rcx, %rcx
// 1d0: 74 2a                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1d2: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1d6: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 1da: 7d 20                         jge     0x1fc <_JIT_ENTRY+0x1fc>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_CONTINUE
// 1e6: 48 89 df                      movq    %rbx, %rdi
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: 48 83 c4 18                   addq    $0x18, %rsp
// 1f0: 5b                            popq    %rbx
// 1f1: 41 5c                         popq    %r12
// 1f3: 41 5d                         popq    %r13
// 1f5: 41 5e                         popq    %r14
// 1f7: 41 5f                         popq    %r15
// 1f9: 5d                            popq    %rbp
// 1fa: ff e0                         jmpq    *%rax
// 1fc: 48 29 de                      subq    %rbx, %rsi
// 1ff: 48 83 c6 b8                   addq    $-0x48, %rsi
// 203: 48 c1 ee 03                   shrq    $0x3, %rsi
// 207: 89 73 40                      movl    %esi, 0x40(%rbx)
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020f:  R_X86_64_64  _JIT_TARGET
// 217: 89 c9                         movl    %ecx, %ecx
// 219: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 223: 48 83 c4 18                   addq    $0x18, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: c3                            retq
// 232: 
static const unsigned char _BUILD_SETplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[563] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _BUILD_SETplus_GUARD_TYPE_VERSION
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_GUARD_TYPE_VERSION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 92 00 00 00                jmp     0x226 <_JIT_ENTRY+0x226>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c9: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cf:  R_X86_64_64  _JIT_OPERAND
// 1d7: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1dd: 75 20                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_CONTINUE
// 1e9: 48 89 df                      movq    %rbx, %rdi
// 1ec: 4c 89 fa                      movq    %r15, %rdx
// 1ef: 48 83 c4 18                   addq    $0x18, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: ff e0                         jmpq    *%rax
// 1ff: 48 29 de                      subq    %rbx, %rsi
// 202: 48 83 c6 b8                   addq    $-0x48, %rsi
// 206: 48 c1 ee 03                   shrq    $0x3, %rsi
// 20a: 89 73 40                      movl    %esi, 0x40(%rbx)
// 20d: 48 8b 03                      movq    (%rbx), %rax
// 210: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000212:  R_X86_64_64  _JIT_TARGET
// 21a: 89 c9                         movl    %ecx, %ecx
// 21c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 220: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 226: 48 83 c4 18                   addq    $0x18, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: c3                            retq
// 235: 
static const unsigned char _BUILD_SETplus_GUARD_TYPE_VERSION_code_body[566] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_GUARD_TYPE_VERSION_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_GUARD_TYPE_VERSION_data_holes[1];

// _BUILD_SETplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 36 01 00 00             je      0x164 <_JIT_ENTRY+0x164>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 3c 24                   movq    %r15, (%rsp)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 66 85 c0                      testw   %ax, %ax
// 42: 0f 84 3c 01 00 00             je      0x184 <_JIT_ENTRY+0x184>
// 48: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4d: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4c 8b 3c 24                   movq    (%rsp), %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 08                         jmp     0x88 <_JIT_ENTRY+0x88>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 74 7e                         je      0x106 <_JIT_ENTRY+0x106>
// 88: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 8c: 85 ed                         testl   %ebp, %ebp
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 49 8b 06                      movq    (%r14), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7e 24                         jle     0xbc <_JIT_ENTRY+0xbc>
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 e4                         js      0x80 <_JIT_ENTRY+0x80>
// 9c: eb 43                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9e: 66 90                         nop
// a0: 4c 89 e7                      movq    %r12, %rdi
// a3: 4c 89 f6                      movq    %r14, %rsi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PySet_Add
// b0: ff d0                         callq   *%rax
// b2: 89 c5                         movl    %eax, %ebp
// b4: 49 8b 06                      movq    (%r14), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f dc                         jg      0x98 <_JIT_ENTRY+0x98>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: ff d0                         callq   *%rax
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 85 c0                         testl   %eax, %eax
// df: 78 9f                         js      0x80 <_JIT_ENTRY+0x80>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// eb: ff d0                         callq   *%rax
// ed: 49 ff 0e                      decq    (%r14)
// f0: 75 8e                         jne     0x80 <_JIT_ENTRY+0x80>
// f2: 4c 89 f7                      movq    %r14, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: e9 7a ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 10d: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 112: 74 70                         je      0x184 <_JIT_ENTRY+0x184>
// 114: 49 8b 04 24                   movq    (%r12), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7f 22                         jg      0x13f <_JIT_ENTRY+0x13f>
// 11d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011f:  R_X86_64_64  .rodata.str1.1
// 127: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 12c: 4c 89 e2                      movq    %r12, %rdx
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 78 21                         js      0x164 <_JIT_ENTRY+0x164>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 49 ff 0c 24                   decq    (%r12)
// 153: 75 0f                         jne     0x164 <_JIT_ENTRY+0x164>
// 155: 4c 89 e7                      movq    %r12, %rdi
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_Dealloc
// 162: ff d0                         callq   *%rax
// 164: 4d 29 ef                      subq    %r13, %r15
// 167: 49 83 c7 b8                   addq    $-0x48, %r15
// 16b: 49 c1 ef 03                   shrq    $0x3, %r15
// 16f: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 173: 31 c0                         xorl    %eax, %eax
// 175: 48 83 c4 18                   addq    $0x18, %rsp
// 179: 5b                            popq    %rbx
// 17a: 41 5c                         popq    %r12
// 17c: 41 5d                         popq    %r13
// 17e: 41 5e                         popq    %r14
// 180: 41 5f                         popq    %r15
// 182: 5d                            popq    %rbp
// 183: c3                            retq
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _JIT_OPARG
// 18e: 0f b7 c8                      movzwl  %ax, %ecx
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: 48 c1 e0 03                   shlq    $0x3, %rax
// 198: 48 f7 d8                      negq    %rax
// 19b: 4c 8b 3c 24                   movq    (%rsp), %r15
// 19f: 4d 89 24 07                   movq    %r12, (%r15,%rax)
// 1a3: bb 01 00 00 00                movl    $0x1, %ebx
// 1a8: b8 01 00 00 00                movl    $0x1, %eax
// 1ad: 29 c8                         subl    %ecx, %eax
// 1af: 48 98                         cltq
// 1b1: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1b6: 29 ca                         subl    %ecx, %edx
// 1b8: 48 63 ca                      movslq  %edx, %rcx
// 1bb: 48 01 c1                      addq    %rax, %rcx
// 1be: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// 1c2: 4d 8b 74 24 18                movq    0x18(%r12), %r14
// 1c7: 41 8b 06                      movl    (%r14), %eax
// 1ca: ff c0                         incl    %eax
// 1cc: 74 0f                         je      0x1dd <_JIT_ENTRY+0x1dd>
// 1ce: 41 89 06                      movl    %eax, (%r14)
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1db: ff d0                         callq   *%rax
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: 0f b7 c0                      movzwl  %ax, %eax
// 1ea: 29 c3                         subl    %eax, %ebx
// 1ec: 48 63 cb                      movslq  %ebx, %rcx
// 1ef: f7 d0                         notl    %eax
// 1f1: 48 98                         cltq
// 1f3: 48 01 c8                      addq    %rcx, %rax
// 1f6: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1fa: 49 8b 5c 24 10                movq    0x10(%r12), %rbx
// 1ff: 8b 03                         movl    (%rbx), %eax
// 201: ff c0                         incl    %eax
// 203: 74 0e                         je      0x213 <_JIT_ENTRY+0x213>
// 205: 89 03                         movl    %eax, (%rbx)
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 211: ff d0                         callq   *%rax
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_OPARG
// 21d: 0f b7 c0                      movzwl  %ax, %eax
// 220: b9 01 00 00 00                movl    $0x1, %ecx
// 225: 29 c1                         subl    %eax, %ecx
// 227: 48 63 c9                      movslq  %ecx, %rcx
// 22a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 22f: 29 c2                         subl    %eax, %edx
// 231: 48 63 c2                      movslq  %edx, %rax
// 234: 48 01 c8                      addq    %rcx, %rax
// 237: 49 89 1c c7                   movq    %rbx, (%r15,%rax,8)
// 23b: 49 8b 04 24                   movq    (%r12), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7e 06                         jle     0x24a <_JIT_ENTRY+0x24a>
// 244: 85 c0                         testl   %eax, %eax
// 246: 79 28                         jns     0x270 <_JIT_ENTRY+0x270>
// 248: eb 47                         jmp     0x291 <_JIT_ENTRY+0x291>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 263: 4c 89 e2                      movq    %r12, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 04 24                   movq    (%r12), %rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 78 21                         js      0x291 <_JIT_ENTRY+0x291>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 49 ff 0c 24                   decq    (%r12)
// 280: 75 0f                         jne     0x291 <_JIT_ENTRY+0x291>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 e7                      movq    %r12, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _JIT_OPARG
// 29b: 0f b7 c0                      movzwl  %ax, %eax
// 29e: b9 01 00 00 00                movl    $0x1, %ecx
// 2a3: 29 c1                         subl    %eax, %ecx
// 2a5: 48 63 c9                      movslq  %ecx, %rcx
// 2a8: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 2ac: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 2b1: 29 c2                         subl    %eax, %edx
// 2b3: 48 63 d2                      movslq  %edx, %rdx
// 2b6: 48 01 ca                      addq    %rcx, %rdx
// 2b9: 49 89 1c d7                   movq    %rbx, (%r15,%rdx,8)
// 2bd: f7 d0                         notl    %eax
// 2bf: 48 98                         cltq
// 2c1: 48 01 c8                      addq    %rcx, %rax
// 2c4: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _JIT_CONTINUE
// 2d2: 4c 89 ef                      movq    %r13, %rdi
// 2d5: 48 89 ea                      movq    %rbp, %rdx
// 2d8: 48 83 c4 18                   addq    $0x18, %rsp
// 2dc: 5b                            popq    %rbx
// 2dd: 41 5c                         popq    %r12
// 2df: 41 5d                         popq    %r13
// 2e1: 41 5e                         popq    %r14
// 2e3: 41 5f                         popq    %r15
// 2e5: 5d                            popq    %rbp
// 2e6: ff e0                         jmpq    *%rax
// 2e8: 
static const unsigned char _BUILD_SETplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[745] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x3c, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x08, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x3c, 0x24, 0x4d, 0x89, 0x24, 0x07, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x01, 0xc1, 0x4d, 0x8b, 0x24, 0xcf, 0x4d, 0x8b, 0x74, 0x24, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xcb, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8b, 0x5c, 0x24, 0x10, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x49, 0x89, 0x1c, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x8d, 0x34, 0xcf, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x49, 0x89, 0x1c, 0xd7, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _BUILD_SETplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_INIT_CALL_PY_EXACT_ARGS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 48 89 f3                      movq    %rsi, %rbx
// 16: 48 89 fd                      movq    %rdi, %rbp
// 19: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001b:  R_X86_64_64  PySet_New
// 23: 31 ff                         xorl    %edi, %edi
// 25: ff d0                         callq   *%rax
// 27: 48 85 c0                      testq   %rax, %rax
// 2a: 0f 84 ea 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 30: 49 89 c4                      movq    %rax, %r12
// 33: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000035:  R_X86_64_64  _JIT_OPARG
// 3d: 66 85 c0                      testw   %ax, %ax
// 40: 48 89 1c 24                   movq    %rbx, (%rsp)
// 44: 0f 84 52 01 00 00             je      0x19c <_JIT_ENTRY+0x19c>
// 4a: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 4f: 0f b7 c0                      movzwl  %ax, %eax
// 52: 48 c1 e0 03                   shlq    $0x3, %rax
// 56: 49 89 df                      movq    %rbx, %r15
// 59: 49 29 c7                      subq    %rax, %r15
// 5c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005e:  R_X86_64_64  _JIT_OPARG
// 66: 0f b7 c0                      movzwl  %ax, %eax
// 69: 83 f8 02                      cmpl    $0x2, %eax
// 6c: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 72: 44 0f 43 e8                   cmovael %eax, %r13d
// 76: 31 db                         xorl    %ebx, %ebx
// 78: 31 ed                         xorl    %ebp, %ebp
// 7a: eb 10                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7c: 0f 1f 40 00                   nopl    (%rax)
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 5d                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 126: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12a: 74 70                         je      0x19c <_JIT_ENTRY+0x19c>
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 0c 24                   decq    (%r12)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: ff d0                         callq   *%rax
// 17c: 49 29 ef                      subq    %rbp, %r15
// 17f: 49 83 c7 b8                   addq    $-0x48, %r15
// 183: 49 c1 ef 03                   shrq    $0x3, %r15
// 187: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: 48 83 c4 18                   addq    $0x18, %rsp
// 191: 5b                            popq    %rbx
// 192: 41 5c                         popq    %r12
// 194: 41 5d                         popq    %r13
// 196: 41 5e                         popq    %r14
// 198: 41 5f                         popq    %r15
// 19a: 5d                            popq    %rbp
// 19b: c3                            retq
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: 0f b7 c8                      movzwl  %ax, %ecx
// 1a9: 0f b7 c0                      movzwl  %ax, %eax
// 1ac: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b0: 48 f7 d8                      negq    %rax
// 1b3: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1b7: b8 01 00 00 00                movl    $0x1, %eax
// 1bc: 29 c8                         subl    %ecx, %eax
// 1be: 4c 63 f8                      movslq  %eax, %r15
// 1c1: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1c6: 29 c8                         subl    %ecx, %eax
// 1c8: f7 d1                         notl    %ecx
// 1ca: 48 63 c9                      movslq  %ecx, %rcx
// 1cd: 4c 01 f9                      addq    %r15, %rcx
// 1d0: 48 98                         cltq
// 1d2: 4c 01 f8                      addq    %r15, %rax
// 1d5: 4c 8b 2c c3                   movq    (%rbx,%rax,8), %r13
// 1d9: 48 8b 14 cb                   movq    (%rbx,%rcx,8), %rdx
// 1dd: 48 89 df                      movq    %rbx, %rdi
// 1e0: 49 8b 5d 30                   movq    0x30(%r13), %rbx
// 1e4: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 1e9: 4c 8b b6 00 01 00 00          movq    0x100(%rsi), %r14
// 1f0: 48 63 43 4c                   movslq  0x4c(%rbx), %rax
// 1f4: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1f8: 48 89 86 00 01 00 00          movq    %rax, 0x100(%rsi)
// 1ff: 4d 89 6e 10                   movq    %r13, 0x10(%r14)
// 203: 8b 03                         movl    (%rbx), %eax
// 205: ff c0                         incl    %eax
// 207: 4c 8d 24 cf                   leaq    (%rdi,%rcx,8), %r12
// 20b: 48 85 d2                      testq   %rdx, %rdx
// 20e: 0f 84 ce 00 00 00             je      0x2e2 <_JIT_ENTRY+0x2e2>
// 214: 85 c0                         testl   %eax, %eax
// 216: 74 0e                         je      0x226 <_JIT_ENTRY+0x226>
// 218: 89 03                         movl    %eax, (%rbx)
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 224: ff d0                         callq   *%rax
// 226: 49 89 1e                      movq    %rbx, (%r14)
// 229: 41 0f 10 45 10                movups  0x10(%r13), %xmm0
// 22e: 41 0f 11 46 18                movups  %xmm0, 0x18(%r14)
// 233: 49 c7 46 28 00 00 00 00       movq    $0x0, 0x28(%r14)
// 23b: 8b 4b 48                      movl    0x48(%rbx), %ecx
// 23e: 41 89 4e 40                   movl    %ecx, 0x40(%r14)
// 242: 49 c7 46 30 00 00 00 00       movq    $0x0, 0x30(%r14)
// 24a: 48 81 c3 c8 00 00 00          addq    $0xc8, %rbx
// 251: 49 89 5e 38                   movq    %rbx, 0x38(%r14)
// 255: 66 41 c7 46 44 00 00          movw    $0x0, 0x44(%r14)
// 25c: 41 c6 46 46 00                movb    $0x0, 0x46(%r14)
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_OPARG
// 26b: 44 0f b7 e8                   movzwl  %ax, %r13d
// 26f: 41 ff c5                      incl    %r13d
// 272: 45 85 ed                      testl   %r13d, %r13d
// 275: 0f 9f c2                      setg    %dl
// 278: 44 39 e9                      cmpl    %r13d, %ecx
// 27b: 0f 8e 0f 01 00 00             jle     0x390 <_JIT_ENTRY+0x390>
// 281: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000283:  R_X86_64_64  _JIT_OPARG
// 28b: 44 0f b7 fb                   movzwl  %bx, %r15d
// 28f: 45 8d 6f 01                   leal    0x1(%r15), %r13d
// 293: 4b 8d 3c ee                   leaq    (%r14,%r13,8), %rdi
// 297: 48 83 c7 48                   addq    $0x48, %rdi
// 29b: 44 89 e8                      movl    %r13d, %eax
// 29e: f7 d0                         notl    %eax
// 2a0: 01 c1                         addl    %eax, %ecx
// 2a2: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  memset
// 2b4: 31 f6                         xorl    %esi, %esi
// 2b6: ff d0                         callq   *%rax
// 2b8: 45 85 ed                      testl   %r13d, %r13d
// 2bb: 0f 8e 8f 01 00 00             jle     0x450 <_JIT_ENTRY+0x450>
// 2c1: b8 01 00 00 00                movl    $0x1, %eax
// 2c6: 44 29 f8                      subl    %r15d, %eax
// 2c9: 48 98                         cltq
// 2cb: 0f b7 cb                      movzwl  %bx, %ecx
// 2ce: 48 29 c8                      subq    %rcx, %rax
// 2d1: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2d5: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 2d9: 48 83 c0 f8                   addq    $-0x8, %rax
// 2dd: e9 db 00 00 00                jmp     0x3bd <_JIT_ENTRY+0x3bd>
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 74 0e                         je      0x2f4 <_JIT_ENTRY+0x2f4>
// 2e6: 89 03                         movl    %eax, (%rbx)
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2f2: ff d0                         callq   *%rax
// 2f4: 49 89 1e                      movq    %rbx, (%r14)
// 2f7: 41 0f 10 45 10                movups  0x10(%r13), %xmm0
// 2fc: 41 0f 11 46 18                movups  %xmm0, 0x18(%r14)
// 301: 49 c7 46 28 00 00 00 00       movq    $0x0, 0x28(%r14)
// 309: 8b 43 48                      movl    0x48(%rbx), %eax
// 30c: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 310: 49 c7 46 30 00 00 00 00       movq    $0x0, 0x30(%r14)
// 318: 48 81 c3 c8 00 00 00          addq    $0xc8, %rbx
// 31f: 49 89 5e 38                   movq    %rbx, 0x38(%r14)
// 323: 66 41 c7 46 44 00 00          movw    $0x0, 0x44(%r14)
// 32a: 41 c6 46 46 00                movb    $0x0, 0x46(%r14)
// 32f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000331:  R_X86_64_64  _JIT_OPARG
// 339: 44 0f b7 e9                   movzwl  %cx, %r13d
// 33d: 45 85 ed                      testl   %r13d, %r13d
// 340: 0f 9f c2                      setg    %dl
// 343: 44 39 e8                      cmpl    %r13d, %eax
// 346: 7e 5a                         jle     0x3a2 <_JIT_ENTRY+0x3a2>
// 348: 0f b7 d9                      movzwl  %cx, %ebx
// 34b: 49 8d 3c de                   leaq    (%r14,%rbx,8), %rdi
// 34f: 48 83 c7 48                   addq    $0x48, %rdi
// 353: 44 0f b7 e9                   movzwl  %cx, %r13d
// 357: 44 89 e9                      movl    %r13d, %ecx
// 35a: f7 d1                         notl    %ecx
// 35c: 01 c8                         addl    %ecx, %eax
// 35e: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  memset
// 370: 31 f6                         xorl    %esi, %esi
// 372: ff d0                         callq   *%rax
// 374: 45 85 ed                      testl   %r13d, %r13d
// 377: 0f 8e d3 00 00 00             jle     0x450 <_JIT_ENTRY+0x450>
// 37d: b8 01 00 00 00                movl    $0x1, %eax
// 382: 44 29 e8                      subl    %r13d, %eax
// 385: 48 98                         cltq
// 387: 48 29 d8                      subq    %rbx, %rax
// 38a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 38e: eb 29                         jmp     0x3b9 <_JIT_ENTRY+0x3b9>
// 390: f7 d0                         notl    %eax
// 392: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 398: f6 c2 01                      testb   $0x1, %dl
// 39b: 75 14                         jne     0x3b1 <_JIT_ENTRY+0x3b1>
// 39d: e9 ae 00 00 00                jmp     0x450 <_JIT_ENTRY+0x450>
// 3a2: 0f b7 c1                      movzwl  %cx, %eax
// 3a5: 48 f7 d8                      negq    %rax
// 3a8: f6 c2 01                      testb   $0x1, %dl
// 3ab: 0f 84 9f 00 00 00             je      0x450 <_JIT_ENTRY+0x450>
// 3b1: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3b5: 4a 8d 0c f9                   leaq    (%rcx,%r15,8), %rcx
// 3b9: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 3bd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 3c1: b9 01 00 00 00                movl    $0x1, %ecx
// 3c6: 41 0f 4d cd                   cmovgel %r13d, %ecx
// 3ca: 83 f9 08                      cmpl    $0x8, %ecx
// 3cd: 72 14                         jb      0x3e3 <_JIT_ENTRY+0x3e3>
// 3cf: 4c 89 f2                      movq    %r14, %rdx
// 3d2: 48 29 c2                      subq    %rax, %rdx
// 3d5: 48 83 c2 48                   addq    $0x48, %rdx
// 3d9: 48 83 fa 20                   cmpq    $0x20, %rdx
// 3dd: 0f 83 be 00 00 00             jae     0x4a1 <_JIT_ENTRY+0x4a1>
// 3e3: 31 d2                         xorl    %edx, %edx
// 3e5: 48 89 d6                      movq    %rdx, %rsi
// 3e8: 48 f7 d6                      notq    %rsi
// 3eb: 48 01 ce                      addq    %rcx, %rsi
// 3ee: 48 89 cf                      movq    %rcx, %rdi
// 3f1: 48 83 e7 03                   andq    $0x3, %rdi
// 3f5: 74 1a                         je      0x411 <_JIT_ENTRY+0x411>
// 3f7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 400: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 404: 4d 89 44 d6 48                movq    %r8, 0x48(%r14,%rdx,8)
// 409: 48 ff c2                      incq    %rdx
// 40c: 48 ff cf                      decq    %rdi
// 40f: 75 ef                         jne     0x400 <_JIT_ENTRY+0x400>
// 411: 48 83 fe 03                   cmpq    $0x3, %rsi
// 415: 72 39                         jb      0x450 <_JIT_ENTRY+0x450>
// 417: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 420: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 424: 49 89 74 d6 48                movq    %rsi, 0x48(%r14,%rdx,8)
// 429: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 42e: 49 89 74 d6 50                movq    %rsi, 0x50(%r14,%rdx,8)
// 433: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 438: 49 89 74 d6 58                movq    %rsi, 0x58(%r14,%rdx,8)
// 43d: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 442: 49 89 74 d6 60                movq    %rsi, 0x60(%r14,%rdx,8)
// 447: 48 83 c2 04                   addq    $0x4, %rdx
// 44b: 48 39 d1                      cmpq    %rdx, %rcx
// 44e: 75 d0                         jne     0x420 <_JIT_ENTRY+0x420>
// 450: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000452:  R_X86_64_64  _JIT_OPARG
// 45a: 0f b7 c0                      movzwl  %ax, %eax
// 45d: b9 01 00 00 00                movl    $0x1, %ecx
// 462: 29 c1                         subl    %eax, %ecx
// 464: 48 63 c9                      movslq  %ecx, %rcx
// 467: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 46c: 29 c2                         subl    %eax, %edx
// 46e: 48 63 c2                      movslq  %edx, %rax
// 471: 48 01 c8                      addq    %rcx, %rax
// 474: 48 8b 0c 24                   movq    (%rsp), %rcx
// 478: 4c 89 34 c1                   movq    %r14, (%rcx,%rax,8)
// 47c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047e:  R_X86_64_64  _JIT_CONTINUE
// 486: 48 89 ef                      movq    %rbp, %rdi
// 489: 4c 89 e6                      movq    %r12, %rsi
// 48c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 491: 48 83 c4 18                   addq    $0x18, %rsp
// 495: 5b                            popq    %rbx
// 496: 41 5c                         popq    %r12
// 498: 41 5d                         popq    %r13
// 49a: 41 5e                         popq    %r14
// 49c: 41 5f                         popq    %r15
// 49e: 5d                            popq    %rbp
// 49f: ff e0                         jmpq    *%rax
// 4a1: 89 ca                         movl    %ecx, %edx
// 4a3: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 4a9: 31 f6                         xorl    %esi, %esi
// 4ab: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 4b0: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 4b4: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 4b9: 41 0f 11 44 f6 48             movups  %xmm0, 0x48(%r14,%rsi,8)
// 4bf: 41 0f 11 4c f6 58             movups  %xmm1, 0x58(%r14,%rsi,8)
// 4c5: 48 83 c6 04                   addq    $0x4, %rsi
// 4c9: 48 39 f2                      cmpq    %rsi, %rdx
// 4cc: 75 e2                         jne     0x4b0 <_JIT_ENTRY+0x4b0>
// 4ce: 48 39 ca                      cmpq    %rcx, %rdx
// 4d1: 0f 84 79 ff ff ff             je      0x450 <_JIT_ENTRY+0x450>
// 4d7: e9 09 ff ff ff                jmp     0x3e5 <_JIT_ENTRY+0x3e5>
// 4dc: 
static const unsigned char _BUILD_SETplus_INIT_CALL_PY_EXACT_ARGS_code_body[1245] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0xf3, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0x84, 0x52, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x5d, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x01, 0xf9, 0x48, 0x98, 0x4c, 0x01, 0xf8, 0x4c, 0x8b, 0x2c, 0xc3, 0x48, 0x8b, 0x14, 0xcb, 0x48, 0x89, 0xdf, 0x49, 0x8b, 0x5d, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0xb6, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x43, 0x4c, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x89, 0x86, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6e, 0x10, 0x8b, 0x03, 0xff, 0xc0, 0x4c, 0x8d, 0x24, 0xcf, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x1e, 0x41, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x46, 0x18, 0x49, 0xc7, 0x46, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4b, 0x48, 0x41, 0x89, 0x4e, 0x40, 0x49, 0xc7, 0x46, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc3, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5e, 0x38, 0x66, 0x41, 0xc7, 0x46, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x46, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x41, 0xff, 0xc5, 0x45, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe9, 0x0f, 0x8e, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xfb, 0x45, 0x8d, 0x6f, 0x01, 0x4b, 0x8d, 0x3c, 0xee, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0x8f, 0x01, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x44, 0x29, 0xf8, 0x48, 0x98, 0x0f, 0xb7, 0xcb, 0x48, 0x29, 0xc8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x04, 0xc1, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0xdb, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x1e, 0x41, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x46, 0x18, 0x49, 0xc7, 0x46, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x43, 0x48, 0x41, 0x89, 0x46, 0x40, 0x49, 0xc7, 0x46, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc3, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5e, 0x38, 0x66, 0x41, 0xc7, 0x46, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x46, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe9, 0x45, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe8, 0x7e, 0x5a, 0x0f, 0xb7, 0xd9, 0x49, 0x8d, 0x3c, 0xde, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x0f, 0xb7, 0xe9, 0x44, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0xd3, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x44, 0x29, 0xe8, 0x48, 0x98, 0x48, 0x29, 0xd8, 0x48, 0x8b, 0x0c, 0x24, 0xeb, 0x29, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x75, 0x14, 0xe9, 0xae, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4a, 0x8d, 0x0c, 0xf9, 0x48, 0x8d, 0x04, 0xc1, 0x41, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x14, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x0f, 0x83, 0xbe, 0x00, 0x00, 0x00, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x1a, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd6, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x39, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd6, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd6, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd6, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd6, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x48, 0x8b, 0x0c, 0x24, 0x4c, 0x89, 0x34, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf6, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf6, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0xe9, 0x09, 0xff, 0xff, 0xff};
static const Hole _BUILD_SETplus_INIT_CALL_PY_EXACT_ARGS_code_holes[23] = {
    {0x1b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x452, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x47e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _BUILD_SETplus_INSERT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_INSERT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1b6: 48 89 de                      movq    %rbx, %rsi
// 1b9: 48 29 d6                      subq    %rdx, %rsi
// 1bc: 0f b7 c0                      movzwl  %ax, %eax
// 1bf: 4c 89 26                      movq    %r12, (%rsi)
// 1c2: be 01 00 00 00                movl    $0x1, %esi
// 1c7: 29 c6                         subl    %eax, %esi
// 1c9: 48 63 f6                      movslq  %esi, %rsi
// 1cc: 4c 8d 34 f3                   leaq    (%rbx,%rsi,8), %r14
// 1d0: 49 89 dc                      movq    %rbx, %r12
// 1d3: 48 8b 5c f3 f8                movq    -0x8(%rbx,%rsi,8), %rbx
// 1d8: f7 d0                         notl    %eax
// 1da: 4c 63 f8                      movslq  %eax, %r15
// 1dd: 49 01 f7                      addq    %rsi, %r15
// 1e0: 4b 8d 3c fc                   leaq    (%r12,%r15,8), %rdi
// 1e4: 48 29 ce                      subq    %rcx, %rsi
// 1e7: 49 8d 34 f4                   leaq    (%r12,%rsi,8), %rsi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  memmove
// 1f5: ff d0                         callq   *%rax
// 1f7: 4b 89 1c fc                   movq    %rbx, (%r12,%r15,8)
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: 4c 89 f6                      movq    %r14, %rsi
// 20b: 48 89 ea                      movq    %rbp, %rdx
// 20e: 48 83 c4 18                   addq    $0x18, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: ff e0                         jmpq    *%rax
// 21e: 
static const unsigned char _BUILD_SETplus_INSERT_code_body[543] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xde, 0x48, 0x29, 0xd6, 0x0f, 0xb7, 0xc0, 0x4c, 0x89, 0x26, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc6, 0x48, 0x63, 0xf6, 0x4c, 0x8d, 0x34, 0xf3, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x5c, 0xf3, 0xf8, 0xf7, 0xd0, 0x4c, 0x63, 0xf8, 0x49, 0x01, 0xf7, 0x4b, 0x8d, 0x3c, 0xfc, 0x48, 0x29, 0xce, 0x49, 0x8d, 0x34, 0xf4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x89, 0x1c, 0xfc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_INSERT_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_INSERT_data_holes[1];

// _BUILD_SETplus_IS_NONE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_IS_NONE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: bb 01 00 00 00                movl    $0x1, %ebx
// 1c1: b8 01 00 00 00                movl    $0x1, %eax
// 1c6: 29 c8                         subl    %ecx, %eax
// 1c8: 48 98                         cltq
// 1ca: 4d 89 f4                      movq    %r14, %r12
// 1cd: 4d 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %r14
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NoneStruct
// 1dc: 49 39 c6                      cmpq    %rax, %r14
// 1df: 74 59                         je      0x23a <_JIT_ENTRY+0x23a>
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7f 21                         jg      0x20a <_JIT_ENTRY+0x20a>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 202: 4c 89 f2                      movq    %r14, %rdx
// 205: ff d0                         callq   *%rax
// 207: 49 8b 06                      movq    (%r14), %rax
// 20a: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000020c:  R_X86_64_64  _Py_FalseStruct
// 214: 85 c0                         testl   %eax, %eax
// 216: 78 2c                         js      0x244 <_JIT_ENTRY+0x244>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 222: ff d0                         callq   *%rax
// 224: 49 ff 0e                      decq    (%r14)
// 227: 75 1b                         jne     0x244 <_JIT_ENTRY+0x244>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 f7                      movq    %r14, %rdi
// 236: ff d0                         callq   *%rax
// 238: eb 0a                         jmp     0x244 <_JIT_ENTRY+0x244>
// 23a: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000023c:  R_X86_64_64  _Py_TrueStruct
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_OPARG
// 24e: 0f b7 c0                      movzwl  %ax, %eax
// 251: 29 c3                         subl    %eax, %ebx
// 253: 48 63 c3                      movslq  %ebx, %rax
// 256: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 25a: 4d 89 7c c4 f8                movq    %r15, -0x8(%r12,%rax,8)
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_CONTINUE
// 269: 4c 89 ef                      movq    %r13, %rdi
// 26c: 48 89 ea                      movq    %rbp, %rdx
// 26f: 48 83 c4 18                   addq    $0x18, %rsp
// 273: 5b                            popq    %rbx
// 274: 41 5c                         popq    %r12
// 276: 41 5d                         popq    %r13
// 278: 41 5e                         popq    %r14
// 27a: 41 5f                         popq    %r15
// 27c: 5d                            popq    %rbp
// 27d: ff e0                         jmpq    *%rax
// 27f: 
static const unsigned char _BUILD_SETplus_IS_NONE_code_body[640] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x89, 0xf4, 0x4d, 0x8b, 0x74, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc6, 0x74, 0x59, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x0a, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x49, 0x8d, 0x34, 0xc4, 0x4d, 0x89, 0x7c, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_IS_NONE_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_IS_NONE_data_holes[1];

// _BUILD_SETplus_IS_OP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_IS_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 53 01 00 00             je      0x19c <_JIT_ENTRY+0x19c>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 5d                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 126: 4c 8b 34 24                   movq    (%rsp), %r14
// 12a: 74 70                         je      0x19c <_JIT_ENTRY+0x19c>
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 0c 24                   decq    (%r12)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: ff d0                         callq   *%rax
// 17c: 49 29 ef                      subq    %rbp, %r15
// 17f: 49 83 c7 b8                   addq    $-0x48, %r15
// 183: 49 c1 ef 03                   shrq    $0x3, %r15
// 187: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: 48 83 c4 18                   addq    $0x18, %rsp
// 191: 5b                            popq    %rbx
// 192: 41 5c                         popq    %r12
// 194: 41 5d                         popq    %r13
// 196: 41 5e                         popq    %r14
// 198: 41 5f                         popq    %r15
// 19a: 5d                            popq    %rbp
// 19b: c3                            retq
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: 0f b7 c8                      movzwl  %ax, %ecx
// 1a9: 0f b7 c0                      movzwl  %ax, %eax
// 1ac: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b0: 48 f7 d8                      negq    %rax
// 1b3: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1b7: b8 01 00 00 00                movl    $0x1, %eax
// 1bc: 29 c8                         subl    %ecx, %eax
// 1be: 48 63 d8                      movslq  %eax, %rbx
// 1c1: 4d 8b 64 de f0                movq    -0x10(%r14,%rbx,8), %r12
// 1c6: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 1cb: 49 8b 04 24                   movq    (%r12), %rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 7e 06                         jle     0x1da <_JIT_ENTRY+0x1da>
// 1d4: 85 c0                         testl   %eax, %eax
// 1d6: 79 28                         jns     0x200 <_JIT_ENTRY+0x200>
// 1d8: eb 38                         jmp     0x212 <_JIT_ENTRY+0x212>
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_NegativeRefcount
// 1ee: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 1f3: 4c 89 e2                      movq    %r12, %rdx
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 8b 04 24                   movq    (%r12), %rax
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 78 12                         js      0x212 <_JIT_ENTRY+0x212>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20a: ff d0                         callq   *%rax
// 20c: 49 ff 0c 24                   decq    (%r12)
// 210: 74 1a                         je      0x22c <_JIT_ENTRY+0x22c>
// 212: 49 8b 45 00                   movq    (%r13), %rax
// 216: 48 85 c0                      testq   %rax, %rax
// 219: 7e 29                         jle     0x244 <_JIT_ENTRY+0x244>
// 21b: 4d 89 f7                      movq    %r14, %r15
// 21e: 4d 8d 34 de                   leaq    (%r14,%rbx,8), %r14
// 222: 49 83 c6 f8                   addq    $-0x8, %r14
// 226: 85 c0                         testl   %eax, %eax
// 228: 79 4b                         jns     0x275 <_JIT_ENTRY+0x275>
// 22a: eb 6a                         jmp     0x296 <_JIT_ENTRY+0x296>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_Dealloc
// 236: 4c 89 e7                      movq    %r12, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 49 8b 45 00                   movq    (%r13), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f d7                         jg      0x21b <_JIT_ENTRY+0x21b>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 25d: 4c 89 ea                      movq    %r13, %rdx
// 260: ff d0                         callq   *%rax
// 262: 49 8b 45 00                   movq    (%r13), %rax
// 266: 4d 89 f7                      movq    %r14, %r15
// 269: 4d 8d 34 de                   leaq    (%r14,%rbx,8), %r14
// 26d: 49 83 c6 f8                   addq    $-0x8, %r14
// 271: 85 c0                         testl   %eax, %eax
// 273: 78 21                         js      0x296 <_JIT_ENTRY+0x296>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27f: ff d0                         callq   *%rax
// 281: 49 ff 4d 00                   decq    (%r13)
// 285: 75 0f                         jne     0x296 <_JIT_ENTRY+0x296>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_Dealloc
// 291: 4c 89 ef                      movq    %r13, %rdi
// 294: ff d0                         callq   *%rax
// 296: 31 c0                         xorl    %eax, %eax
// 298: 4d 39 ec                      cmpq    %r13, %r12
// 29b: 0f 94 c0                      sete    %al
// 29e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a0:  R_X86_64_64  _JIT_OPARG
// 2a8: 66 39 c8                      cmpw    %cx, %ax
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_FalseStruct
// 2b5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002b7:  R_X86_64_64  _Py_TrueStruct
// 2bf: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 2c3: 0f b7 c1                      movzwl  %cx, %eax
// 2c6: b9 01 00 00 00                movl    $0x1, %ecx
// 2cb: 29 c1                         subl    %eax, %ecx
// 2cd: 48 63 c1                      movslq  %ecx, %rax
// 2d0: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _JIT_CONTINUE
// 2df: 48 89 ef                      movq    %rbp, %rdi
// 2e2: 4c 89 f6                      movq    %r14, %rsi
// 2e5: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2ea: 48 83 c4 18                   addq    $0x18, %rsp
// 2ee: 5b                            popq    %rbx
// 2ef: 41 5c                         popq    %r12
// 2f1: 41 5d                         popq    %r13
// 2f3: 41 5e                         popq    %r14
// 2f5: 41 5f                         popq    %r15
// 2f7: 5d                            popq    %rbp
// 2f8: ff e0                         jmpq    *%rax
// 2fa: 
static const unsigned char _BUILD_SETplus_IS_OP_code_body[763] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x5d, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x29, 0x4d, 0x89, 0xf7, 0x4d, 0x8d, 0x34, 0xde, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x89, 0xf7, 0x4d, 0x8d, 0x34, 0xde, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0x0f, 0xb7, 0xc1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_IS_OP_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_IS_OP_data_holes[1];

// _BUILD_SETplus_ITER_CHECK_LIST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_ITER_CHECK_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 6c                         jmp     0x1fd <_JIT_ENTRY+0x1fd>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1be: 4c 01 ee                      addq    %r13, %rsi
// 1c1: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  PyListIter_Type
// 1d0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1d4: 74 36                         je      0x20c <_JIT_ENTRY+0x20c>
// 1d6: 48 29 de                      subq    %rbx, %rsi
// 1d9: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1dd: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e1: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e4: 48 8b 03                      movq    (%rbx), %rax
// 1e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e9:  R_X86_64_64  _JIT_TARGET
// 1f1: 89 c9                         movl    %ecx, %ecx
// 1f3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fd: 48 83 c4 18                   addq    $0x18, %rsp
// 201: 5b                            popq    %rbx
// 202: 41 5c                         popq    %r12
// 204: 41 5d                         popq    %r13
// 206: 41 5e                         popq    %r14
// 208: 41 5f                         popq    %r15
// 20a: 5d                            popq    %rbp
// 20b: c3                            retq
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_CONTINUE
// 216: 48 89 df                      movq    %rbx, %rdi
// 219: 4c 89 fa                      movq    %r15, %rdx
// 21c: 48 83 c4 18                   addq    $0x18, %rsp
// 220: 5b                            popq    %rbx
// 221: 41 5c                         popq    %r12
// 223: 41 5d                         popq    %r13
// 225: 41 5e                         popq    %r14
// 227: 41 5f                         popq    %r15
// 229: 5d                            popq    %rbp
// 22a: ff e0                         jmpq    *%rax
// 22c: 
static const unsigned char _BUILD_SETplus_ITER_CHECK_LIST_code_body[557] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_ITER_CHECK_LIST_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_ITER_CHECK_LIST_data_holes[1];

// _BUILD_SETplus_ITER_CHECK_RANGE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_ITER_CHECK_RANGE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 6c                         jmp     0x1fd <_JIT_ENTRY+0x1fd>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1be: 4c 01 ee                      addq    %r13, %rsi
// 1c1: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  PyRangeIter_Type
// 1d0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1d4: 74 36                         je      0x20c <_JIT_ENTRY+0x20c>
// 1d6: 48 29 de                      subq    %rbx, %rsi
// 1d9: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1dd: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e1: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e4: 48 8b 03                      movq    (%rbx), %rax
// 1e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e9:  R_X86_64_64  _JIT_TARGET
// 1f1: 89 c9                         movl    %ecx, %ecx
// 1f3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fd: 48 83 c4 18                   addq    $0x18, %rsp
// 201: 5b                            popq    %rbx
// 202: 41 5c                         popq    %r12
// 204: 41 5d                         popq    %r13
// 206: 41 5e                         popq    %r14
// 208: 41 5f                         popq    %r15
// 20a: 5d                            popq    %rbp
// 20b: c3                            retq
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_CONTINUE
// 216: 48 89 df                      movq    %rbx, %rdi
// 219: 4c 89 fa                      movq    %r15, %rdx
// 21c: 48 83 c4 18                   addq    $0x18, %rsp
// 220: 5b                            popq    %rbx
// 221: 41 5c                         popq    %r12
// 223: 41 5d                         popq    %r13
// 225: 41 5e                         popq    %r14
// 227: 41 5f                         popq    %r15
// 229: 5d                            popq    %rbp
// 22a: ff e0                         jmpq    *%rax
// 22c: 
static const unsigned char _BUILD_SETplus_ITER_CHECK_RANGE_code_body[557] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_ITER_CHECK_RANGE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_ITER_CHECK_RANGE_data_holes[1];

// _BUILD_SETplus_ITER_CHECK_TUPLE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_ITER_CHECK_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 6c                         jmp     0x1fd <_JIT_ENTRY+0x1fd>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1be: 4c 01 ee                      addq    %r13, %rsi
// 1c1: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  PyTupleIter_Type
// 1d0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1d4: 74 36                         je      0x20c <_JIT_ENTRY+0x20c>
// 1d6: 48 29 de                      subq    %rbx, %rsi
// 1d9: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1dd: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e1: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e4: 48 8b 03                      movq    (%rbx), %rax
// 1e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e9:  R_X86_64_64  _JIT_TARGET
// 1f1: 89 c9                         movl    %ecx, %ecx
// 1f3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fd: 48 83 c4 18                   addq    $0x18, %rsp
// 201: 5b                            popq    %rbx
// 202: 41 5c                         popq    %r12
// 204: 41 5d                         popq    %r13
// 206: 41 5e                         popq    %r14
// 208: 41 5f                         popq    %r15
// 20a: 5d                            popq    %rbp
// 20b: c3                            retq
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_CONTINUE
// 216: 48 89 df                      movq    %rbx, %rdi
// 219: 4c 89 fa                      movq    %r15, %rdx
// 21c: 48 83 c4 18                   addq    $0x18, %rsp
// 220: 5b                            popq    %rbx
// 221: 41 5c                         popq    %r12
// 223: 41 5d                         popq    %r13
// 225: 41 5e                         popq    %r14
// 227: 41 5f                         popq    %r15
// 229: 5d                            popq    %rbp
// 22a: ff e0                         jmpq    *%rax
// 22c: 
static const unsigned char _BUILD_SETplus_ITER_CHECK_TUPLE_code_body[557] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_ITER_CHECK_TUPLE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_ITER_CHECK_TUPLE_data_holes[1];

// _BUILD_SETplus_ITER_NEXT_LIST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_ITER_NEXT_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: bb 01 00 00 00                movl    $0x1, %ebx
// 1c1: b8 01 00 00 00                movl    $0x1, %eax
// 1c6: 29 c8                         subl    %ecx, %eax
// 1c8: 48 98                         cltq
// 1ca: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1cf: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 1d3: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1d7: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 1db: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 1df: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 1e3: 4d 89 f7                      movq    %r14, %r15
// 1e6: 4c 8b 34 ca                   movq    (%rdx,%rcx,8), %r14
// 1ea: 41 8b 06                      movl    (%r14), %eax
// 1ed: ff c0                         incl    %eax
// 1ef: 74 0f                         je      0x200 <_JIT_ENTRY+0x200>
// 1f1: 41 89 06                      movl    %eax, (%r14)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_OPARG
// 20a: 0f b7 c0                      movzwl  %ax, %eax
// 20d: 29 c3                         subl    %eax, %ebx
// 20f: 48 63 c3                      movslq  %ebx, %rax
// 212: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 216: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 21a: 48 83 c6 08                   addq    $0x8, %rsi
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_CONTINUE
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: 48 89 ea                      movq    %rbp, %rdx
// 22e: 48 83 c4 18                   addq    $0x18, %rsp
// 232: 5b                            popq    %rbx
// 233: 41 5c                         popq    %r12
// 235: 41 5d                         popq    %r13
// 237: 41 5e                         popq    %r14
// 239: 41 5f                         popq    %r15
// 23b: 5d                            popq    %rbp
// 23c: ff e0                         jmpq    *%rax
// 23e: 
static const unsigned char _BUILD_SETplus_ITER_NEXT_LIST_code_body[575] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4d, 0x89, 0xf7, 0x4c, 0x8b, 0x34, 0xca, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_ITER_NEXT_LIST_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_ITER_NEXT_LIST_data_holes[1];

// _BUILD_SETplus_ITER_NEXT_RANGE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_ITER_NEXT_RANGE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 dc 01 00 00             je      0x20a <_JIT_ENTRY+0x20a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 3c 24                   movq    %r15, (%rsp)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 66 85 c0                      testw   %ax, %ax
// 42: 0f 84 29 01 00 00             je      0x171 <_JIT_ENTRY+0x171>
// 48: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4d: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4c 8b 3c 24                   movq    (%rsp), %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 08                         jmp     0x88 <_JIT_ENTRY+0x88>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 74 7e                         je      0x106 <_JIT_ENTRY+0x106>
// 88: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 8c: 85 ed                         testl   %ebp, %ebp
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 49 8b 06                      movq    (%r14), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7e 24                         jle     0xbc <_JIT_ENTRY+0xbc>
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 e4                         js      0x80 <_JIT_ENTRY+0x80>
// 9c: eb 43                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9e: 66 90                         nop
// a0: 4c 89 e7                      movq    %r12, %rdi
// a3: 4c 89 f6                      movq    %r14, %rsi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PySet_Add
// b0: ff d0                         callq   *%rax
// b2: 89 c5                         movl    %eax, %ebp
// b4: 49 8b 06                      movq    (%r14), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f dc                         jg      0x98 <_JIT_ENTRY+0x98>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: ff d0                         callq   *%rax
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 85 c0                         testl   %eax, %eax
// df: 78 9f                         js      0x80 <_JIT_ENTRY+0x80>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// eb: ff d0                         callq   *%rax
// ed: 49 ff 0e                      decq    (%r14)
// f0: 75 8e                         jne     0x80 <_JIT_ENTRY+0x80>
// f2: 4c 89 f7                      movq    %r14, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: e9 7a ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 10d: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 112: 74 5d                         je      0x171 <_JIT_ENTRY+0x171>
// 114: 49 8b 04 24                   movq    (%r12), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7f 22                         jg      0x13f <_JIT_ENTRY+0x13f>
// 11d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011f:  R_X86_64_64  .rodata.str1.1
// 127: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 12c: 4c 89 e2                      movq    %r12, %rdx
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 0f 88 c3 00 00 00             js      0x20a <_JIT_ENTRY+0x20a>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 151: ff d0                         callq   *%rax
// 153: 49 ff 0c 24                   decq    (%r12)
// 157: 0f 85 ad 00 00 00             jne     0x20a <_JIT_ENTRY+0x20a>
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: ff d0                         callq   *%rax
// 16c: e9 99 00 00 00                jmp     0x20a <_JIT_ENTRY+0x20a>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _JIT_OPARG
// 17b: 0f b7 c8                      movzwl  %ax, %ecx
// 17e: 0f b7 c0                      movzwl  %ax, %eax
// 181: 48 c1 e0 03                   shlq    $0x3, %rax
// 185: 48 f7 d8                      negq    %rax
// 188: 4c 8b 3c 24                   movq    (%rsp), %r15
// 18c: 4d 89 24 07                   movq    %r12, (%r15,%rax)
// 190: bb 01 00 00 00                movl    $0x1, %ebx
// 195: b8 01 00 00 00                movl    $0x1, %eax
// 19a: 29 c8                         subl    %ecx, %eax
// 19c: 4c 63 f0                      movslq  %eax, %r14
// 19f: 4b 8b 44 f7 f8                movq    -0x8(%r15,%r14,8), %rax
// 1a4: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 1a8: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1ac: 48 01 f9                      addq    %rdi, %rcx
// 1af: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 1b3: 48 ff 48 20                   decq    0x20(%rax)
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  PyLong_FromLong
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 74 3e                         je      0x206 <_JIT_ENTRY+0x206>
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  _JIT_OPARG
// 1d2: 0f b7 c9                      movzwl  %cx, %ecx
// 1d5: 29 cb                         subl    %ecx, %ebx
// 1d7: 48 63 cb                      movslq  %ebx, %rcx
// 1da: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 1de: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 1e2: 48 83 c6 08                   addq    $0x8, %rsi
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 4c 89 ef                      movq    %r13, %rdi
// 1f3: 48 89 ea                      movq    %rbp, %rdx
// 1f6: 48 83 c4 18                   addq    $0x18, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: ff e0                         jmpq    *%rax
// 206: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 20a: 4d 29 ef                      subq    %r13, %r15
// 20d: 49 83 c7 b8                   addq    $-0x48, %r15
// 211: 49 c1 ef 03                   shrq    $0x3, %r15
// 215: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 219: 31 c0                         xorl    %eax, %eax
// 21b: 48 83 c4 18                   addq    $0x18, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: c3                            retq
// 22a: 
static const unsigned char _BUILD_SETplus_ITER_NEXT_RANGE_code_body[555] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xdc, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x29, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x08, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xad, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x3c, 0x24, 0x4d, 0x89, 0x24, 0x07, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x44, 0xf7, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x3e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xcb, 0x48, 0x63, 0xcb, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x3c, 0xf7, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_ITER_NEXT_RANGE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_ITER_NEXT_RANGE_data_holes[1];

// _BUILD_SETplus_ITER_NEXT_TUPLE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_ITER_NEXT_TUPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: bb 01 00 00 00                movl    $0x1, %ebx
// 1c1: b8 01 00 00 00                movl    $0x1, %eax
// 1c6: 29 c8                         subl    %ecx, %eax
// 1c8: 48 98                         cltq
// 1ca: 49 8b 44 c6 f8                movq    -0x8(%r14,%rax,8), %rax
// 1cf: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 1d3: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1d7: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 1db: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 1df: 4d 89 f7                      movq    %r14, %r15
// 1e2: 4c 8b 74 ca 18                movq    0x18(%rdx,%rcx,8), %r14
// 1e7: 41 8b 06                      movl    (%r14), %eax
// 1ea: ff c0                         incl    %eax
// 1ec: 74 0f                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1ee: 41 89 06                      movl    %eax, (%r14)
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1fb: ff d0                         callq   *%rax
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_OPARG
// 207: 0f b7 c0                      movzwl  %ax, %eax
// 20a: 29 c3                         subl    %eax, %ebx
// 20c: 48 63 c3                      movslq  %ebx, %rax
// 20f: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 213: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 217: 48 83 c6 08                   addq    $0x8, %rsi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _JIT_CONTINUE
// 225: 4c 89 ef                      movq    %r13, %rdi
// 228: 48 89 ea                      movq    %rbp, %rdx
// 22b: 48 83 c4 18                   addq    $0x18, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: ff e0                         jmpq    *%rax
// 23b: 
static const unsigned char _BUILD_SETplus_ITER_NEXT_TUPLE_code_body[572] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc6, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4d, 0x89, 0xf7, 0x4c, 0x8b, 0x74, 0xca, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_ITER_NEXT_TUPLE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_ITER_NEXT_TUPLE_data_holes[1];

// _BUILD_SETplus_JUMP_TO_TOP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_JUMP_TO_TOP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 44 01 00 00             je      0x188 <_JIT_ENTRY+0x188>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ee                      movq    %r13, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ed                      xorl    %r13d, %r13d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c5                      incq    %r13
// 83: 4c 39 ed                      cmpq    %r13, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c ee                   movq    (%r14,%r13,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 ee                      movq    %r13, %r14
// 11e: e9 b3 00 00 00                jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 12b: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 130: 4c 8b 2c 24                   movq    (%rsp), %r13
// 134: 74 52                         je      0x188 <_JIT_ENTRY+0x188>
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 71                         js      0x1d6 <_JIT_ENTRY+0x1d6>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 75 5f                         jne     0x1d6 <_JIT_ENTRY+0x1d6>
// 177: 4c 89 e7                      movq    %r12, %rdi
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: ff d0                         callq   *%rax
// 186: eb 4e                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 c8                      movzwl  %ax, %ecx
// 195: 0f b7 c0                      movzwl  %ax, %eax
// 198: 48 c1 e0 03                   shlq    $0x3, %rax
// 19c: 48 f7 d8                      negq    %rax
// 19f: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a4: b8 01 00 00 00                movl    $0x1, %eax
// 1a9: 29 c8                         subl    %ecx, %eax
// 1ab: 48 98                         cltq
// 1ad: 4c 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %r14
// 1b5: 4d 01 ee                      addq    %r13, %r14
// 1b8: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1bc: 48 8b 00                      movq    (%rax), %rax
// 1bf: 84 c0                         testb   %al, %al
// 1c1: 74 33                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_HandlePending
// 1cd: 4c 89 ff                      movq    %r15, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 74 20                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d6: 49 29 de                      subq    %rbx, %r14
// 1d9: 49 83 c6 b8                   addq    $-0x48, %r14
// 1dd: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e5: 31 c0                         xorl    %eax, %eax
// 1e7: 48 83 c4 18                   addq    $0x18, %rsp
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: 5d                            popq    %rbp
// 1f5: c3                            retq
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _JIT_CONTINUE
// 200: 48 89 df                      movq    %rbx, %rdi
// 203: 4c 89 f6                      movq    %r14, %rsi
// 206: 4c 89 fa                      movq    %r15, %rdx
// 209: 48 83 c4 18                   addq    $0x18, %rsp
// 20d: 5b                            popq    %rbx
// 20e: 41 5c                         popq    %r12
// 210: 41 5d                         popq    %r13
// 212: 41 5e                         popq    %r14
// 214: 41 5f                         popq    %r15
// 216: 5d                            popq    %rbp
// 217: ff e0                         jmpq    *%rax
// 219: 
static const unsigned char _BUILD_SETplus_JUMP_TO_TOP_code_body[538] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xee, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0xb3, 0x00, 0x00, 0x00, 0x45, 0x85, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x52, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x5f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x20, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_JUMP_TO_TOP_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_JUMP_TO_TOP_data_holes[1];

// _BUILD_SETplus_LIST_APPEND
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LIST_APPEND.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 2c 24                   movq    %rbp, (%rsp)
// 48: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 59: 4d 89 ee                      movq    %r13, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ee                      movq    %r13, %r14
// 11d: e9 1f 01 00 00                jmp     0x241 <_JIT_ENTRY+0x241>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 129: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 da 00 00 00             js      0x241 <_JIT_ENTRY+0x241>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 c4 00 00 00             jne     0x241 <_JIT_ENTRY+0x241>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 b0 00 00 00                jmp     0x241 <_JIT_ENTRY+0x241>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 63 d8                      movslq  %eax, %rbx
// 1b7: 49 8b 74 dd f8                movq    -0x8(%r13,%rbx,8), %rsi
// 1bc: f7 d1                         notl    %ecx
// 1be: 48 63 c1                      movslq  %ecx, %rax
// 1c1: 48 01 d8                      addq    %rbx, %rax
// 1c4: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 1c9: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1cd: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 1d1: 7e 11                         jle     0x1e4 <_JIT_ENTRY+0x1e4>
// 1d3: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 1d7: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 1db: 48 ff c0                      incq    %rax
// 1de: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 1e2: eb 10                         jmp     0x1f4 <_JIT_ENTRY+0x1f4>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 1ee: ff d0                         callq   *%rax
// 1f0: 85 c0                         testl   %eax, %eax
// 1f2: 78 2b                         js      0x21f <_JIT_ENTRY+0x21f>
// 1f4: 48 8d 34 dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %rsi
// 1fc: 4c 01 ee                      addq    %r13, %rsi
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _JIT_CONTINUE
// 209: 4c 89 ff                      movq    %r15, %rdi
// 20c: 48 89 ea                      movq    %rbp, %rdx
// 20f: 48 83 c4 18                   addq    $0x18, %rsp
// 213: 5b                            popq    %rbx
// 214: 41 5c                         popq    %r12
// 216: 41 5d                         popq    %r13
// 218: 41 5e                         popq    %r14
// 21a: 41 5f                         popq    %r15
// 21c: 5d                            popq    %rbp
// 21d: ff e0                         jmpq    *%rax
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_OPARG
// 229: 0f b7 c0                      movzwl  %ax, %eax
// 22c: b9 01 00 00 00                movl    $0x1, %ecx
// 231: 29 c1                         subl    %eax, %ecx
// 233: 48 63 c1                      movslq  %ecx, %rax
// 236: 4c 8d 34 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %r14
// 23e: 4d 01 ee                      addq    %r13, %r14
// 241: 4d 29 fe                      subq    %r15, %r14
// 244: 49 83 c6 b8                   addq    $-0x48, %r14
// 248: 49 c1 ee 03                   shrq    $0x3, %r14
// 24c: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 250: 31 c0                         xorl    %eax, %eax
// 252: 48 83 c4 18                   addq    $0x18, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: c3                            retq
// 261: 
static const unsigned char _BUILD_SETplus_LIST_APPEND_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x1f, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xc4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xb0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x74, 0xdd, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd8, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x2b, 0x48, 0x8d, 0x34, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x34, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xee, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LIST_APPEND_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LIST_APPEND_data_holes[1];

// _BUILD_SETplus_LIST_EXTEND
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LIST_EXTEND.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 2c 24                   movq    %rbp, (%rsp)
// 48: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 59: 4d 89 ee                      movq    %r13, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ee                      movq    %r13, %r14
// 11d: e9 11 02 00 00                jmp     0x333 <_JIT_ENTRY+0x333>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 129: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 cc 01 00 00             js      0x333 <_JIT_ENTRY+0x333>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 b6 01 00 00             jne     0x333 <_JIT_ENTRY+0x333>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 a2 01 00 00                jmp     0x333 <_JIT_ENTRY+0x333>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 4c 63 f0                      movslq  %eax, %r14
// 1b7: 4f 8b 64 f5 f8                movq    -0x8(%r13,%r14,8), %r12
// 1bc: f7 d1                         notl    %ecx
// 1be: 48 63 c1                      movslq  %ecx, %rax
// 1c1: 4c 01 f0                      addq    %r14, %rax
// 1c4: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _PyList_Extend
// 1d3: 4c 89 e6                      movq    %r12, %rsi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 74 7e                         je      0x25b <_JIT_ENTRY+0x25b>
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 7f 22                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 1ff: 4c 89 e2                      movq    %r12, %rdx
// 202: ff d0                         callq   *%rax
// 204: 49 8b 04 24                   movq    (%r12), %rax
// 208: 4e 8d 34 f5 f8 ff ff ff       leaq    -0x8(,%r14,8), %r14
// 210: 4d 01 ee                      addq    %r13, %r14
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 0c 24                   decq    (%r12)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 e7                      movq    %r12, %rdi
// 236: ff d0                         callq   *%rax
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_CONTINUE
// 242: 4c 89 ff                      movq    %r15, %rdi
// 245: 4c 89 f6                      movq    %r14, %rsi
// 248: 48 89 ea                      movq    %rbp, %rdx
// 24b: 48 83 c4 18                   addq    $0x18, %rsp
// 24f: 5b                            popq    %rbx
// 250: 41 5c                         popq    %r12
// 252: 41 5d                         popq    %r13
// 254: 41 5e                         popq    %r14
// 256: 41 5f                         popq    %r15
// 258: 5d                            popq    %rbp
// 259: ff e0                         jmpq    *%rax
// 25b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000025d:  R_X86_64_64  PyExc_TypeError
// 265: 48 8b 33                      movq    (%rbx), %rsi
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _PyErr_ExceptionMatches
// 272: 48 89 ef                      movq    %rbp, %rdi
// 275: ff d0                         callq   *%rax
// 277: 85 c0                         testl   %eax, %eax
// 279: 74 59                         je      0x2d4 <_JIT_ENTRY+0x2d4>
// 27b: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 280: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 288: 75 4a                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  PySequence_Check
// 294: 4c 89 e7                      movq    %r12, %rdi
// 297: ff d0                         callq   *%rax
// 299: 85 c0                         testl   %eax, %eax
// 29b: 75 37                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _PyErr_Clear
// 2a7: 48 89 ef                      movq    %rbp, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 48 8b 33                      movq    (%rbx), %rsi
// 2af: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2b4: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2b8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1+0x39
// 2c2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002c4:  R_X86_64_64  _PyErr_Format
// 2cc: 48 89 ef                      movq    %rbp, %rdi
// 2cf: 31 c0                         xorl    %eax, %eax
// 2d1: 41 ff d0                      callq   *%r8
// 2d4: 49 8b 04 24                   movq    (%r12), %rax
// 2d8: 48 85 c0                      testq   %rax, %rax
// 2db: 7f 22                         jg      0x2ff <_JIT_ENTRY+0x2ff>
// 2dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002df:  R_X86_64_64  .rodata.str1.1
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_NegativeRefcount
// 2f1: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 2f6: 4c 89 e2                      movq    %r12, %rdx
// 2f9: ff d0                         callq   *%rax
// 2fb: 49 8b 04 24                   movq    (%r12), %rax
// 2ff: 4e 8d 34 f5 00 00 00 00       leaq    (,%r14,8), %r14
// 307: 4d 01 ee                      addq    %r13, %r14
// 30a: 85 c0                         testl   %eax, %eax
// 30c: 78 21                         js      0x32f <_JIT_ENTRY+0x32f>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 318: ff d0                         callq   *%rax
// 31a: 49 ff 0c 24                   decq    (%r12)
// 31e: 75 0f                         jne     0x32f <_JIT_ENTRY+0x32f>
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_Dealloc
// 32a: 4c 89 e7                      movq    %r12, %rdi
// 32d: ff d0                         callq   *%rax
// 32f: 49 83 c6 f8                   addq    $-0x8, %r14
// 333: 4d 29 fe                      subq    %r15, %r14
// 336: 49 83 c6 b8                   addq    $-0x48, %r14
// 33a: 49 c1 ee 03                   shrq    $0x3, %r14
// 33e: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 342: 31 c0                         xorl    %eax, %eax
// 344: 48 83 c4 18                   addq    $0x18, %rsp
// 348: 5b                            popq    %rbx
// 349: 41 5c                         popq    %r12
// 34b: 41 5d                         popq    %r13
// 34d: 41 5e                         popq    %r14
// 34f: 41 5f                         popq    %r15
// 351: 5d                            popq    %rbp
// 352: c3                            retq
// 353: 
static const unsigned char _BUILD_SETplus_LIST_EXTEND_code_body[852] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x11, 0x02, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xcc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xb6, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xa2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x64, 0xf5, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x4c, 0x01, 0xf0, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x34, 0xf5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x59, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x33, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x34, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LIST_EXTEND_code_holes[30] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _BUILD_SETplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _BUILD_SETplus_LIST_EXTEND_data_holes[1];

// _BUILD_SETplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ASSERTION_ERROR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 0f b7 c0                      movzwl  %ax, %eax
// 3e: 48 c1 e0 03                   shlq    $0x3, %rax
// 42: 49 89 ef                      movq    %rbp, %r15
// 45: 49 29 c7                      subq    %rax, %r15
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 66 85 c0                      testw   %ax, %ax
// 55: 0f 84 46 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 5b: 48 89 2c 24                   movq    %rbp, (%rsp)
// 5f: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 64: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 f7                      subq    %r14, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 4d 89 27                      movq    %r12, (%r15)
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  PyExc_AssertionError
// 1ae: 48 8b 18                      movq    (%rax), %rbx
// 1b1: 8b 03                         movl    (%rbx), %eax
// 1b3: ff c0                         incl    %eax
// 1b5: 74 0e                         je      0x1c5 <_JIT_ENTRY+0x1c5>
// 1b7: 89 03                         movl    %eax, (%rbx)
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: 0f b7 c0                      movzwl  %ax, %eax
// 1d2: b9 01 00 00 00                movl    $0x1, %ecx
// 1d7: 29 c1                         subl    %eax, %ecx
// 1d9: 48 63 c1                      movslq  %ecx, %rax
// 1dc: 48 89 5c c5 00                movq    %rbx, (%rbp,%rax,8)
// 1e1: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 1e9: 48 01 ee                      addq    %rbp, %rsi
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_CONTINUE
// 1f6: 4c 89 f7                      movq    %r14, %rdi
// 1f9: 4c 89 ea                      movq    %r13, %rdx
// 1fc: 48 83 c4 18                   addq    $0x18, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: ff e0                         jmpq    *%rax
// 20c: 
static const unsigned char _BUILD_SETplus_LOAD_ASSERTION_ERROR_code_body[525] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x5c, 0xc5, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ASSERTION_ERROR_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4e 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 44: 4c 89 74 24 18                movq    %r14, 0x18(%rsp)
// 49: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 5a: 4d 89 ef                      movq    %r13, %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 10 02 00 00                jmp     0x332 <_JIT_ENTRY+0x332>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 129: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 12e: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 133: 74 5d                         je      0x192 <_JIT_ENTRY+0x192>
// 135: 49 8b 04 24                   movq    (%r12), %rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 7f 22                         jg      0x160 <_JIT_ENTRY+0x160>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14d: 4c 89 e2                      movq    %r12, %rdx
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: ff d0                         callq   *%rax
// 15c: 49 8b 04 24                   movq    (%r12), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 88 ca 01 00 00             js      0x332 <_JIT_ENTRY+0x332>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 85 b4 01 00 00             jne     0x332 <_JIT_ENTRY+0x332>
// 17e: 4c 89 e7                      movq    %r12, %rdi
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: ff d0                         callq   *%rax
// 18d: e9 a0 01 00 00                jmp     0x332 <_JIT_ENTRY+0x332>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 c8                      movzwl  %ax, %ecx
// 19f: 0f b7 d0                      movzwl  %ax, %edx
// 1a2: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1a6: 48 f7 da                      negq    %rdx
// 1a9: 4d 89 64 15 00                movq    %r12, (%r13,%rdx)
// 1ae: ba 01 00 00 00                movl    $0x1, %edx
// 1b3: 29 ca                         subl    %ecx, %edx
// 1b5: 48 63 ca                      movslq  %edx, %rcx
// 1b8: 4c 8d 3c cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %r15
// 1c0: 4d 01 ef                      addq    %r13, %r15
// 1c3: 4d 8b 64 cd f8                movq    -0x8(%r13,%rcx,8), %r12
// 1c8: 48 8b 0b                      movq    (%rbx), %rcx
// 1cb: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1cf: 89 c2                         movl    %eax, %edx
// 1d1: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 1d7: 48 8b 74 91 18                movq    0x18(%rcx,%rdx,4), %rsi
// 1dc: a8 01                         testb   $0x1, %al
// 1de: 74 40                         je      0x220 <_JIT_ENTRY+0x220>
// 1e0: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _PyObject_GetMethod
// 1f3: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1f8: 4c 89 e7                      movq    %r12, %rdi
// 1fb: ff d0                         callq   *%rax
// 1fd: 85 c0                         testl   %eax, %eax
// 1ff: 74 57                         je      0x258 <_JIT_ENTRY+0x258>
// 201: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 206: 49 89 07                      movq    %rax, (%r15)
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: a8 01                         testb   $0x1, %al
// 215: 0f 85 a0 00 00 00             jne     0x2bb <_JIT_ENTRY+0x2bb>
// 21b: e9 ad 00 00 00                jmp     0x2cd <_JIT_ENTRY+0x2cd>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  PyObject_GetAttr
// 22a: 4c 89 e7                      movq    %r12, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 234: 49 8b 04 24                   movq    (%r12), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 46                         jg      0x283 <_JIT_ENTRY+0x283>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 256: eb 22                         jmp     0x27a <_JIT_ENTRY+0x27a>
// 258: 49 8b 04 24                   movq    (%r12), %rax
// 25c: 48 85 c0                      testq   %rax, %rax
// 25f: 7f 22                         jg      0x283 <_JIT_ENTRY+0x283>
// 261: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000263:  R_X86_64_64  .rodata.str1.1
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_NegativeRefcount
// 275: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 27a: 4c 89 e2                      movq    %r12, %rdx
// 27d: ff d0                         callq   *%rax
// 27f: 49 8b 04 24                   movq    (%r12), %rax
// 283: 85 c0                         testl   %eax, %eax
// 285: 78 12                         js      0x299 <_JIT_ENTRY+0x299>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 291: ff d0                         callq   *%rax
// 293: 49 ff 0c 24                   decq    (%r12)
// 297: 74 7c                         je      0x315 <_JIT_ENTRY+0x315>
// 299: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 29e: 48 85 c0                      testq   %rax, %rax
// 2a1: 0f 84 8b 00 00 00             je      0x332 <_JIT_ENTRY+0x332>
// 2a7: 45 31 e4                      xorl    %r12d, %r12d
// 2aa: 49 89 07                      movq    %rax, (%r15)
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _JIT_OPARG
// 2b7: a8 01                         testb   $0x1, %al
// 2b9: 74 12                         je      0x2cd <_JIT_ENTRY+0x2cd>
// 2bb: 0f b7 c0                      movzwl  %ax, %eax
// 2be: b9 01 00 00 00                movl    $0x1, %ecx
// 2c3: 29 c1                         subl    %eax, %ecx
// 2c5: 48 63 c1                      movslq  %ecx, %rax
// 2c8: 4d 89 64 c5 00                movq    %r12, (%r13,%rax,8)
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _JIT_OPARG
// 2d7: 0f b7 c8                      movzwl  %ax, %ecx
// 2da: ba 01 00 00 00                movl    $0x1, %edx
// 2df: 29 ca                         subl    %ecx, %edx
// 2e1: 48 63 ca                      movslq  %edx, %rcx
// 2e4: 83 e0 01                      andl    $0x1, %eax
// 2e7: 48 01 c8                      addq    %rcx, %rax
// 2ea: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 2f2: 4c 01 ee                      addq    %r13, %rsi
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _JIT_CONTINUE
// 2ff: 48 89 df                      movq    %rbx, %rdi
// 302: 4c 89 f2                      movq    %r14, %rdx
// 305: 48 83 c4 28                   addq    $0x28, %rsp
// 309: 5b                            popq    %rbx
// 30a: 41 5c                         popq    %r12
// 30c: 41 5d                         popq    %r13
// 30e: 41 5e                         popq    %r14
// 310: 41 5f                         popq    %r15
// 312: 5d                            popq    %rbp
// 313: ff e0                         jmpq    *%rax
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_Dealloc
// 31f: 4c 89 e7                      movq    %r12, %rdi
// 322: ff d0                         callq   *%rax
// 324: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 329: 48 85 c0                      testq   %rax, %rax
// 32c: 0f 85 75 ff ff ff             jne     0x2a7 <_JIT_ENTRY+0x2a7>
// 332: 49 29 df                      subq    %rbx, %r15
// 335: 49 83 c7 b8                   addq    $-0x48, %r15
// 339: 49 c1 ef 03                   shrq    $0x3, %r15
// 33d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 341: 31 c0                         xorl    %eax, %eax
// 343: 48 83 c4 28                   addq    $0x28, %rsp
// 347: 5b                            popq    %rbx
// 348: 41 5c                         popq    %r12
// 34a: 41 5d                         popq    %r13
// 34c: 41 5e                         popq    %r14
// 34e: 41 5f                         popq    %r15
// 350: 5d                            popq    %rbp
// 351: c3                            retq
// 352: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_code_body[851] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0x10, 0x02, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xca, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xa0, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x64, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x3c, 0xcd, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xef, 0x4d, 0x8b, 0x64, 0xcd, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x89, 0xc2, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x91, 0x18, 0xa8, 0x01, 0x74, 0x40, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x57, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xa0, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x12, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc8, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x75, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_ATTR_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_CLASS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_CLASS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 f7                      subq    %r14, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1bd: b8 01 00 00 00                movl    $0x1, %eax
// 1c2: 29 c8                         subl    %ecx, %eax
// 1c4: 48 98                         cltq
// 1c6: 4c 8b 64 c5 f8                movq    -0x8(%rbp,%rax,8), %r12
// 1cb: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001cd:  R_X86_64_64  _JIT_OPERAND
// 1d5: 8b 03                         movl    (%rbx), %eax
// 1d7: ff c0                         incl    %eax
// 1d9: 75 0f                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1db: 49 8b 04 24                   movq    (%r12), %rax
// 1df: 48 85 c0                      testq   %rax, %rax
// 1e2: 7e 1d                         jle     0x201 <_JIT_ENTRY+0x201>
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 79 3f                         jns     0x227 <_JIT_ENTRY+0x227>
// 1e8: eb 5e                         jmp     0x248 <_JIT_ENTRY+0x248>
// 1ea: 89 03                         movl    %eax, (%rbx)
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 8b 04 24                   movq    (%r12), %rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 7f e3                         jg      0x1e4 <_JIT_ENTRY+0x1e4>
// 201: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000203:  R_X86_64_64  .rodata.str1.1
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_NegativeRefcount
// 215: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 21a: 4c 89 e2                      movq    %r12, %rdx
// 21d: ff d0                         callq   *%rax
// 21f: 49 8b 04 24                   movq    (%r12), %rax
// 223: 85 c0                         testl   %eax, %eax
// 225: 78 21                         js      0x248 <_JIT_ENTRY+0x248>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 231: ff d0                         callq   *%rax
// 233: 49 ff 0c 24                   decq    (%r12)
// 237: 75 0f                         jne     0x248 <_JIT_ENTRY+0x248>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_Dealloc
// 243: 4c 89 e7                      movq    %r12, %rdi
// 246: ff d0                         callq   *%rax
// 248: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024a:  R_X86_64_64  _JIT_OPARG
// 252: 0f b7 d1                      movzwl  %cx, %edx
// 255: b8 01 00 00 00                movl    $0x1, %eax
// 25a: be 01 00 00 00                movl    $0x1, %esi
// 25f: 29 d6                         subl    %edx, %esi
// 261: 48 63 d6                      movslq  %esi, %rdx
// 264: 48 89 5c d5 f8                movq    %rbx, -0x8(%rbp,%rdx,8)
// 269: f6 c1 01                      testb   $0x1, %cl
// 26c: 74 16                         je      0x284 <_JIT_ENTRY+0x284>
// 26e: 0f b7 c9                      movzwl  %cx, %ecx
// 271: ba 01 00 00 00                movl    $0x1, %edx
// 276: 29 ca                         subl    %ecx, %edx
// 278: 48 63 ca                      movslq  %edx, %rcx
// 27b: 48 c7 44 cd 00 00 00 00 00    movq    $0x0, (%rbp,%rcx,8)
// 284: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 0f b7 d1                      movzwl  %cx, %edx
// 291: 29 d0                         subl    %edx, %eax
// 293: 48 98                         cltq
// 295: 83 e1 01                      andl    $0x1, %ecx
// 298: 48 01 c1                      addq    %rax, %rcx
// 29b: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 2a3: 48 01 ee                      addq    %rbp, %rsi
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _JIT_CONTINUE
// 2b0: 4c 89 f7                      movq    %r14, %rdi
// 2b3: 4c 89 ea                      movq    %r13, %rdx
// 2b6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: ff e0                         jmpq    *%rax
// 2c6: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_CLASS_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x64, 0xc5, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1d, 0x85, 0xc0, 0x79, 0x3f, 0xeb, 0x5e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x48, 0x89, 0x5c, 0xd5, 0xf8, 0xf6, 0xc1, 0x01, 0x74, 0x16, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0xc7, 0x44, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_CLASS_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_CLASS_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_INSTANCE_VALUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 8e 00 00 00                jmp     0x225 <_JIT_ENTRY+0x225>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1b2: b8 01 00 00 00                movl    $0x1, %eax
// 1b7: 29 c8                         subl    %ecx, %eax
// 1b9: 48 98                         cltq
// 1bb: 49 8d 1c c6                   leaq    (%r14,%rax,8), %rbx
// 1bf: 4d 89 f7                      movq    %r14, %r15
// 1c2: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1c7: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  _JIT_OPERAND
// 1d6: 0f b7 c9                      movzwl  %cx, %ecx
// 1d9: 4c 8b 74 c8 01                movq    0x1(%rax,%rcx,8), %r14
// 1de: 4d 85 f6                      testq   %r14, %r14
// 1e1: 74 19                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1e3: 41 8b 06                      movl    (%r14), %eax
// 1e6: ff c0                         incl    %eax
// 1e8: 75 4a                         jne     0x234 <_JIT_ENTRY+0x234>
// 1ea: 49 8b 04 24                   movq    (%r12), %rax
// 1ee: 48 85 c0                      testq   %rax, %rax
// 1f1: 7e 59                         jle     0x24c <_JIT_ENTRY+0x24c>
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 79 7b                         jns     0x272 <_JIT_ENTRY+0x272>
// 1f7: e9 97 00 00 00                jmp     0x293 <_JIT_ENTRY+0x293>
// 1fc: 4c 29 eb                      subq    %r13, %rbx
// 1ff: 48 83 c3 b8                   addq    $-0x48, %rbx
// 203: 48 c1 eb 03                   shrq    $0x3, %rbx
// 207: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 20b: 49 8b 45 00                   movq    (%r13), %rax
// 20f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000211:  R_X86_64_64  _JIT_TARGET
// 219: 89 c9                         movl    %ecx, %ecx
// 21b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 225: 48 83 c4 18                   addq    $0x18, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: c3                            retq
// 234: 41 89 06                      movl    %eax, (%r14)
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 241: ff d0                         callq   *%rax
// 243: 49 8b 04 24                   movq    (%r12), %rax
// 247: 48 85 c0                      testq   %rax, %rax
// 24a: 7f a7                         jg      0x1f3 <_JIT_ENTRY+0x1f3>
// 24c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024e:  R_X86_64_64  .rodata.str1.1
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_NegativeRefcount
// 260: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 265: 4c 89 e2                      movq    %r12, %rdx
// 268: ff d0                         callq   *%rax
// 26a: 49 8b 04 24                   movq    (%r12), %rax
// 26e: 85 c0                         testl   %eax, %eax
// 270: 78 21                         js      0x293 <_JIT_ENTRY+0x293>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27c: ff d0                         callq   *%rax
// 27e: 49 ff 0c 24                   decq    (%r12)
// 282: 75 0f                         jne     0x293 <_JIT_ENTRY+0x293>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_Dealloc
// 28e: 4c 89 e7                      movq    %r12, %rdi
// 291: ff d0                         callq   *%rax
// 293: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000295:  R_X86_64_64  _JIT_OPARG
// 29d: 0f b7 d1                      movzwl  %cx, %edx
// 2a0: b8 01 00 00 00                movl    $0x1, %eax
// 2a5: be 01 00 00 00                movl    $0x1, %esi
// 2aa: 29 d6                         subl    %edx, %esi
// 2ac: 48 63 d6                      movslq  %esi, %rdx
// 2af: 4d 89 74 d7 f8                movq    %r14, -0x8(%r15,%rdx,8)
// 2b4: 4c 89 fe                      movq    %r15, %rsi
// 2b7: f6 c1 01                      testb   $0x1, %cl
// 2ba: 74 07                         je      0x2c3 <_JIT_ENTRY+0x2c3>
// 2bc: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 2c3: 0f b7 d1                      movzwl  %cx, %edx
// 2c6: 29 d0                         subl    %edx, %eax
// 2c8: 48 98                         cltq
// 2ca: 83 e1 01                      andl    $0x1, %ecx
// 2cd: 48 01 c1                      addq    %rax, %rcx
// 2d0: 48 8d 34 ce                   leaq    (%rsi,%rcx,8), %rsi
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _JIT_CONTINUE
// 2de: 4c 89 ef                      movq    %r13, %rdi
// 2e1: 48 89 ea                      movq    %rbp, %rdx
// 2e4: 48 83 c4 18                   addq    $0x18, %rsp
// 2e8: 5b                            popq    %rbx
// 2e9: 41 5c                         popq    %r12
// 2eb: 41 5d                         popq    %r13
// 2ed: 41 5e                         popq    %r14
// 2ef: 41 5f                         popq    %r15
// 2f1: 5d                            popq    %rbp
// 2f2: ff e0                         jmpq    *%rax
// 2f4: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_INSTANCE_VALUE_code_body[757] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x1c, 0xc6, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x74, 0xc8, 0x01, 0x4d, 0x85, 0xf6, 0x74, 0x19, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x4a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x4d, 0x89, 0x74, 0xd7, 0xf8, 0x4c, 0x89, 0xfe, 0xf6, 0xc1, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_METHOD_LAZY_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: bb 01 00 00 00                movl    $0x1, %ebx
// 1c1: b8 01 00 00 00                movl    $0x1, %eax
// 1c6: 29 c8                         subl    %ecx, %eax
// 1c8: 48 98                         cltq
// 1ca: 4d 89 f4                      movq    %r14, %r12
// 1cd: 4d 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %r14
// 1d2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001d4:  R_X86_64_64  _JIT_OPERAND
// 1dc: 41 8b 07                      movl    (%r15), %eax
// 1df: ff c0                         incl    %eax
// 1e1: 74 0f                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1e3: 41 89 07                      movl    %eax, (%r15)
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_OPARG
// 1fc: 0f b7 c0                      movzwl  %ax, %eax
// 1ff: 29 c3                         subl    %eax, %ebx
// 201: 48 63 c3                      movslq  %ebx, %rax
// 204: 4d 89 7c c4 f8                movq    %r15, -0x8(%r12,%rax,8)
// 209: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 20d: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 211: 48 83 c6 08                   addq    $0x8, %rsi
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 4c 89 ef                      movq    %r13, %rdi
// 222: 48 89 ea                      movq    %rbp, %rdx
// 225: 48 83 c4 18                   addq    $0x18, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[566] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x89, 0xf4, 0x4d, 0x8b, 0x74, 0xc6, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x7c, 0xc4, 0xf8, 0x4d, 0x89, 0x34, 0xc4, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_METHOD_NO_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: bb 01 00 00 00                movl    $0x1, %ebx
// 1c1: b8 01 00 00 00                movl    $0x1, %eax
// 1c6: 29 c8                         subl    %ecx, %eax
// 1c8: 48 98                         cltq
// 1ca: 4d 89 f4                      movq    %r14, %r12
// 1cd: 4d 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %r14
// 1d2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001d4:  R_X86_64_64  _JIT_OPERAND
// 1dc: 41 8b 07                      movl    (%r15), %eax
// 1df: ff c0                         incl    %eax
// 1e1: 74 0f                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1e3: 41 89 07                      movl    %eax, (%r15)
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_OPARG
// 1fc: 0f b7 c0                      movzwl  %ax, %eax
// 1ff: 29 c3                         subl    %eax, %ebx
// 201: 48 63 c3                      movslq  %ebx, %rax
// 204: 4d 89 7c c4 f8                movq    %r15, -0x8(%r12,%rax,8)
// 209: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 20d: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 211: 48 83 c6 08                   addq    $0x8, %rsi
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 4c 89 ef                      movq    %r13, %rdi
// 222: 48 89 ea                      movq    %rbp, %rdx
// 225: 48 83 c4 18                   addq    $0x18, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_METHOD_NO_DICT_code_body[566] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x89, 0xf4, 0x4d, 0x8b, 0x74, 0xc6, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x7c, 0xc4, 0xf8, 0x4d, 0x89, 0x34, 0xc4, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_METHOD_WITH_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: bb 01 00 00 00                movl    $0x1, %ebx
// 1c1: b8 01 00 00 00                movl    $0x1, %eax
// 1c6: 29 c8                         subl    %ecx, %eax
// 1c8: 48 98                         cltq
// 1ca: 4d 89 f4                      movq    %r14, %r12
// 1cd: 4d 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %r14
// 1d2: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001d4:  R_X86_64_64  _JIT_OPERAND
// 1dc: 41 8b 07                      movl    (%r15), %eax
// 1df: ff c0                         incl    %eax
// 1e1: 74 0f                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1e3: 41 89 07                      movl    %eax, (%r15)
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_OPARG
// 1fc: 0f b7 c0                      movzwl  %ax, %eax
// 1ff: 29 c3                         subl    %eax, %ebx
// 201: 48 63 c3                      movslq  %ebx, %rax
// 204: 4d 89 7c c4 f8                movq    %r15, -0x8(%r12,%rax,8)
// 209: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 20d: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 211: 48 83 c6 08                   addq    $0x8, %rsi
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 4c 89 ef                      movq    %r13, %rdi
// 222: 48 89 ea                      movq    %rbp, %rdx
// 225: 48 83 c4 18                   addq    $0x18, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[566] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x89, 0xf4, 0x4d, 0x8b, 0x74, 0xc6, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x7c, 0xc4, 0xf8, 0x4d, 0x89, 0x34, 0xc4, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_MODULE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_MODULE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 a5 00 00 00                jmp     0x23c <_JIT_ENTRY+0x23c>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1b2: b8 01 00 00 00                movl    $0x1, %eax
// 1b7: 29 c8                         subl    %ecx, %eax
// 1b9: 48 98                         cltq
// 1bb: 4c 8b 64 c3 f8                movq    -0x8(%rbx,%rax,8), %r12
// 1c0: 49 8b 4c 24 10                movq    0x10(%r12), %rcx
// 1c5: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 1c9: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 1cd: be 01 00 00 00                movl    $0x1, %esi
// 1d2: 48 d3 e6                      shlq    %cl, %rsi
// 1d5: 49 89 df                      movq    %rbx, %r15
// 1d8: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// 1dc: 48 01 d6                      addq    %rdx, %rsi
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_OPERAND
// 1e9: 0f b7 c0                      movzwl  %ax, %eax
// 1ec: 48 c1 e0 04                   shlq    $0x4, %rax
// 1f0: 4c 8b 74 30 28                movq    0x28(%rax,%rsi), %r14
// 1f5: 4d 85 f6                      testq   %r14, %r14
// 1f8: 74 19                         je      0x213 <_JIT_ENTRY+0x213>
// 1fa: 41 8b 06                      movl    (%r14), %eax
// 1fd: ff c0                         incl    %eax
// 1ff: 75 4a                         jne     0x24b <_JIT_ENTRY+0x24b>
// 201: 49 8b 04 24                   movq    (%r12), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7e 59                         jle     0x263 <_JIT_ENTRY+0x263>
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 79 7b                         jns     0x289 <_JIT_ENTRY+0x289>
// 20e: e9 97 00 00 00                jmp     0x2aa <_JIT_ENTRY+0x2aa>
// 213: 4c 29 eb                      subq    %r13, %rbx
// 216: 48 83 c3 b8                   addq    $-0x48, %rbx
// 21a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 21e: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 222: 49 8b 45 00                   movq    (%r13), %rax
// 226: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000228:  R_X86_64_64  _JIT_TARGET
// 230: 89 c9                         movl    %ecx, %ecx
// 232: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 236: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23c: 48 83 c4 18                   addq    $0x18, %rsp
// 240: 5b                            popq    %rbx
// 241: 41 5c                         popq    %r12
// 243: 41 5d                         popq    %r13
// 245: 41 5e                         popq    %r14
// 247: 41 5f                         popq    %r15
// 249: 5d                            popq    %rbp
// 24a: c3                            retq
// 24b: 41 89 06                      movl    %eax, (%r14)
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 04 24                   movq    (%r12), %rax
// 25e: 48 85 c0                      testq   %rax, %rax
// 261: 7f a7                         jg      0x20a <_JIT_ENTRY+0x20a>
// 263: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_NegativeRefcount
// 277: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 27c: 4c 89 e2                      movq    %r12, %rdx
// 27f: ff d0                         callq   *%rax
// 281: 49 8b 04 24                   movq    (%r12), %rax
// 285: 85 c0                         testl   %eax, %eax
// 287: 78 21                         js      0x2aa <_JIT_ENTRY+0x2aa>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 293: ff d0                         callq   *%rax
// 295: 49 ff 0c 24                   decq    (%r12)
// 299: 75 0f                         jne     0x2aa <_JIT_ENTRY+0x2aa>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: 4c 89 e7                      movq    %r12, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ac:  R_X86_64_64  _JIT_OPARG
// 2b4: 0f b7 d1                      movzwl  %cx, %edx
// 2b7: b8 01 00 00 00                movl    $0x1, %eax
// 2bc: be 01 00 00 00                movl    $0x1, %esi
// 2c1: 29 d6                         subl    %edx, %esi
// 2c3: 48 63 d6                      movslq  %esi, %rdx
// 2c6: 4d 89 74 d7 f8                movq    %r14, -0x8(%r15,%rdx,8)
// 2cb: 4c 89 fe                      movq    %r15, %rsi
// 2ce: f6 c1 01                      testb   $0x1, %cl
// 2d1: 74 07                         je      0x2da <_JIT_ENTRY+0x2da>
// 2d3: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 2da: 0f b7 d1                      movzwl  %cx, %edx
// 2dd: 29 d0                         subl    %edx, %eax
// 2df: 48 98                         cltq
// 2e1: 83 e1 01                      andl    $0x1, %ecx
// 2e4: 48 01 c1                      addq    %rax, %rcx
// 2e7: 48 8d 34 ce                   leaq    (%rsi,%rcx,8), %rsi
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _JIT_CONTINUE
// 2f5: 4c 89 ef                      movq    %r13, %rdi
// 2f8: 48 89 ea                      movq    %rbp, %rdx
// 2fb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: ff e0                         jmpq    *%rax
// 30b: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_MODULE_code_body[780] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x64, 0xc3, 0xf8, 0x49, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x49, 0x89, 0xdf, 0x48, 0x8d, 0x1c, 0xc3, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x74, 0x30, 0x28, 0x4d, 0x85, 0xf6, 0x74, 0x19, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x4a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x4d, 0x89, 0x74, 0xd7, 0xf8, 0x4c, 0x89, 0xfe, 0xf6, 0xc1, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_MODULE_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_MODULE_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1bc: b8 01 00 00 00                movl    $0x1, %eax
// 1c1: 29 c8                         subl    %ecx, %eax
// 1c3: 48 98                         cltq
// 1c5: 4c 8b 74 c3 f8                movq    -0x8(%rbx,%rax,8), %r14
// 1ca: 49 8b 06                      movq    (%r14), %rax
// 1cd: 48 85 c0                      testq   %rax, %rax
// 1d0: 7e 09                         jle     0x1db <_JIT_ENTRY+0x1db>
// 1d2: 49 89 df                      movq    %rbx, %r15
// 1d5: 85 c0                         testl   %eax, %eax
// 1d7: 79 2a                         jns     0x203 <_JIT_ENTRY+0x203>
// 1d9: eb 48                         jmp     0x223 <_JIT_ENTRY+0x223>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 1f4: 4c 89 f2                      movq    %r14, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 06                      movq    (%r14), %rax
// 1fc: 49 89 df                      movq    %rbx, %r15
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 20                         js      0x223 <_JIT_ENTRY+0x223>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 49 ff 0e                      decq    (%r14)
// 212: 75 0f                         jne     0x223 <_JIT_ENTRY+0x223>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 f7                      movq    %r14, %rdi
// 221: ff d0                         callq   *%rax
// 223: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000225:  R_X86_64_64  _JIT_OPERAND
// 22d: 8b 03                         movl    (%rbx), %eax
// 22f: ff c0                         incl    %eax
// 231: 74 0e                         je      0x241 <_JIT_ENTRY+0x241>
// 233: 89 03                         movl    %eax, (%rbx)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23f: ff d0                         callq   *%rax
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_OPARG
// 24b: 0f b7 c0                      movzwl  %ax, %eax
// 24e: b9 01 00 00 00                movl    $0x1, %ecx
// 253: 29 c1                         subl    %eax, %ecx
// 255: 48 63 c1                      movslq  %ecx, %rax
// 258: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 25c: 49 89 5c c7 f8                movq    %rbx, -0x8(%r15,%rax,8)
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_CONTINUE
// 26b: 4c 89 ef                      movq    %r13, %rdi
// 26e: 48 89 ea                      movq    %rbp, %rdx
// 271: 48 83 c4 18                   addq    $0x18, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: ff e0                         jmpq    *%rax
// 281: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[642] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x74, 0xc3, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x49, 0x89, 0xdf, 0x85, 0xc0, 0x79, 0x2a, 0xeb, 0x48, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0x89, 0xdf, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x49, 0x89, 0x5c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1bc: b8 01 00 00 00                movl    $0x1, %eax
// 1c1: 29 c8                         subl    %ecx, %eax
// 1c3: 48 98                         cltq
// 1c5: 4c 8b 74 c3 f8                movq    -0x8(%rbx,%rax,8), %r14
// 1ca: 49 8b 06                      movq    (%r14), %rax
// 1cd: 48 85 c0                      testq   %rax, %rax
// 1d0: 7e 09                         jle     0x1db <_JIT_ENTRY+0x1db>
// 1d2: 49 89 df                      movq    %rbx, %r15
// 1d5: 85 c0                         testl   %eax, %eax
// 1d7: 79 2a                         jns     0x203 <_JIT_ENTRY+0x203>
// 1d9: eb 48                         jmp     0x223 <_JIT_ENTRY+0x223>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 1f4: 4c 89 f2                      movq    %r14, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 06                      movq    (%r14), %rax
// 1fc: 49 89 df                      movq    %rbx, %r15
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 20                         js      0x223 <_JIT_ENTRY+0x223>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 49 ff 0e                      decq    (%r14)
// 212: 75 0f                         jne     0x223 <_JIT_ENTRY+0x223>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 f7                      movq    %r14, %rdi
// 221: ff d0                         callq   *%rax
// 223: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000225:  R_X86_64_64  _JIT_OPERAND
// 22d: 8b 03                         movl    (%rbx), %eax
// 22f: ff c0                         incl    %eax
// 231: 74 0e                         je      0x241 <_JIT_ENTRY+0x241>
// 233: 89 03                         movl    %eax, (%rbx)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23f: ff d0                         callq   *%rax
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_OPARG
// 24b: 0f b7 c0                      movzwl  %ax, %eax
// 24e: b9 01 00 00 00                movl    $0x1, %ecx
// 253: 29 c1                         subl    %eax, %ecx
// 255: 48 63 c1                      movslq  %ecx, %rax
// 258: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 25c: 49 89 5c c7 f8                movq    %rbx, -0x8(%r15,%rax,8)
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_CONTINUE
// 26b: 4c 89 ef                      movq    %r13, %rdi
// 26e: 48 89 ea                      movq    %rbp, %rdx
// 271: 48 83 c4 18                   addq    $0x18, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: ff e0                         jmpq    *%rax
// 281: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[642] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x74, 0xc3, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x49, 0x89, 0xdf, 0x85, 0xc0, 0x79, 0x2a, 0xeb, 0x48, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0x89, 0xdf, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x49, 0x89, 0x5c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_SLOT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_SLOT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 88 00 00 00                jmp     0x21f <_JIT_ENTRY+0x21f>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1b2: b8 01 00 00 00                movl    $0x1, %eax
// 1b7: 29 c8                         subl    %ecx, %eax
// 1b9: 48 98                         cltq
// 1bb: 49 8d 1c c6                   leaq    (%r14,%rax,8), %rbx
// 1bf: 4d 89 f7                      movq    %r14, %r15
// 1c2: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _JIT_OPERAND
// 1d1: 0f b7 c0                      movzwl  %ax, %eax
// 1d4: 4d 8b 34 04                   movq    (%r12,%rax), %r14
// 1d8: 4d 85 f6                      testq   %r14, %r14
// 1db: 74 19                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 1dd: 41 8b 06                      movl    (%r14), %eax
// 1e0: ff c0                         incl    %eax
// 1e2: 75 4a                         jne     0x22e <_JIT_ENTRY+0x22e>
// 1e4: 49 8b 04 24                   movq    (%r12), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7e 59                         jle     0x246 <_JIT_ENTRY+0x246>
// 1ed: 85 c0                         testl   %eax, %eax
// 1ef: 79 7b                         jns     0x26c <_JIT_ENTRY+0x26c>
// 1f1: e9 97 00 00 00                jmp     0x28d <_JIT_ENTRY+0x28d>
// 1f6: 4c 29 eb                      subq    %r13, %rbx
// 1f9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1fd: 48 c1 eb 03                   shrq    $0x3, %rbx
// 201: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 205: 49 8b 45 00                   movq    (%r13), %rax
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  _JIT_TARGET
// 213: 89 c9                         movl    %ecx, %ecx
// 215: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 219: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21f: 48 83 c4 18                   addq    $0x18, %rsp
// 223: 5b                            popq    %rbx
// 224: 41 5c                         popq    %r12
// 226: 41 5d                         popq    %r13
// 228: 41 5e                         popq    %r14
// 22a: 41 5f                         popq    %r15
// 22c: 5d                            popq    %rbp
// 22d: c3                            retq
// 22e: 41 89 06                      movl    %eax, (%r14)
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 04 24                   movq    (%r12), %rax
// 241: 48 85 c0                      testq   %rax, %rax
// 244: 7f a7                         jg      0x1ed <_JIT_ENTRY+0x1ed>
// 246: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000248:  R_X86_64_64  .rodata.str1.1
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_NegativeRefcount
// 25a: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 25f: 4c 89 e2                      movq    %r12, %rdx
// 262: ff d0                         callq   *%rax
// 264: 49 8b 04 24                   movq    (%r12), %rax
// 268: 85 c0                         testl   %eax, %eax
// 26a: 78 21                         js      0x28d <_JIT_ENTRY+0x28d>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 276: ff d0                         callq   *%rax
// 278: 49 ff 0c 24                   decq    (%r12)
// 27c: 75 0f                         jne     0x28d <_JIT_ENTRY+0x28d>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_Dealloc
// 288: 4c 89 e7                      movq    %r12, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028f:  R_X86_64_64  _JIT_OPARG
// 297: 0f b7 d1                      movzwl  %cx, %edx
// 29a: b8 01 00 00 00                movl    $0x1, %eax
// 29f: be 01 00 00 00                movl    $0x1, %esi
// 2a4: 29 d6                         subl    %edx, %esi
// 2a6: 48 63 d6                      movslq  %esi, %rdx
// 2a9: 4d 89 74 d7 f8                movq    %r14, -0x8(%r15,%rdx,8)
// 2ae: 4c 89 fe                      movq    %r15, %rsi
// 2b1: f6 c1 01                      testb   $0x1, %cl
// 2b4: 74 07                         je      0x2bd <_JIT_ENTRY+0x2bd>
// 2b6: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 2bd: 0f b7 d1                      movzwl  %cx, %edx
// 2c0: 29 d0                         subl    %edx, %eax
// 2c2: 48 98                         cltq
// 2c4: 83 e1 01                      andl    $0x1, %ecx
// 2c7: 48 01 c1                      addq    %rax, %rcx
// 2ca: 48 8d 34 ce                   leaq    (%rsi,%rcx,8), %rsi
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_CONTINUE
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: 48 89 ea                      movq    %rbp, %rdx
// 2de: 48 83 c4 18                   addq    $0x18, %rsp
// 2e2: 5b                            popq    %rbx
// 2e3: 41 5c                         popq    %r12
// 2e5: 41 5d                         popq    %r13
// 2e7: 41 5e                         popq    %r14
// 2e9: 41 5f                         popq    %r15
// 2eb: 5d                            popq    %rbp
// 2ec: ff e0                         jmpq    *%rax
// 2ee: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_SLOT_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x1c, 0xc6, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x34, 0x04, 0x4d, 0x85, 0xf6, 0x74, 0x19, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x4a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xa7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x4d, 0x89, 0x74, 0xd7, 0xf8, 0x4c, 0x89, 0xfe, 0xf6, 0xc1, 0x01, 0x74, 0x07, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_SLOT_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_SLOT_data_holes[1];

// _BUILD_SETplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_ATTR_WITH_HINT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 ea 00 00 00                jmp     0x281 <_JIT_ENTRY+0x281>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1b2: b8 01 00 00 00                movl    $0x1, %eax
// 1b7: 29 c8                         subl    %ecx, %eax
// 1b9: 48 98                         cltq
// 1bb: 4c 8d 34 c3                   leaq    (%rbx,%rax,8), %r14
// 1bf: 4c 8b 64 c3 f8                movq    -0x8(%rbx,%rax,8), %r12
// 1c4: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1c9: 48 8b 50 20                   movq    0x20(%rax), %rdx
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPERAND
// 1d7: 0f b7 c8                      movzwl  %ax, %ecx
// 1da: 49 8b 45 00                   movq    (%r13), %rax
// 1de: 48 39 4a 18                   cmpq    %rcx, 0x18(%rdx)
// 1e2: 76 78                         jbe     0x25c <_JIT_ENTRY+0x25c>
// 1e4: 49 89 df                      movq    %rbx, %r15
// 1e7: 48 8b 70 20                   movq    0x20(%rax), %rsi
// 1eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ed:  R_X86_64_64  _JIT_OPARG
// 1f5: 81 e7 fe ff 00 00             andl    $0xfffe, %edi           # imm = 0xFFFE
// 1fb: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 1ff: 41 b8 01 00 00 00             movl    $0x1, %r8d
// 205: 49 d3 e0                      shlq    %cl, %r8
// 208: 48 8b 74 be 18                movq    0x18(%rsi,%rdi,4), %rsi
// 20d: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
// 211: 4a 8d 4c 02 20                leaq    0x20(%rdx,%r8), %rcx
// 216: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000218:  R_X86_64_64  _JIT_OPERAND
// 220: 0f b7 d2                      movzwl  %dx, %edx
// 223: 74 2c                         je      0x251 <_JIT_ENTRY+0x251>
// 225: 48 c1 e2 04                   shlq    $0x4, %rdx
// 229: 48 39 34 11                   cmpq    %rsi, (%rcx,%rdx)
// 22d: 75 2d                         jne     0x25c <_JIT_ENTRY+0x25c>
// 22f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000231:  R_X86_64_64  _JIT_OPERAND
// 239: 0f b7 d2                      movzwl  %dx, %edx
// 23c: 48 c1 e2 04                   shlq    $0x4, %rdx
// 240: 48 01 d1                      addq    %rdx, %rcx
// 243: 48 83 c1 08                   addq    $0x8, %rcx
// 247: 48 8b 19                      movq    (%rcx), %rbx
// 24a: 48 85 db                      testq   %rbx, %rbx
// 24d: 75 62                         jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 24f: eb 0b                         jmp     0x25c <_JIT_ENTRY+0x25c>
// 251: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 255: 48 39 74 d1 08                cmpq    %rsi, 0x8(%rcx,%rdx,8)
// 25a: 74 34                         je      0x290 <_JIT_ENTRY+0x290>
// 25c: 4d 29 ee                      subq    %r13, %r14
// 25f: 49 83 c6 b8                   addq    $-0x48, %r14
// 263: 49 c1 ee 03                   shrq    $0x3, %r14
// 267: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 26b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026d:  R_X86_64_64  _JIT_TARGET
// 275: 89 c9                         movl    %ecx, %ecx
// 277: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 27b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 281: 48 83 c4 18                   addq    $0x18, %rsp
// 285: 5b                            popq    %rbx
// 286: 41 5c                         popq    %r12
// 288: 41 5d                         popq    %r13
// 28a: 41 5e                         popq    %r14
// 28c: 41 5f                         popq    %r15
// 28e: 5d                            popq    %rbp
// 28f: c3                            retq
// 290: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000292:  R_X86_64_64  _JIT_OPERAND
// 29a: 0f b7 d2                      movzwl  %dx, %edx
// 29d: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 2a1: 48 8d 0c d1                   leaq    (%rcx,%rdx,8), %rcx
// 2a5: 48 83 c1 10                   addq    $0x10, %rcx
// 2a9: 48 8b 19                      movq    (%rcx), %rbx
// 2ac: 48 85 db                      testq   %rbx, %rbx
// 2af: 74 ab                         je      0x25c <_JIT_ENTRY+0x25c>
// 2b1: 8b 03                         movl    (%rbx), %eax
// 2b3: ff c0                         incl    %eax
// 2b5: 75 0f                         jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 2b7: 49 8b 04 24                   movq    (%r12), %rax
// 2bb: 48 85 c0                      testq   %rax, %rax
// 2be: 7e 1d                         jle     0x2dd <_JIT_ENTRY+0x2dd>
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 79 3f                         jns     0x303 <_JIT_ENTRY+0x303>
// 2c4: eb 5e                         jmp     0x324 <_JIT_ENTRY+0x324>
// 2c6: 89 03                         movl    %eax, (%rbx)
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2d2: ff d0                         callq   *%rax
// 2d4: 49 8b 04 24                   movq    (%r12), %rax
// 2d8: 48 85 c0                      testq   %rax, %rax
// 2db: 7f e3                         jg      0x2c0 <_JIT_ENTRY+0x2c0>
// 2dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002df:  R_X86_64_64  .rodata.str1.1
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_NegativeRefcount
// 2f1: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 2f6: 4c 89 e2                      movq    %r12, %rdx
// 2f9: ff d0                         callq   *%rax
// 2fb: 49 8b 04 24                   movq    (%r12), %rax
// 2ff: 85 c0                         testl   %eax, %eax
// 301: 78 21                         js      0x324 <_JIT_ENTRY+0x324>
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30d: ff d0                         callq   *%rax
// 30f: 49 ff 0c 24                   decq    (%r12)
// 313: 75 0f                         jne     0x324 <_JIT_ENTRY+0x324>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_Dealloc
// 31f: 4c 89 e7                      movq    %r12, %rdi
// 322: ff d0                         callq   *%rax
// 324: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000326:  R_X86_64_64  _JIT_OPARG
// 32e: 0f b7 d1                      movzwl  %cx, %edx
// 331: b8 01 00 00 00                movl    $0x1, %eax
// 336: be 01 00 00 00                movl    $0x1, %esi
// 33b: 29 d6                         subl    %edx, %esi
// 33d: 48 63 d6                      movslq  %esi, %rdx
// 340: 49 89 5c d7 f8                movq    %rbx, -0x8(%r15,%rdx,8)
// 345: 4c 89 fe                      movq    %r15, %rsi
// 348: f6 c1 01                      testb   $0x1, %cl
// 34b: 74 07                         je      0x354 <_JIT_ENTRY+0x354>
// 34d: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 354: 0f b7 d1                      movzwl  %cx, %edx
// 357: 29 d0                         subl    %edx, %eax
// 359: 48 98                         cltq
// 35b: 83 e1 01                      andl    $0x1, %ecx
// 35e: 48 01 c1                      addq    %rax, %rcx
// 361: 48 8d 34 ce                   leaq    (%rsi,%rcx,8), %rsi
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _JIT_CONTINUE
// 36f: 4c 89 ef                      movq    %r13, %rdi
// 372: 48 89 ea                      movq    %rbp, %rdx
// 375: 48 83 c4 18                   addq    $0x18, %rsp
// 379: 5b                            popq    %rbx
// 37a: 41 5c                         popq    %r12
// 37c: 41 5d                         popq    %r13
// 37e: 41 5e                         popq    %r14
// 380: 41 5f                         popq    %r15
// 382: 5d                            popq    %rbp
// 383: ff e0                         jmpq    *%rax
// 385: 
static const unsigned char _BUILD_SETplus_LOAD_ATTR_WITH_HINT_code_body[902] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0xea, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc3, 0x4c, 0x8b, 0x64, 0xc3, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x50, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x39, 0x4a, 0x18, 0x76, 0x78, 0x49, 0x89, 0xdf, 0x48, 0x8b, 0x70, 0x20, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe7, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x4a, 0x09, 0x41, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x49, 0xd3, 0xe0, 0x48, 0x8b, 0x74, 0xbe, 0x18, 0x80, 0x7a, 0x0a, 0x00, 0x4a, 0x8d, 0x4c, 0x02, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x2c, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x34, 0x11, 0x75, 0x2d, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x01, 0xd1, 0x48, 0x83, 0xc1, 0x08, 0x48, 0x8b, 0x19, 0x48, 0x85, 0xdb, 0x75, 0x62, 0xeb, 0x0b, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x74, 0xd1, 0x08, 0x74, 0x34, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x8d, 0x0c, 0xd1, 0x48, 0x83, 0xc1, 0x10, 0x48, 0x8b, 0x19, 0x48, 0x85, 0xdb, 0x74, 0xab, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1d, 0x85, 0xc0, 0x79, 0x3f, 0xeb, 0x5e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x49, 0x89, 0x5c, 0xd7, 0xf8, 0x4c, 0x89, 0xfe, 0xf6, 0xc1, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_ATTR_WITH_HINT_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _BUILD_SETplus_LOAD_BUILD_CLASS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_BUILD_CLASS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4e 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 5a: 4d 89 ee                      movq    %r13, %r14
// 5d: 49 29 c6                      subq    %rax, %r14
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ee                      movq    %r13, %r14
// 11d: e9 42 01 00 00                jmp     0x264 <_JIT_ENTRY+0x264>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 129: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 12e: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 133: 74 5d                         je      0x192 <_JIT_ENTRY+0x192>
// 135: 49 8b 04 24                   movq    (%r12), %rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 7f 22                         jg      0x160 <_JIT_ENTRY+0x160>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14d: 4c 89 e2                      movq    %r12, %rdx
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: ff d0                         callq   *%rax
// 15c: 49 8b 04 24                   movq    (%r12), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 88 fc 00 00 00             js      0x264 <_JIT_ENTRY+0x264>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 85 e6 00 00 00             jne     0x264 <_JIT_ENTRY+0x264>
// 17e: 4c 89 e7                      movq    %r12, %rdi
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: ff d0                         callq   *%rax
// 18d: e9 d2 00 00 00                jmp     0x264 <_JIT_ENTRY+0x264>
// 192: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 c3                      movzwl  %bx, %eax
// 19f: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a3: 48 f7 d8                      negq    %rax
// 1a6: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ab: 49 8b 7f 20                   movq    0x20(%r15), %rdi
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  PyMapping_GetOptionalItem
// 1b9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001bb:  R_X86_64_64  _PyRuntime
// 1c3: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 1ca: 48 8d 54 24 20                leaq    0x20(%rsp), %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 77                         js      0x24c <_JIT_ENTRY+0x24c>
// 1d5: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1da: 48 85 c0                      testq   %rax, %rax
// 1dd: 74 47                         je      0x226 <_JIT_ENTRY+0x226>
// 1df: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 0f b7 c9                      movzwl  %cx, %ecx
// 1ec: ba 01 00 00 00                movl    $0x1, %edx
// 1f1: 29 ca                         subl    %ecx, %edx
// 1f3: 48 63 ca                      movslq  %edx, %rcx
// 1f6: 49 89 44 cd 00                movq    %rax, (%r13,%rcx,8)
// 1fb: 48 8d 34 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rsi
// 203: 4c 01 ee                      addq    %r13, %rsi
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _JIT_CONTINUE
// 210: 4c 89 ff                      movq    %r15, %rdi
// 213: 48 89 ea                      movq    %rbp, %rdx
// 216: 48 83 c4 28                   addq    $0x28, %rsp
// 21a: 5b                            popq    %rbx
// 21b: 41 5c                         popq    %r12
// 21d: 41 5d                         popq    %r13
// 21f: 41 5e                         popq    %r14
// 221: 41 5f                         popq    %r15
// 223: 5d                            popq    %rbp
// 224: ff e0                         jmpq    *%rax
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  PyExc_NameError
// 230: 48 8b 30                      movq    (%rax), %rsi
// 233: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000235:  R_X86_64_64  .rodata.str1.1+0x39
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _PyErr_SetString
// 247: 48 89 ef                      movq    %rbp, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 0f b7 c3                      movzwl  %bx, %eax
// 24f: b9 01 00 00 00                movl    $0x1, %ecx
// 254: 29 c1                         subl    %eax, %ecx
// 256: 48 63 c1                      movslq  %ecx, %rax
// 259: 4c 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %r14
// 261: 4d 01 ee                      addq    %r13, %r14
// 264: 4d 29 fe                      subq    %r15, %r14
// 267: 49 83 c6 b8                   addq    $-0x48, %r14
// 26b: 49 c1 ee 03                   shrq    $0x3, %r14
// 26f: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 273: 31 c0                         xorl    %eax, %eax
// 275: 48 83 c4 28                   addq    $0x28, %rsp
// 279: 5b                            popq    %rbx
// 27a: 41 5c                         popq    %r12
// 27c: 41 5d                         popq    %r13
// 27e: 41 5e                         popq    %r14
// 280: 41 5f                         popq    %r15
// 282: 5d                            popq    %rbp
// 283: c3                            retq
// 284: 
static const unsigned char _BUILD_SETplus_LOAD_BUILD_CLASS_code_body[645] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4e, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x42, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc3, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0x49, 0x8b, 0x7f, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x77, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xcd, 0x00, 0x48, 0x8d, 0x34, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x0f, 0xb7, 0xc3, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_BUILD_CLASS_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_BUILD_CLASS_data_holes[1];

// _BUILD_SETplus_LOAD_CONST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_CONST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 0f b7 c0                      movzwl  %ax, %eax
// 3e: 48 c1 e0 03                   shlq    $0x3, %rax
// 42: 49 89 ef                      movq    %rbp, %r15
// 45: 49 29 c7                      subq    %rax, %r15
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 66 85 c0                      testw   %ax, %ax
// 55: 0f 84 46 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 5b: 48 89 2c 24                   movq    %rbp, (%rsp)
// 5f: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 64: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 f7                      subq    %r14, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 4d 89 27                      movq    %r12, (%r15)
// 1a4: 49 8b 06                      movq    (%r14), %rax
// 1a7: 48 8b 40 18                   movq    0x18(%rax), %rax
// 1ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ad:  R_X86_64_64  _JIT_OPARG
// 1b5: 0f b7 c9                      movzwl  %cx, %ecx
// 1b8: 48 8b 5c c8 18                movq    0x18(%rax,%rcx,8), %rbx
// 1bd: 8b 03                         movl    (%rbx), %eax
// 1bf: ff c0                         incl    %eax
// 1c1: 74 0e                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1c3: 89 03                         movl    %eax, (%rbx)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _JIT_OPARG
// 1db: 0f b7 c0                      movzwl  %ax, %eax
// 1de: b9 01 00 00 00                movl    $0x1, %ecx
// 1e3: 29 c1                         subl    %eax, %ecx
// 1e5: 48 63 c1                      movslq  %ecx, %rax
// 1e8: 48 89 5c c5 00                movq    %rbx, (%rbp,%rax,8)
// 1ed: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 1f5: 48 01 ee                      addq    %rbp, %rsi
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_CONTINUE
// 202: 4c 89 f7                      movq    %r14, %rdi
// 205: 4c 89 ea                      movq    %r13, %rdx
// 208: 48 83 c4 18                   addq    $0x18, %rsp
// 20c: 5b                            popq    %rbx
// 20d: 41 5c                         popq    %r12
// 20f: 41 5d                         popq    %r13
// 211: 41 5e                         popq    %r14
// 213: 41 5f                         popq    %r15
// 215: 5d                            popq    %rbp
// 216: ff e0                         jmpq    *%rax
// 218: 
static const unsigned char _BUILD_SETplus_LOAD_CONST_code_body[537] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0x27, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x5c, 0xc8, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x5c, 0xc5, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_CONST_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_CONST_data_holes[1];

// _BUILD_SETplus_LOAD_DEREF
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_DEREF.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 2c 01 00 00                jmp     0x24e <_JIT_ENTRY+0x24e>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 129: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 e7 00 00 00             js      0x24e <_JIT_ENTRY+0x24e>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 d1 00 00 00             jne     0x24e <_JIT_ENTRY+0x24e>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 bd 00 00 00                jmp     0x24e <_JIT_ENTRY+0x24e>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1a6: 48 f7 da                      negq    %rdx
// 1a9: 4c 89 64 15 00                movq    %r12, (%rbp,%rdx)
// 1ae: 49 8b 4c ce 48                movq    0x48(%r14,%rcx,8), %rcx
// 1b3: 48 8b 59 10                   movq    0x10(%rcx), %rbx
// 1b7: 48 85 db                      testq   %rbx, %rbx
// 1ba: 74 5b                         je      0x217 <_JIT_ENTRY+0x217>
// 1bc: 8b 03                         movl    (%rbx), %eax
// 1be: ff c0                         incl    %eax
// 1c0: 74 0e                         je      0x1d0 <_JIT_ENTRY+0x1d0>
// 1c2: 89 03                         movl    %eax, (%rbx)
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: 0f b7 c0                      movzwl  %ax, %eax
// 1dd: b9 01 00 00 00                movl    $0x1, %ecx
// 1e2: 29 c1                         subl    %eax, %ecx
// 1e4: 48 63 c1                      movslq  %ecx, %rax
// 1e7: 48 89 5c c5 00                movq    %rbx, (%rbp,%rax,8)
// 1ec: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 1f4: 48 01 ee                      addq    %rbp, %rsi
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _JIT_CONTINUE
// 201: 4c 89 f7                      movq    %r14, %rdi
// 204: 4c 89 ea                      movq    %r13, %rdx
// 207: 48 83 c4 18                   addq    $0x18, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 0f b7 c0                      movzwl  %ax, %eax
// 21a: b9 01 00 00 00                movl    $0x1, %ecx
// 21f: 29 c1                         subl    %eax, %ecx
// 221: 48 63 c1                      movslq  %ecx, %rax
// 224: 4c 8d 3c c5 00 00 00 00       leaq    (,%rax,8), %r15
// 22c: 49 01 ef                      addq    %rbp, %r15
// 22f: 49 8b 36                      movq    (%r14), %rsi
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _JIT_OPARG
// 23c: 0f b7 d0                      movzwl  %ax, %edx
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _PyEval_FormatExcUnbound
// 249: 4c 89 ef                      movq    %r13, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 4d 29 f7                      subq    %r14, %r15
// 251: 49 83 c7 b8                   addq    $-0x48, %r15
// 255: 49 c1 ef 03                   shrq    $0x3, %r15
// 259: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 25d: 31 c0                         xorl    %eax, %eax
// 25f: 48 83 c4 18                   addq    $0x18, %rsp
// 263: 5b                            popq    %rbx
// 264: 41 5c                         popq    %r12
// 266: 41 5d                         popq    %r13
// 268: 41 5e                         popq    %r14
// 26a: 41 5f                         popq    %r15
// 26c: 5d                            popq    %rbp
// 26d: c3                            retq
// 26e: 
static const unsigned char _BUILD_SETplus_LOAD_DEREF_code_body[623] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x2c, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xe7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xd1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xbd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x64, 0x15, 0x00, 0x49, 0x8b, 0x4c, 0xce, 0x48, 0x48, 0x8b, 0x59, 0x10, 0x48, 0x85, 0xdb, 0x74, 0x5b, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x5c, 0xc5, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x3c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xef, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_DEREF_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_DEREF_data_holes[1];

// _BUILD_SETplus_LOAD_FAST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_FAST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 0f b7 c0                      movzwl  %ax, %eax
// 3e: 48 c1 e0 03                   shlq    $0x3, %rax
// 42: 49 89 ef                      movq    %rbp, %r15
// 45: 49 29 c7                      subq    %rax, %r15
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 66 85 c0                      testw   %ax, %ax
// 55: 0f 84 46 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 5b: 48 89 2c 24                   movq    %rbp, (%rsp)
// 5f: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 64: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 f7                      subq    %r14, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 4d 89 27                      movq    %r12, (%r15)
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _JIT_OPARG
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 49 8b 5c c6 48                movq    0x48(%r14,%rax,8), %rbx
// 1b6: 8b 03                         movl    (%rbx), %eax
// 1b8: ff c0                         incl    %eax
// 1ba: 74 0e                         je      0x1ca <_JIT_ENTRY+0x1ca>
// 1bc: 89 03                         movl    %eax, (%rbx)
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: 0f b7 c0                      movzwl  %ax, %eax
// 1d7: b9 01 00 00 00                movl    $0x1, %ecx
// 1dc: 29 c1                         subl    %eax, %ecx
// 1de: 48 63 c1                      movslq  %ecx, %rax
// 1e1: 48 89 5c c5 00                movq    %rbx, (%rbp,%rax,8)
// 1e6: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 1ee: 48 01 ee                      addq    %rbp, %rsi
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 4c 89 f7                      movq    %r14, %rdi
// 1fe: 4c 89 ea                      movq    %r13, %rdx
// 201: 48 83 c4 18                   addq    $0x18, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 
static const unsigned char _BUILD_SETplus_LOAD_FAST_code_body[530] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x48, 0x89, 0x2c, 0x24, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x5c, 0xc6, 0x48, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x5c, 0xc5, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_FAST_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_FAST_data_holes[1];

// _BUILD_SETplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_FAST_AND_CLEAR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b6: 48 f7 da                      negq    %rdx
// 1b9: 4d 89 74 15 00                movq    %r14, (%r13,%rdx)
// 1be: ba 01 00 00 00                movl    $0x1, %edx
// 1c3: 29 ca                         subl    %ecx, %edx
// 1c5: 48 63 ca                      movslq  %edx, %rcx
// 1c8: 48 8b 54 c3 48                movq    0x48(%rbx,%rax,8), %rdx
// 1cd: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 1d6: 49 89 54 cd 00                movq    %rdx, (%r13,%rcx,8)
// 1db: 49 8d 74 cd 08                leaq    0x8(%r13,%rcx,8), %rsi
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _JIT_CONTINUE
// 1ea: 48 89 df                      movq    %rbx, %rdi
// 1ed: 4c 89 fa                      movq    %r15, %rdx
// 1f0: 48 83 c4 18                   addq    $0x18, %rsp
// 1f4: 5b                            popq    %rbx
// 1f5: 41 5c                         popq    %r12
// 1f7: 41 5d                         popq    %r13
// 1f9: 41 5e                         popq    %r14
// 1fb: 41 5f                         popq    %r15
// 1fd: 5d                            popq    %rbp
// 1fe: ff e0                         jmpq    *%rax
// 200: 
static const unsigned char _BUILD_SETplus_LOAD_FAST_AND_CLEAR_code_body[513] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x74, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8b, 0x54, 0xc3, 0x48, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x54, 0xcd, 0x00, 0x49, 0x8d, 0x74, 0xcd, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_FAST_AND_CLEAR_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _BUILD_SETplus_LOAD_FAST_CHECK
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_FAST_CHECK.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 4b 01 00 00                jmp     0x26d <_JIT_ENTRY+0x26d>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 06 01 00 00             js      0x26d <_JIT_ENTRY+0x26d>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 f0 00 00 00             jne     0x26d <_JIT_ENTRY+0x26d>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 dc 00 00 00                jmp     0x26d <_JIT_ENTRY+0x26d>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1a6: 48 f7 da                      negq    %rdx
// 1a9: 4d 89 24 16                   movq    %r12, (%r14,%rdx)
// 1ad: 49 8b 5c cd 48                movq    0x48(%r13,%rcx,8), %rbx
// 1b2: 48 85 db                      testq   %rbx, %rbx
// 1b5: 74 57                         je      0x20e <_JIT_ENTRY+0x20e>
// 1b7: 8b 03                         movl    (%rbx), %eax
// 1b9: ff c0                         incl    %eax
// 1bb: 74 0e                         je      0x1cb <_JIT_ENTRY+0x1cb>
// 1bd: 89 03                         movl    %eax, (%rbx)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _JIT_OPARG
// 1d5: 0f b7 c0                      movzwl  %ax, %eax
// 1d8: b9 01 00 00 00                movl    $0x1, %ecx
// 1dd: 29 c1                         subl    %eax, %ecx
// 1df: 48 63 c1                      movslq  %ecx, %rax
// 1e2: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 1e6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1ea: 48 83 c6 08                   addq    $0x8, %rsi
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_CONTINUE
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: 48 89 ea                      movq    %rbp, %rdx
// 1fe: 48 83 c4 18                   addq    $0x18, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 0f b7 c0                      movzwl  %ax, %eax
// 211: b9 01 00 00 00                movl    $0x1, %ecx
// 216: 29 c1                         subl    %eax, %ecx
// 218: 48 63 c1                      movslq  %ecx, %rax
// 21b: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  PyExc_UnboundLocalError
// 229: 4c 8b 30                      movq    (%rax), %r14
// 22c: 49 8b 45 00                   movq    (%r13), %rax
// 230: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _JIT_OPARG
// 23e: 0f b7 f0                      movzwl  %ax, %esi
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  PyTuple_GetItem
// 24b: ff d0                         callq   *%rax
// 24d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000024f:  R_X86_64_64  .rodata.str1.1+0x39
// 257: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000259:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 261: 48 89 ef                      movq    %rbp, %rdi
// 264: 4c 89 f6                      movq    %r14, %rsi
// 267: 48 89 c1                      movq    %rax, %rcx
// 26a: 41 ff d0                      callq   *%r8
// 26d: 4d 29 ef                      subq    %r13, %r15
// 270: 49 83 c7 b8                   addq    $-0x48, %r15
// 274: 49 c1 ef 03                   shrq    $0x3, %r15
// 278: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 27c: 31 c0                         xorl    %eax, %eax
// 27e: 48 83 c4 18                   addq    $0x18, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: c3                            retq
// 28d: 
static const unsigned char _BUILD_SETplus_LOAD_FAST_CHECK_code_body[654] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x4b, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xdc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x24, 0x16, 0x49, 0x8b, 0x5c, 0xcd, 0x48, 0x48, 0x85, 0xdb, 0x74, 0x57, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_FAST_CHECK_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_FAST_CHECK_data_holes[1];

// _BUILD_SETplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_FROM_DICT_OR_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// 49: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
// 5a: 4d 89 e6                      movq    %r12, %r14
// 5d: 49 29 c6                      subq    %rax, %r14
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: bd 01 00 00 00                movl    $0x1, %ebp
// 75: 0f 43 e8                      cmovael %eax, %ebp
// 78: 45 31 e4                      xorl    %r12d, %r12d
// 7b: 45 31 ff                      xorl    %r15d, %r15d
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 49 ff c4                      incq    %r12
// 83: 4c 39 e5                      cmpq    %r12, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c e6                   movq    (%r14,%r12,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 e6                      movq    %r12, %r14
// 11e: e9 c7 01 00 00                jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 12b: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 130: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 135: 74 5d                         je      0x194 <_JIT_ENTRY+0x194>
// 137: 49 8b 45 00                   movq    (%r13), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7f 22                         jg      0x162 <_JIT_ENTRY+0x162>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 80 01 00 00             js      0x2ea <_JIT_ENTRY+0x2ea>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 0f 85 6a 01 00 00             jne     0x2ea <_JIT_ENTRY+0x2ea>
// 180: 4c 89 ef                      movq    %r13, %rdi
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_Dealloc
// 18d: ff d0                         callq   *%rax
// 18f: e9 56 01 00 00                jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1ac: 48 f7 da                      negq    %rdx
// 1af: 4d 89 2c 14                   movq    %r13, (%r12,%rdx)
// 1b3: ba 01 00 00 00                movl    $0x1, %edx
// 1b8: 29 ca                         subl    %ecx, %edx
// 1ba: 48 63 ca                      movslq  %edx, %rcx
// 1bd: 4d 8d 34 cc                   leaq    (%r12,%rcx,8), %r14
// 1c1: 4d 8b 6c cc f8                movq    -0x8(%r12,%rcx,8), %r13
// 1c6: 48 8b 0b                      movq    (%rbx), %rcx
// 1c9: 48 8b 49 60                   movq    0x60(%rcx), %rcx
// 1cd: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  PyMapping_GetOptionalItem
// 1dc: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e1: 4c 89 ef                      movq    %r13, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 0f 88 fc 00 00 00             js      0x2ea <_JIT_ENTRY+0x2ea>
// 1ee: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1f4: 0f 84 94 00 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// 1fa: 49 8b 45 00                   movq    (%r13), %rax
// 1fe: 48 85 c0                      testq   %rax, %rax
// 201: 7f 22                         jg      0x225 <_JIT_ENTRY+0x225>
// 203: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000205:  R_X86_64_64  .rodata.str1.1
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_NegativeRefcount
// 217: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 21c: 4c 89 ea                      movq    %r13, %rdx
// 21f: ff d0                         callq   *%rax
// 221: 49 8b 45 00                   movq    (%r13), %rax
// 225: 85 c0                         testl   %eax, %eax
// 227: 78 21                         js      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 233: ff d0                         callq   *%rax
// 235: 49 ff 4d 00                   decq    (%r13)
// 239: 75 0f                         jne     0x24a <_JIT_ENTRY+0x24a>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 ef                      movq    %r13, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 24f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000251:  R_X86_64_64  _JIT_OPARG
// 259: 0f b7 c9                      movzwl  %cx, %ecx
// 25c: ba 01 00 00 00                movl    $0x1, %edx
// 261: 29 ca                         subl    %ecx, %edx
// 263: 48 63 ca                      movslq  %edx, %rcx
// 266: 49 89 44 cc f8                movq    %rax, -0x8(%r12,%rcx,8)
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_CONTINUE
// 275: 48 89 df                      movq    %rbx, %rdi
// 278: 4c 89 f6                      movq    %r14, %rsi
// 27b: 4c 89 fa                      movq    %r15, %rdx
// 27e: 48 83 c4 28                   addq    $0x28, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: ff e0                         jmpq    *%rax
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_OPARG
// 298: 0f b7 c0                      movzwl  %ax, %eax
// 29b: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 2a0: 48 8b 40 10                   movq    0x10(%rax), %rax
// 2a4: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2a9: 48 85 c0                      testq   %rax, %rax
// 2ac: 74 1d                         je      0x2cb <_JIT_ENTRY+0x2cb>
// 2ae: 8b 08                         movl    (%rax), %ecx
// 2b0: ff c1                         incl    %ecx
// 2b2: 0f 84 42 ff ff ff             je      0x1fa <_JIT_ENTRY+0x1fa>
// 2b8: 89 08                         movl    %ecx, (%rax)
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2c4: ff d0                         callq   *%rax
// 2c6: e9 2f ff ff ff                jmp     0x1fa <_JIT_ENTRY+0x1fa>
// 2cb: 48 8b 33                      movq    (%rbx), %rsi
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_OPARG
// 2d8: 0f b7 d0                      movzwl  %ax, %edx
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2e5: 4c 89 ff                      movq    %r15, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 29 de                      subq    %rbx, %r14
// 2ed: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f1: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2f9: 31 c0                         xorl    %eax, %eax
// 2fb: 48 83 c4 28                   addq    $0x28, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: c3                            retq
// 30a: 
static const unsigned char _BUILD_SETplus_LOAD_FROM_DICT_OR_DEREF_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x64, 0x24, 0x10, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x45, 0x31, 0xff, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe5, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xe6, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xe6, 0xe9, 0xc7, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x80, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x6a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x56, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x2c, 0x14, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4d, 0x8d, 0x34, 0xcc, 0x4d, 0x8b, 0x6c, 0xcc, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x60, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xcc, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x42, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x2f, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_FROM_DICT_OR_DEREF_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _BUILD_SETplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_FROM_DICT_OR_GLOBALS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 43: 0f 84 4b 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 49: 4c 89 64 24 18                movq    %r12, 0x18(%rsp)
// 4e: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 53: 0f b7 c0                      movzwl  %ax, %eax
// 56: 48 c1 e0 03                   shlq    $0x3, %rax
// 5a: 49 89 de                      movq    %rbx, %r14
// 5d: 49 29 c6                      subq    %rax, %r14
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: bd 01 00 00 00                movl    $0x1, %ebp
// 75: 0f 43 e8                      cmovael %eax, %ebp
// 78: 45 31 e4                      xorl    %r12d, %r12d
// 7b: 45 31 ff                      xorl    %r15d, %r15d
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 49 ff c4                      incq    %r12
// 83: 4c 39 e5                      cmpq    %r12, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c e6                   movq    (%r14,%r12,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 de                      movq    %rbx, %r14
// 11e: e9 e2 01 00 00                jmp     0x305 <_JIT_ENTRY+0x305>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 12b: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 130: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 135: 74 5d                         je      0x194 <_JIT_ENTRY+0x194>
// 137: 49 8b 45 00                   movq    (%r13), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7f 22                         jg      0x162 <_JIT_ENTRY+0x162>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14f: 4c 89 ea                      movq    %r13, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 9b 01 00 00             js      0x305 <_JIT_ENTRY+0x305>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 0f 85 85 01 00 00             jne     0x305 <_JIT_ENTRY+0x305>
// 180: 4c 89 ef                      movq    %r13, %rdi
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_Dealloc
// 18d: ff d0                         callq   *%rax
// 18f: e9 71 01 00 00                jmp     0x305 <_JIT_ENTRY+0x305>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1ac: 48 f7 da                      negq    %rdx
// 1af: 4c 89 2c 13                   movq    %r13, (%rbx,%rdx)
// 1b3: ba 01 00 00 00                movl    $0x1, %edx
// 1b8: 29 ca                         subl    %ecx, %edx
// 1ba: 48 63 ca                      movslq  %edx, %rcx
// 1bd: 4c 8d 34 cb                   leaq    (%rbx,%rcx,8), %r14
// 1c1: 4c 8b 6c cb f8                movq    -0x8(%rbx,%rcx,8), %r13
// 1c6: 49 8b 0f                      movq    (%r15), %rcx
// 1c9: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1cd: 48 8b 6c c1 18                movq    0x18(%rcx,%rax,8), %rbp
// 1d2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001d4:  R_X86_64_64  PyMapping_GetOptionalItem
// 1dc: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e1: 4c 89 ef                      movq    %r13, %rdi
// 1e4: 48 89 ee                      movq    %rbp, %rsi
// 1e7: ff d3                         callq   *%rbx
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 0f 88 14 01 00 00             js      0x305 <_JIT_ENTRY+0x305>
// 1f1: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1f7: 0f 84 99 00 00 00             je      0x296 <_JIT_ENTRY+0x296>
// 1fd: 49 8b 45 00                   movq    (%r13), %rax
// 201: 48 85 c0                      testq   %rax, %rax
// 204: 7f 22                         jg      0x228 <_JIT_ENTRY+0x228>
// 206: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000208:  R_X86_64_64  .rodata.str1.1
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_NegativeRefcount
// 21a: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: ff d0                         callq   *%rax
// 224: 49 8b 45 00                   movq    (%r13), %rax
// 228: 85 c0                         testl   %eax, %eax
// 22a: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 22f: 78 21                         js      0x252 <_JIT_ENTRY+0x252>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23b: ff d0                         callq   *%rax
// 23d: 49 ff 4d 00                   decq    (%r13)
// 241: 75 0f                         jne     0x252 <_JIT_ENTRY+0x252>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_Dealloc
// 24d: 4c 89 ef                      movq    %r13, %rdi
// 250: ff d0                         callq   *%rax
// 252: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 257: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000259:  R_X86_64_64  _JIT_OPARG
// 261: 0f b7 c9                      movzwl  %cx, %ecx
// 264: ba 01 00 00 00                movl    $0x1, %edx
// 269: 29 ca                         subl    %ecx, %edx
// 26b: 48 63 ca                      movslq  %edx, %rcx
// 26e: 48 89 44 cb f8                movq    %rax, -0x8(%rbx,%rcx,8)
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_CONTINUE
// 27d: 4c 89 ff                      movq    %r15, %rdi
// 280: 4c 89 f6                      movq    %r14, %rsi
// 283: 4c 89 e2                      movq    %r12, %rdx
// 286: 48 83 c4 28                   addq    $0x28, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: ff e0                         jmpq    *%rax
// 296: 49 8b 7f 18                   movq    0x18(%r15), %rdi
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  PyDict_GetItemRef
// 2a4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 2a9: 48 89 ee                      movq    %rbp, %rsi
// 2ac: ff d0                         callq   *%rax
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 78 53                         js      0x305 <_JIT_ENTRY+0x305>
// 2b2: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 2b8: 0f 85 3f ff ff ff             jne     0x1fd <_JIT_ENTRY+0x1fd>
// 2be: 49 8b 7f 20                   movq    0x20(%r15), %rdi
// 2c2: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 2c7: 48 89 ee                      movq    %rbp, %rsi
// 2ca: ff d3                         callq   *%rbx
// 2cc: 85 c0                         testl   %eax, %eax
// 2ce: 78 35                         js      0x305 <_JIT_ENTRY+0x305>
// 2d0: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 2d6: 0f 85 21 ff ff ff             jne     0x1fd <_JIT_ENTRY+0x1fd>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  PyExc_NameError
// 2e6: 48 8b 30                      movq    (%rax), %rsi
// 2e9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002eb:  R_X86_64_64  .rodata.str1.1+0x39
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2fd: 4c 89 e7                      movq    %r12, %rdi
// 300: 48 89 e9                      movq    %rbp, %rcx
// 303: ff d0                         callq   *%rax
// 305: 4d 29 fe                      subq    %r15, %r14
// 308: 49 83 c6 b8                   addq    $-0x48, %r14
// 30c: 49 c1 ee 03                   shrq    $0x3, %r14
// 310: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 314: 31 c0                         xorl    %eax, %eax
// 316: 48 83 c4 28                   addq    $0x28, %rsp
// 31a: 5b                            popq    %rbx
// 31b: 41 5c                         popq    %r12
// 31d: 41 5d                         popq    %r13
// 31f: 41 5e                         popq    %r14
// 321: 41 5f                         popq    %r15
// 323: 5d                            popq    %rbp
// 324: c3                            retq
// 325: 
static const unsigned char _BUILD_SETplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[806] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0x84, 0x4b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x64, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x45, 0x31, 0xff, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe5, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xe6, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xde, 0xe9, 0xe2, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x85, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x71, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x2c, 0x13, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x34, 0xcb, 0x4c, 0x8b, 0x6c, 0xcb, 0xf8, 0x49, 0x8b, 0x0f, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x6c, 0xc1, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x14, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x89, 0x44, 0xcb, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x7f, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x53, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x3f, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x7f, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0x35, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x21, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BUILD_SETplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _BUILD_SETplus_LOAD_GLOBAL
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_GLOBAL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4e 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 44: 4c 89 6c 24 18                movq    %r13, 0x18(%rsp)
// 49: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 5a: 49 89 ef                      movq    %rbp, %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 05 02 00 00                jmp     0x327 <_JIT_ENTRY+0x327>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 129: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 74 5d                         je      0x192 <_JIT_ENTRY+0x192>
// 135: 49 8b 04 24                   movq    (%r12), %rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 7f 22                         jg      0x160 <_JIT_ENTRY+0x160>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14d: 4c 89 e2                      movq    %r12, %rdx
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: ff d0                         callq   *%rax
// 15c: 49 8b 04 24                   movq    (%r12), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 88 bf 01 00 00             js      0x327 <_JIT_ENTRY+0x327>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 85 a9 01 00 00             jne     0x327 <_JIT_ENTRY+0x327>
// 17e: 4c 89 e7                      movq    %r12, %rdi
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: ff d0                         callq   *%rax
// 18d: e9 95 01 00 00                jmp     0x327 <_JIT_ENTRY+0x327>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 c8                      movzwl  %ax, %ecx
// 19f: 0f b7 d0                      movzwl  %ax, %edx
// 1a2: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1a6: 48 f7 da                      negq    %rdx
// 1a9: 4c 89 64 15 00                movq    %r12, (%rbp,%rdx)
// 1ae: ba 01 00 00 00                movl    $0x1, %edx
// 1b3: 29 ca                         subl    %ecx, %edx
// 1b5: 48 63 ca                      movslq  %edx, %rcx
// 1b8: 4c 8d 3c cd 00 00 00 00       leaq    (,%rcx,8), %r15
// 1c0: 49 01 ef                      addq    %rbp, %r15
// 1c3: 49 8b 0e                      movq    (%r14), %rcx
// 1c6: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 1ca: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1ce: 25 fe ff 00 00                andl    $0xfffe, %eax           # imm = 0xFFFE
// 1d3: 4c 8b 64 81 18                movq    0x18(%rcx,%rax,4), %r12
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  PyDict_Type
// 1e2: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1e6: 75 0e                         jne     0x1f6 <_JIT_ENTRY+0x1f6>
// 1e8: 49 8b 76 20                   movq    0x20(%r14), %rsi
// 1ec: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 1f0: 0f 84 bd 00 00 00             je      0x2b3 <_JIT_ENTRY+0x2b3>
// 1f6: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001f8:  R_X86_64_64  PyMapping_GetOptionalItem
// 200: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 205: 4c 89 e6                      movq    %r12, %rsi
// 208: ff d3                         callq   *%rbx
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 0f 88 15 01 00 00             js      0x327 <_JIT_ENTRY+0x327>
// 212: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 74 71                         je      0x28d <_JIT_ENTRY+0x28d>
// 21c: 49 89 07                      movq    %rax, (%r15)
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_OPARG
// 229: a8 01                         testb   $0x1, %al
// 22b: 74 16                         je      0x243 <_JIT_ENTRY+0x243>
// 22d: 0f b7 c0                      movzwl  %ax, %eax
// 230: b9 01 00 00 00                movl    $0x1, %ecx
// 235: 29 c1                         subl    %eax, %ecx
// 237: 48 63 c1                      movslq  %ecx, %rax
// 23a: 48 c7 44 c5 08 00 00 00 00    movq    $0x0, 0x8(%rbp,%rax,8)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_OPARG
// 24d: 0f b7 c8                      movzwl  %ax, %ecx
// 250: ba 01 00 00 00                movl    $0x1, %edx
// 255: 29 ca                         subl    %ecx, %edx
// 257: 48 63 ca                      movslq  %edx, %rcx
// 25a: 83 e0 01                      andl    $0x1, %eax
// 25d: ff c0                         incl    %eax
// 25f: 48 01 c8                      addq    %rcx, %rax
// 262: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 26a: 48 01 ee                      addq    %rbp, %rsi
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _JIT_CONTINUE
// 277: 4c 89 f7                      movq    %r14, %rdi
// 27a: 4c 89 ea                      movq    %r13, %rdx
// 27d: 48 83 c4 28                   addq    $0x28, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: ff e0                         jmpq    *%rax
// 28d: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 291: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 296: 4c 89 e6                      movq    %r12, %rsi
// 299: ff d3                         callq   *%rbx
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 0f 88 84 00 00 00             js      0x327 <_JIT_ENTRY+0x327>
// 2a3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2a8: 48 85 c0                      testq   %rax, %rax
// 2ab: 0f 85 6b ff ff ff             jne     0x21c <_JIT_ENTRY+0x21c>
// 2b1: eb 4b                         jmp     0x2fe <_JIT_ENTRY+0x2fe>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _PyDict_LoadGlobal
// 2bd: 4c 89 e2                      movq    %r12, %rdx
// 2c0: ff d0                         callq   *%rax
// 2c2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2c7: 48 85 c0                      testq   %rax, %rax
// 2ca: 74 22                         je      0x2ee <_JIT_ENTRY+0x2ee>
// 2cc: 8b 08                         movl    (%rax), %ecx
// 2ce: ff c1                         incl    %ecx
// 2d0: 0f 84 46 ff ff ff             je      0x21c <_JIT_ENTRY+0x21c>
// 2d6: 89 08                         movl    %ecx, (%rax)
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2e2: ff d0                         callq   *%rax
// 2e4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2e9: e9 2e ff ff ff                jmp     0x21c <_JIT_ENTRY+0x21c>
// 2ee: 49 8b 45 68                   movq    0x68(%r13), %rax
// 2f2: 48 85 c0                      testq   %rax, %rax
// 2f5: 74 07                         je      0x2fe <_JIT_ENTRY+0x2fe>
// 2f7: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2fc: 75 29                         jne     0x327 <_JIT_ENTRY+0x327>
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  PyExc_NameError
// 308: 48 8b 30                      movq    (%rax), %rsi
// 30b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000030d:  R_X86_64_64  .rodata.str1.1+0x39
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 31f: 4c 89 ef                      movq    %r13, %rdi
// 322: 4c 89 e1                      movq    %r12, %rcx
// 325: ff d0                         callq   *%rax
// 327: 4d 29 f7                      subq    %r14, %r15
// 32a: 49 83 c7 b8                   addq    $-0x48, %r15
// 32e: 49 c1 ef 03                   shrq    $0x3, %r15
// 332: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 336: 31 c0                         xorl    %eax, %eax
// 338: 48 83 c4 28                   addq    $0x28, %rsp
// 33c: 5b                            popq    %rbx
// 33d: 41 5c                         popq    %r12
// 33f: 41 5d                         popq    %r13
// 341: 41 5e                         popq    %r14
// 343: 41 5f                         popq    %r15
// 345: 5d                            popq    %rbp
// 346: c3                            retq
// 347: 
static const unsigned char _BUILD_SETplus_LOAD_GLOBAL_code_body[840] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x18, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x05, 0x02, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xbf, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xa9, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x95, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x64, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x3c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xef, 0x49, 0x8b, 0x0e, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x25, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x81, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x49, 0x8b, 0x76, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x15, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x71, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x16, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0xc7, 0x44, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x6b, 0xff, 0xff, 0xff, 0xeb, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x46, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x2e, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x45, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_GLOBAL_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BUILD_SETplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_GLOBAL_data_holes[1];

// _BUILD_SETplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_GLOBAL_BUILTINS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 0a 01 00 00                jmp     0x2a1 <_JIT_ENTRY+0x2a1>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1b2: b8 01 00 00 00                movl    $0x1, %eax
// 1b7: 29 c8                         subl    %ecx, %eax
// 1b9: 49 8b 4d 20                   movq    0x20(%r13), %rcx
// 1bd: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 1c1: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 1c5: be 01 00 00 00                movl    $0x1, %esi
// 1ca: 48 d3 e6                      shlq    %cl, %rsi
// 1cd: 48 98                         cltq
// 1cf: 49 89 df                      movq    %rbx, %r15
// 1d2: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// 1d6: 48 01 d6                      addq    %rdx, %rsi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_OPERAND
// 1e3: 0f b7 c0                      movzwl  %ax, %eax
// 1e6: 48 c1 e0 04                   shlq    $0x4, %rax
// 1ea: 4c 8b 74 30 28                movq    0x28(%rax,%rsi), %r14
// 1ef: 4d 85 f6                      testq   %r14, %r14
// 1f2: 0f 84 80 00 00 00             je      0x278 <_JIT_ENTRY+0x278>
// 1f8: 41 8b 06                      movl    (%r14), %eax
// 1fb: ff c0                         incl    %eax
// 1fd: 74 0f                         je      0x20e <_JIT_ENTRY+0x20e>
// 1ff: 41 89 06                      movl    %eax, (%r14)
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20c: ff d0                         callq   *%rax
// 20e: 4c 89 33                      movq    %r14, (%rbx)
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_OPARG
// 21b: a8 01                         testb   $0x1, %al
// 21d: 74 16                         je      0x235 <_JIT_ENTRY+0x235>
// 21f: 0f b7 c0                      movzwl  %ax, %eax
// 222: b9 01 00 00 00                movl    $0x1, %ecx
// 227: 29 c1                         subl    %eax, %ecx
// 229: 48 63 c1                      movslq  %ecx, %rax
// 22c: 49 c7 44 c7 08 00 00 00 00    movq    $0x0, 0x8(%r15,%rax,8)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: 0f b7 c8                      movzwl  %ax, %ecx
// 242: ba 01 00 00 00                movl    $0x1, %edx
// 247: 29 ca                         subl    %ecx, %edx
// 249: 48 63 ca                      movslq  %edx, %rcx
// 24c: 83 e0 01                      andl    $0x1, %eax
// 24f: ff c0                         incl    %eax
// 251: 48 01 c8                      addq    %rcx, %rax
// 254: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_CONTINUE
// 262: 4c 89 ef                      movq    %r13, %rdi
// 265: 48 89 ea                      movq    %rbp, %rdx
// 268: 48 83 c4 18                   addq    $0x18, %rsp
// 26c: 5b                            popq    %rbx
// 26d: 41 5c                         popq    %r12
// 26f: 41 5d                         popq    %r13
// 271: 41 5e                         popq    %r14
// 273: 41 5f                         popq    %r15
// 275: 5d                            popq    %rbp
// 276: ff e0                         jmpq    *%rax
// 278: 4c 29 eb                      subq    %r13, %rbx
// 27b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 27f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 283: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 287: 49 8b 45 00                   movq    (%r13), %rax
// 28b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028d:  R_X86_64_64  _JIT_TARGET
// 295: 89 c9                         movl    %ecx, %ecx
// 297: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 29b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a1: 48 83 c4 18                   addq    $0x18, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: c3                            retq
// 2b0: 
static const unsigned char _BUILD_SETplus_LOAD_GLOBAL_BUILTINS_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x49, 0x8b, 0x4d, 0x20, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x48, 0x98, 0x49, 0x89, 0xdf, 0x48, 0x8d, 0x1c, 0xc3, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x74, 0x30, 0x28, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x16, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xc7, 0x44, 0xc7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_GLOBAL_BUILTINS_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _BUILD_SETplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_GLOBAL_MODULE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 0a 01 00 00                jmp     0x2a1 <_JIT_ENTRY+0x2a1>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1b2: b8 01 00 00 00                movl    $0x1, %eax
// 1b7: 29 c8                         subl    %ecx, %eax
// 1b9: 49 8b 4d 18                   movq    0x18(%r13), %rcx
// 1bd: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 1c1: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 1c5: be 01 00 00 00                movl    $0x1, %esi
// 1ca: 48 d3 e6                      shlq    %cl, %rsi
// 1cd: 48 98                         cltq
// 1cf: 49 89 df                      movq    %rbx, %r15
// 1d2: 48 8d 1c c3                   leaq    (%rbx,%rax,8), %rbx
// 1d6: 48 01 d6                      addq    %rdx, %rsi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_OPERAND
// 1e3: 0f b7 c0                      movzwl  %ax, %eax
// 1e6: 48 c1 e0 04                   shlq    $0x4, %rax
// 1ea: 4c 8b 74 30 28                movq    0x28(%rax,%rsi), %r14
// 1ef: 4d 85 f6                      testq   %r14, %r14
// 1f2: 0f 84 80 00 00 00             je      0x278 <_JIT_ENTRY+0x278>
// 1f8: 41 8b 06                      movl    (%r14), %eax
// 1fb: ff c0                         incl    %eax
// 1fd: 74 0f                         je      0x20e <_JIT_ENTRY+0x20e>
// 1ff: 41 89 06                      movl    %eax, (%r14)
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20c: ff d0                         callq   *%rax
// 20e: 4c 89 33                      movq    %r14, (%rbx)
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_OPARG
// 21b: a8 01                         testb   $0x1, %al
// 21d: 74 16                         je      0x235 <_JIT_ENTRY+0x235>
// 21f: 0f b7 c0                      movzwl  %ax, %eax
// 222: b9 01 00 00 00                movl    $0x1, %ecx
// 227: 29 c1                         subl    %eax, %ecx
// 229: 48 63 c1                      movslq  %ecx, %rax
// 22c: 49 c7 44 c7 08 00 00 00 00    movq    $0x0, 0x8(%r15,%rax,8)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: 0f b7 c8                      movzwl  %ax, %ecx
// 242: ba 01 00 00 00                movl    $0x1, %edx
// 247: 29 ca                         subl    %ecx, %edx
// 249: 48 63 ca                      movslq  %edx, %rcx
// 24c: 83 e0 01                      andl    $0x1, %eax
// 24f: ff c0                         incl    %eax
// 251: 48 01 c8                      addq    %rcx, %rax
// 254: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_CONTINUE
// 262: 4c 89 ef                      movq    %r13, %rdi
// 265: 48 89 ea                      movq    %rbp, %rdx
// 268: 48 83 c4 18                   addq    $0x18, %rsp
// 26c: 5b                            popq    %rbx
// 26d: 41 5c                         popq    %r12
// 26f: 41 5d                         popq    %r13
// 271: 41 5e                         popq    %r14
// 273: 41 5f                         popq    %r15
// 275: 5d                            popq    %rbp
// 276: ff e0                         jmpq    *%rax
// 278: 4c 29 eb                      subq    %r13, %rbx
// 27b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 27f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 283: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 287: 49 8b 45 00                   movq    (%r13), %rax
// 28b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028d:  R_X86_64_64  _JIT_TARGET
// 295: 89 c9                         movl    %ecx, %ecx
// 297: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 29b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a1: 48 83 c4 18                   addq    $0x18, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: c3                            retq
// 2b0: 
static const unsigned char _BUILD_SETplus_LOAD_GLOBAL_MODULE_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x49, 0x8b, 0x4d, 0x18, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x48, 0x98, 0x49, 0x89, 0xdf, 0x48, 0x8d, 0x1c, 0xc3, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x74, 0x30, 0x28, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x16, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xc7, 0x44, 0xc7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_GLOBAL_MODULE_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _BUILD_SETplus_LOAD_LOCALS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_LOCALS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: e9 2a 01 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 129: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12e: 48 8b 2c 24                   movq    (%rsp), %rbp
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 e5 00 00 00             js      0x24c <_JIT_ENTRY+0x24c>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 cf 00 00 00             jne     0x24c <_JIT_ENTRY+0x24c>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 bb 00 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1a2: 48 f7 d9                      negq    %rcx
// 1a5: 4c 89 64 0d 00                movq    %r12, (%rbp,%rcx)
// 1aa: 49 8b 5e 28                   movq    0x28(%r14), %rbx
// 1ae: 48 85 db                      testq   %rbx, %rbx
// 1b1: 74 5b                         je      0x20e <_JIT_ENTRY+0x20e>
// 1b3: 8b 03                         movl    (%rbx), %eax
// 1b5: ff c0                         incl    %eax
// 1b7: 74 0e                         je      0x1c7 <_JIT_ENTRY+0x1c7>
// 1b9: 89 03                         movl    %eax, (%rbx)
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _JIT_OPARG
// 1d1: 0f b7 c0                      movzwl  %ax, %eax
// 1d4: b9 01 00 00 00                movl    $0x1, %ecx
// 1d9: 29 c1                         subl    %eax, %ecx
// 1db: 48 63 c1                      movslq  %ecx, %rax
// 1de: 48 89 5c c5 00                movq    %rbx, (%rbp,%rax,8)
// 1e3: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 1eb: 48 01 ee                      addq    %rbp, %rsi
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_CONTINUE
// 1f8: 4c 89 f7                      movq    %r14, %rdi
// 1fb: 4c 89 ea                      movq    %r13, %rdx
// 1fe: 48 83 c4 18                   addq    $0x18, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 0f b7 c0                      movzwl  %ax, %eax
// 211: b9 01 00 00 00                movl    $0x1, %ecx
// 216: 29 c1                         subl    %eax, %ecx
// 218: 48 63 c1                      movslq  %ecx, %rax
// 21b: 4c 8d 3c c5 00 00 00 00       leaq    (,%rax,8), %r15
// 223: 49 01 ef                      addq    %rbp, %r15
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  PyExc_SystemError
// 230: 48 8b 30                      movq    (%rax), %rsi
// 233: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000235:  R_X86_64_64  .rodata.str1.1+0x39
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _PyErr_SetString
// 247: 4c 89 ef                      movq    %r13, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 4d 29 f7                      subq    %r14, %r15
// 24f: 49 83 c7 b8                   addq    $-0x48, %r15
// 253: 49 c1 ef 03                   shrq    $0x3, %r15
// 257: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 25b: 31 c0                         xorl    %eax, %eax
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: c3                            retq
// 26c: 
static const unsigned char _BUILD_SETplus_LOAD_LOCALS_code_body[621] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xe9, 0x2a, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xe5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xcf, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4c, 0x89, 0x64, 0x0d, 0x00, 0x49, 0x8b, 0x5e, 0x28, 0x48, 0x85, 0xdb, 0x74, 0x5b, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x5c, 0xc5, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x3c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_LOCALS_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_LOCALS_data_holes[1];

// _BUILD_SETplus_LOAD_NAME
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_NAME.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4e 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 44: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 49: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 6c 24 18                movq    %r13, 0x18(%rsp)
// 5a: 4d 89 ee                      movq    %r13, %r14
// 5d: 49 29 c6                      subq    %rax, %r14
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ee                      movq    %r13, %r14
// 11d: e9 5c 01 00 00                jmp     0x27e <_JIT_ENTRY+0x27e>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 129: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 12e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 133: 74 5d                         je      0x192 <_JIT_ENTRY+0x192>
// 135: 49 8b 04 24                   movq    (%r12), %rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 7f 22                         jg      0x160 <_JIT_ENTRY+0x160>
// 13e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1
// 148: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14d: 4c 89 e2                      movq    %r12, %rdx
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_NegativeRefcount
// 15a: ff d0                         callq   *%rax
// 15c: 49 8b 04 24                   movq    (%r12), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 88 16 01 00 00             js      0x27e <_JIT_ENTRY+0x27e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 85 00 01 00 00             jne     0x27e <_JIT_ENTRY+0x27e>
// 17e: 4c 89 e7                      movq    %r12, %rdi
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: ff d0                         callq   *%rax
// 18d: e9 ec 00 00 00                jmp     0x27e <_JIT_ENTRY+0x27e>
// 192: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 41 0f b7 c6                   movzwl  %r14w, %eax
// 1a0: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a4: 48 f7 d8                      negq    %rax
// 1a7: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ac: 49 8b 7f 28                   movq    0x28(%r15), %rdi
// 1b0: 48 85 ff                      testq   %rdi, %rdi
// 1b3: 0f 84 86 00 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// 1b9: 49 8b 07                      movq    (%r15), %rax
// 1bc: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  _JIT_OPARG
// 1ca: 0f b7 c9                      movzwl  %cx, %ecx
// 1cd: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1d2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001d4:  R_X86_64_64  PyMapping_GetOptionalItem
// 1dc: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e1: 4c 89 e6                      movq    %r12, %rsi
// 1e4: ff d3                         callq   *%rbx
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 78 7b                         js      0x265 <_JIT_ENTRY+0x265>
// 1ea: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 0f 84 a6 00 00 00             je      0x29e <_JIT_ENTRY+0x29e>
// 1f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fa:  R_X86_64_64  _JIT_OPARG
// 202: 0f b7 c9                      movzwl  %cx, %ecx
// 205: ba 01 00 00 00                movl    $0x1, %edx
// 20a: 29 ca                         subl    %ecx, %edx
// 20c: 48 63 ca                      movslq  %edx, %rcx
// 20f: 49 89 44 cd 00                movq    %rax, (%r13,%rcx,8)
// 214: 48 8d 34 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rsi
// 21c: 4c 01 ee                      addq    %r13, %rsi
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_CONTINUE
// 229: 4c 89 ff                      movq    %r15, %rdi
// 22c: 48 89 ea                      movq    %rbp, %rdx
// 22f: 48 83 c4 28                   addq    $0x28, %rsp
// 233: 5b                            popq    %rbx
// 234: 41 5c                         popq    %r12
// 236: 41 5d                         popq    %r13
// 238: 41 5e                         popq    %r14
// 23a: 41 5f                         popq    %r15
// 23c: 5d                            popq    %rbp
// 23d: ff e0                         jmpq    *%rax
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  PyExc_SystemError
// 249: 48 8b 30                      movq    (%rax), %rsi
// 24c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000024e:  R_X86_64_64  .rodata.str1.1+0x56
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _PyErr_SetString
// 260: 48 89 ef                      movq    %rbp, %rdi
// 263: ff d0                         callq   *%rax
// 265: 41 0f b7 c6                   movzwl  %r14w, %eax
// 269: b9 01 00 00 00                movl    $0x1, %ecx
// 26e: 29 c1                         subl    %eax, %ecx
// 270: 48 63 c1                      movslq  %ecx, %rax
// 273: 4c 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %r14
// 27b: 4d 01 ee                      addq    %r13, %r14
// 27e: 4d 29 fe                      subq    %r15, %r14
// 281: 49 83 c6 b8                   addq    $-0x48, %r14
// 285: 49 c1 ee 03                   shrq    $0x3, %r14
// 289: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 28d: 31 c0                         xorl    %eax, %eax
// 28f: 48 83 c4 28                   addq    $0x28, %rsp
// 293: 5b                            popq    %rbx
// 294: 41 5c                         popq    %r12
// 296: 41 5d                         popq    %r13
// 298: 41 5e                         popq    %r14
// 29a: 41 5f                         popq    %r15
// 29c: 5d                            popq    %rbp
// 29d: c3                            retq
// 29e: 49 8b 7f 18                   movq    0x18(%r15), %rdi
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  PyDict_GetItemRef
// 2ac: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 2b1: 4c 89 e6                      movq    %r12, %rsi
// 2b4: ff d0                         callq   *%rax
// 2b6: 85 c0                         testl   %eax, %eax
// 2b8: 78 ab                         js      0x265 <_JIT_ENTRY+0x265>
// 2ba: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 0f 85 30 ff ff ff             jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 2c8: 49 8b 7f 20                   movq    0x20(%r15), %rdi
// 2cc: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 2d1: 4c 89 e6                      movq    %r12, %rsi
// 2d4: ff d3                         callq   *%rbx
// 2d6: 85 c0                         testl   %eax, %eax
// 2d8: 78 8b                         js      0x265 <_JIT_ENTRY+0x265>
// 2da: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2df: 48 85 c0                      testq   %rax, %rax
// 2e2: 0f 85 10 ff ff ff             jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  PyExc_NameError
// 2f2: 48 8b 30                      movq    (%rax), %rsi
// 2f5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002f7:  R_X86_64_64  .rodata.str1.1+0x39
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 309: 48 89 ef                      movq    %rbp, %rdi
// 30c: 4c 89 e1                      movq    %r12, %rcx
// 30f: ff d0                         callq   *%rax
// 311: e9 4f ff ff ff                jmp     0x265 <_JIT_ENTRY+0x265>
// 316: 
static const unsigned char _BUILD_SETplus_LOAD_NAME_code_body[791] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4e, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x18, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xee, 0xe9, 0x5c, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x16, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xec, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc6, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0x49, 0x8b, 0x7f, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0x7b, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xcd, 0x00, 0x48, 0x8d, 0x34, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0x0f, 0xb7, 0xc6, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xee, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x7f, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xab, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x30, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x7f, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0x8b, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x10, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x4f, 0xff, 0xff, 0xff};
static const Hole _BUILD_SETplus_LOAD_NAME_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _BUILD_SETplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_NAME_data_holes[1];

// _BUILD_SETplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_SUPER_ATTR_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 3f 03 00 00             je      0x36d <_JIT_ENTRY+0x36d>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 36: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _JIT_OPARG
// 45: 66 85 c0                      testw   %ax, %ax
// 48: 0f 84 2d 01 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// 4e: 48 89 1c 24                   movq    %rbx, (%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 5e: 49 29 c7                      subq    %rax, %r15
// 61: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000063:  R_X86_64_64  _JIT_OPARG
// 6b: 0f b7 c0                      movzwl  %ax, %eax
// 6e: 83 f8 02                      cmpl    $0x2, %eax
// 71: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 77: 44 0f 43 e8                   cmovael %eax, %r13d
// 7b: 31 db                         xorl    %ebx, %ebx
// 7d: 31 ed                         xorl    %ebp, %ebp
// 7f: eb 17                         jmp     0x98 <_JIT_ENTRY+0x98>
// 81: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 90: 48 ff c3                      incq    %rbx
// 93: 49 39 dd                      cmpq    %rbx, %r13
// 96: 74 7e                         je      0x116 <_JIT_ENTRY+0x116>
// 98: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 9c: 85 ed                         testl   %ebp, %ebp
// 9e: 74 10                         je      0xb0 <_JIT_ENTRY+0xb0>
// a0: 49 8b 06                      movq    (%r14), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7e 24                         jle     0xcc <_JIT_ENTRY+0xcc>
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 e4                         js      0x90 <_JIT_ENTRY+0x90>
// ac: eb 43                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// ae: 66 90                         nop
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f dc                         jg      0xa8 <_JIT_ENTRY+0xa8>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 9f                         js      0x90 <_JIT_ENTRY+0x90>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 75 8e                         jne     0x90 <_JIT_ENTRY+0x90>
// 102: 4c 89 f7                      movq    %r14, %rdi
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_Dealloc
// 10f: ff d0                         callq   *%rax
// 111: e9 7a ff ff ff                jmp     0x90 <_JIT_ENTRY+0x90>
// 116: 85 ed                         testl   %ebp, %ebp
// 118: 48 8b 1c 24                   movq    (%rsp), %rbx
// 11c: 74 5d                         je      0x17b <_JIT_ENTRY+0x17b>
// 11e: 49 8b 04 24                   movq    (%r12), %rax
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7f 22                         jg      0x149 <_JIT_ENTRY+0x149>
// 127: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000129:  R_X86_64_64  .rodata.str1.1
// 131: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 136: 4c 89 e2                      movq    %r12, %rdx
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_NegativeRefcount
// 143: ff d0                         callq   *%rax
// 145: 49 8b 04 24                   movq    (%r12), %rax
// 149: 85 c0                         testl   %eax, %eax
// 14b: 0f 88 1c 02 00 00             js      0x36d <_JIT_ENTRY+0x36d>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15b: ff d0                         callq   *%rax
// 15d: 49 ff 0c 24                   decq    (%r12)
// 161: 0f 85 06 02 00 00             jne     0x36d <_JIT_ENTRY+0x36d>
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: ff d0                         callq   *%rax
// 176: e9 f2 01 00 00                jmp     0x36d <_JIT_ENTRY+0x36d>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _JIT_OPARG
// 185: 0f b7 c8                      movzwl  %ax, %ecx
// 188: 0f b7 c0                      movzwl  %ax, %eax
// 18b: 48 c1 e0 03                   shlq    $0x3, %rax
// 18f: 48 f7 d8                      negq    %rax
// 192: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 197: 4d 89 24 07                   movq    %r12, (%r15,%rax)
// 19b: b8 01 00 00 00                movl    $0x1, %eax
// 1a0: 29 c8                         subl    %ecx, %eax
// 1a2: 4c 63 f0                      movslq  %eax, %r14
// 1a5: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a7:  R_X86_64_64  PySuper_Type
// 1af: 4f 39 6c f7 e8                cmpq    %r13, -0x18(%r15,%r14,8)
// 1b4: 75 12                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 1b6: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 1bb: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1bf: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 1c6: 75 30                         jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 1c8: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 1cc: 48 29 d8                      subq    %rbx, %rax
// 1cf: 48 83 c0 b8                   addq    $-0x48, %rax
// 1d3: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1da: 48 8b 03                      movq    (%rbx), %rax
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_TARGET
// 1e7: 89 c9                         movl    %ecx, %ecx
// 1e9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ed: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f3: e9 86 01 00 00                jmp     0x37e <_JIT_ENTRY+0x37e>
// 1f8: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 1fd: 48 89 1c 24                   movq    %rbx, (%rsp)
// 201: 48 8b 03                      movq    (%rbx), %rax
// 204: 48 8b 40 20                   movq    0x20(%rax), %rax
// 208: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020a:  R_X86_64_64  _JIT_OPARG
// 212: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 218: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _PySuper_Lookup
// 227: 48 89 ef                      movq    %rbp, %rdi
// 22a: 4c 89 e6                      movq    %r12, %rsi
// 22d: 31 c9                         xorl    %ecx, %ecx
// 22f: ff d0                         callq   *%rax
// 231: 48 89 c3                      movq    %rax, %rbx
// 234: 49 8b 45 00                   movq    (%r13), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 256: 4c 89 ea                      movq    %r13, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 28                         js      0x28b <_JIT_ENTRY+0x28b>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 4d 00                   decq    (%r13)
// 273: 75 16                         jne     0x28b <_JIT_ENTRY+0x28b>
// 275: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000277:  R_X86_64_64  PySuper_Type
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: ff d0                         callq   *%rax
// 28b: 48 8b 45 00                   movq    (%rbp), %rax
// 28f: 48 85 c0                      testq   %rax, %rax
// 292: 7f 22                         jg      0x2b6 <_JIT_ENTRY+0x2b6>
// 294: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000296:  R_X86_64_64  .rodata.str1.1
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_NegativeRefcount
// 2a8: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 2ad: 48 89 ea                      movq    %rbp, %rdx
// 2b0: ff d0                         callq   *%rax
// 2b2: 48 8b 45 00                   movq    (%rbp), %rax
// 2b6: 85 c0                         testl   %eax, %eax
// 2b8: 78 21                         js      0x2db <_JIT_ENTRY+0x2db>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c4: ff d0                         callq   *%rax
// 2c6: 48 ff 4d 00                   decq    (%rbp)
// 2ca: 75 0f                         jne     0x2db <_JIT_ENTRY+0x2db>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_Dealloc
// 2d6: 48 89 ef                      movq    %rbp, %rdi
// 2d9: ff d0                         callq   *%rax
// 2db: 49 8b 04 24                   movq    (%r12), %rax
// 2df: 48 85 c0                      testq   %rax, %rax
// 2e2: 7f 22                         jg      0x306 <_JIT_ENTRY+0x306>
// 2e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e6:  R_X86_64_64  .rodata.str1.1
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_NegativeRefcount
// 2f8: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 2fd: 4c 89 e2                      movq    %r12, %rdx
// 300: ff d0                         callq   *%rax
// 302: 49 8b 04 24                   movq    (%r12), %rax
// 306: 85 c0                         testl   %eax, %eax
// 308: 78 21                         js      0x32b <_JIT_ENTRY+0x32b>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 314: ff d0                         callq   *%rax
// 316: 49 ff 0c 24                   decq    (%r12)
// 31a: 75 0f                         jne     0x32b <_JIT_ENTRY+0x32b>
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _Py_Dealloc
// 326: 4c 89 e7                      movq    %r12, %rdi
// 329: ff d0                         callq   *%rax
// 32b: 4c 89 f8                      movq    %r15, %rax
// 32e: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 332: 49 83 c7 e8                   addq    $-0x18, %r15
// 336: 48 85 db                      testq   %rbx, %rbx
// 339: 74 2e                         je      0x369 <_JIT_ENTRY+0x369>
// 33b: 4a 8d 34 f0                   leaq    (%rax,%r14,8), %rsi
// 33f: 48 83 c6 f0                   addq    $-0x10, %rsi
// 343: 49 89 1f                      movq    %rbx, (%r15)
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _JIT_CONTINUE
// 350: 48 8b 3c 24                   movq    (%rsp), %rdi
// 354: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 359: 48 83 c4 18                   addq    $0x18, %rsp
// 35d: 5b                            popq    %rbx
// 35e: 41 5c                         popq    %r12
// 360: 41 5d                         popq    %r13
// 362: 41 5e                         popq    %r14
// 364: 41 5f                         popq    %r15
// 366: 5d                            popq    %rbp
// 367: ff e0                         jmpq    *%rax
// 369: 48 8b 1c 24                   movq    (%rsp), %rbx
// 36d: 49 29 df                      subq    %rbx, %r15
// 370: 49 83 c7 b8                   addq    $-0x48, %r15
// 374: 49 c1 ef 03                   shrq    $0x3, %r15
// 378: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 37c: 31 c0                         xorl    %eax, %eax
// 37e: 48 83 c4 18                   addq    $0x18, %rsp
// 382: 5b                            popq    %rbx
// 383: 41 5c                         popq    %r12
// 385: 41 5d                         popq    %r13
// 387: 41 5e                         popq    %r14
// 389: 41 5f                         popq    %r15
// 38b: 5d                            popq    %rbp
// 38c: c3                            retq
// 38d: 
static const unsigned char _BUILD_SETplus_LOAD_SUPER_ATTR_ATTR_code_body[910] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x3f, 0x03, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x2d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x17, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x1c, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x06, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xf2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4d, 0x89, 0x24, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xf7, 0xe8, 0x75, 0x12, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x30, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x86, 0x01, 0x00, 0x00, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0x89, 0x1c, 0x24, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0xf8, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x83, 0xc7, 0xe8, 0x48, 0x85, 0xdb, 0x74, 0x2e, 0x4a, 0x8d, 0x34, 0xf0, 0x48, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x1c, 0x24, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_LOAD_SUPER_ATTR_ATTR_code_holes[32] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _BUILD_SETplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_LOAD_SUPER_ATTR_METHOD.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 51 03 00 00             je      0x37f <_JIT_ENTRY+0x37f>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// 36: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _JIT_OPARG
// 45: 66 85 c0                      testw   %ax, %ax
// 48: 0f 84 2e 01 00 00             je      0x17c <_JIT_ENTRY+0x17c>
// 4e: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 53: 0f b7 c0                      movzwl  %ax, %eax
// 56: 48 c1 e0 03                   shlq    $0x3, %rax
// 5a: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 5f: 49 29 c6                      subq    %rax, %r14
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  _JIT_OPARG
// 6c: 0f b7 c0                      movzwl  %ax, %eax
// 6f: 83 f8 02                      cmpl    $0x2, %eax
// 72: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 78: 44 0f 43 e8                   cmovael %eax, %r13d
// 7c: 31 db                         xorl    %ebx, %ebx
// 7e: 31 ed                         xorl    %ebp, %ebp
// 80: eb 16                         jmp     0x98 <_JIT_ENTRY+0x98>
// 82: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 90: 48 ff c3                      incq    %rbx
// 93: 49 39 dd                      cmpq    %rbx, %r13
// 96: 74 7e                         je      0x116 <_JIT_ENTRY+0x116>
// 98: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 9c: 85 ed                         testl   %ebp, %ebp
// 9e: 74 10                         je      0xb0 <_JIT_ENTRY+0xb0>
// a0: 49 8b 07                      movq    (%r15), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7e 24                         jle     0xcc <_JIT_ENTRY+0xcc>
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 e4                         js      0x90 <_JIT_ENTRY+0x90>
// ac: eb 43                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// ae: 66 90                         nop
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f dc                         jg      0xa8 <_JIT_ENTRY+0xa8>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 9f                         js      0x90 <_JIT_ENTRY+0x90>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 75 8e                         jne     0x90 <_JIT_ENTRY+0x90>
// 102: 4c 89 ff                      movq    %r15, %rdi
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_Dealloc
// 10f: ff d0                         callq   *%rax
// 111: e9 7a ff ff ff                jmp     0x90 <_JIT_ENTRY+0x90>
// 116: 85 ed                         testl   %ebp, %ebp
// 118: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 11d: 74 5d                         je      0x17c <_JIT_ENTRY+0x17c>
// 11f: 49 8b 04 24                   movq    (%r12), %rax
// 123: 48 85 c0                      testq   %rax, %rax
// 126: 7f 22                         jg      0x14a <_JIT_ENTRY+0x14a>
// 128: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012a:  R_X86_64_64  .rodata.str1.1
// 132: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 137: 4c 89 e2                      movq    %r12, %rdx
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_NegativeRefcount
// 144: ff d0                         callq   *%rax
// 146: 49 8b 04 24                   movq    (%r12), %rax
// 14a: 85 c0                         testl   %eax, %eax
// 14c: 0f 88 2d 02 00 00             js      0x37f <_JIT_ENTRY+0x37f>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15c: ff d0                         callq   *%rax
// 15e: 49 ff 0c 24                   decq    (%r12)
// 162: 0f 85 17 02 00 00             jne     0x37f <_JIT_ENTRY+0x37f>
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: ff d0                         callq   *%rax
// 177: e9 03 02 00 00                jmp     0x37f <_JIT_ENTRY+0x37f>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: 0f b7 c8                      movzwl  %ax, %ecx
// 189: 0f b7 c0                      movzwl  %ax, %eax
// 18c: 48 c1 e0 03                   shlq    $0x3, %rax
// 190: 48 f7 d8                      negq    %rax
// 193: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 198: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 19c: b8 01 00 00 00                movl    $0x1, %eax
// 1a1: 29 c8                         subl    %ecx, %eax
// 1a3: 4c 63 f8                      movslq  %eax, %r15
// 1a6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a8:  R_X86_64_64  PySuper_Type
// 1b0: 4f 39 6c fe e8                cmpq    %r13, -0x18(%r14,%r15,8)
// 1b5: 75 12                         jne     0x1c9 <_JIT_ENTRY+0x1c9>
// 1b7: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 1bc: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1c0: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 1c7: 75 30                         jne     0x1f9 <_JIT_ENTRY+0x1f9>
// 1c9: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 1cd: 48 29 d8                      subq    %rbx, %rax
// 1d0: 48 83 c0 b8                   addq    $-0x48, %rax
// 1d4: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1db: 48 8b 03                      movq    (%rbx), %rax
// 1de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e0:  R_X86_64_64  _JIT_TARGET
// 1e8: 89 c9                         movl    %ecx, %ecx
// 1ea: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ee: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f4: e9 97 01 00 00                jmp     0x390 <_JIT_ENTRY+0x390>
// 1f9: 4b 8b 74 fe f8                movq    -0x8(%r14,%r15,8), %rsi
// 1fe: 48 8b 03                      movq    (%rbx), %rax
// 201: 48 8b 40 20                   movq    0x20(%rax), %rax
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  _JIT_OPARG
// 20f: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 215: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 21a: c7 44 24 0c 00 00 00 00       movl    $0x0, 0xc(%rsp)
// 222: 48 8b 46 08                   movq    0x8(%rsi), %rax
// 226: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000228:  R_X86_64_64  PyObject_GenericGetAttr
// 230: 31 ff                         xorl    %edi, %edi
// 232: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 239: 48 8d 4c 24 0c                leaq    0xc(%rsp), %rcx
// 23e: 48 0f 45 cf                   cmovneq %rdi, %rcx
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _PySuper_Lookup
// 24c: 48 89 ef                      movq    %rbp, %rdi
// 24f: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 254: ff d0                         callq   *%rax
// 256: 49 89 c4                      movq    %rax, %r12
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 48 85 c0                      testq   %rax, %rax
// 260: 7f 22                         jg      0x284 <_JIT_ENTRY+0x284>
// 262: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000264:  R_X86_64_64  .rodata.str1.1
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_NegativeRefcount
// 276: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 27b: 4c 89 ea                      movq    %r13, %rdx
// 27e: ff d0                         callq   *%rax
// 280: 49 8b 45 00                   movq    (%r13), %rax
// 284: 85 c0                         testl   %eax, %eax
// 286: 78 28                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 4d 00                   decq    (%r13)
// 298: 75 16                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 29a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029c:  R_X86_64_64  PySuper_Type
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_Dealloc
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 8b 45 00                   movq    (%rbp), %rax
// 2b4: 48 85 c0                      testq   %rax, %rax
// 2b7: 7f 22                         jg      0x2db <_JIT_ENTRY+0x2db>
// 2b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_NegativeRefcount
// 2cd: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 2d2: 48 89 ea                      movq    %rbp, %rdx
// 2d5: ff d0                         callq   *%rax
// 2d7: 48 8b 45 00                   movq    (%rbp), %rax
// 2db: 85 c0                         testl   %eax, %eax
// 2dd: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 2e2: 78 21                         js      0x305 <_JIT_ENTRY+0x305>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ee: ff d0                         callq   *%rax
// 2f0: 48 ff 4d 00                   decq    (%rbp)
// 2f4: 75 0f                         jne     0x305 <_JIT_ENTRY+0x305>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_Dealloc
// 300: 48 89 ef                      movq    %rbp, %rdi
// 303: ff d0                         callq   *%rax
// 305: 4d 85 e4                      testq   %r12, %r12
// 308: 74 1d                         je      0x327 <_JIT_ENTRY+0x327>
// 30a: 4b 8d 2c fe                   leaq    (%r14,%r15,8), %rbp
// 30e: 48 83 c5 f8                   addq    $-0x8, %rbp
// 312: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 317: 0f 84 82 00 00 00             je      0x39f <_JIT_ENTRY+0x39f>
// 31d: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 322: e9 d0 00 00 00                jmp     0x3f7 <_JIT_ENTRY+0x3f7>
// 327: 49 8b 45 00                   movq    (%r13), %rax
// 32b: 48 85 c0                      testq   %rax, %rax
// 32e: 7f 22                         jg      0x352 <_JIT_ENTRY+0x352>
// 330: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000332:  R_X86_64_64  .rodata.str1.1
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_NegativeRefcount
// 344: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 349: 4c 89 ea                      movq    %r13, %rdx
// 34c: ff d0                         callq   *%rax
// 34e: 49 8b 45 00                   movq    (%r13), %rax
// 352: 85 c0                         testl   %eax, %eax
// 354: 78 21                         js      0x377 <_JIT_ENTRY+0x377>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 360: ff d0                         callq   *%rax
// 362: 49 ff 4d 00                   decq    (%r13)
// 366: 75 0f                         jne     0x377 <_JIT_ENTRY+0x377>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  _Py_Dealloc
// 372: 4c 89 ef                      movq    %r13, %rdi
// 375: ff d0                         callq   *%rax
// 377: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 37b: 49 83 c6 e8                   addq    $-0x18, %r14
// 37f: 49 29 de                      subq    %rbx, %r14
// 382: 49 83 c6 b8                   addq    $-0x48, %r14
// 386: 49 c1 ee 03                   shrq    $0x3, %r14
// 38a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 38e: 31 c0                         xorl    %eax, %eax
// 390: 48 83 c4 28                   addq    $0x28, %rsp
// 394: 5b                            popq    %rbx
// 395: 41 5c                         popq    %r12
// 397: 41 5d                         popq    %r13
// 399: 41 5e                         popq    %r14
// 39b: 41 5f                         popq    %r15
// 39d: 5d                            popq    %rbp
// 39e: c3                            retq
// 39f: 49 8b 45 00                   movq    (%r13), %rax
// 3a3: 48 85 c0                      testq   %rax, %rax
// 3a6: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 3ab: 7f 22                         jg      0x3cf <_JIT_ENTRY+0x3cf>
// 3ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003af:  R_X86_64_64  .rodata.str1.1
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_NegativeRefcount
// 3c1: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 3c6: 4c 89 ea                      movq    %r13, %rdx
// 3c9: ff d0                         callq   *%rax
// 3cb: 49 8b 45 00                   movq    (%r13), %rax
// 3cf: 85 c0                         testl   %eax, %eax
// 3d1: 78 21                         js      0x3f4 <_JIT_ENTRY+0x3f4>
// 3d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3dd: ff d0                         callq   *%rax
// 3df: 49 ff 4d 00                   decq    (%r13)
// 3e3: 75 0f                         jne     0x3f4 <_JIT_ENTRY+0x3f4>
// 3e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e7:  R_X86_64_64  _Py_Dealloc
// 3ef: 4c 89 ef                      movq    %r13, %rdi
// 3f2: ff d0                         callq   *%rax
// 3f4: 45 31 ed                      xorl    %r13d, %r13d
// 3f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f9:  R_X86_64_64  _JIT_OPARG
// 401: 0f b7 c0                      movzwl  %ax, %eax
// 404: b9 01 00 00 00                movl    $0x1, %ecx
// 409: 29 c1                         subl    %eax, %ecx
// 40b: 48 63 c1                      movslq  %ecx, %rax
// 40e: 4d 89 64 c6 e8                movq    %r12, -0x18(%r14,%rax,8)
// 413: 4d 89 6c c6 f0                movq    %r13, -0x10(%r14,%rax,8)
// 418: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041a:  R_X86_64_64  _JIT_CONTINUE
// 422: 48 89 df                      movq    %rbx, %rdi
// 425: 48 89 ee                      movq    %rbp, %rsi
// 428: 4c 89 fa                      movq    %r15, %rdx
// 42b: 48 83 c4 28                   addq    $0x28, %rsp
// 42f: 5b                            popq    %rbx
// 430: 41 5c                         popq    %r12
// 432: 41 5d                         popq    %r13
// 434: 41 5e                         popq    %r14
// 436: 41 5f                         popq    %r15
// 438: 5d                            popq    %rbp
// 439: ff e0                         jmpq    *%rax
// 43b: 
static const unsigned char _BUILD_SETplus_LOAD_SUPER_ATTR_METHOD_code_body[1084] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x51, 0x03, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x2e, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x16, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x8e, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x2d, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x17, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x03, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xfe, 0xe8, 0x75, 0x12, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x30, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x97, 0x01, 0x00, 0x00, 0x4b, 0x8b, 0x74, 0xfe, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x46, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x0c, 0x48, 0x0f, 0x45, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x10, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x1d, 0x4b, 0x8d, 0x2c, 0xfe, 0x48, 0x83, 0xc5, 0xf8, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x83, 0xc6, 0xe8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x31, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc6, 0xe8, 0x4d, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_LOAD_SUPER_ATTR_METHOD_code_holes[38] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _BUILD_SETplus_MAKE_CELL
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_MAKE_CELL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 de                      movq    %rbx, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ed                      xorl    %r13d, %r13d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c5                      incq    %r13
// 83: 4c 39 ed                      cmpq    %r13, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c ee                   movq    (%r14,%r13,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 de                      movq    %rbx, %r14
// 11e: e9 43 01 00 00                jmp     0x266 <_JIT_ENTRY+0x266>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12b: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 fd 00 00 00             js      0x266 <_JIT_ENTRY+0x266>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 e7 00 00 00             jne     0x266 <_JIT_ENTRY+0x266>
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 d3 00 00 00                jmp     0x266 <_JIT_ENTRY+0x266>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1ab: 48 f7 da                      negq    %rdx
// 1ae: 4c 89 24 13                   movq    %r12, (%rbx,%rdx)
// 1b2: ba 01 00 00 00                movl    $0x1, %edx
// 1b7: 29 ca                         subl    %ecx, %edx
// 1b9: 48 63 ca                      movslq  %edx, %rcx
// 1bc: 4c 8d 34 cb                   leaq    (%rbx,%rcx,8), %r14
// 1c0: 49 8b 7c c7 48                movq    0x48(%r15,%rax,8), %rdi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyCell_New
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 0f 84 8c 00 00 00             je      0x266 <_JIT_ENTRY+0x266>
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c9                      movzwl  %cx, %ecx
// 1e7: 49 8b 5c cf 48                movq    0x48(%r15,%rcx,8), %rbx
// 1ec: 49 89 44 cf 48                movq    %rax, 0x48(%r15,%rcx,8)
// 1f1: 48 85 db                      testq   %rbx, %rbx
// 1f4: 74 4d                         je      0x243 <_JIT_ENTRY+0x243>
// 1f6: 48 8b 03                      movq    (%rbx), %rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 7f 21                         jg      0x21f <_JIT_ENTRY+0x21f>
// 1fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000200:  R_X86_64_64  .rodata.str1.1+0x39
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_NegativeRefcount
// 212: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 217: 48 89 da                      movq    %rbx, %rdx
// 21a: ff d0                         callq   *%rax
// 21c: 48 8b 03                      movq    (%rbx), %rax
// 21f: 85 c0                         testl   %eax, %eax
// 221: 78 20                         js      0x243 <_JIT_ENTRY+0x243>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22d: ff d0                         callq   *%rax
// 22f: 48 ff 0b                      decq    (%rbx)
// 232: 75 0f                         jne     0x243 <_JIT_ENTRY+0x243>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_Dealloc
// 23e: 48 89 df                      movq    %rbx, %rdi
// 241: ff d0                         callq   *%rax
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 4c 89 ff                      movq    %r15, %rdi
// 250: 4c 89 f6                      movq    %r14, %rsi
// 253: 4c 89 ea                      movq    %r13, %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 4d 29 fe                      subq    %r15, %r14
// 269: 49 83 c6 b8                   addq    $-0x48, %r14
// 26d: 49 c1 ee 03                   shrq    $0x3, %r14
// 271: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 275: 31 c0                         xorl    %eax, %eax
// 277: 48 83 c4 18                   addq    $0x18, %rsp
// 27b: 5b                            popq    %rbx
// 27c: 41 5c                         popq    %r12
// 27e: 41 5d                         popq    %r13
// 280: 41 5e                         popq    %r14
// 282: 41 5f                         popq    %r15
// 284: 5d                            popq    %rbp
// 285: c3                            retq
// 286: 
static const unsigned char _BUILD_SETplus_MAKE_CELL_code_body[647] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xee, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xde, 0xe9, 0x43, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x24, 0x13, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x34, 0xcb, 0x49, 0x8b, 0x7c, 0xc7, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x8b, 0x5c, 0xcf, 0x48, 0x49, 0x89, 0x44, 0xcf, 0x48, 0x48, 0x85, 0xdb, 0x74, 0x4d, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_MAKE_CELL_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_MAKE_CELL_data_holes[1];

// _BUILD_SETplus_MAKE_FUNCTION
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_MAKE_FUNCTION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 dc                      movq    %rbx, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 dc                      movq    %rbx, %r12
// 11e: e9 76 01 00 00                jmp     0x299 <_JIT_ENTRY+0x299>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12b: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 130: 48 8b 1c 24                   movq    (%rsp), %rbx
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 45 00                   movq    (%r13), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 30 01 00 00             js      0x299 <_JIT_ENTRY+0x299>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 4d 00                   decq    (%r13)
// 179: 0f 85 1a 01 00 00             jne     0x299 <_JIT_ENTRY+0x299>
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 06 01 00 00                jmp     0x299 <_JIT_ENTRY+0x299>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a7: 48 f7 d8                      negq    %rax
// 1aa: 4c 89 2c 03                   movq    %r13, (%rbx,%rax)
// 1ae: b8 01 00 00 00                movl    $0x1, %eax
// 1b3: 29 c8                         subl    %ecx, %eax
// 1b5: 48 89 d9                      movq    %rbx, %rcx
// 1b8: 48 63 d8                      movslq  %eax, %rbx
// 1bb: 49 89 cc                      movq    %rcx, %r12
// 1be: 4c 8b 74 d9 f8                movq    -0x8(%rcx,%rbx,8), %r14
// 1c3: 49 8b 77 18                   movq    0x18(%r15), %rsi
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  PyFunction_New
// 1d1: 4c 89 f7                      movq    %r14, %rdi
// 1d4: ff d0                         callq   *%rax
// 1d6: 49 89 c5                      movq    %rax, %r13
// 1d9: 49 8b 06                      movq    (%r14), %rax
// 1dc: 48 85 c0                      testq   %rax, %rax
// 1df: 7e 06                         jle     0x1e7 <_JIT_ENTRY+0x1e7>
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 79 27                         jns     0x20c <_JIT_ENTRY+0x20c>
// 1e5: eb 36                         jmp     0x21d <_JIT_ENTRY+0x21d>
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NegativeRefcount
// 1fb: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 200: 4c 89 f2                      movq    %r14, %rdx
// 203: ff d0                         callq   *%rax
// 205: 49 8b 06                      movq    (%r14), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 11                         js      0x21d <_JIT_ENTRY+0x21d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 49 ff 0e                      decq    (%r14)
// 21b: 74 61                         je      0x27e <_JIT_ENTRY+0x27e>
// 21d: 4c 89 e0                      movq    %r12, %rax
// 220: 4d 8d 24 dc                   leaq    (%r12,%rbx,8), %r12
// 224: 4d 85 ed                      testq   %r13, %r13
// 227: 74 70                         je      0x299 <_JIT_ENTRY+0x299>
// 229: 48 89 c3                      movq    %rax, %rbx
// 22c: 41 8b 76 5c                   movl    0x5c(%r14), %esi
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _PyFunction_SetVersion
// 23a: 4c 89 ef                      movq    %r13, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: 0f b7 c0                      movzwl  %ax, %eax
// 24c: b9 01 00 00 00                movl    $0x1, %ecx
// 251: 29 c1                         subl    %eax, %ecx
// 253: 48 63 c1                      movslq  %ecx, %rax
// 256: 4c 89 6c c3 f8                movq    %r13, -0x8(%rbx,%rax,8)
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _JIT_CONTINUE
// 265: 4c 89 ff                      movq    %r15, %rdi
// 268: 4c 89 e6                      movq    %r12, %rsi
// 26b: 48 89 ea                      movq    %rbp, %rdx
// 26e: 48 83 c4 18                   addq    $0x18, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: ff e0                         jmpq    *%rax
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_Dealloc
// 288: 4c 89 f7                      movq    %r14, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 4c 89 e0                      movq    %r12, %rax
// 290: 4d 8d 24 dc                   leaq    (%r12,%rbx,8), %r12
// 294: 4d 85 ed                      testq   %r13, %r13
// 297: 75 90                         jne     0x229 <_JIT_ENTRY+0x229>
// 299: 4d 29 fc                      subq    %r15, %r12
// 29c: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a0: 49 c1 ec 03                   shrq    $0x3, %r12
// 2a4: 45 89 67 40                   movl    %r12d, 0x40(%r15)
// 2a8: 31 c0                         xorl    %eax, %eax
// 2aa: 48 83 c4 18                   addq    $0x18, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: c3                            retq
// 2b9: 
static const unsigned char _BUILD_SETplus_MAKE_FUNCTION_code_body[698] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdc, 0xe9, 0x76, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x30, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x1a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x2c, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x89, 0xd9, 0x48, 0x63, 0xd8, 0x49, 0x89, 0xcc, 0x4c, 0x8b, 0x74, 0xd9, 0xf8, 0x49, 0x8b, 0x77, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x61, 0x4c, 0x89, 0xe0, 0x4d, 0x8d, 0x24, 0xdc, 0x4d, 0x85, 0xed, 0x74, 0x70, 0x48, 0x89, 0xc3, 0x41, 0x8b, 0x76, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x6c, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4c, 0x89, 0xe0, 0x4d, 0x8d, 0x24, 0xdc, 0x4d, 0x85, 0xed, 0x75, 0x90, 0x4d, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_MAKE_FUNCTION_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_MAKE_FUNCTION_data_holes[1];

// _BUILD_SETplus_MAP_ADD
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_MAP_ADD.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4c 01 00 00             je      0x190 <_JIT_ENTRY+0x190>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ee                      movq    %rbp, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ed                      xorl    %r13d, %r13d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c5                      incq    %r13
// 83: 4c 39 ed                      cmpq    %r13, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c ee                   movq    (%r14,%r13,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 ee                      movq    %rbp, %r14
// 11e: e9 dc 00 00 00                jmp     0x1ff <_JIT_ENTRY+0x1ff>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 12b: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 130: 48 8b 2c 24                   movq    (%rsp), %rbp
// 134: 74 5a                         je      0x190 <_JIT_ENTRY+0x190>
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 96 00 00 00             js      0x1ff <_JIT_ENTRY+0x1ff>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 80 00 00 00             jne     0x1ff <_JIT_ENTRY+0x1ff>
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: eb 6f                         jmp     0x1ff <_JIT_ENTRY+0x1ff>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: 0f b7 c8                      movzwl  %ax, %ecx
// 19d: 0f b7 c0                      movzwl  %ax, %eax
// 1a0: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a4: 48 f7 d8                      negq    %rax
// 1a7: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 c8                         subl    %ecx, %eax
// 1b3: 48 98                         cltq
// 1b5: 48 8d 1c c5 00 00 00 00       leaq    (,%rax,8), %rbx
// 1bd: 48 01 eb                      addq    %rbp, %rbx
// 1c0: 48 8b 74 c5 f0                movq    -0x10(%rbp,%rax,8), %rsi
// 1c5: 48 8b 54 c5 f8                movq    -0x8(%rbp,%rax,8), %rdx
// 1ca: 4c 8d 34 c5 f0 ff ff ff       leaq    -0x10(,%rax,8), %r14
// 1d2: 49 01 ee                      addq    %rbp, %r14
// 1d5: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1da: 29 cf                         subl    %ecx, %edi
// 1dc: 48 63 cf                      movslq  %edi, %rcx
// 1df: 48 01 c1                      addq    %rax, %rcx
// 1e2: 48 8b 7c cd 00                movq    (%rbp,%rcx,8), %rdi
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _PyDict_SetItem_Take2
// 1f1: ff d0                         callq   *%rax
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 4c 0f 45 f3                   cmovneq %rbx, %r14
// 1f9: 74 24                         je      0x21f <_JIT_ENTRY+0x21f>
// 1fb: 49 83 c6 f0                   addq    $-0x10, %r14
// 1ff: 4d 29 fe                      subq    %r15, %r14
// 202: 49 83 c6 b8                   addq    $-0x48, %r14
// 206: 49 c1 ee 03                   shrq    $0x3, %r14
// 20a: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 20e: 31 c0                         xorl    %eax, %eax
// 210: 48 83 c4 18                   addq    $0x18, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: c3                            retq
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_CONTINUE
// 229: 4c 89 ff                      movq    %r15, %rdi
// 22c: 4c 89 f6                      movq    %r14, %rsi
// 22f: 4c 89 ea                      movq    %r13, %rdx
// 232: 48 83 c4 18                   addq    $0x18, %rsp
// 236: 5b                            popq    %rbx
// 237: 41 5c                         popq    %r12
// 239: 41 5d                         popq    %r13
// 23b: 41 5e                         popq    %r14
// 23d: 41 5f                         popq    %r15
// 23f: 5d                            popq    %rbp
// 240: ff e0                         jmpq    *%rax
// 242: 
static const unsigned char _BUILD_SETplus_MAP_ADD_code_body[579] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4c, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xee, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xee, 0xe9, 0xdc, 0x00, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x96, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x1c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xeb, 0x48, 0x8b, 0x74, 0xc5, 0xf0, 0x48, 0x8b, 0x54, 0xc5, 0xf8, 0x4c, 0x8d, 0x34, 0xc5, 0xf0, 0xff, 0xff, 0xff, 0x49, 0x01, 0xee, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xcf, 0x48, 0x63, 0xcf, 0x48, 0x01, 0xc1, 0x48, 0x8b, 0x7c, 0xcd, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4c, 0x0f, 0x45, 0xf3, 0x74, 0x24, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_MAP_ADD_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_MAP_ADD_data_holes[1];

// _BUILD_SETplus_MATCH_CLASS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_MATCH_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 48 89 2c 24                   movq    %rbp, (%rsp)
// 47: 0f 84 3f 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 4d: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 48 89 eb                      movq    %rbp, %rbx
// 5c: 48 29 c3                      subq    %rax, %rbx
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 45 31 ff                      xorl    %r15d, %r15d
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 49 ff c7                      incq    %r15
// 83: 4d 39 fd                      cmpq    %r15, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4e 8b 34 fb                   movq    (%rbx,%r15,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 48 89 eb                      movq    %rbp, %rbx
// 11d: e9 5d 02 00 00                jmp     0x37f <_JIT_ENTRY+0x37f>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 129: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 1d 02 00 00             js      0x37f <_JIT_ENTRY+0x37f>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 07 02 00 00             jne     0x37f <_JIT_ENTRY+0x37f>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 f3 01 00 00                jmp     0x37f <_JIT_ENTRY+0x37f>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 d0                      movzwl  %ax, %edx
// 199: 0f b7 c8                      movzwl  %ax, %ecx
// 19c: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1a4: 48 f7 d8                      negq    %rax
// 1a7: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 d0                         subl    %edx, %eax
// 1b3: 48 63 d8                      movslq  %eax, %rbx
// 1b6: 4c 8b 6c dd f8                movq    -0x8(%rbp,%rbx,8), %r13
// 1bb: 4c 8b 74 dd e8                movq    -0x18(%rbp,%rbx,8), %r14
// 1c0: 48 8b 6c dd f0                movq    -0x10(%rbp,%rbx,8), %rbp
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _PyEval_MatchClass
// 1cf: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d4: 4c 89 f6                      movq    %r14, %rsi
// 1d7: 48 89 ea                      movq    %rbp, %rdx
// 1da: 4d 89 e8                      movq    %r13, %r8
// 1dd: ff d0                         callq   *%rax
// 1df: 49 89 c4                      movq    %rax, %r12
// 1e2: 49 8b 06                      movq    (%r14), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 06                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 79 27                         jns     0x215 <_JIT_ENTRY+0x215>
// 1ee: eb 36                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_NegativeRefcount
// 204: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 209: 4c 89 f2                      movq    %r14, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 06                      movq    (%r14), %rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 11                         js      0x226 <_JIT_ENTRY+0x226>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 0e                      decq    (%r14)
// 224: 74 14                         je      0x23a <_JIT_ENTRY+0x23a>
// 226: 48 8b 45 00                   movq    (%rbp), %rax
// 22a: 48 85 c0                      testq   %rax, %rax
// 22d: 7e 23                         jle     0x252 <_JIT_ENTRY+0x252>
// 22f: 85 c0                         testl   %eax, %eax
// 231: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 236: 79 45                         jns     0x27d <_JIT_ENTRY+0x27d>
// 238: eb 55                         jmp     0x28f <_JIT_ENTRY+0x28f>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 4c 89 f7                      movq    %r14, %rdi
// 247: ff d0                         callq   *%rax
// 249: 48 8b 45 00                   movq    (%rbp), %rax
// 24d: 48 85 c0                      testq   %rax, %rax
// 250: 7f dd                         jg      0x22f <_JIT_ENTRY+0x22f>
// 252: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000254:  R_X86_64_64  .rodata.str1.1
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_NegativeRefcount
// 266: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 26b: 48 89 ea                      movq    %rbp, %rdx
// 26e: ff d0                         callq   *%rax
// 270: 48 8b 45 00                   movq    (%rbp), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 27b: 78 12                         js      0x28f <_JIT_ENTRY+0x28f>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 287: ff d0                         callq   *%rax
// 289: 48 ff 4d 00                   decq    (%rbp)
// 28d: 74 13                         je      0x2a2 <_JIT_ENTRY+0x2a2>
// 28f: 49 8b 45 00                   movq    (%r13), %rax
// 293: 48 85 c0                      testq   %rax, %rax
// 296: 7e 22                         jle     0x2ba <_JIT_ENTRY+0x2ba>
// 298: 85 c0                         testl   %eax, %eax
// 29a: 48 8b 2c 24                   movq    (%rsp), %rbp
// 29e: 79 44                         jns     0x2e4 <_JIT_ENTRY+0x2e4>
// 2a0: eb 54                         jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_Dealloc
// 2ac: 48 89 ef                      movq    %rbp, %rdi
// 2af: ff d0                         callq   *%rax
// 2b1: 49 8b 45 00                   movq    (%r13), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7f de                         jg      0x298 <_JIT_ENTRY+0x298>
// 2ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bc:  R_X86_64_64  .rodata.str1.1
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_NegativeRefcount
// 2ce: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 2d3: 4c 89 ea                      movq    %r13, %rdx
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 8b 45 00                   movq    (%r13), %rax
// 2dc: 85 c0                         testl   %eax, %eax
// 2de: 48 8b 2c 24                   movq    (%rsp), %rbp
// 2e2: 78 12                         js      0x2f6 <_JIT_ENTRY+0x2f6>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ee: ff d0                         callq   *%rax
// 2f0: 49 ff 4d 00                   decq    (%r13)
// 2f4: 74 4c                         je      0x342 <_JIT_ENTRY+0x342>
// 2f6: 4d 85 e4                      testq   %r12, %r12
// 2f9: 74 5b                         je      0x356 <_JIT_ENTRY+0x356>
// 2fb: 48 8d 34 dd f0 ff ff ff       leaq    -0x10(,%rbx,8), %rsi
// 303: 48 01 ee                      addq    %rbp, %rsi
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _JIT_OPARG
// 310: 0f b7 c0                      movzwl  %ax, %eax
// 313: b9 01 00 00 00                movl    $0x1, %ecx
// 318: 29 c1                         subl    %eax, %ecx
// 31a: 48 63 c1                      movslq  %ecx, %rax
// 31d: 4c 89 64 c5 e8                movq    %r12, -0x18(%rbp,%rax,8)
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _JIT_CONTINUE
// 32c: 4c 89 ff                      movq    %r15, %rdi
// 32f: 4c 89 f2                      movq    %r14, %rdx
// 332: 48 83 c4 18                   addq    $0x18, %rsp
// 336: 5b                            popq    %rbx
// 337: 41 5c                         popq    %r12
// 339: 41 5d                         popq    %r13
// 33b: 41 5e                         popq    %r14
// 33d: 41 5f                         popq    %r15
// 33f: 5d                            popq    %rbp
// 340: ff e0                         jmpq    *%rax
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _Py_Dealloc
// 34c: 4c 89 ef                      movq    %r13, %rdi
// 34f: ff d0                         callq   *%rax
// 351: 4d 85 e4                      testq   %r12, %r12
// 354: 75 a5                         jne     0x2fb <_JIT_ENTRY+0x2fb>
// 356: 49 8b 46 68                   movq    0x68(%r14), %rax
// 35a: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000035c:  R_X86_64_64  _Py_NoneStruct
// 364: 48 85 c0                      testq   %rax, %rax
// 367: 74 92                         je      0x2fb <_JIT_ENTRY+0x2fb>
// 369: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 36e: 74 8b                         je      0x2fb <_JIT_ENTRY+0x2fb>
// 370: 48 8d 1c dd 00 00 00 00       leaq    (,%rbx,8), %rbx
// 378: 48 01 eb                      addq    %rbp, %rbx
// 37b: 48 83 c3 e8                   addq    $-0x18, %rbx
// 37f: 4c 29 fb                      subq    %r15, %rbx
// 382: 48 83 c3 b8                   addq    $-0x48, %rbx
// 386: 48 c1 eb 03                   shrq    $0x3, %rbx
// 38a: 41 89 5f 40                   movl    %ebx, 0x40(%r15)
// 38e: 31 c0                         xorl    %eax, %eax
// 390: 48 83 c4 18                   addq    $0x18, %rsp
// 394: 5b                            popq    %rbx
// 395: 41 5c                         popq    %r12
// 397: 41 5d                         popq    %r13
// 399: 41 5e                         popq    %r14
// 39b: 41 5f                         popq    %r15
// 39d: 5d                            popq    %rbp
// 39e: c3                            retq
// 39f: 
static const unsigned char _BUILD_SETplus_MATCH_CLASS_code_body[928] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x2c, 0x24, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0xeb, 0x48, 0x29, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x31, 0xed, 0xeb, 0x0c, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4e, 0x8b, 0x34, 0xfb, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x48, 0x89, 0xeb, 0xe9, 0x5d, 0x02, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x1d, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x07, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xf3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x6c, 0xdd, 0xf8, 0x4c, 0x8b, 0x74, 0xdd, 0xe8, 0x48, 0x8b, 0x6c, 0xdd, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x14, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x23, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x79, 0x45, 0xeb, 0x55, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdd, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x2c, 0x24, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4c, 0x4d, 0x85, 0xe4, 0x74, 0x5b, 0x48, 0x8d, 0x34, 0xdd, 0xf0, 0xff, 0xff, 0xff, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc5, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa5, 0x49, 0x8b, 0x46, 0x68, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x92, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x8b, 0x48, 0x8d, 0x1c, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xeb, 0x48, 0x83, 0xc3, 0xe8, 0x4c, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5f, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_MATCH_CLASS_code_holes[30] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_MATCH_CLASS_data_holes[1];

// _BUILD_SETplus_MATCH_KEYS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_MATCH_KEYS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 d1 01 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 3c 24                   movq    %r15, (%rsp)
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 66 85 c0                      testw   %ax, %ax
// 42: 0f 84 29 01 00 00             je      0x171 <_JIT_ENTRY+0x171>
// 48: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4d: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 4c 8b 3c 24                   movq    (%rsp), %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 08                         jmp     0x88 <_JIT_ENTRY+0x88>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 74 7e                         je      0x106 <_JIT_ENTRY+0x106>
// 88: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 8c: 85 ed                         testl   %ebp, %ebp
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 49 8b 06                      movq    (%r14), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7e 24                         jle     0xbc <_JIT_ENTRY+0xbc>
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 e4                         js      0x80 <_JIT_ENTRY+0x80>
// 9c: eb 43                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9e: 66 90                         nop
// a0: 4c 89 e7                      movq    %r12, %rdi
// a3: 4c 89 f6                      movq    %r14, %rsi
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PySet_Add
// b0: ff d0                         callq   *%rax
// b2: 89 c5                         movl    %eax, %ebp
// b4: 49 8b 06                      movq    (%r14), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7f dc                         jg      0x98 <_JIT_ENTRY+0x98>
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1
// c6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// cb: 4c 89 f2                      movq    %r14, %rdx
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: ff d0                         callq   *%rax
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 85 c0                         testl   %eax, %eax
// df: 78 9f                         js      0x80 <_JIT_ENTRY+0x80>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// eb: ff d0                         callq   *%rax
// ed: 49 ff 0e                      decq    (%r14)
// f0: 75 8e                         jne     0x80 <_JIT_ENTRY+0x80>
// f2: 4c 89 f7                      movq    %r14, %rdi
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: ff d0                         callq   *%rax
// 101: e9 7a ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 106: 85 ed                         testl   %ebp, %ebp
// 108: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 10d: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 112: 74 5d                         je      0x171 <_JIT_ENTRY+0x171>
// 114: 49 8b 04 24                   movq    (%r12), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7f 22                         jg      0x13f <_JIT_ENTRY+0x13f>
// 11d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011f:  R_X86_64_64  .rodata.str1.1
// 127: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 12c: 4c 89 e2                      movq    %r12, %rdx
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_NegativeRefcount
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 0f 88 b8 00 00 00             js      0x1ff <_JIT_ENTRY+0x1ff>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 151: ff d0                         callq   *%rax
// 153: 49 ff 0c 24                   decq    (%r12)
// 157: 0f 85 a2 00 00 00             jne     0x1ff <_JIT_ENTRY+0x1ff>
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: ff d0                         callq   *%rax
// 16c: e9 8e 00 00 00                jmp     0x1ff <_JIT_ENTRY+0x1ff>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _JIT_OPARG
// 17b: 0f b7 c8                      movzwl  %ax, %ecx
// 17e: 0f b7 c0                      movzwl  %ax, %eax
// 181: 48 c1 e0 03                   shlq    $0x3, %rax
// 185: 48 f7 d8                      negq    %rax
// 188: 4c 8b 3c 24                   movq    (%rsp), %r15
// 18c: 4d 89 24 07                   movq    %r12, (%r15,%rax)
// 190: bb 01 00 00 00                movl    $0x1, %ebx
// 195: b8 01 00 00 00                movl    $0x1, %eax
// 19a: 29 c8                         subl    %ecx, %eax
// 19c: 4c 63 f0                      movslq  %eax, %r14
// 19f: 4b 8b 74 f7 f0                movq    -0x10(%r15,%r14,8), %rsi
// 1a4: 4b 8b 54 f7 f8                movq    -0x8(%r15,%r14,8), %rdx
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _PyEval_MatchKeys
// 1b3: 48 89 ef                      movq    %rbp, %rdi
// 1b6: ff d0                         callq   *%rax
// 1b8: 48 85 c0                      testq   %rax, %rax
// 1bb: 74 3e                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  _JIT_OPARG
// 1c7: 0f b7 c9                      movzwl  %cx, %ecx
// 1ca: 29 cb                         subl    %ecx, %ebx
// 1cc: 48 63 cb                      movslq  %ebx, %rcx
// 1cf: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 1d3: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 1d7: 48 83 c6 08                   addq    $0x8, %rsi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_CONTINUE
// 1e5: 4c 89 ef                      movq    %r13, %rdi
// 1e8: 48 89 ea                      movq    %rbp, %rdx
// 1eb: 48 83 c4 18                   addq    $0x18, %rsp
// 1ef: 5b                            popq    %rbx
// 1f0: 41 5c                         popq    %r12
// 1f2: 41 5d                         popq    %r13
// 1f4: 41 5e                         popq    %r14
// 1f6: 41 5f                         popq    %r15
// 1f8: 5d                            popq    %rbp
// 1f9: ff e0                         jmpq    *%rax
// 1fb: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 1ff: 4d 29 ef                      subq    %r13, %r15
// 202: 49 83 c7 b8                   addq    $-0x48, %r15
// 206: 49 c1 ef 03                   shrq    $0x3, %r15
// 20a: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 20e: 31 c0                         xorl    %eax, %eax
// 210: 48 83 c4 18                   addq    $0x18, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: c3                            retq
// 21f: 
static const unsigned char _BUILD_SETplus_MATCH_KEYS_code_body[544] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd1, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x29, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x08, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x7e, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x43, 0x66, 0x90, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdc, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8e, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xa2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x3c, 0x24, 0x4d, 0x89, 0x24, 0x07, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x74, 0xf7, 0xf0, 0x4b, 0x8b, 0x54, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x3e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xcb, 0x48, 0x63, 0xcb, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x3c, 0xf7, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_MATCH_KEYS_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_MATCH_KEYS_data_holes[1];

// _BUILD_SETplus_MATCH_MAPPING
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_MATCH_MAPPING.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 49 8b 4c c5 f8                movq    -0x8(%r13,%rax,8), %rcx
// 1c8: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1cc: f6 81 a8 00 00 00 40          testb   $0x40, 0xa8(%rcx)
// 1d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d5:  R_X86_64_64  _Py_FalseStruct
// 1dd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001df:  R_X86_64_64  _Py_TrueStruct
// 1e7: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 1eb: 49 89 54 c5 00                movq    %rdx, (%r13,%rax,8)
// 1f0: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 1f8: 4c 01 ee                      addq    %r13, %rsi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 48 89 df                      movq    %rbx, %rdi
// 208: 4c 89 fa                      movq    %r15, %rdx
// 20b: 48 83 c4 18                   addq    $0x18, %rsp
// 20f: 5b                            popq    %rbx
// 210: 41 5c                         popq    %r12
// 212: 41 5d                         popq    %r13
// 214: 41 5e                         popq    %r14
// 216: 41 5f                         popq    %r15
// 218: 5d                            popq    %rbp
// 219: ff e0                         jmpq    *%rax
// 21b: 
static const unsigned char _BUILD_SETplus_MATCH_MAPPING_code_body[540] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc5, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x54, 0xc5, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_MATCH_MAPPING_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_MATCH_MAPPING_data_holes[1];

// _BUILD_SETplus_MATCH_SEQUENCE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_MATCH_SEQUENCE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 49 8b 4c c5 f8                movq    -0x8(%r13,%rax,8), %rcx
// 1c8: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1cc: f6 81 a8 00 00 00 20          testb   $0x20, 0xa8(%rcx)
// 1d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d5:  R_X86_64_64  _Py_FalseStruct
// 1dd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001df:  R_X86_64_64  _Py_TrueStruct
// 1e7: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 1eb: 49 89 54 c5 00                movq    %rdx, (%r13,%rax,8)
// 1f0: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 1f8: 4c 01 ee                      addq    %r13, %rsi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 48 89 df                      movq    %rbx, %rdi
// 208: 4c 89 fa                      movq    %r15, %rdx
// 20b: 48 83 c4 18                   addq    $0x18, %rsp
// 20f: 5b                            popq    %rbx
// 210: 41 5c                         popq    %r12
// 212: 41 5d                         popq    %r13
// 214: 41 5e                         popq    %r14
// 216: 41 5f                         popq    %r15
// 218: 5d                            popq    %rbp
// 219: ff e0                         jmpq    *%rax
// 21b: 
static const unsigned char _BUILD_SETplus_MATCH_SEQUENCE_code_body[540] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc5, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x54, 0xc5, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_MATCH_SEQUENCE_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_MATCH_SEQUENCE_data_holes[1];

// _BUILD_SETplus_NOP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_NOP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1cb: 4c 01 ee                      addq    %r13, %rsi
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_CONTINUE
// 1d8: 48 89 df                      movq    %rbx, %rdi
// 1db: 4c 89 fa                      movq    %r15, %rdx
// 1de: 48 83 c4 18                   addq    $0x18, %rsp
// 1e2: 5b                            popq    %rbx
// 1e3: 41 5c                         popq    %r12
// 1e5: 41 5d                         popq    %r13
// 1e7: 41 5e                         popq    %r14
// 1e9: 41 5f                         popq    %r15
// 1eb: 5d                            popq    %rbp
// 1ec: ff e0                         jmpq    *%rax
// 1ee: 
static const unsigned char _BUILD_SETplus_NOP_code_body[495] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_NOP_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_NOP_data_holes[1];

// _BUILD_SETplus_POP_EXCEPT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_POP_EXCEPT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 4c 8d 3c c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %r15
// 1cb: 4d 01 ef                      addq    %r13, %r15
// 1ce: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1d3: 49 8b 4e 70                   movq    0x70(%r14), %rcx
// 1d7: 4c 8b 21                      movq    (%rcx), %r12
// 1da: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001dc:  R_X86_64_64  _Py_NoneStruct
// 1e4: 31 f6                         xorl    %esi, %esi
// 1e6: 48 39 d0                      cmpq    %rdx, %rax
// 1e9: 48 0f 45 f0                   cmovneq %rax, %rsi
// 1ed: 48 89 31                      movq    %rsi, (%rcx)
// 1f0: 4d 85 e4                      testq   %r12, %r12
// 1f3: 74 50                         je      0x245 <_JIT_ENTRY+0x245>
// 1f5: 49 8b 04 24                   movq    (%r12), %rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 7f 22                         jg      0x220 <_JIT_ENTRY+0x220>
// 1fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000200:  R_X86_64_64  .rodata.str1.1+0x39
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_NegativeRefcount
// 212: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 217: 4c 89 e2                      movq    %r12, %rdx
// 21a: ff d0                         callq   *%rax
// 21c: 49 8b 04 24                   movq    (%r12), %rax
// 220: 85 c0                         testl   %eax, %eax
// 222: 78 21                         js      0x245 <_JIT_ENTRY+0x245>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22e: ff d0                         callq   *%rax
// 230: 49 ff 0c 24                   decq    (%r12)
// 234: 75 0f                         jne     0x245 <_JIT_ENTRY+0x245>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_Dealloc
// 240: 4c 89 e7                      movq    %r12, %rdi
// 243: ff d0                         callq   *%rax
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 fe                      movq    %r15, %rsi
// 255: 4c 89 f2                      movq    %r14, %rdx
// 258: 48 83 c4 18                   addq    $0x18, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 
static const unsigned char _BUILD_SETplus_POP_EXCEPT_code_body[617] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xef, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x49, 0x8b, 0x4e, 0x70, 0x4c, 0x8b, 0x21, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_POP_EXCEPT_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_POP_EXCEPT_data_holes[1];

// _BUILD_SETplus_POP_FRAME
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_POP_FRAME.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 dc                      movq    %rbx, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 dc                      movq    %rbx, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 4d 29 ec                      subq    %r13, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 45 89 65 40                   movl    %r12d, 0x40(%r13)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4c 89 3c 03                   movq    %r15, (%rbx,%rax)
// 1b9: b8 01 00 00 00                movl    $0x1, %eax
// 1be: 29 c8                         subl    %ecx, %eax
// 1c0: 48 98                         cltq
// 1c2: 48 8d 0c c3                   leaq    (%rbx,%rax,8), %rcx
// 1c6: 48 83 c1 f8                   addq    $-0x8, %rcx
// 1ca: 48 8b 5c c3 f8                movq    -0x8(%rbx,%rax,8), %rbx
// 1cf: 4c 29 e9                      subq    %r13, %rcx
// 1d2: 48 83 c1 b8                   addq    $-0x48, %rcx
// 1d6: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1da: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// 1de: ff 45 24                      incl    0x24(%rbp)
// 1e1: 4d 8b 75 08                   movq    0x8(%r13), %r14
// 1e5: 4c 89 75 40                   movq    %r14, 0x40(%rbp)
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _PyEval_FrameClearAndPop
// 1f3: 48 89 ef                      movq    %rbp, %rdi
// 1f6: 4c 89 ee                      movq    %r13, %rsi
// 1f9: ff d0                         callq   *%rax
// 1fb: 49 63 46 40                   movslq  0x40(%r14), %rax
// 1ff: 49 89 5c c6 48                movq    %rbx, 0x48(%r14,%rax,8)
// 204: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 208: 48 83 c6 50                   addq    $0x50, %rsi
// 20c: 41 c7 46 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r14) # imm = 0xFFFFFFFF
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_CONTINUE
// 21e: 4c 89 f7                      movq    %r14, %rdi
// 221: 48 89 ea                      movq    %rbp, %rdx
// 224: 48 83 c4 18                   addq    $0x18, %rsp
// 228: 5b                            popq    %rbx
// 229: 41 5c                         popq    %r12
// 22b: 41 5d                         popq    %r13
// 22d: 41 5e                         popq    %r14
// 22f: 41 5f                         popq    %r15
// 231: 5d                            popq    %rbp
// 232: ff e0                         jmpq    *%rax
// 234: 
static const unsigned char _BUILD_SETplus_POP_FRAME_code_body[565] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdc, 0xeb, 0x5f, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x65, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x3c, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc3, 0x48, 0x83, 0xc1, 0xf8, 0x48, 0x8b, 0x5c, 0xc3, 0xf8, 0x4c, 0x29, 0xe9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x41, 0x89, 0x4d, 0x40, 0xff, 0x45, 0x24, 0x4d, 0x8b, 0x75, 0x08, 0x4c, 0x89, 0x75, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x63, 0x46, 0x40, 0x49, 0x89, 0x5c, 0xc6, 0x48, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x46, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_POP_FRAME_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_POP_FRAME_data_holes[1];

// _BUILD_SETplus_POP_TOP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_POP_TOP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: b8 01 00 00 00                movl    $0x1, %eax
// 1c1: 29 c8                         subl    %ecx, %eax
// 1c3: 48 63 d8                      movslq  %eax, %rbx
// 1c6: 4d 89 f7                      movq    %r14, %r15
// 1c9: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1ce: 49 8b 06                      movq    (%r14), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7e 0e                         jle     0x1e4 <_JIT_ENTRY+0x1e4>
// 1d6: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 1da: 49 83 c7 f8                   addq    $-0x8, %r15
// 1de: 85 c0                         testl   %eax, %eax
// 1e0: 79 2f                         jns     0x211 <_JIT_ENTRY+0x211>
// 1e2: eb 4d                         jmp     0x231 <_JIT_ENTRY+0x231>
// 1e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e6:  R_X86_64_64  .rodata.str1.1
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_NegativeRefcount
// 1f8: be 54 00 00 00                movl    $0x54, %esi
// 1fd: 4c 89 f2                      movq    %r14, %rdx
// 200: ff d0                         callq   *%rax
// 202: 49 8b 06                      movq    (%r14), %rax
// 205: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 209: 49 83 c7 f8                   addq    $-0x8, %r15
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 78 20                         js      0x231 <_JIT_ENTRY+0x231>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 49 ff 0e                      decq    (%r14)
// 220: 75 0f                         jne     0x231 <_JIT_ENTRY+0x231>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 4c 89 f7                      movq    %r14, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 4c 89 ef                      movq    %r13, %rdi
// 23e: 4c 89 fe                      movq    %r15, %rsi
// 241: 48 89 ea                      movq    %rbp, %rdx
// 244: 48 83 c4 18                   addq    $0x18, %rsp
// 248: 5b                            popq    %rbx
// 249: 41 5c                         popq    %r12
// 24b: 41 5d                         popq    %r13
// 24d: 41 5e                         popq    %r14
// 24f: 41 5f                         popq    %r15
// 251: 5d                            popq    %rbp
// 252: ff e0                         jmpq    *%rax
// 254: 
static const unsigned char _BUILD_SETplus_POP_TOP_code_body[597] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x0e, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x79, 0x2f, 0xeb, 0x4d, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_POP_TOP_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_POP_TOP_data_holes[1];

// _BUILD_SETplus_PUSH_EXC_INFO
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_PUSH_EXC_INFO.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 48 89 1c 24                   movq    %rbx, (%rsp)
// 42: 0f 84 59 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 48: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 1c 24                   movq    (%rsp), %rbx
// 125: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 12a: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 49 29 df                      subq    %rbx, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: bb 01 00 00 00                movl    $0x1, %ebx
// 1c1: b8 01 00 00 00                movl    $0x1, %eax
// 1c6: 29 c8                         subl    %ecx, %eax
// 1c8: 48 98                         cltq
// 1ca: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 1cf: 4c 8b 7d 70                   movq    0x70(%rbp), %r15
// 1d3: 4d 8b 27                      movq    (%r15), %r12
// 1d6: 41 8b 45 00                   movl    (%r13), %eax
// 1da: ff c0                         incl    %eax
// 1dc: 74 10                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 1de: 41 89 45 00                   movl    %eax, (%r13)
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ec: ff d0                         callq   *%rax
// 1ee: 4d 85 e4                      testq   %r12, %r12
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NoneStruct
// 1fb: 49 0f 45 c4                   cmovneq %r12, %rax
// 1ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000201:  R_X86_64_64  _JIT_OPARG
// 209: 0f b7 c9                      movzwl  %cx, %ecx
// 20c: 29 cb                         subl    %ecx, %ebx
// 20e: 48 63 cb                      movslq  %ebx, %rcx
// 211: 4d 89 2f                      movq    %r13, (%r15)
// 214: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 219: 4d 89 2c ce                   movq    %r13, (%r14,%rcx,8)
// 21d: 49 8d 74 ce 08                leaq    0x8(%r14,%rcx,8), %rsi
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 230: 48 89 ea                      movq    %rbp, %rdx
// 233: 48 83 c4 18                   addq    $0x18, %rsp
// 237: 5b                            popq    %rbx
// 238: 41 5c                         popq    %r12
// 23a: 41 5d                         popq    %r13
// 23c: 41 5e                         popq    %r14
// 23e: 41 5f                         popq    %r15
// 240: 5d                            popq    %rbp
// 241: ff e0                         jmpq    *%rax
// 243: 
static const unsigned char _BUILD_SETplus_PUSH_EXC_INFO_code_body[580] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x1c, 0x24, 0x0f, 0x84, 0x59, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x4c, 0x8b, 0x7d, 0x70, 0x4d, 0x8b, 0x27, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x0f, 0x45, 0xc4, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xcb, 0x48, 0x63, 0xcb, 0x4d, 0x89, 0x2f, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x4d, 0x89, 0x2c, 0xce, 0x49, 0x8d, 0x74, 0xce, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_PUSH_EXC_INFO_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_PUSH_EXC_INFO_data_holes[1];

// _BUILD_SETplus_PUSH_FRAME
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_PUSH_FRAME.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 48 8d 0c c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %rcx
// 1cb: 4c 01 e9                      addq    %r13, %rcx
// 1ce: 49 8b 7c c5 f8                movq    -0x8(%r13,%rax,8), %rdi
// 1d3: 48 29 d9                      subq    %rbx, %rcx
// 1d6: 48 83 c1 b8                   addq    $-0x48, %rcx
// 1da: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1de: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 1e1: 48 89 5f 08                   movq    %rbx, 0x8(%rdi)
// 1e5: 49 89 7e 40                   movq    %rdi, 0x40(%r14)
// 1e9: 41 ff 4e 24                   decl    0x24(%r14)
// 1ed: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 1f1: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 1f5: 48 83 c6 48                   addq    $0x48, %rsi
// 1f9: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_CONTINUE
// 20a: 4c 89 f2                      movq    %r14, %rdx
// 20d: 48 83 c4 18                   addq    $0x18, %rsp
// 211: 5b                            popq    %rbx
// 212: 41 5c                         popq    %r12
// 214: 41 5d                         popq    %r13
// 216: 41 5e                         popq    %r14
// 218: 41 5f                         popq    %r15
// 21a: 5d                            popq    %rbp
// 21b: ff e0                         jmpq    *%rax
// 21d: 
static const unsigned char _BUILD_SETplus_PUSH_FRAME_code_body[542] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xe9, 0x49, 0x8b, 0x7c, 0xc5, 0xf8, 0x48, 0x29, 0xd9, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4b, 0x40, 0x48, 0x89, 0x5f, 0x08, 0x49, 0x89, 0x7e, 0x40, 0x41, 0xff, 0x4e, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_PUSH_FRAME_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_PUSH_FRAME_data_holes[1];

// _BUILD_SETplus_PUSH_NULL
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_PUSH_NULL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 49 c7 44 c5 00 00 00 00 00    movq    $0x0, (%r13,%rax,8)
// 1cc: 48 8d 34 c5 08 00 00 00       leaq    0x8(,%rax,8), %rsi
// 1d4: 4c 01 ee                      addq    %r13, %rsi
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_CONTINUE
// 1e1: 48 89 df                      movq    %rbx, %rdi
// 1e4: 4c 89 fa                      movq    %r15, %rdx
// 1e7: 48 83 c4 18                   addq    $0x18, %rsp
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: 5d                            popq    %rbp
// 1f5: ff e0                         jmpq    *%rax
// 1f7: 
static const unsigned char _BUILD_SETplus_PUSH_NULL_code_body[504] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0xc7, 0x44, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x34, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_PUSH_NULL_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_PUSH_NULL_data_holes[1];

// _BUILD_SETplus_RESUME_CHECK
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_RESUME_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: e9 87 00 00 00                jmp     0x21b <_JIT_ENTRY+0x21b>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1b0: b8 01 00 00 00                movl    $0x1, %eax
// 1b5: 29 c8                         subl    %ecx, %eax
// 1b7: 48 98                         cltq
// 1b9: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1c1: 4c 01 ee                      addq    %r13, %rsi
// 1c4: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1c8: 48 8b 08                      movq    (%rax), %rcx
// 1cb: 48 8b 03                      movq    (%rbx), %rax
// 1ce: 48 3b 88 a8 00 00 00          cmpq    0xa8(%rax), %rcx
// 1d5: 75 20                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_CONTINUE
// 1e1: 48 89 df                      movq    %rbx, %rdi
// 1e4: 4c 89 fa                      movq    %r15, %rdx
// 1e7: 48 83 c4 18                   addq    $0x18, %rsp
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: 5d                            popq    %rbp
// 1f5: ff e0                         jmpq    *%rax
// 1f7: 48 29 de                      subq    %rbx, %rsi
// 1fa: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1fe: 48 c1 ee 03                   shrq    $0x3, %rsi
// 202: 89 73 40                      movl    %esi, 0x40(%rbx)
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  _JIT_TARGET
// 20f: 89 c9                         movl    %ecx, %ecx
// 211: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 215: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21b: 48 83 c4 18                   addq    $0x18, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: c3                            retq
// 22a: 
static const unsigned char _BUILD_SETplus_RESUME_CHECK_code_body[555] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x3b, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_RESUME_CHECK_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_RESUME_CHECK_data_holes[1];

// _BUILD_SETplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_SAVE_RETURN_OFFSET.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b6: 48 f7 da                      negq    %rdx
// 1b9: 4d 89 74 15 00                movq    %r14, (%r13,%rdx)
// 1be: ba 01 00 00 00                movl    $0x1, %edx
// 1c3: 29 ca                         subl    %ecx, %edx
// 1c5: 48 63 ca                      movslq  %edx, %rcx
// 1c8: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1d0: 4c 01 ee                      addq    %r13, %rsi
// 1d3: 66 89 43 44                   movw    %ax, 0x44(%rbx)
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_CONTINUE
// 1e1: 48 89 df                      movq    %rbx, %rdi
// 1e4: 4c 89 fa                      movq    %r15, %rdx
// 1e7: 48 83 c4 18                   addq    $0x18, %rsp
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: 5d                            popq    %rbp
// 1f5: ff e0                         jmpq    *%rax
// 1f7: 
static const unsigned char _BUILD_SETplus_SAVE_RETURN_OFFSET_code_body[504] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x74, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x66, 0x89, 0x43, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_SAVE_RETURN_OFFSET_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_SAVE_RETURN_OFFSET_data_holes[1];

// _BUILD_SETplus_SETUP_ANNOTATIONS
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_SETUP_ANNOTATIONS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 48 89 6c 24 18                movq    %rbp, 0x18(%rsp)
// 49: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 5a: 49 89 de                      movq    %rbx, %r14
// 5d: 49 29 c6                      subq    %rax, %r14
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: bd 01 00 00 00                movl    $0x1, %ebp
// 75: 0f 43 e8                      cmovael %eax, %ebp
// 78: 45 31 ed                      xorl    %r13d, %r13d
// 7b: 45 31 ff                      xorl    %r15d, %r15d
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 49 ff c5                      incq    %r13
// 83: 4c 39 ed                      cmpq    %r13, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c ee                   movq    (%r14,%r13,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 de                      movq    %rbx, %r14
// 11e: e9 63 01 00 00                jmp     0x286 <_JIT_ENTRY+0x286>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 12b: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 130: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 135: 74 5d                         je      0x194 <_JIT_ENTRY+0x194>
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7f 22                         jg      0x162 <_JIT_ENTRY+0x162>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14f: 4c 89 e2                      movq    %r12, %rdx
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 04 24                   movq    (%r12), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 1c 01 00 00             js      0x286 <_JIT_ENTRY+0x286>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0c 24                   decq    (%r12)
// 17a: 0f 85 06 01 00 00             jne     0x286 <_JIT_ENTRY+0x286>
// 180: 4c 89 e7                      movq    %r12, %rdi
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_Dealloc
// 18d: ff d0                         callq   *%rax
// 18f: e9 f2 00 00 00                jmp     0x286 <_JIT_ENTRY+0x286>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1af: b8 01 00 00 00                movl    $0x1, %eax
// 1b4: 29 c8                         subl    %ecx, %eax
// 1b6: 48 98                         cltq
// 1b8: 4c 8d 34 c3                   leaq    (%rbx,%rax,8), %r14
// 1bc: 49 8b 7d 28                   movq    0x28(%r13), %rdi
// 1c0: 48 85 ff                      testq   %rdi, %rdi
// 1c3: 0f 84 95 00 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d3: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001d5:  R_X86_64_64  _PyRuntime
// 1dd: 49 81 c7 a8 a7 00 00          addq    $0xa7a8, %r15           # imm = 0xA7A8
// 1e4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e9: 4c 89 fe                      movq    %r15, %rsi
// 1ec: ff d0                         callq   *%rax
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 0f 88 90 00 00 00             js      0x286 <_JIT_ENTRY+0x286>
// 1f6: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1fb: 48 85 db                      testq   %rbx, %rbx
// 1fe: 0f 84 a2 00 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 204: 48 8b 03                      movq    (%rbx), %rax
// 207: 48 85 c0                      testq   %rax, %rax
// 20a: 7f 21                         jg      0x22d <_JIT_ENTRY+0x22d>
// 20c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020e:  R_X86_64_64  .rodata.str1.1
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_NegativeRefcount
// 220: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 225: 48 89 da                      movq    %rbx, %rdx
// 228: ff d0                         callq   *%rax
// 22a: 48 8b 03                      movq    (%rbx), %rax
// 22d: 85 c0                         testl   %eax, %eax
// 22f: 0f 88 f9 00 00 00             js      0x32e <_JIT_ENTRY+0x32e>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23f: ff d0                         callq   *%rax
// 241: 48 ff 0b                      decq    (%rbx)
// 244: 0f 85 e4 00 00 00             jne     0x32e <_JIT_ENTRY+0x32e>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: 48 89 df                      movq    %rbx, %rdi
// 257: ff d0                         callq   *%rax
// 259: e9 d0 00 00 00                jmp     0x32e <_JIT_ENTRY+0x32e>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  PyExc_SystemError
// 268: 48 8b 30                      movq    (%rax), %rsi
// 26b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000026d:  R_X86_64_64  .rodata.str1.1+0x39
// 275: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000277:  R_X86_64_64  _PyErr_Format
// 27f: 48 89 ef                      movq    %rbp, %rdi
// 282: 31 c0                         xorl    %eax, %eax
// 284: ff d1                         callq   *%rcx
// 286: 4d 29 ee                      subq    %r13, %r14
// 289: 49 83 c6 b8                   addq    $-0x48, %r14
// 28d: 49 c1 ee 03                   shrq    $0x3, %r14
// 291: 45 89 75 40                   movl    %r14d, 0x40(%r13)
// 295: 31 c0                         xorl    %eax, %eax
// 297: 48 83 c4 28                   addq    $0x28, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: c3                            retq
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  PyDict_New
// 2b0: ff d0                         callq   *%rax
// 2b2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2b7: 48 85 c0                      testq   %rax, %rax
// 2ba: 74 ca                         je      0x286 <_JIT_ENTRY+0x286>
// 2bc: 49 8b 7d 28                   movq    0x28(%r13), %rdi
// 2c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c2:  R_X86_64_64  PyObject_SetItem
// 2ca: 4c 89 fe                      movq    %r15, %rsi
// 2cd: 48 89 c2                      movq    %rax, %rdx
// 2d0: ff d1                         callq   *%rcx
// 2d2: 89 c3                         movl    %eax, %ebx
// 2d4: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2d9: 49 8b 07                      movq    (%r15), %rax
// 2dc: 48 85 c0                      testq   %rax, %rax
// 2df: 7f 21                         jg      0x302 <_JIT_ENTRY+0x302>
// 2e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e3:  R_X86_64_64  .rodata.str1.1
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_NegativeRefcount
// 2f5: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 2fa: 4c 89 fa                      movq    %r15, %rdx
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 8b 07                      movq    (%r15), %rax
// 302: 85 c0                         testl   %eax, %eax
// 304: 78 20                         js      0x326 <_JIT_ENTRY+0x326>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 310: ff d0                         callq   *%rax
// 312: 49 ff 0f                      decq    (%r15)
// 315: 75 0f                         jne     0x326 <_JIT_ENTRY+0x326>
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_Dealloc
// 321: 4c 89 ff                      movq    %r15, %rdi
// 324: ff d0                         callq   *%rax
// 326: 85 db                         testl   %ebx, %ebx
// 328: 0f 85 58 ff ff ff             jne     0x286 <_JIT_ENTRY+0x286>
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _JIT_CONTINUE
// 338: 4c 89 ef                      movq    %r13, %rdi
// 33b: 4c 89 f6                      movq    %r14, %rsi
// 33e: 48 89 ea                      movq    %rbp, %rdx
// 341: 48 83 c4 28                   addq    $0x28, %rsp
// 345: 5b                            popq    %rbx
// 346: 41 5c                         popq    %r12
// 348: 41 5d                         popq    %r13
// 34a: 41 5e                         popq    %r14
// 34c: 41 5f                         popq    %r15
// 34e: 5d                            popq    %rbp
// 34f: ff e0                         jmpq    *%rax
// 351: 
static const unsigned char _BUILD_SETplus_SETUP_ANNOTATIONS_code_body[850] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xed, 0x45, 0x31, 0xff, 0xeb, 0x0c, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xee, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xde, 0xe9, 0x63, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x1c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x06, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc3, 0x49, 0x8b, 0x7d, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc7, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x0f, 0x88, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x31, 0xc0, 0xff, 0xd1, 0x4d, 0x29, 0xee, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x75, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0xca, 0x49, 0x8b, 0x7d, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc3, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xdb, 0x0f, 0x85, 0x58, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_SETUP_ANNOTATIONS_code_holes[30] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _BUILD_SETplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_SETUP_ANNOTATIONS_data_holes[1];

// _BUILD_SETplus_SET_ADD
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_SET_ADD.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 45 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 e4                      xorl    %r12d, %r12d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c4                      incq    %r12
// 83: 4c 39 e5                      cmpq    %r12, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c e7                   movq    (%r15,%r12,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 f7                      movq    %r14, %r15
// 11e: e9 32 01 00 00                jmp     0x255 <_JIT_ENTRY+0x255>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 5d                         je      0x18e <_JIT_ENTRY+0x18e>
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 88 f1 00 00 00             js      0x255 <_JIT_ENTRY+0x255>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 0f 85 db 00 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: ff d0                         callq   *%rax
// 189: e9 c7 00 00 00                jmp     0x255 <_JIT_ENTRY+0x255>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a2: 48 f7 d8                      negq    %rax
// 1a5: 4d 89 2c 06                   movq    %r13, (%r14,%rax)
// 1a9: b8 01 00 00 00                movl    $0x1, %eax
// 1ae: 29 c8                         subl    %ecx, %eax
// 1b0: 4c 63 e0                      movslq  %eax, %r12
// 1b3: 4d 89 f5                      movq    %r14, %r13
// 1b6: 4f 8b 74 e6 f8                movq    -0x8(%r14,%r12,8), %r14
// 1bb: f7 d1                         notl    %ecx
// 1bd: 48 63 c1                      movslq  %ecx, %rax
// 1c0: 4c 01 e0                      addq    %r12, %rax
// 1c3: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 1c8: 4c 89 f6                      movq    %r14, %rsi
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  PySet_Add
// 1d5: ff d0                         callq   *%rax
// 1d7: 89 c3                         movl    %eax, %ebx
// 1d9: 49 8b 06                      movq    (%r14), %rax
// 1dc: 48 85 c0                      testq   %rax, %rax
// 1df: 7e 1c                         jle     0x1fd <_JIT_ENTRY+0x1fd>
// 1e1: 4e 8d 3c e5 00 00 00 00       leaq    (,%r12,8), %r15
// 1e9: 4d 01 ef                      addq    %r13, %r15
// 1ec: 4e 8d 24 e5 f8 ff ff ff       leaq    -0x8(,%r12,8), %r12
// 1f4: 4d 01 ec                      addq    %r13, %r12
// 1f7: 85 c0                         testl   %eax, %eax
// 1f9: 79 3d                         jns     0x238 <_JIT_ENTRY+0x238>
// 1fb: eb 4c                         jmp     0x249 <_JIT_ENTRY+0x249>
// 1fd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ff:  R_X86_64_64  .rodata.str1.1
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_NegativeRefcount
// 211: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 216: 4c 89 f2                      movq    %r14, %rdx
// 219: ff d0                         callq   *%rax
// 21b: 49 8b 06                      movq    (%r14), %rax
// 21e: 4e 8d 3c e5 00 00 00 00       leaq    (,%r12,8), %r15
// 226: 4d 01 ef                      addq    %r13, %r15
// 229: 4e 8d 24 e5 f8 ff ff ff       leaq    -0x8(,%r12,8), %r12
// 231: 4d 01 ec                      addq    %r13, %r12
// 234: 85 c0                         testl   %eax, %eax
// 236: 78 11                         js      0x249 <_JIT_ENTRY+0x249>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 242: ff d0                         callq   *%rax
// 244: 49 ff 0e                      decq    (%r14)
// 247: 74 2c                         je      0x275 <_JIT_ENTRY+0x275>
// 249: 85 db                         testl   %ebx, %ebx
// 24b: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 24f: 74 3b                         je      0x28c <_JIT_ENTRY+0x28c>
// 251: 49 83 c7 f8                   addq    $-0x8, %r15
// 255: 49 29 ef                      subq    %rbp, %r15
// 258: 49 83 c7 b8                   addq    $-0x48, %r15
// 25c: 49 c1 ef 03                   shrq    $0x3, %r15
// 260: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 264: 31 c0                         xorl    %eax, %eax
// 266: 48 83 c4 18                   addq    $0x18, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: c3                            retq
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 f7                      movq    %r14, %rdi
// 282: ff d0                         callq   *%rax
// 284: 85 db                         testl   %ebx, %ebx
// 286: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 28a: 75 c5                         jne     0x251 <_JIT_ENTRY+0x251>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_CONTINUE
// 296: 48 89 ef                      movq    %rbp, %rdi
// 299: 4c 89 fe                      movq    %r15, %rsi
// 29c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2a1: 48 83 c4 18                   addq    $0x18, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: ff e0                         jmpq    *%rax
// 2b1: 
static const unsigned char _BUILD_SETplus_SET_ADD_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe5, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xe7, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x32, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xf1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x2c, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xe0, 0x4d, 0x89, 0xf5, 0x4f, 0x8b, 0x74, 0xe6, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x4c, 0x01, 0xe0, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc3, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x4e, 0x8d, 0x3c, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x4e, 0x8d, 0x24, 0xe5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xec, 0x85, 0xc0, 0x79, 0x3d, 0xeb, 0x4c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4e, 0x8d, 0x3c, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x4e, 0x8d, 0x24, 0xe5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xec, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x2c, 0x85, 0xdb, 0x4d, 0x0f, 0x44, 0xfc, 0x74, 0x3b, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xdb, 0x4d, 0x0f, 0x44, 0xfc, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_SET_ADD_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_SET_ADD_data_holes[1];

// _BUILD_SETplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_SET_FUNCTION_ATTRIBUTE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 49 29 df                      subq    %rbx, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 f0                      movzwl  %ax, %esi
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1bd: b8 01 00 00 00                movl    $0x1, %eax
// 1c2: 29 f0                         subl    %esi, %eax
// 1c4: 48 63 d0                      movslq  %eax, %rdx
// 1c7: 49 8b 4c d5 f0                movq    -0x10(%r13,%rdx,8), %rcx
// 1cc: 49 8b 44 d5 f8                movq    -0x8(%r13,%rdx,8), %rax
// 1d1: 83 fe 03                      cmpl    $0x3, %esi
// 1d4: 7f 10                         jg      0x1e6 <_JIT_ENTRY+0x1e6>
// 1d6: 83 fe 01                      cmpl    $0x1, %esi
// 1d9: 74 1b                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 1db: 83 fe 02                      cmpl    $0x2, %esi
// 1de: 75 6a                         jne     0x24a <_JIT_ENTRY+0x24a>
// 1e0: 48 8d 78 40                   leaq    0x40(%rax), %rdi
// 1e4: eb 1a                         jmp     0x200 <_JIT_ENTRY+0x200>
// 1e6: 83 fe 04                      cmpl    $0x4, %esi
// 1e9: 74 11                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1eb: 83 fe 08                      cmpl    $0x8, %esi
// 1ee: 75 5a                         jne     0x24a <_JIT_ENTRY+0x24a>
// 1f0: 48 8d 78 48                   leaq    0x48(%rax), %rdi
// 1f4: eb 0a                         jmp     0x200 <_JIT_ENTRY+0x200>
// 1f6: 48 8d 78 38                   leaq    0x38(%rax), %rdi
// 1fa: eb 04                         jmp     0x200 <_JIT_ENTRY+0x200>
// 1fc: 48 8d 78 70                   leaq    0x70(%rax), %rdi
// 200: 48 8d 34 d5 f8 ff ff ff       leaq    -0x8(,%rdx,8), %rsi
// 208: 4c 01 ee                      addq    %r13, %rsi
// 20b: 48 89 0f                      movq    %rcx, (%rdi)
// 20e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000210:  R_X86_64_64  _JIT_OPARG
// 218: 0f b7 c9                      movzwl  %cx, %ecx
// 21b: ba 01 00 00 00                movl    $0x1, %edx
// 220: 29 ca                         subl    %ecx, %edx
// 222: 48 63 ca                      movslq  %edx, %rcx
// 225: 49 89 44 cd f0                movq    %rax, -0x10(%r13,%rcx,8)
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_CONTINUE
// 234: 48 89 df                      movq    %rbx, %rdi
// 237: 4c 89 f2                      movq    %r14, %rdx
// 23a: 48 83 c4 18                   addq    $0x18, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1+0x39
// 254: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000256:  R_X86_64_64  .rodata.str1.1+0x44
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_FatalErrorFunc
// 268: ff d0                         callq   *%rax
// 26a: 
static const unsigned char _BUILD_SETplus_SET_FUNCTION_ATTRIBUTE_code_body[619] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf0, 0x48, 0x63, 0xd0, 0x49, 0x8b, 0x4c, 0xd5, 0xf0, 0x49, 0x8b, 0x44, 0xd5, 0xf8, 0x83, 0xfe, 0x03, 0x7f, 0x10, 0x83, 0xfe, 0x01, 0x74, 0x1b, 0x83, 0xfe, 0x02, 0x75, 0x6a, 0x48, 0x8d, 0x78, 0x40, 0xeb, 0x1a, 0x83, 0xfe, 0x04, 0x74, 0x11, 0x83, 0xfe, 0x08, 0x75, 0x5a, 0x48, 0x8d, 0x78, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x78, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x78, 0x70, 0x48, 0x8d, 0x34, 0xd5, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xee, 0x48, 0x89, 0x0f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xcd, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BUILD_SETplus_SET_FUNCTION_ATTRIBUTE_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x256, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _BUILD_SETplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _BUILD_SETplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _BUILD_SETplus_SET_IP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_SET_IP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b6: 48 f7 da                      negq    %rdx
// 1b9: 4d 89 74 15 00                movq    %r14, (%r13,%rdx)
// 1be: ba 01 00 00 00                movl    $0x1, %edx
// 1c3: 29 ca                         subl    %ecx, %edx
// 1c5: 48 63 ca                      movslq  %edx, %rcx
// 1c8: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1d0: 4c 01 ee                      addq    %r13, %rsi
// 1d3: 48 8b 0b                      movq    (%rbx), %rcx
// 1d6: 48 8d 84 41 c8 00 00 00       leaq    0xc8(%rcx,%rax,2), %rax
// 1de: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 48 89 df                      movq    %rbx, %rdi
// 1ef: 4c 89 fa                      movq    %r15, %rdx
// 1f2: 48 83 c4 18                   addq    $0x18, %rsp
// 1f6: 5b                            popq    %rbx
// 1f7: 41 5c                         popq    %r12
// 1f9: 41 5d                         popq    %r13
// 1fb: 41 5e                         popq    %r14
// 1fd: 41 5f                         popq    %r15
// 1ff: 5d                            popq    %rbp
// 200: ff e0                         jmpq    *%rax
// 202: 
static const unsigned char _BUILD_SETplus_SET_IP_code_body[515] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x74, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0x8b, 0x0b, 0x48, 0x8d, 0x84, 0x41, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_SET_IP_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_SET_IP_data_holes[1];

// _BUILD_SETplus_SET_UPDATE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_SET_UPDATE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 45 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 24 24                   movq    %r12, (%rsp)
// 59: 4d 89 e7                      movq    %r12, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 e4                      xorl    %r12d, %r12d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c4                      incq    %r12
// 83: 4c 39 e5                      cmpq    %r12, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c e7                   movq    (%r15,%r12,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 e7                      movq    %r12, %r15
// 11e: e9 47 01 00 00                jmp     0x26a <_JIT_ENTRY+0x26a>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 24 24                   movq    (%rsp), %r12
// 12f: 74 5d                         je      0x18e <_JIT_ENTRY+0x18e>
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 88 06 01 00 00             js      0x26a <_JIT_ENTRY+0x26a>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 0f 85 f0 00 00 00             jne     0x26a <_JIT_ENTRY+0x26a>
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: ff d0                         callq   *%rax
// 189: e9 dc 00 00 00                jmp     0x26a <_JIT_ENTRY+0x26a>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a2: 48 f7 d8                      negq    %rax
// 1a5: 4d 89 2c 04                   movq    %r13, (%r12,%rax)
// 1a9: b8 01 00 00 00                movl    $0x1, %eax
// 1ae: 29 c8                         subl    %ecx, %eax
// 1b0: 4c 63 f8                      movslq  %eax, %r15
// 1b3: 4f 8b 74 fc f8                movq    -0x8(%r12,%r15,8), %r14
// 1b8: f7 d1                         notl    %ecx
// 1ba: 48 63 c1                      movslq  %ecx, %rax
// 1bd: 4c 01 f8                      addq    %r15, %rax
// 1c0: 49 8b 3c c4                   movq    (%r12,%rax,8), %rdi
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _PySet_Update
// 1ce: 4c 89 f6                      movq    %r14, %rsi
// 1d1: ff d0                         callq   *%rax
// 1d3: 89 c3                         movl    %eax, %ebx
// 1d5: 49 8b 06                      movq    (%r14), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 7f 21                         jg      0x1fe <_JIT_ENTRY+0x1fe>
// 1dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_NegativeRefcount
// 1f1: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 1f6: 4c 89 f2                      movq    %r14, %rdx
// 1f9: ff d0                         callq   *%rax
// 1fb: 49 8b 06                      movq    (%r14), %rax
// 1fe: 4c 89 e1                      movq    %r12, %rcx
// 201: 4f 8d 24 fc                   leaq    (%r12,%r15,8), %r12
// 205: 4e 8d 3c f9                   leaq    (%rcx,%r15,8), %r15
// 209: 49 83 c7 f8                   addq    $-0x8, %r15
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 78 11                         js      0x222 <_JIT_ENTRY+0x222>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 49 ff 0e                      decq    (%r14)
// 220: 74 2d                         je      0x24f <_JIT_ENTRY+0x24f>
// 222: 85 db                         testl   %ebx, %ebx
// 224: 4d 0f 48 fc                   cmovsq  %r12, %r15
// 228: 78 3c                         js      0x266 <_JIT_ENTRY+0x266>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_CONTINUE
// 234: 48 89 ef                      movq    %rbp, %rdi
// 237: 4c 89 fe                      movq    %r15, %rsi
// 23a: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 23f: 48 83 c4 18                   addq    $0x18, %rsp
// 243: 5b                            popq    %rbx
// 244: 41 5c                         popq    %r12
// 246: 41 5d                         popq    %r13
// 248: 41 5e                         popq    %r14
// 24a: 41 5f                         popq    %r15
// 24c: 5d                            popq    %rbp
// 24d: ff e0                         jmpq    *%rax
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_Dealloc
// 259: 4c 89 f7                      movq    %r14, %rdi
// 25c: ff d0                         callq   *%rax
// 25e: 85 db                         testl   %ebx, %ebx
// 260: 4d 0f 48 fc                   cmovsq  %r12, %r15
// 264: 79 c4                         jns     0x22a <_JIT_ENTRY+0x22a>
// 266: 49 83 c7 f8                   addq    $-0x8, %r15
// 26a: 49 29 ef                      subq    %rbp, %r15
// 26d: 49 83 c7 b8                   addq    $-0x48, %r15
// 271: 49 c1 ef 03                   shrq    $0x3, %r15
// 275: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 279: 31 c0                         xorl    %eax, %eax
// 27b: 48 83 c4 18                   addq    $0x18, %rsp
// 27f: 5b                            popq    %rbx
// 280: 41 5c                         popq    %r12
// 282: 41 5d                         popq    %r13
// 284: 41 5e                         popq    %r14
// 286: 41 5f                         popq    %r15
// 288: 5d                            popq    %rbp
// 289: c3                            retq
// 28a: 
static const unsigned char _BUILD_SETplus_SET_UPDATE_code_body[651] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x24, 0x24, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe5, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xe7, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xe7, 0xe9, 0x47, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x24, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xf0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xdc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x2c, 0x04, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x74, 0xfc, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x4c, 0x01, 0xf8, 0x49, 0x8b, 0x3c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc3, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4c, 0x89, 0xe1, 0x4f, 0x8d, 0x24, 0xfc, 0x4e, 0x8d, 0x3c, 0xf9, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x2d, 0x85, 0xdb, 0x4d, 0x0f, 0x48, 0xfc, 0x78, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xdb, 0x4d, 0x0f, 0x48, 0xfc, 0x79, 0xc4, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_SET_UPDATE_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_SET_UPDATE_data_holes[1];

// _BUILD_SETplus_STORE_ATTR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_ATTR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 45 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 49: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 ec                      movq    %rbp, %r12
// 11e: e9 62 01 00 00                jmp     0x285 <_JIT_ENTRY+0x285>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 5d                         je      0x18e <_JIT_ENTRY+0x18e>
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 88 21 01 00 00             js      0x285 <_JIT_ENTRY+0x285>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 0f 85 0b 01 00 00             jne     0x285 <_JIT_ENTRY+0x285>
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: ff d0                         callq   *%rax
// 189: e9 f7 00 00 00                jmp     0x285 <_JIT_ENTRY+0x285>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1a6: 48 f7 da                      negq    %rdx
// 1a9: 4c 89 6c 15 00                movq    %r13, (%rbp,%rdx)
// 1ae: ba 01 00 00 00                movl    $0x1, %edx
// 1b3: 29 ca                         subl    %ecx, %edx
// 1b5: 48 63 da                      movslq  %edx, %rbx
// 1b8: 4c 8b 74 dd f0                movq    -0x10(%rbp,%rbx,8), %r14
// 1bd: 49 89 ec                      movq    %rbp, %r12
// 1c0: 4c 8b 6c dd f8                movq    -0x8(%rbp,%rbx,8), %r13
// 1c5: 49 8b 0f                      movq    (%r15), %rcx
// 1c8: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1cc: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  PyObject_SetAttr
// 1db: 4c 89 ef                      movq    %r13, %rdi
// 1de: 4c 89 f2                      movq    %r14, %rdx
// 1e1: ff d0                         callq   *%rax
// 1e3: 89 c5                         movl    %eax, %ebp
// 1e5: 49 8b 06                      movq    (%r14), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7e 06                         jle     0x1f3 <_JIT_ENTRY+0x1f3>
// 1ed: 85 c0                         testl   %eax, %eax
// 1ef: 79 27                         jns     0x218 <_JIT_ENTRY+0x218>
// 1f1: eb 36                         jmp     0x229 <_JIT_ENTRY+0x229>
// 1f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_NegativeRefcount
// 207: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 20c: 4c 89 f2                      movq    %r14, %rdx
// 20f: ff d0                         callq   *%rax
// 211: 49 8b 06                      movq    (%r14), %rax
// 214: 85 c0                         testl   %eax, %eax
// 216: 78 11                         js      0x229 <_JIT_ENTRY+0x229>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 222: ff d0                         callq   *%rax
// 224: 49 ff 0e                      decq    (%r14)
// 227: 74 7c                         je      0x2a5 <_JIT_ENTRY+0x2a5>
// 229: 49 8b 45 00                   movq    (%r13), %rax
// 22d: 48 85 c0                      testq   %rax, %rax
// 230: 7f 22                         jg      0x254 <_JIT_ENTRY+0x254>
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_NegativeRefcount
// 246: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 24b: 4c 89 ea                      movq    %r13, %rdx
// 24e: ff d0                         callq   *%rax
// 250: 49 8b 45 00                   movq    (%r13), %rax
// 254: 4c 89 e1                      movq    %r12, %rcx
// 257: 4d 8d 24 dc                   leaq    (%r12,%rbx,8), %r12
// 25b: 48 8d 1c d9                   leaq    (%rcx,%rbx,8), %rbx
// 25f: 48 83 c3 f0                   addq    $-0x10, %rbx
// 263: 85 c0                         testl   %eax, %eax
// 265: 78 12                         js      0x279 <_JIT_ENTRY+0x279>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 271: ff d0                         callq   *%rax
// 273: 49 ff 4d 00                   decq    (%r13)
// 277: 74 49                         je      0x2c2 <_JIT_ENTRY+0x2c2>
// 279: 85 ed                         testl   %ebp, %ebp
// 27b: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 27f: 74 58                         je      0x2d9 <_JIT_ENTRY+0x2d9>
// 281: 49 83 c4 f0                   addq    $-0x10, %r12
// 285: 4d 29 fc                      subq    %r15, %r12
// 288: 49 83 c4 b8                   addq    $-0x48, %r12
// 28c: 49 c1 ec 03                   shrq    $0x3, %r12
// 290: 45 89 67 40                   movl    %r12d, 0x40(%r15)
// 294: 31 c0                         xorl    %eax, %eax
// 296: 48 83 c4 18                   addq    $0x18, %rsp
// 29a: 5b                            popq    %rbx
// 29b: 41 5c                         popq    %r12
// 29d: 41 5d                         popq    %r13
// 29f: 41 5e                         popq    %r14
// 2a1: 41 5f                         popq    %r15
// 2a3: 5d                            popq    %rbp
// 2a4: c3                            retq
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 f7                      movq    %r14, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 8b 45 00                   movq    (%r13), %rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 7f 97                         jg      0x254 <_JIT_ENTRY+0x254>
// 2bd: e9 70 ff ff ff                jmp     0x232 <_JIT_ENTRY+0x232>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 4c 89 ef                      movq    %r13, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 85 ed                         testl   %ebp, %ebp
// 2d3: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2d7: 75 a8                         jne     0x281 <_JIT_ENTRY+0x281>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _JIT_CONTINUE
// 2e3: 4c 89 ff                      movq    %r15, %rdi
// 2e6: 4c 89 e6                      movq    %r12, %rsi
// 2e9: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2ee: 48 83 c4 18                   addq    $0x18, %rsp
// 2f2: 5b                            popq    %rbx
// 2f3: 41 5c                         popq    %r12
// 2f5: 41 5d                         popq    %r13
// 2f7: 41 5e                         popq    %r14
// 2f9: 41 5f                         popq    %r15
// 2fb: 5d                            popq    %rbp
// 2fc: ff e0                         jmpq    *%rax
// 2fe: 
static const unsigned char _BUILD_SETplus_STORE_ATTR_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xe9, 0x62, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x21, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x0b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xf7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x89, 0x6c, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4c, 0x8b, 0x74, 0xdd, 0xf0, 0x49, 0x89, 0xec, 0x4c, 0x8b, 0x6c, 0xdd, 0xf8, 0x49, 0x8b, 0x0f, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x7c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4c, 0x89, 0xe1, 0x4d, 0x8d, 0x24, 0xdc, 0x48, 0x8d, 0x1c, 0xd9, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x49, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x58, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x97, 0xe9, 0x70, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x75, 0xa8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_ATTR_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_ATTR_data_holes[1];

// _BUILD_SETplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_ATTR_INSTANCE_VALUE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: b8 01 00 00 00                movl    $0x1, %eax
// 1c1: 29 c8                         subl    %ecx, %eax
// 1c3: 48 63 d8                      movslq  %eax, %rbx
// 1c6: 49 8b 4c de f0                movq    -0x10(%r14,%rbx,8), %rcx
// 1cb: 4d 89 f7                      movq    %r14, %r15
// 1ce: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 1d3: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1d8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001da:  R_X86_64_64  _JIT_OPERAND
// 1e2: 0f b7 d2                      movzwl  %dx, %edx
// 1e5: 4c 8b 74 d0 01                movq    0x1(%rax,%rdx,8), %r14
// 1ea: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 1ef: 4d 85 f6                      testq   %r14, %r14
// 1f2: 74 4f                         je      0x243 <_JIT_ENTRY+0x243>
// 1f4: 49 8b 06                      movq    (%r14), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 7f 21                         jg      0x21d <_JIT_ENTRY+0x21d>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 215: 4c 89 f2                      movq    %r14, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 49 8b 06                      movq    (%r14), %rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 78 3e                         js      0x25f <_JIT_ENTRY+0x25f>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22b: ff d0                         callq   *%rax
// 22d: 49 ff 0e                      decq    (%r14)
// 230: 75 2d                         jne     0x25f <_JIT_ENTRY+0x25f>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 f7                      movq    %r14, %rdi
// 23f: ff d0                         callq   *%rax
// 241: eb 1c                         jmp     0x25f <_JIT_ENTRY+0x25f>
// 243: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 247: 8d 51 01                      leal    0x1(%rcx), %edx
// 24a: 48 f7 d1                      notq    %rcx
// 24d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024f:  R_X86_64_64  _JIT_OPERAND
// 257: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 25c: 88 50 ff                      movb    %dl, -0x1(%rax)
// 25f: 49 8b 04 24                   movq    (%r12), %rax
// 263: 48 85 c0                      testq   %rax, %rax
// 266: 7e 0e                         jle     0x276 <_JIT_ENTRY+0x276>
// 268: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 26c: 49 83 c6 f0                   addq    $-0x10, %r14
// 270: 85 c0                         testl   %eax, %eax
// 272: 79 30                         jns     0x2a4 <_JIT_ENTRY+0x2a4>
// 274: eb 4f                         jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_NegativeRefcount
// 28a: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 28f: 4c 89 e2                      movq    %r12, %rdx
// 292: ff d0                         callq   *%rax
// 294: 49 8b 04 24                   movq    (%r12), %rax
// 298: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 29c: 49 83 c6 f0                   addq    $-0x10, %r14
// 2a0: 85 c0                         testl   %eax, %eax
// 2a2: 78 21                         js      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 ff 0c 24                   decq    (%r12)
// 2b4: 75 0f                         jne     0x2c5 <_JIT_ENTRY+0x2c5>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_Dealloc
// 2c0: 4c 89 e7                      movq    %r12, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _JIT_CONTINUE
// 2cf: 4c 89 ef                      movq    %r13, %rdi
// 2d2: 4c 89 f6                      movq    %r14, %rsi
// 2d5: 48 89 ea                      movq    %rbp, %rdx
// 2d8: 48 83 c4 18                   addq    $0x18, %rsp
// 2dc: 5b                            popq    %rbx
// 2dd: 41 5c                         popq    %r12
// 2df: 41 5d                         popq    %r13
// 2e1: 41 5e                         popq    %r14
// 2e3: 41 5f                         popq    %r15
// 2e5: 5d                            popq    %rbp
// 2e6: ff e0                         jmpq    *%rax
// 2e8: 
static const unsigned char _BUILD_SETplus_STORE_ATTR_INSTANCE_VALUE_code_body[745] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x4c, 0xde, 0xf0, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x74, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xf6, 0x74, 0x4f, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x1c, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0e, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x79, 0x30, 0xeb, 0x4f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_ATTR_INSTANCE_VALUE_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _BUILD_SETplus_STORE_ATTR_SLOT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_ATTR_SLOT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5d 01 00 00             je      0x1a1 <_JIT_ENTRY+0x1a1>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 70                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 18                   addq    $0x18, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b5: 48 f7 d8                      negq    %rax
// 1b8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1bc: b8 01 00 00 00                movl    $0x1, %eax
// 1c1: 29 c8                         subl    %ecx, %eax
// 1c3: 48 63 d8                      movslq  %eax, %rbx
// 1c6: 49 8b 44 de f0                movq    -0x10(%r14,%rbx,8), %rax
// 1cb: 4d 89 f7                      movq    %r14, %r15
// 1ce: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 1d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d5:  R_X86_64_64  _JIT_OPERAND
// 1dd: 0f b7 c9                      movzwl  %cx, %ecx
// 1e0: 4d 8b 34 0c                   movq    (%r12,%rcx), %r14
// 1e4: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 1e8: 4d 85 f6                      testq   %r14, %r14
// 1eb: 74 4d                         je      0x23a <_JIT_ENTRY+0x23a>
// 1ed: 49 8b 06                      movq    (%r14), %rax
// 1f0: 48 85 c0                      testq   %rax, %rax
// 1f3: 7f 21                         jg      0x216 <_JIT_ENTRY+0x216>
// 1f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1+0x39
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_NegativeRefcount
// 209: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 20e: 4c 89 f2                      movq    %r14, %rdx
// 211: ff d0                         callq   *%rax
// 213: 49 8b 06                      movq    (%r14), %rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 78 20                         js      0x23a <_JIT_ENTRY+0x23a>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 224: ff d0                         callq   *%rax
// 226: 49 ff 0e                      decq    (%r14)
// 229: 75 0f                         jne     0x23a <_JIT_ENTRY+0x23a>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: 4c 89 f7                      movq    %r14, %rdi
// 238: ff d0                         callq   *%rax
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7e 0e                         jle     0x251 <_JIT_ENTRY+0x251>
// 243: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 247: 49 83 c6 f0                   addq    $-0x10, %r14
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 79 30                         jns     0x27f <_JIT_ENTRY+0x27f>
// 24f: eb 4f                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 26a: 4c 89 e2                      movq    %r12, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 49 8b 04 24                   movq    (%r12), %rax
// 273: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 277: 49 83 c6 f0                   addq    $-0x10, %r14
// 27b: 85 c0                         testl   %eax, %eax
// 27d: 78 21                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 289: ff d0                         callq   *%rax
// 28b: 49 ff 0c 24                   decq    (%r12)
// 28f: 75 0f                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_Dealloc
// 29b: 4c 89 e7                      movq    %r12, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_CONTINUE
// 2aa: 4c 89 ef                      movq    %r13, %rdi
// 2ad: 4c 89 f6                      movq    %r14, %rsi
// 2b0: 48 89 ea                      movq    %rbp, %rdx
// 2b3: 48 83 c4 18                   addq    $0x18, %rsp
// 2b7: 5b                            popq    %rbx
// 2b8: 41 5c                         popq    %r12
// 2ba: 41 5d                         popq    %r13
// 2bc: 41 5e                         popq    %r14
// 2be: 41 5f                         popq    %r15
// 2c0: 5d                            popq    %rbp
// 2c1: ff e0                         jmpq    *%rax
// 2c3: 
static const unsigned char _BUILD_SETplus_STORE_ATTR_SLOT_code_body[708] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x70, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x44, 0xde, 0xf0, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x34, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xf6, 0x74, 0x4d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0e, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x79, 0x30, 0xeb, 0x4f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xdf, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_ATTR_SLOT_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_ATTR_SLOT_data_holes[1];

// _BUILD_SETplus_STORE_DEREF
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_DEREF.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f4                      movq    %r14, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f4                      movq    %r14, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b6: 48 f7 da                      negq    %rdx
// 1b9: 4d 89 3c 16                   movq    %r15, (%r14,%rdx)
// 1bd: ba 01 00 00 00                movl    $0x1, %edx
// 1c2: 29 ca                         subl    %ecx, %edx
// 1c4: 48 63 ca                      movslq  %edx, %rcx
// 1c7: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1cb: 49 83 c7 f8                   addq    $-0x8, %r15
// 1cf: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 1d4: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 1d9: 4c 8b 70 10                   movq    0x10(%rax), %r14
// 1dd: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 1e1: 4d 85 f6                      testq   %r14, %r14
// 1e4: 74 4d                         je      0x233 <_JIT_ENTRY+0x233>
// 1e6: 49 8b 06                      movq    (%r14), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7f 21                         jg      0x20f <_JIT_ENTRY+0x20f>
// 1ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1+0x39
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_NegativeRefcount
// 202: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 207: 4c 89 f2                      movq    %r14, %rdx
// 20a: ff d0                         callq   *%rax
// 20c: 49 8b 06                      movq    (%r14), %rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 78 20                         js      0x233 <_JIT_ENTRY+0x233>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21d: ff d0                         callq   *%rax
// 21f: 49 ff 0e                      decq    (%r14)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 4c 89 f7                      movq    %r14, %rdi
// 231: ff d0                         callq   *%rax
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_CONTINUE
// 23d: 48 89 df                      movq    %rbx, %rdi
// 240: 4c 89 fe                      movq    %r15, %rsi
// 243: 4c 89 ea                      movq    %r13, %rdx
// 246: 48 83 c4 18                   addq    $0x18, %rsp
// 24a: 5b                            popq    %rbx
// 24b: 41 5c                         popq    %r12
// 24d: 41 5d                         popq    %r13
// 24f: 41 5e                         popq    %r14
// 251: 41 5f                         popq    %r15
// 253: 5d                            popq    %rbp
// 254: ff e0                         jmpq    *%rax
// 256: 
static const unsigned char _BUILD_SETplus_STORE_DEREF_code_body[599] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf4, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4d, 0x8d, 0x3c, 0xce, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x70, 0x10, 0x48, 0x89, 0x48, 0x10, 0x4d, 0x85, 0xf6, 0x74, 0x4d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_DEREF_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_DEREF_data_holes[1];

// _BUILD_SETplus_STORE_FAST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_FAST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f4                      movq    %r14, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f4                      movq    %r14, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b6: 48 f7 da                      negq    %rdx
// 1b9: 4d 89 3c 16                   movq    %r15, (%r14,%rdx)
// 1bd: ba 01 00 00 00                movl    $0x1, %edx
// 1c2: 29 ca                         subl    %ecx, %edx
// 1c4: 48 63 ca                      movslq  %edx, %rcx
// 1c7: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 1cb: 49 83 c7 f8                   addq    $-0x8, %r15
// 1cf: 49 8b 4c ce f8                movq    -0x8(%r14,%rcx,8), %rcx
// 1d4: 4c 8b 74 c3 48                movq    0x48(%rbx,%rax,8), %r14
// 1d9: 48 89 4c c3 48                movq    %rcx, 0x48(%rbx,%rax,8)
// 1de: 4d 85 f6                      testq   %r14, %r14
// 1e1: 74 4d                         je      0x230 <_JIT_ENTRY+0x230>
// 1e3: 49 8b 06                      movq    (%r14), %rax
// 1e6: 48 85 c0                      testq   %rax, %rax
// 1e9: 7f 21                         jg      0x20c <_JIT_ENTRY+0x20c>
// 1eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ed:  R_X86_64_64  .rodata.str1.1+0x39
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_NegativeRefcount
// 1ff: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 204: 4c 89 f2                      movq    %r14, %rdx
// 207: ff d0                         callq   *%rax
// 209: 49 8b 06                      movq    (%r14), %rax
// 20c: 85 c0                         testl   %eax, %eax
// 20e: 78 20                         js      0x230 <_JIT_ENTRY+0x230>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21a: ff d0                         callq   *%rax
// 21c: 49 ff 0e                      decq    (%r14)
// 21f: 75 0f                         jne     0x230 <_JIT_ENTRY+0x230>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_Dealloc
// 22b: 4c 89 f7                      movq    %r14, %rdi
// 22e: ff d0                         callq   *%rax
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_CONTINUE
// 23a: 48 89 df                      movq    %rbx, %rdi
// 23d: 4c 89 fe                      movq    %r15, %rsi
// 240: 4c 89 ea                      movq    %r13, %rdx
// 243: 48 83 c4 18                   addq    $0x18, %rsp
// 247: 5b                            popq    %rbx
// 248: 41 5c                         popq    %r12
// 24a: 41 5d                         popq    %r13
// 24c: 41 5e                         popq    %r14
// 24e: 41 5f                         popq    %r15
// 250: 5d                            popq    %rbp
// 251: ff e0                         jmpq    *%rax
// 253: 
static const unsigned char _BUILD_SETplus_STORE_FAST_code_body[596] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf4, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4d, 0x8d, 0x3c, 0xce, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x8b, 0x4c, 0xce, 0xf8, 0x4c, 0x8b, 0x74, 0xc3, 0x48, 0x48, 0x89, 0x4c, 0xc3, 0x48, 0x4d, 0x85, 0xf6, 0x74, 0x4d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_FAST_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_FAST_data_holes[1];

// _BUILD_SETplus_STORE_GLOBAL
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_GLOBAL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 45 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 e4                      xorl    %r12d, %r12d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c4                      incq    %r12
// 83: 4c 39 e5                      cmpq    %r12, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c e7                   movq    (%r15,%r12,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 f7                      movq    %r14, %r15
// 11e: e9 3a 01 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 5d                         je      0x18e <_JIT_ENTRY+0x18e>
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 88 f9 00 00 00             js      0x25d <_JIT_ENTRY+0x25d>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 0f 85 e3 00 00 00             jne     0x25d <_JIT_ENTRY+0x25d>
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: ff d0                         callq   *%rax
// 189: e9 cf 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1a6: 48 f7 da                      negq    %rdx
// 1a9: 4d 89 2c 16                   movq    %r13, (%r14,%rdx)
// 1ad: ba 01 00 00 00                movl    $0x1, %edx
// 1b2: 29 ca                         subl    %ecx, %edx
// 1b4: 4c 63 e2                      movslq  %edx, %r12
// 1b7: 4d 89 f5                      movq    %r14, %r13
// 1ba: 4f 8b 74 e6 f8                movq    -0x8(%r14,%r12,8), %r14
// 1bf: 48 8b 4d 00                   movq    (%rbp), %rcx
// 1c3: 48 8b 7d 18                   movq    0x18(%rbp), %rdi
// 1c7: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1cb: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  PyDict_SetItem
// 1da: 4c 89 f2                      movq    %r14, %rdx
// 1dd: ff d0                         callq   *%rax
// 1df: 89 c3                         movl    %eax, %ebx
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 1c                         jle     0x205 <_JIT_ENTRY+0x205>
// 1e9: 4e 8d 3c e5 00 00 00 00       leaq    (,%r12,8), %r15
// 1f1: 4d 01 ef                      addq    %r13, %r15
// 1f4: 4e 8d 24 e5 f8 ff ff ff       leaq    -0x8(,%r12,8), %r12
// 1fc: 4d 01 ec                      addq    %r13, %r12
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 79 3d                         jns     0x240 <_JIT_ENTRY+0x240>
// 203: eb 4c                         jmp     0x251 <_JIT_ENTRY+0x251>
// 205: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000207:  R_X86_64_64  .rodata.str1.1
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_NegativeRefcount
// 219: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 21e: 4c 89 f2                      movq    %r14, %rdx
// 221: ff d0                         callq   *%rax
// 223: 49 8b 06                      movq    (%r14), %rax
// 226: 4e 8d 3c e5 00 00 00 00       leaq    (,%r12,8), %r15
// 22e: 4d 01 ef                      addq    %r13, %r15
// 231: 4e 8d 24 e5 f8 ff ff ff       leaq    -0x8(,%r12,8), %r12
// 239: 4d 01 ec                      addq    %r13, %r12
// 23c: 85 c0                         testl   %eax, %eax
// 23e: 78 11                         js      0x251 <_JIT_ENTRY+0x251>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24a: ff d0                         callq   *%rax
// 24c: 49 ff 0e                      decq    (%r14)
// 24f: 74 2c                         je      0x27d <_JIT_ENTRY+0x27d>
// 251: 85 db                         testl   %ebx, %ebx
// 253: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 257: 74 3b                         je      0x294 <_JIT_ENTRY+0x294>
// 259: 49 83 c7 f8                   addq    $-0x8, %r15
// 25d: 49 29 ef                      subq    %rbp, %r15
// 260: 49 83 c7 b8                   addq    $-0x48, %r15
// 264: 49 c1 ef 03                   shrq    $0x3, %r15
// 268: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: 48 83 c4 18                   addq    $0x18, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_Dealloc
// 287: 4c 89 f7                      movq    %r14, %rdi
// 28a: ff d0                         callq   *%rax
// 28c: 85 db                         testl   %ebx, %ebx
// 28e: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 292: 75 c5                         jne     0x259 <_JIT_ENTRY+0x259>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_CONTINUE
// 29e: 48 89 ef                      movq    %rbp, %rdi
// 2a1: 4c 89 fe                      movq    %r15, %rsi
// 2a4: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2a9: 48 83 c4 18                   addq    $0x18, %rsp
// 2ad: 5b                            popq    %rbx
// 2ae: 41 5c                         popq    %r12
// 2b0: 41 5d                         popq    %r13
// 2b2: 41 5e                         popq    %r14
// 2b4: 41 5f                         popq    %r15
// 2b6: 5d                            popq    %rbp
// 2b7: ff e0                         jmpq    *%rax
// 2b9: 
static const unsigned char _BUILD_SETplus_STORE_GLOBAL_code_body[698] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe5, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xe7, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x3a, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x2c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xe2, 0x4d, 0x89, 0xf5, 0x4f, 0x8b, 0x74, 0xe6, 0xf8, 0x48, 0x8b, 0x4d, 0x00, 0x48, 0x8b, 0x7d, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc3, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x4e, 0x8d, 0x3c, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x4e, 0x8d, 0x24, 0xe5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xec, 0x85, 0xc0, 0x79, 0x3d, 0xeb, 0x4c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x4e, 0x8d, 0x3c, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xef, 0x4e, 0x8d, 0x24, 0xe5, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x01, 0xec, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x2c, 0x85, 0xdb, 0x4d, 0x0f, 0x44, 0xfc, 0x74, 0x3b, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xdb, 0x4d, 0x0f, 0x44, 0xfc, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_GLOBAL_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_GLOBAL_data_holes[1];

// _BUILD_SETplus_STORE_NAME
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_NAME.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 2c 24                   movq    %r13, (%rsp)
// 48: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 59: 4d 89 fe                      movq    %r15, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 3c de                   movq    (%r14,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 fe                      movq    %r15, %r14
// 11d: e9 c4 01 00 00                jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 129: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12e: 4c 8b 2c 24                   movq    (%rsp), %r13
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 7f 01 00 00             js      0x2e6 <_JIT_ENTRY+0x2e6>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 69 01 00 00             jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 55 01 00 00                jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1a9: 48 f7 da                      negq    %rdx
// 1ac: 4d 89 24 17                   movq    %r12, (%r15,%rdx)
// 1b0: ba 01 00 00 00                movl    $0x1, %edx
// 1b5: 29 ca                         subl    %ecx, %edx
// 1b7: 4c 63 f2                      movslq  %edx, %r14
// 1ba: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 1bf: 48 8b 0b                      movq    (%rbx), %rcx
// 1c2: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1c6: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 1ca: 48 8b 4c c1 18                movq    0x18(%rcx,%rax,8), %rcx
// 1cf: 48 85 ff                      testq   %rdi, %rdi
// 1d2: 74 23                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  PyDict_Type
// 1de: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1e2: 0f 84 8e 00 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  PyObject_SetItem
// 1f2: e9 89 00 00 00                jmp     0x280 <_JIT_ENTRY+0x280>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  PyExc_SystemError
// 201: 48 8b 30                      movq    (%rax), %rsi
// 204: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000206:  R_X86_64_64  .rodata.str1.1+0x39
// 20e: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000210:  R_X86_64_64  _PyErr_Format
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 31 c0                         xorl    %eax, %eax
// 21d: 41 ff d0                      callq   *%r8
// 220: 49 8b 04 24                   movq    (%r12), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 22                         jg      0x24b <_JIT_ENTRY+0x24b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 242: 4c 89 e2                      movq    %r12, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 04 24                   movq    (%r12), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 0f 88 8b 00 00 00             js      0x2de <_JIT_ENTRY+0x2de>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25d: ff d0                         callq   *%rax
// 25f: 49 ff 0c 24                   decq    (%r12)
// 263: 75 79                         jne     0x2de <_JIT_ENTRY+0x2de>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_Dealloc
// 26f: 4c 89 e7                      movq    %r12, %rdi
// 272: ff d0                         callq   *%rax
// 274: eb 68                         jmp     0x2de <_JIT_ENTRY+0x2de>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  PyDict_SetItem
// 280: 48 89 ce                      movq    %rcx, %rsi
// 283: 4c 89 e2                      movq    %r12, %rdx
// 286: ff d0                         callq   *%rax
// 288: 89 c5                         movl    %eax, %ebp
// 28a: 49 8b 04 24                   movq    (%r12), %rax
// 28e: 48 85 c0                      testq   %rax, %rax
// 291: 7f 22                         jg      0x2b5 <_JIT_ENTRY+0x2b5>
// 293: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000295:  R_X86_64_64  .rodata.str1.1
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_NegativeRefcount
// 2a7: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 2ac: 4c 89 e2                      movq    %r12, %rdx
// 2af: ff d0                         callq   *%rax
// 2b1: 49 8b 04 24                   movq    (%r12), %rax
// 2b5: 85 c0                         testl   %eax, %eax
// 2b7: 78 21                         js      0x2da <_JIT_ENTRY+0x2da>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 ff 0c 24                   decq    (%r12)
// 2c9: 75 0f                         jne     0x2da <_JIT_ENTRY+0x2da>
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: 4c 89 e7                      movq    %r12, %rdi
// 2d8: ff d0                         callq   *%rax
// 2da: 85 ed                         testl   %ebp, %ebp
// 2dc: 74 28                         je      0x306 <_JIT_ENTRY+0x306>
// 2de: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2e2: 49 83 c6 f8                   addq    $-0x8, %r14
// 2e6: 49 29 de                      subq    %rbx, %r14
// 2e9: 49 83 c6 b8                   addq    $-0x48, %r14
// 2ed: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2f5: 31 c0                         xorl    %eax, %eax
// 2f7: 48 83 c4 18                   addq    $0x18, %rsp
// 2fb: 5b                            popq    %rbx
// 2fc: 41 5c                         popq    %r12
// 2fe: 41 5d                         popq    %r13
// 300: 41 5e                         popq    %r14
// 302: 41 5f                         popq    %r15
// 304: 5d                            popq    %rbp
// 305: c3                            retq
// 306: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 30a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _JIT_CONTINUE
// 318: 48 89 df                      movq    %rbx, %rdi
// 31b: 4c 89 ea                      movq    %r13, %rdx
// 31e: 48 83 c4 18                   addq    $0x18, %rsp
// 322: 5b                            popq    %rbx
// 323: 41 5c                         popq    %r12
// 325: 41 5d                         popq    %r13
// 327: 41 5e                         popq    %r14
// 329: 41 5f                         popq    %r15
// 32b: 5d                            popq    %rbp
// 32c: ff e0                         jmpq    *%rax
// 32e: 
static const unsigned char _BUILD_SETplus_STORE_NAME_code_body[815] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x2c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xde, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xfe, 0xe9, 0xc4, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x7f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x69, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x24, 0x17, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xf2, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x4c, 0xc1, 0x18, 0x48, 0x85, 0xff, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x79, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x28, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_NAME_code_holes[29] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_NAME_data_holes[1];

// _BUILD_SETplus_STORE_SLICE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_SLICE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 45 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 49: 4c 89 3c 24                   movq    %r15, (%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 59: 4d 89 f4                      movq    %r14, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 f4                      movq    %r14, %r12
// 11e: e9 44 02 00 00                jmp     0x367 <_JIT_ENTRY+0x367>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 3c 24                   movq    (%rsp), %r15
// 12a: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12f: 74 5d                         je      0x18e <_JIT_ENTRY+0x18e>
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 88 03 02 00 00             js      0x367 <_JIT_ENTRY+0x367>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 0f 85 ed 01 00 00             jne     0x367 <_JIT_ENTRY+0x367>
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: ff d0                         callq   *%rax
// 189: e9 d9 01 00 00                jmp     0x367 <_JIT_ENTRY+0x367>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a2: 48 f7 d8                      negq    %rax
// 1a5: 4d 89 2c 06                   movq    %r13, (%r14,%rax)
// 1a9: b8 01 00 00 00                movl    $0x1, %eax
// 1ae: 29 c8                         subl    %ecx, %eax
// 1b0: 48 63 e8                      movslq  %eax, %rbp
// 1b3: 49 8b 74 ee f8                movq    -0x8(%r14,%rbp,8), %rsi
// 1b8: 49 8b 7c ee f0                movq    -0x10(%r14,%rbp,8), %rdi
// 1bd: 4d 8b 64 ee e0                movq    -0x20(%r14,%rbp,8), %r12
// 1c2: 4c 89 f3                      movq    %r14, %rbx
// 1c5: 4d 8b 6c ee e8                movq    -0x18(%r14,%rbp,8), %r13
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1d4: ff d0                         callq   *%rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 0f 84 ce 00 00 00             je      0x2ad <_JIT_ENTRY+0x2ad>
// 1df: 49 89 c6                      movq    %rax, %r14
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  PyObject_SetItem
// 1ec: 4c 89 ef                      movq    %r13, %rdi
// 1ef: 4c 89 f6                      movq    %r14, %rsi
// 1f2: 4c 89 e2                      movq    %r12, %rdx
// 1f5: ff d0                         callq   *%rax
// 1f7: 89 04 24                      movl    %eax, (%rsp)
// 1fa: 49 8b 06                      movq    (%r14), %rax
// 1fd: 48 85 c0                      testq   %rax, %rax
// 200: 7f 21                         jg      0x223 <_JIT_ENTRY+0x223>
// 202: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000204:  R_X86_64_64  .rodata.str1.1
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_NegativeRefcount
// 216: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 21b: 4c 89 f2                      movq    %r14, %rdx
// 21e: ff d0                         callq   *%rax
// 220: 49 8b 06                      movq    (%r14), %rax
// 223: 85 c0                         testl   %eax, %eax
// 225: 78 20                         js      0x247 <_JIT_ENTRY+0x247>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 231: ff d0                         callq   *%rax
// 233: 49 ff 0e                      decq    (%r14)
// 236: 75 0f                         jne     0x247 <_JIT_ENTRY+0x247>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 f7                      movq    %r14, %rdi
// 245: ff d0                         callq   *%rax
// 247: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 24b: 0f 94 c0                      sete    %al
// 24e: 89 04 24                      movl    %eax, (%rsp)
// 251: 49 8b 04 24                   movq    (%r12), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7f 22                         jg      0x27c <_JIT_ENTRY+0x27c>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 273: 4c 89 e2                      movq    %r12, %rdx
// 276: ff d0                         callq   *%rax
// 278: 49 8b 04 24                   movq    (%r12), %rax
// 27c: 85 c0                         testl   %eax, %eax
// 27e: 78 12                         js      0x292 <_JIT_ENTRY+0x292>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 49 ff 0c 24                   decq    (%r12)
// 290: 74 2d                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 292: 49 8b 45 00                   movq    (%r13), %rax
// 296: 48 85 c0                      testq   %rax, %rax
// 299: 7e 3c                         jle     0x2d7 <_JIT_ENTRY+0x2d7>
// 29b: 4c 8d 24 eb                   leaq    (%rbx,%rbp,8), %r12
// 29f: 4c 8d 34 eb                   leaq    (%rbx,%rbp,8), %r14
// 2a3: 49 83 c6 e0                   addq    $-0x20, %r14
// 2a7: 85 c0                         testl   %eax, %eax
// 2a9: 79 5e                         jns     0x309 <_JIT_ENTRY+0x309>
// 2ab: eb 6e                         jmp     0x31b <_JIT_ENTRY+0x31b>
// 2ad: c7 04 24 00 00 00 00          movl    $0x0, (%rsp)
// 2b4: 49 8b 04 24                   movq    (%r12), %rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 7f bf                         jg      0x27c <_JIT_ENTRY+0x27c>
// 2bd: eb 9b                         jmp     0x25a <_JIT_ENTRY+0x25a>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_Dealloc
// 2c9: 4c 89 e7                      movq    %r12, %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 45 00                   movq    (%r13), %rax
// 2d2: 48 85 c0                      testq   %rax, %rax
// 2d5: 7f c4                         jg      0x29b <_JIT_ENTRY+0x29b>
// 2d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d9:  R_X86_64_64  .rodata.str1.1
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_NegativeRefcount
// 2eb: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 2f0: 4c 89 ea                      movq    %r13, %rdx
// 2f3: ff d0                         callq   *%rax
// 2f5: 49 8b 45 00                   movq    (%r13), %rax
// 2f9: 4c 8d 24 eb                   leaq    (%rbx,%rbp,8), %r12
// 2fd: 4c 8d 34 eb                   leaq    (%rbx,%rbp,8), %r14
// 301: 49 83 c6 e0                   addq    $-0x20, %r14
// 305: 85 c0                         testl   %eax, %eax
// 307: 78 12                         js      0x31b <_JIT_ENTRY+0x31b>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 313: ff d0                         callq   *%rax
// 315: 49 ff 4d 00                   decq    (%r13)
// 319: 74 2f                         je      0x34a <_JIT_ENTRY+0x34a>
// 31b: 80 3c 24 00                   cmpb    $0x0, (%rsp)
// 31f: 4d 0f 45 e6                   cmovneq %r14, %r12
// 323: 74 3e                         je      0x363 <_JIT_ENTRY+0x363>
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _JIT_CONTINUE
// 32f: 4c 89 ff                      movq    %r15, %rdi
// 332: 4c 89 e6                      movq    %r12, %rsi
// 335: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 33a: 48 83 c4 18                   addq    $0x18, %rsp
// 33e: 5b                            popq    %rbx
// 33f: 41 5c                         popq    %r12
// 341: 41 5d                         popq    %r13
// 343: 41 5e                         popq    %r14
// 345: 41 5f                         popq    %r15
// 347: 5d                            popq    %rbp
// 348: ff e0                         jmpq    *%rax
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _Py_Dealloc
// 354: 4c 89 ef                      movq    %r13, %rdi
// 357: ff d0                         callq   *%rax
// 359: 80 3c 24 00                   cmpb    $0x0, (%rsp)
// 35d: 4d 0f 45 e6                   cmovneq %r14, %r12
// 361: 75 c2                         jne     0x325 <_JIT_ENTRY+0x325>
// 363: 49 83 c4 e0                   addq    $-0x20, %r12
// 367: 4d 29 fc                      subq    %r15, %r12
// 36a: 49 83 c4 b8                   addq    $-0x48, %r12
// 36e: 49 c1 ec 03                   shrq    $0x3, %r12
// 372: 45 89 67 40                   movl    %r12d, 0x40(%r15)
// 376: 31 c0                         xorl    %eax, %eax
// 378: 48 83 c4 18                   addq    $0x18, %rsp
// 37c: 5b                            popq    %rbx
// 37d: 41 5c                         popq    %r12
// 37f: 41 5d                         popq    %r13
// 381: 41 5e                         popq    %r14
// 383: 41 5f                         popq    %r15
// 385: 5d                            popq    %rbp
// 386: c3                            retq
// 387: 
static const unsigned char _BUILD_SETplus_STORE_SLICE_code_body[904] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x3c, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf4, 0xe9, 0x44, 0x02, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x03, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xed, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xd9, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x2c, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xe8, 0x49, 0x8b, 0x74, 0xee, 0xf8, 0x49, 0x8b, 0x7c, 0xee, 0xf0, 0x4d, 0x8b, 0x64, 0xee, 0xe0, 0x4c, 0x89, 0xf3, 0x4d, 0x8b, 0x6c, 0xee, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x94, 0xc0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x3c, 0x4c, 0x8d, 0x24, 0xeb, 0x4c, 0x8d, 0x34, 0xeb, 0x49, 0x83, 0xc6, 0xe0, 0x85, 0xc0, 0x79, 0x5e, 0xeb, 0x6e, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xbf, 0xeb, 0x9b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xc4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4c, 0x8d, 0x24, 0xeb, 0x4c, 0x8d, 0x34, 0xeb, 0x49, 0x83, 0xc6, 0xe0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2f, 0x80, 0x3c, 0x24, 0x00, 0x4d, 0x0f, 0x45, 0xe6, 0x74, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x80, 0x3c, 0x24, 0x00, 0x4d, 0x0f, 0x45, 0xe6, 0x75, 0xc2, 0x49, 0x83, 0xc4, 0xe0, 0x4d, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_STORE_SLICE_code_holes[29] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_SLICE_data_holes[1];

// _BUILD_SETplus_STORE_SUBSCR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_SUBSCR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 48 89 2c 24                   movq    %rbp, (%rsp)
// 47: 0f 84 41 01 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// 4d: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 52: 0f b7 c0                      movzwl  %ax, %eax
// 55: 48 c1 e0 03                   shlq    $0x3, %rax
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 ec                      movq    %rbp, %r12
// 11e: e9 b7 01 00 00                jmp     0x2da <_JIT_ENTRY+0x2da>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 5d                         je      0x18e <_JIT_ENTRY+0x18e>
// 131: 49 8b 45 00                   movq    (%r13), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 45 00                   movq    (%r13), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 88 76 01 00 00             js      0x2da <_JIT_ENTRY+0x2da>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 4d 00                   decq    (%r13)
// 174: 0f 85 60 01 00 00             jne     0x2da <_JIT_ENTRY+0x2da>
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: ff d0                         callq   *%rax
// 189: e9 4c 01 00 00                jmp     0x2da <_JIT_ENTRY+0x2da>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c8                      movzwl  %ax, %ecx
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a2: 48 f7 d8                      negq    %rax
// 1a5: 4c 89 6c 05 00                movq    %r13, (%rbp,%rax)
// 1aa: b8 01 00 00 00                movl    $0x1, %eax
// 1af: 29 c8                         subl    %ecx, %eax
// 1b1: 4c 63 f0                      movslq  %eax, %r14
// 1b4: 4e 8b 6c f5 f8                movq    -0x8(%rbp,%r14,8), %r13
// 1b9: 4a 8b 5c f5 e8                movq    -0x18(%rbp,%r14,8), %rbx
// 1be: 4e 8b 64 f5 f0                movq    -0x10(%rbp,%r14,8), %r12
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyObject_SetItem
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: 4c 89 ee                      movq    %r13, %rsi
// 1d3: 48 89 da                      movq    %rbx, %rdx
// 1d6: ff d0                         callq   *%rax
// 1d8: 89 c5                         movl    %eax, %ebp
// 1da: 48 8b 03                      movq    (%rbx), %rax
// 1dd: 48 85 c0                      testq   %rax, %rax
// 1e0: 7e 06                         jle     0x1e8 <_JIT_ENTRY+0x1e8>
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 79 27                         jns     0x20d <_JIT_ENTRY+0x20d>
// 1e6: eb 36                         jmp     0x21e <_JIT_ENTRY+0x21e>
// 1e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_NegativeRefcount
// 1fc: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 201: 48 89 da                      movq    %rbx, %rdx
// 204: ff d0                         callq   *%rax
// 206: 48 8b 03                      movq    (%rbx), %rax
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 11                         js      0x21e <_JIT_ENTRY+0x21e>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 217: ff d0                         callq   *%rax
// 219: 48 ff 0b                      decq    (%rbx)
// 21c: 74 0f                         je      0x22d <_JIT_ENTRY+0x22d>
// 21e: 49 8b 04 24                   movq    (%r12), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 7e 1e                         jle     0x245 <_JIT_ENTRY+0x245>
// 227: 85 c0                         testl   %eax, %eax
// 229: 79 40                         jns     0x26b <_JIT_ENTRY+0x26b>
// 22b: eb 50                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 48 89 df                      movq    %rbx, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 49 8b 04 24                   movq    (%r12), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 7f e2                         jg      0x227 <_JIT_ENTRY+0x227>
// 245: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_NegativeRefcount
// 259: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 25e: 4c 89 e2                      movq    %r12, %rdx
// 261: ff d0                         callq   *%rax
// 263: 49 8b 04 24                   movq    (%r12), %rax
// 267: 85 c0                         testl   %eax, %eax
// 269: 78 12                         js      0x27d <_JIT_ENTRY+0x27d>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: ff d0                         callq   *%rax
// 277: 49 ff 0c 24                   decq    (%r12)
// 27b: 74 7d                         je      0x2fa <_JIT_ENTRY+0x2fa>
// 27d: 49 8b 45 00                   movq    (%r13), %rax
// 281: 48 85 c0                      testq   %rax, %rax
// 284: 7f 22                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 286: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000288:  R_X86_64_64  .rodata.str1.1
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_NegativeRefcount
// 29a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 29f: 4c 89 ea                      movq    %r13, %rdx
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8b 45 00                   movq    (%r13), %rax
// 2a8: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2ac: 4e 8d 24 f1                   leaq    (%rcx,%r14,8), %r12
// 2b0: 4a 8d 1c f1                   leaq    (%rcx,%r14,8), %rbx
// 2b4: 48 83 c3 e8                   addq    $-0x18, %rbx
// 2b8: 85 c0                         testl   %eax, %eax
// 2ba: 78 12                         js      0x2ce <_JIT_ENTRY+0x2ce>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c6: ff d0                         callq   *%rax
// 2c8: 49 ff 4d 00                   decq    (%r13)
// 2cc: 74 49                         je      0x317 <_JIT_ENTRY+0x317>
// 2ce: 85 ed                         testl   %ebp, %ebp
// 2d0: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2d4: 74 58                         je      0x32e <_JIT_ENTRY+0x32e>
// 2d6: 49 83 c4 e8                   addq    $-0x18, %r12
// 2da: 4d 29 fc                      subq    %r15, %r12
// 2dd: 49 83 c4 b8                   addq    $-0x48, %r12
// 2e1: 49 c1 ec 03                   shrq    $0x3, %r12
// 2e5: 45 89 67 40                   movl    %r12d, 0x40(%r15)
// 2e9: 31 c0                         xorl    %eax, %eax
// 2eb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ef: 5b                            popq    %rbx
// 2f0: 41 5c                         popq    %r12
// 2f2: 41 5d                         popq    %r13
// 2f4: 41 5e                         popq    %r14
// 2f6: 41 5f                         popq    %r15
// 2f8: 5d                            popq    %rbp
// 2f9: c3                            retq
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_Dealloc
// 304: 4c 89 e7                      movq    %r12, %rdi
// 307: ff d0                         callq   *%rax
// 309: 49 8b 45 00                   movq    (%r13), %rax
// 30d: 48 85 c0                      testq   %rax, %rax
// 310: 7f 96                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 312: e9 6f ff ff ff                jmp     0x286 <_JIT_ENTRY+0x286>
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_Dealloc
// 321: 4c 89 ef                      movq    %r13, %rdi
// 324: ff d0                         callq   *%rax
// 326: 85 ed                         testl   %ebp, %ebp
// 328: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 32c: 75 a8                         jne     0x2d6 <_JIT_ENTRY+0x2d6>
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _JIT_CONTINUE
// 338: 4c 89 ff                      movq    %r15, %rdi
// 33b: 4c 89 e6                      movq    %r12, %rsi
// 33e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 343: 48 83 c4 18                   addq    $0x18, %rsp
// 347: 5b                            popq    %rbx
// 348: 41 5c                         popq    %r12
// 34a: 41 5d                         popq    %r13
// 34c: 41 5e                         popq    %r14
// 34e: 41 5f                         popq    %r15
// 350: 5d                            popq    %rbp
// 351: ff e0                         jmpq    *%rax
// 353: 
static const unsigned char _BUILD_SETplus_STORE_SUBSCR_code_body[852] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf5, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x48, 0x89, 0x2c, 0x24, 0x0f, 0x84, 0x41, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xe9, 0xb7, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x76, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x60, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x6c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4e, 0x8b, 0x6c, 0xf5, 0xf8, 0x4a, 0x8b, 0x5c, 0xf5, 0xe8, 0x4e, 0x8b, 0x64, 0xf5, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x89, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x4e, 0x8d, 0x24, 0xf1, 0x4a, 0x8d, 0x1c, 0xf1, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x49, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x58, 0x49, 0x83, 0xc4, 0xe8, 0x4d, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x96, 0xe9, 0x6f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x75, 0xa8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_SUBSCR_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_SUBSCR_data_holes[1];

// _BUILD_SETplus_STORE_SUBSCR_DICT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_SUBSCR_DICT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fc                      movq    %rdi, %r12
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 49: 4c 89 24 24                   movq    %r12, (%rsp)
// 4d: 0f b7 c0                      movzwl  %ax, %eax
// 50: 48 c1 e0 03                   shlq    $0x3, %rax
// 54: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 59: 49 89 de                      movq    %rbx, %r14
// 5c: 49 29 c6                      subq    %rax, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 e4                      xorl    %r12d, %r12d
// 7a: 45 31 ff                      xorl    %r15d, %r15d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c4                      incq    %r12
// 83: 4c 39 e5                      cmpq    %r12, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c e6                   movq    (%r14,%r12,8), %rbx
// 90: 45 85 ff                      testl   %r15d, %r15d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c7                      movl    %eax, %r15d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 de                      movq    %rbx, %r14
// 11e: e9 75 01 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 123: 45 85 ff                      testl   %r15d, %r15d
// 126: 4c 8b 24 24                   movq    (%rsp), %r12
// 12a: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 12f: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 45 00                   movq    (%r13), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 2f 01 00 00             js      0x298 <_JIT_ENTRY+0x298>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 4d 00                   decq    (%r13)
// 179: 0f 85 19 01 00 00             jne     0x298 <_JIT_ENTRY+0x298>
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 05 01 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a7: 48 f7 d8                      negq    %rax
// 1aa: 4c 89 2c 03                   movq    %r13, (%rbx,%rax)
// 1ae: b8 01 00 00 00                movl    $0x1, %eax
// 1b3: ba 01 00 00 00                movl    $0x1, %edx
// 1b8: 29 ca                         subl    %ecx, %edx
// 1ba: 4c 63 fa                      movslq  %edx, %r15
// 1bd: 4e 8d 34 fb                   leaq    (%rbx,%r15,8), %r14
// 1c1: 4e 8b 6c fb f0                movq    -0x10(%rbx,%r15,8), %r13
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  PyDict_Type
// 1d0: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 1d4: 74 2f                         je      0x205 <_JIT_ENTRY+0x205>
// 1d6: 4d 29 e6                      subq    %r12, %r14
// 1d9: 49 83 c6 b8                   addq    $-0x48, %r14
// 1dd: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e1: 45 89 74 24 40                movl    %r14d, 0x40(%r12)
// 1e6: 49 8b 04 24                   movq    (%r12), %rax
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  _JIT_TARGET
// 1f4: 89 c9                         movl    %ecx, %ecx
// 1f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 200: e9 a5 00 00 00                jmp     0x2aa <_JIT_ENTRY+0x2aa>
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  _JIT_OPARG
// 20f: 0f b7 c9                      movzwl  %cx, %ecx
// 212: 29 c8                         subl    %ecx, %eax
// 214: 48 98                         cltq
// 216: 48 8b 54 c3 e8                movq    -0x18(%rbx,%rax,8), %rdx
// 21b: 48 8b 74 c3 f8                movq    -0x8(%rbx,%rax,8), %rsi
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _PyDict_SetItem_Take2
// 22a: 4c 89 ef                      movq    %r13, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 89 04 24                      movl    %eax, (%rsp)
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 22                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 254: 4c 89 ea                      movq    %r13, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 4e 8d 3c fb                   leaq    (%rbx,%r15,8), %r15
// 261: 49 83 c7 e8                   addq    $-0x18, %r15
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 21                         js      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 4d 00                   decq    (%r13)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 ef                      movq    %r13, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 28e: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 292: 74 25                         je      0x2b9 <_JIT_ENTRY+0x2b9>
// 294: 49 83 c6 e8                   addq    $-0x18, %r14
// 298: 4d 29 e6                      subq    %r12, %r14
// 29b: 49 83 c6 b8                   addq    $-0x48, %r14
// 29f: 49 c1 ee 03                   shrq    $0x3, %r14
// 2a3: 45 89 74 24 40                movl    %r14d, 0x40(%r12)
// 2a8: 31 c0                         xorl    %eax, %eax
// 2aa: 48 83 c4 18                   addq    $0x18, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: c3                            retq
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 4c 89 e7                      movq    %r12, %rdi
// 2c6: 4c 89 f6                      movq    %r14, %rsi
// 2c9: 48 89 ea                      movq    %rbp, %rdx
// 2cc: 48 83 c4 18                   addq    $0x18, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: ff e0                         jmpq    *%rax
// 2dc: 
static const unsigned char _BUILD_SETplus_STORE_SUBSCR_DICT_code_body[733] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x4c, 0x89, 0x24, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe5, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xe6, 0x45, 0x85, 0xff, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xde, 0xe9, 0x75, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x2f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x19, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x2c, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xfa, 0x4e, 0x8d, 0x34, 0xfb, 0x4e, 0x8b, 0x6c, 0xfb, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x74, 0x2f, 0x4d, 0x29, 0xe6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x74, 0x24, 0x40, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8b, 0x54, 0xc3, 0xe8, 0x48, 0x8b, 0x74, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4e, 0x8d, 0x3c, 0xfb, 0x49, 0x83, 0xc7, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x25, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x29, 0xe6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x74, 0x24, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_STORE_SUBSCR_DICT_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_SUBSCR_DICT_data_holes[1];

// _BUILD_SETplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_STORE_SUBSCR_LIST_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 49 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 5d                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 126: 4c 8b 34 24                   movq    (%rsp), %r14
// 12a: 74 66                         je      0x192 <_JIT_ENTRY+0x192>
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 0c 24                   decq    (%r12)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: ff d0                         callq   *%rax
// 17c: 49 29 ef                      subq    %rbp, %r15
// 17f: 49 83 c7 b8                   addq    $-0x48, %r15
// 183: 49 c1 ef 03                   shrq    $0x3, %r15
// 187: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: e9 ac 01 00 00                jmp     0x33e <_JIT_ENTRY+0x33e>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 c8                      movzwl  %ax, %ecx
// 19f: 0f b7 c0                      movzwl  %ax, %eax
// 1a2: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a6: 48 f7 d8                      negq    %rax
// 1a9: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 4c 63 f8                      movslq  %eax, %r15
// 1b7: 4f 8b 6c fe f8                movq    -0x8(%r14,%r15,8), %r13
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  PyLong_Type
// 1c6: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1ca: 0f 85 42 01 00 00             jne     0x312 <_JIT_ENTRY+0x312>
// 1d0: 4f 8b 64 fe f0                movq    -0x10(%r14,%r15,8), %r12
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  PyList_Type
// 1df: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1e4: 0f 85 28 01 00 00             jne     0x312 <_JIT_ENTRY+0x312>
// 1ea: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ef: 0f 87 1d 01 00 00             ja      0x312 <_JIT_ENTRY+0x312>
// 1f5: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1f9: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1fe: 0f 8e 0e 01 00 00             jle     0x312 <_JIT_ENTRY+0x312>
// 204: 4c 89 f3                      movq    %r14, %rbx
// 207: 4b 8b 4c fe e8                movq    -0x18(%r14,%r15,8), %rcx
// 20c: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 211: 4c 8b 34 c2                   movq    (%rdx,%rax,8), %r14
// 215: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 219: 49 8b 06                      movq    (%r14), %rax
// 21c: 48 85 c0                      testq   %rax, %rax
// 21f: 7f 21                         jg      0x242 <_JIT_ENTRY+0x242>
// 221: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000223:  R_X86_64_64  .rodata.str1.1
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_NegativeRefcount
// 235: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 23a: 4c 89 f2                      movq    %r14, %rdx
// 23d: ff d0                         callq   *%rax
// 23f: 49 8b 06                      movq    (%r14), %rax
// 242: 85 c0                         testl   %eax, %eax
// 244: 78 20                         js      0x266 <_JIT_ENTRY+0x266>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 250: ff d0                         callq   *%rax
// 252: 49 ff 0e                      decq    (%r14)
// 255: 75 0f                         jne     0x266 <_JIT_ENTRY+0x266>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: 4c 89 f7                      movq    %r14, %rdi
// 264: ff d0                         callq   *%rax
// 266: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 26b: 75 28                         jne     0x295 <_JIT_ENTRY+0x295>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  PyInterpreterState_Get
// 277: ff d0                         callq   *%rax
// 279: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 280: 49 ff 4d 00                   decq    (%r13)
// 284: 75 0f                         jne     0x295 <_JIT_ENTRY+0x295>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  PyObject_Free
// 290: 4c 89 ef                      movq    %r13, %rdi
// 293: ff d0                         callq   *%rax
// 295: 49 8b 04 24                   movq    (%r12), %rax
// 299: 48 85 c0                      testq   %rax, %rax
// 29c: 7f 22                         jg      0x2c0 <_JIT_ENTRY+0x2c0>
// 29e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a0:  R_X86_64_64  .rodata.str1.1
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_NegativeRefcount
// 2b2: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 2b7: 4c 89 e2                      movq    %r12, %rdx
// 2ba: ff d0                         callq   *%rax
// 2bc: 49 8b 04 24                   movq    (%r12), %rax
// 2c0: 4e 8d 34 fb                   leaq    (%rbx,%r15,8), %r14
// 2c4: 49 83 c6 e8                   addq    $-0x18, %r14
// 2c8: 85 c0                         testl   %eax, %eax
// 2ca: 78 21                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 ff 0c 24                   decq    (%r12)
// 2dc: 75 0f                         jne     0x2ed <_JIT_ENTRY+0x2ed>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_Dealloc
// 2e8: 4c 89 e7                      movq    %r12, %rdi
// 2eb: ff d0                         callq   *%rax
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _JIT_CONTINUE
// 2f7: 48 89 ef                      movq    %rbp, %rdi
// 2fa: 4c 89 f6                      movq    %r14, %rsi
// 2fd: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 302: 48 83 c4 18                   addq    $0x18, %rsp
// 306: 5b                            popq    %rbx
// 307: 41 5c                         popq    %r12
// 309: 41 5d                         popq    %r13
// 30b: 41 5e                         popq    %r14
// 30d: 41 5f                         popq    %r15
// 30f: 5d                            popq    %rbp
// 310: ff e0                         jmpq    *%rax
// 312: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 316: 48 29 e8                      subq    %rbp, %rax
// 319: 48 83 c0 b8                   addq    $-0x48, %rax
// 31d: 48 c1 e8 03                   shrq    $0x3, %rax
// 321: 89 45 40                      movl    %eax, 0x40(%rbp)
// 324: 48 8b 45 00                   movq    (%rbp), %rax
// 328: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032a:  R_X86_64_64  _JIT_TARGET
// 332: 89 c9                         movl    %ecx, %ecx
// 334: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 338: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 33e: 48 83 c4 18                   addq    $0x18, %rsp
// 342: 5b                            popq    %rbx
// 343: 41 5c                         popq    %r12
// 345: 41 5d                         popq    %r13
// 347: 41 5e                         popq    %r14
// 349: 41 5f                         popq    %r15
// 34b: 5d                            popq    %rbp
// 34c: c3                            retq
// 34d: 
static const unsigned char _BUILD_SETplus_STORE_SUBSCR_LIST_INT_code_body[846] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x5d, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x6c, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x42, 0x01, 0x00, 0x00, 0x4f, 0x8b, 0x64, 0xfe, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x28, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x1d, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x0e, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf3, 0x4b, 0x8b, 0x4c, 0xfe, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x34, 0xfb, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_STORE_SUBSCR_LIST_INT_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _BUILD_SETplus_SWAP
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_SWAP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 1b6: 48 f7 da                      negq    %rdx
// 1b9: 4d 89 74 15 00                movq    %r14, (%r13,%rdx)
// 1be: ba 01 00 00 00                movl    $0x1, %edx
// 1c3: 29 ca                         subl    %ecx, %edx
// 1c5: 48 63 ca                      movslq  %edx, %rcx
// 1c8: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1d0: 4c 01 ee                      addq    %r13, %rsi
// 1d3: 49 8b 54 cd f8                movq    -0x8(%r13,%rcx,8), %rdx
// 1d8: 48 89 cf                      movq    %rcx, %rdi
// 1db: 48 29 c7                      subq    %rax, %rdi
// 1de: 49 8b 44 fd 00                movq    (%r13,%rdi,8), %rax
// 1e3: 49 89 54 fd 00                movq    %rdx, (%r13,%rdi,8)
// 1e8: 49 89 44 cd f8                movq    %rax, -0x8(%r13,%rcx,8)
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_CONTINUE
// 1f7: 48 89 df                      movq    %rbx, %rdi
// 1fa: 4c 89 fa                      movq    %r15, %rdx
// 1fd: 48 83 c4 18                   addq    $0x18, %rsp
// 201: 5b                            popq    %rbx
// 202: 41 5c                         popq    %r12
// 204: 41 5d                         popq    %r13
// 206: 41 5e                         popq    %r14
// 208: 41 5f                         popq    %r15
// 20a: 5d                            popq    %rbp
// 20b: ff e0                         jmpq    *%rax
// 20d: 
static const unsigned char _BUILD_SETplus_SWAP_code_body[526] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x74, 0x15, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x54, 0xcd, 0xf8, 0x48, 0x89, 0xcf, 0x48, 0x29, 0xc7, 0x49, 0x8b, 0x44, 0xfd, 0x00, 0x49, 0x89, 0x54, 0xfd, 0x00, 0x49, 0x89, 0x44, 0xcd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_SWAP_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_SWAP_data_holes[1];

// _BUILD_SETplus_TO_BOOL
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_TO_BOOL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 43 01 00 00             je      0x18c <_JIT_ENTRY+0x18c>
// 49: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 67 01 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 129: 4c 8b 34 24                   movq    (%rsp), %r14
// 12d: 74 5d                         je      0x18c <_JIT_ENTRY+0x18c>
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 0f 88 27 01 00 00             js      0x289 <_JIT_ENTRY+0x289>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 0c 24                   decq    (%r12)
// 172: 0f 85 11 01 00 00             jne     0x289 <_JIT_ENTRY+0x289>
// 178: 4c 89 e7                      movq    %r12, %rdi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_Dealloc
// 185: ff d0                         callq   *%rax
// 187: e9 fd 00 00 00                jmp     0x289 <_JIT_ENTRY+0x289>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 0f b7 c0                      movzwl  %ax, %eax
// 19c: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a0: 48 f7 d8                      negq    %rax
// 1a3: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1a7: b8 01 00 00 00                movl    $0x1, %eax
// 1ac: 29 c8                         subl    %ecx, %eax
// 1ae: 48 63 d8                      movslq  %eax, %rbx
// 1b1: 4d 89 f7                      movq    %r14, %r15
// 1b4: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  PyObject_IsTrue
// 1c3: 4c 89 f7                      movq    %r14, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 89 c5                         movl    %eax, %ebp
// 1ca: 49 8b 06                      movq    (%r14), %rax
// 1cd: 48 85 c0                      testq   %rax, %rax
// 1d0: 7e 06                         jle     0x1d8 <_JIT_ENTRY+0x1d8>
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 79 27                         jns     0x1fd <_JIT_ENTRY+0x1fd>
// 1d6: eb 36                         jmp     0x20e <_JIT_ENTRY+0x20e>
// 1d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001da:  R_X86_64_64  .rodata.str1.1
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: be 86 00 00 00                movl    $0x86, %esi
// 1f1: 4c 89 f2                      movq    %r14, %rdx
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 8b 06                      movq    (%r14), %rax
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 78 11                         js      0x20e <_JIT_ENTRY+0x20e>
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 207: ff d0                         callq   *%rax
// 209: 49 ff 0e                      decq    (%r14)
// 20c: 74 60                         je      0x26e <_JIT_ENTRY+0x26e>
// 20e: 85 ed                         testl   %ebp, %ebp
// 210: 78 6f                         js      0x281 <_JIT_ENTRY+0x281>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_OPARG
// 21c: 0f b7 c0                      movzwl  %ax, %eax
// 21f: b9 01 00 00 00                movl    $0x1, %ecx
// 224: 29 c1                         subl    %eax, %ecx
// 226: 48 63 c1                      movslq  %ecx, %rax
// 229: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 22d: 85 ed                         testl   %ebp, %ebp
// 22f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000231:  R_X86_64_64  _Py_FalseStruct
// 239: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000023b:  R_X86_64_64  _Py_TrueStruct
// 243: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 247: 49 89 54 c7 f8                movq    %rdx, -0x8(%r15,%rax,8)
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _JIT_CONTINUE
// 256: 4c 89 ef                      movq    %r13, %rdi
// 259: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 25e: 48 83 c4 18                   addq    $0x18, %rsp
// 262: 5b                            popq    %rbx
// 263: 41 5c                         popq    %r12
// 265: 41 5d                         popq    %r13
// 267: 41 5e                         popq    %r14
// 269: 41 5f                         popq    %r15
// 26b: 5d                            popq    %rbp
// 26c: ff e0                         jmpq    *%rax
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_Dealloc
// 278: 4c 89 f7                      movq    %r14, %rdi
// 27b: ff d0                         callq   *%rax
// 27d: 85 ed                         testl   %ebp, %ebp
// 27f: 79 91                         jns     0x212 <_JIT_ENTRY+0x212>
// 281: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 285: 49 83 c7 f8                   addq    $-0x8, %r15
// 289: 4d 29 ef                      subq    %r13, %r15
// 28c: 49 83 c7 b8                   addq    $-0x48, %r15
// 290: 49 c1 ef 03                   shrq    $0x3, %r15
// 294: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: 48 83 c4 18                   addq    $0x18, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 
static const unsigned char _BUILD_SETplus_TO_BOOL_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x67, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x27, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x11, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x60, 0x85, 0xed, 0x78, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x85, 0xed, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x54, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x91, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_TO_BOOL_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_TO_BOOL_data_holes[1];

// _BUILD_SETplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_TO_BOOL_ALWAYS_TRUE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ef                      movq    %rbp, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 ef                      movq    %rbp, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 12b: 48 8b 2c 24                   movq    (%rsp), %rbp
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 49 29 df                      subq    %rbx, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 0d 01 00 00                jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4c 89 64 05 00                movq    %r12, (%rbp,%rax)
// 1b3: b8 01 00 00 00                movl    $0x1, %eax
// 1b8: 29 c8                         subl    %ecx, %eax
// 1ba: 48 98                         cltq
// 1bc: 4c 8d 24 c5 00 00 00 00       leaq    (,%rax,8), %r12
// 1c4: 49 01 ec                      addq    %rbp, %r12
// 1c7: 4c 8b 74 c5 f8                movq    -0x8(%rbp,%rax,8), %r14
// 1cc: 49 8b 46 08                   movq    0x8(%r14), %rax
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_OPERAND
// 1da: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1e0: 0f 85 96 00 00 00             jne     0x27c <_JIT_ENTRY+0x27c>
// 1e6: 49 8b 06                      movq    (%r14), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7f 21                         jg      0x20f <_JIT_ENTRY+0x20f>
// 1ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_NegativeRefcount
// 202: be db 00 00 00                movl    $0xdb, %esi
// 207: 4c 89 f2                      movq    %r14, %rdx
// 20a: ff d0                         callq   *%rax
// 20c: 49 8b 06                      movq    (%r14), %rax
// 20f: 85 c0                         testl   %eax, %eax
// 211: 78 20                         js      0x233 <_JIT_ENTRY+0x233>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21d: ff d0                         callq   *%rax
// 21f: 49 ff 0e                      decq    (%r14)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 4c 89 f7                      movq    %r14, %rdi
// 231: ff d0                         callq   *%rax
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: 0f b7 c0                      movzwl  %ax, %eax
// 240: b9 01 00 00 00                movl    $0x1, %ecx
// 245: 29 c1                         subl    %eax, %ecx
// 247: 48 63 c1                      movslq  %ecx, %rax
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _Py_TrueStruct
// 254: 48 89 4c c5 f8                movq    %rcx, -0x8(%rbp,%rax,8)
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_CONTINUE
// 263: 48 89 df                      movq    %rbx, %rdi
// 266: 4c 89 e6                      movq    %r12, %rsi
// 269: 4c 89 ea                      movq    %r13, %rdx
// 26c: 48 83 c4 18                   addq    $0x18, %rsp
// 270: 5b                            popq    %rbx
// 271: 41 5c                         popq    %r12
// 273: 41 5d                         popq    %r13
// 275: 41 5e                         popq    %r14
// 277: 41 5f                         popq    %r15
// 279: 5d                            popq    %rbp
// 27a: ff e0                         jmpq    *%rax
// 27c: 49 29 dc                      subq    %rbx, %r12
// 27f: 49 83 c4 b8                   addq    $-0x48, %r12
// 283: 49 c1 ec 03                   shrq    $0x3, %r12
// 287: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 28b: 48 8b 03                      movq    (%rbx), %rax
// 28e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000290:  R_X86_64_64  _JIT_TARGET
// 298: 89 c9                         movl    %ecx, %ecx
// 29a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 29e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a4: 48 83 c4 18                   addq    $0x18, %rsp
// 2a8: 5b                            popq    %rbx
// 2a9: 41 5c                         popq    %r12
// 2ab: 41 5d                         popq    %r13
// 2ad: 41 5e                         popq    %r14
// 2af: 41 5f                         popq    %r15
// 2b1: 5d                            popq    %rbp
// 2b2: c3                            retq
// 2b3: 
static const unsigned char _BUILD_SETplus_TO_BOOL_ALWAYS_TRUE_code_body[692] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xef, 0xeb, 0x62, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x4c, 0x8b, 0x74, 0xc5, 0xf8, 0x49, 0x8b, 0x46, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0x96, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0xc5, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_TO_BOOL_ALWAYS_TRUE_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _BUILD_SETplus_TO_BOOL_BOOL
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_TO_BOOL_BOOL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 6c                         jmp     0x1fd <_JIT_ENTRY+0x1fd>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1be: 4c 01 ee                      addq    %r13, %rsi
// 1c1: 49 8b 44 c5 f8                movq    -0x8(%r13,%rax,8), %rax
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  PyBool_Type
// 1d0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1d4: 74 36                         je      0x20c <_JIT_ENTRY+0x20c>
// 1d6: 48 29 de                      subq    %rbx, %rsi
// 1d9: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1dd: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e1: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e4: 48 8b 03                      movq    (%rbx), %rax
// 1e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e9:  R_X86_64_64  _JIT_TARGET
// 1f1: 89 c9                         movl    %ecx, %ecx
// 1f3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fd: 48 83 c4 18                   addq    $0x18, %rsp
// 201: 5b                            popq    %rbx
// 202: 41 5c                         popq    %r12
// 204: 41 5d                         popq    %r13
// 206: 41 5e                         popq    %r14
// 208: 41 5f                         popq    %r15
// 20a: 5d                            popq    %rbp
// 20b: c3                            retq
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_CONTINUE
// 216: 48 89 df                      movq    %rbx, %rdi
// 219: 4c 89 fa                      movq    %r15, %rdx
// 21c: 48 83 c4 18                   addq    $0x18, %rsp
// 220: 5b                            popq    %rbx
// 221: 41 5c                         popq    %r12
// 223: 41 5d                         popq    %r13
// 225: 41 5e                         popq    %r14
// 227: 41 5f                         popq    %r15
// 229: 5d                            popq    %rbp
// 22a: ff e0                         jmpq    *%rax
// 22c: 
static const unsigned char _BUILD_SETplus_TO_BOOL_BOOL_code_body[557] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x49, 0x8b, 0x44, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_TO_BOOL_BOOL_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_TO_BOOL_BOOL_data_holes[1];

// _BUILD_SETplus_TO_BOOL_INT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_TO_BOOL_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: eb 66                         jmp     0x1fa <_JIT_ENTRY+0x1fa>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1af: b8 01 00 00 00                movl    $0x1, %eax
// 1b4: 29 c8                         subl    %ecx, %eax
// 1b6: 48 98                         cltq
// 1b8: 4c 8d 24 c3                   leaq    (%rbx,%rax,8), %r12
// 1bc: 4c 8b 74 c3 f8                movq    -0x8(%rbx,%rax,8), %r14
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyLong_Type
// 1cb: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 1cf: 74 38                         je      0x209 <_JIT_ENTRY+0x209>
// 1d1: 4d 29 ec                      subq    %r13, %r12
// 1d4: 49 83 c4 b8                   addq    $-0x48, %r12
// 1d8: 49 c1 ec 03                   shrq    $0x3, %r12
// 1dc: 45 89 65 40                   movl    %r12d, 0x40(%r13)
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_TARGET
// 1ee: 89 c9                         movl    %ecx, %ecx
// 1f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fa: 48 83 c4 18                   addq    $0x18, %rsp
// 1fe: 5b                            popq    %rbx
// 1ff: 41 5c                         popq    %r12
// 201: 41 5d                         popq    %r13
// 203: 41 5e                         popq    %r14
// 205: 41 5f                         popq    %r15
// 207: 5d                            popq    %rbp
// 208: c3                            retq
// 209: 41 8b 46 10                   movl    0x10(%r14), %eax
// 20d: 83 e0 03                      andl    $0x3, %eax
// 210: 49 89 df                      movq    %rbx, %r15
// 213: 83 f8 01                      cmpl    $0x1, %eax
// 216: 75 0c                         jne     0x224 <_JIT_ENTRY+0x224>
// 218: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000021a:  R_X86_64_64  _Py_FalseStruct
// 222: eb 57                         jmp     0x27b <_JIT_ENTRY+0x27b>
// 224: 49 8b 06                      movq    (%r14), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7f 21                         jg      0x24d <_JIT_ENTRY+0x24d>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be a0 00 00 00                movl    $0xa0, %esi
// 245: 4c 89 f2                      movq    %r14, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 06                      movq    (%r14), %rax
// 24d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000024f:  R_X86_64_64  _Py_TrueStruct
// 257: 85 c0                         testl   %eax, %eax
// 259: 78 20                         js      0x27b <_JIT_ENTRY+0x27b>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 265: ff d0                         callq   *%rax
// 267: 49 ff 0e                      decq    (%r14)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 4c 89 f7                      movq    %r14, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_OPARG
// 285: 0f b7 c0                      movzwl  %ax, %eax
// 288: b9 01 00 00 00                movl    $0x1, %ecx
// 28d: 29 c1                         subl    %eax, %ecx
// 28f: 48 63 c1                      movslq  %ecx, %rax
// 292: 49 89 5c c7 f8                movq    %rbx, -0x8(%r15,%rax,8)
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _JIT_CONTINUE
// 2a1: 4c 89 ef                      movq    %r13, %rdi
// 2a4: 4c 89 e6                      movq    %r12, %rsi
// 2a7: 48 89 ea                      movq    %rbp, %rdx
// 2aa: 48 83 c4 18                   addq    $0x18, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: ff e0                         jmpq    *%rax
// 2ba: 
static const unsigned char _BUILD_SETplus_TO_BOOL_INT_code_body[699] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xeb, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc3, 0x4c, 0x8b, 0x74, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x74, 0x38, 0x4d, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x65, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x46, 0x10, 0x83, 0xe0, 0x03, 0x49, 0x89, 0xdf, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x57, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x5c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_TO_BOOL_INT_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_TO_BOOL_INT_data_holes[1];

// _BUILD_SETplus_TO_BOOL_LIST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_TO_BOOL_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: eb 66                         jmp     0x1fa <_JIT_ENTRY+0x1fa>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1af: b8 01 00 00 00                movl    $0x1, %eax
// 1b4: 29 c8                         subl    %ecx, %eax
// 1b6: 48 98                         cltq
// 1b8: 4c 8d 24 c3                   leaq    (%rbx,%rax,8), %r12
// 1bc: 4c 8b 74 c3 f8                movq    -0x8(%rbx,%rax,8), %r14
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyList_Type
// 1cb: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 1cf: 74 38                         je      0x209 <_JIT_ENTRY+0x209>
// 1d1: 4d 29 ec                      subq    %r13, %r12
// 1d4: 49 83 c4 b8                   addq    $-0x48, %r12
// 1d8: 49 c1 ec 03                   shrq    $0x3, %r12
// 1dc: 45 89 65 40                   movl    %r12d, 0x40(%r13)
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_TARGET
// 1ee: 89 c9                         movl    %ecx, %ecx
// 1f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fa: 48 83 c4 18                   addq    $0x18, %rsp
// 1fe: 5b                            popq    %rbx
// 1ff: 41 5c                         popq    %r12
// 201: 41 5d                         popq    %r13
// 203: 41 5e                         popq    %r14
// 205: 41 5f                         popq    %r15
// 207: 5d                            popq    %rbp
// 208: c3                            retq
// 209: 49 89 df                      movq    %rbx, %r15
// 20c: 49 8b 06                      movq    (%r14), %rax
// 20f: 49 8b 5e 10                   movq    0x10(%r14), %rbx
// 213: 48 85 c0                      testq   %rax, %rax
// 216: 7f 21                         jg      0x239 <_JIT_ENTRY+0x239>
// 218: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021a:  R_X86_64_64  .rodata.str1.1
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: be ae 00 00 00                movl    $0xae, %esi
// 231: 4c 89 f2                      movq    %r14, %rdx
// 234: ff d0                         callq   *%rax
// 236: 49 8b 06                      movq    (%r14), %rax
// 239: 85 c0                         testl   %eax, %eax
// 23b: 78 20                         js      0x25d <_JIT_ENTRY+0x25d>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 247: ff d0                         callq   *%rax
// 249: 49 ff 0e                      decq    (%r14)
// 24c: 75 0f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 4c 89 f7                      movq    %r14, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 48 85 db                      testq   %rbx, %rbx
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_FalseStruct
// 26a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026c:  R_X86_64_64  _Py_TrueStruct
// 274: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _JIT_OPARG
// 282: 0f b7 c0                      movzwl  %ax, %eax
// 285: ba 01 00 00 00                movl    $0x1, %edx
// 28a: 29 c2                         subl    %eax, %edx
// 28c: 48 63 c2                      movslq  %edx, %rax
// 28f: 49 89 4c c7 f8                movq    %rcx, -0x8(%r15,%rax,8)
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_CONTINUE
// 29e: 4c 89 ef                      movq    %r13, %rdi
// 2a1: 4c 89 e6                      movq    %r12, %rsi
// 2a4: 48 89 ea                      movq    %rbp, %rdx
// 2a7: 48 83 c4 18                   addq    $0x18, %rsp
// 2ab: 5b                            popq    %rbx
// 2ac: 41 5c                         popq    %r12
// 2ae: 41 5d                         popq    %r13
// 2b0: 41 5e                         popq    %r14
// 2b2: 41 5f                         popq    %r15
// 2b4: 5d                            popq    %rbp
// 2b5: ff e0                         jmpq    *%rax
// 2b7: 
static const unsigned char _BUILD_SETplus_TO_BOOL_LIST_code_body[696] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xeb, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc3, 0x4c, 0x8b, 0x74, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x74, 0x38, 0x4d, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x65, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xdf, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x5e, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x49, 0x89, 0x4c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_TO_BOOL_LIST_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_TO_BOOL_LIST_data_holes[1];

// _BUILD_SETplus_TO_BOOL_NONE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_TO_BOOL_NONE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c7                      movq    %rax, %r15
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 dc                   movq    (%r12,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 ff                      movq    %r15, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 60                         je      0x191 <_JIT_ENTRY+0x191>
// 131: 49 8b 07                      movq    (%r15), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 07                      movq    (%r15), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0f                      decq    (%r15)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 ff                      movq    %r15, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: eb 6e                         jmp     0x1ff <_JIT_ENTRY+0x1ff>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: ba 01 00 00 00                movl    $0x1, %edx
// 1b7: 29 ca                         subl    %ecx, %edx
// 1b9: 48 63 ca                      movslq  %edx, %rcx
// 1bc: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1c4: 4c 01 ee                      addq    %r13, %rsi
// 1c7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c9:  R_X86_64_64  _Py_NoneStruct
// 1d1: 49 39 54 cd f8                cmpq    %rdx, -0x8(%r13,%rcx,8)
// 1d6: 74 36                         je      0x20e <_JIT_ENTRY+0x20e>
// 1d8: 48 29 de                      subq    %rbx, %rsi
// 1db: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1df: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1e3: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1e6: 48 8b 03                      movq    (%rbx), %rax
// 1e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001eb:  R_X86_64_64  _JIT_TARGET
// 1f3: 89 c9                         movl    %ecx, %ecx
// 1f5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ff: 48 83 c4 18                   addq    $0x18, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: c3                            retq
// 20e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000210:  R_X86_64_64  _JIT_OPARG
// 218: 0f b7 c9                      movzwl  %cx, %ecx
// 21b: 29 c8                         subl    %ecx, %eax
// 21d: 48 98                         cltq
// 21f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000221:  R_X86_64_64  _Py_FalseStruct
// 229: 49 89 4c c5 f8                movq    %rcx, -0x8(%r13,%rax,8)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_CONTINUE
// 238: 48 89 df                      movq    %rbx, %rdi
// 23b: 4c 89 f2                      movq    %r14, %rdx
// 23e: 48 83 c4 18                   addq    $0x18, %rsp
// 242: 5b                            popq    %rbx
// 243: 41 5c                         popq    %r12
// 245: 41 5d                         popq    %r13
// 247: 41 5e                         popq    %r14
// 249: 41 5f                         popq    %r15
// 24b: 5d                            popq    %rbp
// 24c: ff e0                         jmpq    *%rax
// 24e: 
static const unsigned char _BUILD_SETplus_TO_BOOL_NONE_code_body[591] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x60, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0xcd, 0xf8, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4c, 0xc5, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_TO_BOOL_NONE_code_holes[19] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_TO_BOOL_NONE_data_holes[1];

// _BUILD_SETplus_TO_BOOL_STR
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_TO_BOOL_STR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 50 01 00 00             je      0x194 <_JIT_ENTRY+0x194>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 1c 24                   movq    %rbx, (%rsp)
// 59: 49 89 df                      movq    %rbx, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 49 89 df                      movq    %rbx, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 12f: 74 63                         je      0x194 <_JIT_ENTRY+0x194>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: eb 66                         jmp     0x1fa <_JIT_ENTRY+0x1fa>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _JIT_OPARG
// 19e: 0f b7 c8                      movzwl  %ax, %ecx
// 1a1: 0f b7 c0                      movzwl  %ax, %eax
// 1a4: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a8: 48 f7 d8                      negq    %rax
// 1ab: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 1af: b8 01 00 00 00                movl    $0x1, %eax
// 1b4: 29 c8                         subl    %ecx, %eax
// 1b6: 48 98                         cltq
// 1b8: 4c 8d 24 c3                   leaq    (%rbx,%rax,8), %r12
// 1bc: 4c 8b 74 c3 f8                movq    -0x8(%rbx,%rax,8), %r14
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyUnicode_Type
// 1cb: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 1cf: 74 38                         je      0x209 <_JIT_ENTRY+0x209>
// 1d1: 4d 29 ec                      subq    %r13, %r12
// 1d4: 49 83 c4 b8                   addq    $-0x48, %r12
// 1d8: 49 c1 ec 03                   shrq    $0x3, %r12
// 1dc: 45 89 65 40                   movl    %r12d, 0x40(%r13)
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_TARGET
// 1ee: 89 c9                         movl    %ecx, %ecx
// 1f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fa: 48 83 c4 18                   addq    $0x18, %rsp
// 1fe: 5b                            popq    %rbx
// 1ff: 41 5c                         popq    %r12
// 201: 41 5d                         popq    %r13
// 203: 41 5e                         popq    %r14
// 205: 41 5f                         popq    %r15
// 207: 5d                            popq    %rbp
// 208: c3                            retq
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _PyRuntime
// 213: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 219: 49 89 df                      movq    %rbx, %r15
// 21c: 49 39 c6                      cmpq    %rax, %r14
// 21f: 74 59                         je      0x27a <_JIT_ENTRY+0x27a>
// 221: 49 8b 06                      movq    (%r14), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 21                         jg      0x24a <_JIT_ENTRY+0x24a>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be cb 00 00 00                movl    $0xcb, %esi
// 242: 4c 89 f2                      movq    %r14, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 06                      movq    (%r14), %rax
// 24a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000024c:  R_X86_64_64  _Py_TrueStruct
// 254: 85 c0                         testl   %eax, %eax
// 256: 78 2c                         js      0x284 <_JIT_ENTRY+0x284>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 262: ff d0                         callq   *%rax
// 264: 49 ff 0e                      decq    (%r14)
// 267: 75 1b                         jne     0x284 <_JIT_ENTRY+0x284>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 f7                      movq    %r14, %rdi
// 276: ff d0                         callq   *%rax
// 278: eb 0a                         jmp     0x284 <_JIT_ENTRY+0x284>
// 27a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000027c:  R_X86_64_64  _Py_FalseStruct
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 0f b7 c0                      movzwl  %ax, %eax
// 291: b9 01 00 00 00                movl    $0x1, %ecx
// 296: 29 c1                         subl    %eax, %ecx
// 298: 48 63 c1                      movslq  %ecx, %rax
// 29b: 49 89 5c c7 f8                movq    %rbx, -0x8(%r15,%rax,8)
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_CONTINUE
// 2aa: 4c 89 ef                      movq    %r13, %rdi
// 2ad: 4c 89 e6                      movq    %r12, %rsi
// 2b0: 48 89 ea                      movq    %rbp, %rdx
// 2b3: 48 83 c4 18                   addq    $0x18, %rsp
// 2b7: 5b                            popq    %rbx
// 2b8: 41 5c                         popq    %r12
// 2ba: 41 5d                         popq    %r13
// 2bc: 41 5e                         popq    %r14
// 2be: 41 5f                         popq    %r15
// 2c0: 5d                            popq    %rbp
// 2c1: ff e0                         jmpq    *%rax
// 2c3: 
static const unsigned char _BUILD_SETplus_TO_BOOL_STR_code_body[708] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x1c, 0x24, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x49, 0x89, 0xdf, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x74, 0x63, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xeb, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc3, 0x4c, 0x8b, 0x74, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x74, 0x38, 0x4d, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x65, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x89, 0xdf, 0x49, 0x39, 0xc6, 0x74, 0x59, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x5c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_TO_BOOL_STR_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_TO_BOOL_STR_data_holes[1];

// _BUILD_SETplus_UNARY_INVERT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_UNARY_INVERT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 53 01 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 0e 01 00 00             js      0x275 <_JIT_ENTRY+0x275>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 f8 00 00 00             jne     0x275 <_JIT_ENTRY+0x275>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 e4 00 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 c8                         subl    %ecx, %eax
// 1b3: 48 63 d8                      movslq  %eax, %rbx
// 1b6: 4d 89 f7                      movq    %r14, %r15
// 1b9: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyNumber_Invert
// 1c8: 4c 89 f7                      movq    %r14, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 89 c4                      movq    %rax, %r12
// 1d0: 49 8b 06                      movq    (%r14), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 7e 06                         jle     0x1de <_JIT_ENTRY+0x1de>
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 79 27                         jns     0x203 <_JIT_ENTRY+0x203>
// 1dc: eb 36                         jmp     0x214 <_JIT_ENTRY+0x214>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be e6 00 00 00                movl    $0xe6, %esi
// 1f7: 4c 89 f2                      movq    %r14, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 06                      movq    (%r14), %rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 11                         js      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 49 ff 0e                      decq    (%r14)
// 212: 74 45                         je      0x259 <_JIT_ENTRY+0x259>
// 214: 4d 85 e4                      testq   %r12, %r12
// 217: 74 54                         je      0x26d <_JIT_ENTRY+0x26d>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 c0                      movzwl  %ax, %eax
// 226: b9 01 00 00 00                movl    $0x1, %ecx
// 22b: 29 c1                         subl    %eax, %ecx
// 22d: 48 63 c1                      movslq  %ecx, %rax
// 230: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 234: 4d 89 64 c7 f8                movq    %r12, -0x8(%r15,%rax,8)
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_CONTINUE
// 243: 4c 89 ef                      movq    %r13, %rdi
// 246: 48 89 ea                      movq    %rbp, %rdx
// 249: 48 83 c4 18                   addq    $0x18, %rsp
// 24d: 5b                            popq    %rbx
// 24e: 41 5c                         popq    %r12
// 250: 41 5d                         popq    %r13
// 252: 41 5e                         popq    %r14
// 254: 41 5f                         popq    %r15
// 256: 5d                            popq    %rbp
// 257: ff e0                         jmpq    *%rax
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_Dealloc
// 263: 4c 89 f7                      movq    %r14, %rdi
// 266: ff d0                         callq   *%rax
// 268: 4d 85 e4                      testq   %r12, %r12
// 26b: 75 ac                         jne     0x219 <_JIT_ENTRY+0x219>
// 26d: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 271: 49 83 c7 f8                   addq    $-0x8, %r15
// 275: 4d 29 ef                      subq    %r13, %r15
// 278: 49 83 c7 b8                   addq    $-0x48, %r15
// 27c: 49 c1 ef 03                   shrq    $0x3, %r15
// 280: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 284: 31 c0                         xorl    %eax, %eax
// 286: 48 83 c4 18                   addq    $0x18, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: c3                            retq
// 295: 
static const unsigned char _BUILD_SETplus_UNARY_INVERT_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x53, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x0e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xf8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x45, 0x4d, 0x85, 0xe4, 0x74, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x4d, 0x89, 0x64, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xac, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_UNARY_INVERT_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_UNARY_INVERT_data_holes[1];

// _BUILD_SETplus_UNARY_NEGATIVE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_UNARY_NEGATIVE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4d 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: e9 53 01 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12e: 4c 8b 34 24                   movq    (%rsp), %r14
// 132: 74 5d                         je      0x191 <_JIT_ENTRY+0x191>
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 48 85 c0                      testq   %rax, %rax
// 13b: 7f 22                         jg      0x15f <_JIT_ENTRY+0x15f>
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1
// 147: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14c: 4c 89 e2                      movq    %r12, %rdx
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 88 0e 01 00 00             js      0x275 <_JIT_ENTRY+0x275>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 0f 85 f8 00 00 00             jne     0x275 <_JIT_ENTRY+0x275>
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: ff d0                         callq   *%rax
// 18c: e9 e4 00 00 00                jmp     0x275 <_JIT_ENTRY+0x275>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 0f b7 c0                      movzwl  %ax, %eax
// 1a1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a5: 48 f7 d8                      negq    %rax
// 1a8: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ac: b8 01 00 00 00                movl    $0x1, %eax
// 1b1: 29 c8                         subl    %ecx, %eax
// 1b3: 48 63 d8                      movslq  %eax, %rbx
// 1b6: 4d 89 f7                      movq    %r14, %r15
// 1b9: 4d 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %r14
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyNumber_Negative
// 1c8: 4c 89 f7                      movq    %r14, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 89 c4                      movq    %rax, %r12
// 1d0: 49 8b 06                      movq    (%r14), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 7e 06                         jle     0x1de <_JIT_ENTRY+0x1de>
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 79 27                         jns     0x203 <_JIT_ENTRY+0x203>
// 1dc: eb 36                         jmp     0x214 <_JIT_ENTRY+0x214>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be 71 00 00 00                movl    $0x71, %esi
// 1f7: 4c 89 f2                      movq    %r14, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 06                      movq    (%r14), %rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 11                         js      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 49 ff 0e                      decq    (%r14)
// 212: 74 45                         je      0x259 <_JIT_ENTRY+0x259>
// 214: 4d 85 e4                      testq   %r12, %r12
// 217: 74 54                         je      0x26d <_JIT_ENTRY+0x26d>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 c0                      movzwl  %ax, %eax
// 226: b9 01 00 00 00                movl    $0x1, %ecx
// 22b: 29 c1                         subl    %eax, %ecx
// 22d: 48 63 c1                      movslq  %ecx, %rax
// 230: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 234: 4d 89 64 c7 f8                movq    %r12, -0x8(%r15,%rax,8)
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _JIT_CONTINUE
// 243: 4c 89 ef                      movq    %r13, %rdi
// 246: 48 89 ea                      movq    %rbp, %rdx
// 249: 48 83 c4 18                   addq    $0x18, %rsp
// 24d: 5b                            popq    %rbx
// 24e: 41 5c                         popq    %r12
// 250: 41 5d                         popq    %r13
// 252: 41 5e                         popq    %r14
// 254: 41 5f                         popq    %r15
// 256: 5d                            popq    %rbp
// 257: ff e0                         jmpq    *%rax
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_Dealloc
// 263: 4c 89 f7                      movq    %r14, %rdi
// 266: ff d0                         callq   *%rax
// 268: 4d 85 e4                      testq   %r12, %r12
// 26b: 75 ac                         jne     0x219 <_JIT_ENTRY+0x219>
// 26d: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 271: 49 83 c7 f8                   addq    $-0x8, %r15
// 275: 4d 29 ef                      subq    %r13, %r15
// 278: 49 83 c7 b8                   addq    $-0x48, %r15
// 27c: 49 c1 ef 03                   shrq    $0x3, %r15
// 280: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 284: 31 c0                         xorl    %eax, %eax
// 286: 48 83 c4 18                   addq    $0x18, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: c3                            retq
// 295: 
static const unsigned char _BUILD_SETplus_UNARY_NEGATIVE_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4d, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xe9, 0x53, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x0e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xf8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x89, 0xf7, 0x4d, 0x8b, 0x74, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x45, 0x4d, 0x85, 0xe4, 0x74, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x4d, 0x89, 0x64, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xac, 0x4d, 0x8d, 0x3c, 0xdf, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_UNARY_NEGATIVE_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_UNARY_NEGATIVE_data_holes[1];

// _BUILD_SETplus_UNARY_NOT
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_UNARY_NOT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1cb: 4c 01 ee                      addq    %r13, %rsi
// 1ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d0:  R_X86_64_64  _Py_FalseStruct
// 1d8: 49 39 4c c5 f8                cmpq    %rcx, -0x8(%r13,%rax,8)
// 1dd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001df:  R_X86_64_64  _Py_TrueStruct
// 1e7: 48 0f 45 d1                   cmovneq %rcx, %rdx
// 1eb: 49 89 54 c5 f8                movq    %rdx, -0x8(%r13,%rax,8)
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _JIT_CONTINUE
// 1fa: 48 89 df                      movq    %rbx, %rdi
// 1fd: 4c 89 fa                      movq    %r15, %rdx
// 200: 48 83 c4 18                   addq    $0x18, %rsp
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: 5d                            popq    %rbp
// 20e: ff e0                         jmpq    *%rax
// 210: 
static const unsigned char _BUILD_SETplus_UNARY_NOT_code_body[529] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0xc5, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd1, 0x49, 0x89, 0x54, 0xc5, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_UNARY_NOT_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_UNARY_NOT_data_holes[1];

// _BUILD_SETplus_UNPACK_EX
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_UNPACK_EX.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 3c 24                   movq    %r15, (%rsp)
// 59: 4d 89 fc                      movq    %r15, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 4d 89 fc                      movq    %r15, %r12
// 11e: e9 6f 01 00 00                jmp     0x292 <_JIT_ENTRY+0x292>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 12b: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 130: 4c 8b 3c 24                   movq    (%rsp), %r15
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 45 00                   movq    (%r13), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 29 01 00 00             js      0x292 <_JIT_ENTRY+0x292>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 4d 00                   decq    (%r13)
// 179: 0f 85 13 01 00 00             jne     0x292 <_JIT_ENTRY+0x292>
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 ff 00 00 00                jmp     0x292 <_JIT_ENTRY+0x292>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c8                      movzwl  %ax, %ecx
// 1a0: 0f b7 d0                      movzwl  %ax, %edx
// 1a3: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1a7: 48 f7 da                      negq    %rdx
// 1aa: 4d 89 2c 17                   movq    %r13, (%r15,%rdx)
// 1ae: ba 01 00 00 00                movl    $0x1, %edx
// 1b3: 29 ca                         subl    %ecx, %edx
// 1b5: 48 63 f2                      movslq  %edx, %rsi
// 1b8: 4d 8b 64 f7 f8                movq    -0x8(%r15,%rsi,8), %r12
// 1bd: 0f b6 d0                      movzbl  %al, %edx
// 1c0: c1 e9 08                      shrl    $0x8, %ecx
// 1c3: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 1c6: ff c0                         incl    %eax
// 1c8: 48 01 f0                      addq    %rsi, %rax
// 1cb: 4d 8d 04 c7                   leaq    (%r15,%rax,8), %r8
// 1cf: 49 83 c0 f8                   addq    $-0x8, %r8
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _PyEval_UnpackIterable
// 1dd: 4c 89 f7                      movq    %r14, %rdi
// 1e0: 4c 89 e6                      movq    %r12, %rsi
// 1e3: ff d0                         callq   *%rax
// 1e5: 89 c5                         movl    %eax, %ebp
// 1e7: 49 8b 04 24                   movq    (%r12), %rax
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 7e 06                         jle     0x1f6 <_JIT_ENTRY+0x1f6>
// 1f0: 85 c0                         testl   %eax, %eax
// 1f2: 79 28                         jns     0x21c <_JIT_ENTRY+0x21c>
// 1f4: eb 47                         jmp     0x23d <_JIT_ENTRY+0x23d>
// 1f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f8:  R_X86_64_64  .rodata.str1.1
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_NegativeRefcount
// 20a: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 20f: 4c 89 e2                      movq    %r12, %rdx
// 212: ff d0                         callq   *%rax
// 214: 49 8b 04 24                   movq    (%r12), %rax
// 218: 85 c0                         testl   %eax, %eax
// 21a: 78 21                         js      0x23d <_JIT_ENTRY+0x23d>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 226: ff d0                         callq   *%rax
// 228: 49 ff 0c 24                   decq    (%r12)
// 22c: 75 0f                         jne     0x23d <_JIT_ENTRY+0x23d>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_Dealloc
// 238: 4c 89 e7                      movq    %r12, %rdi
// 23b: ff d0                         callq   *%rax
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _JIT_OPARG
// 247: 0f b7 c8                      movzwl  %ax, %ecx
// 24a: ba 01 00 00 00                movl    $0x1, %edx
// 24f: 29 ca                         subl    %ecx, %edx
// 251: 48 63 d2                      movslq  %edx, %rdx
// 254: 0f b6 c0                      movzbl  %al, %eax
// 257: c1 e9 08                      shrl    $0x8, %ecx
// 25a: 01 c1                         addl    %eax, %ecx
// 25c: 48 01 d1                      addq    %rdx, %rcx
// 25f: 85 ed                         testl   %ebp, %ebp
// 261: 48 0f 44 ca                   cmoveq  %rdx, %rcx
// 265: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 269: 74 23                         je      0x28e <_JIT_ENTRY+0x28e>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_CONTINUE
// 275: 48 89 df                      movq    %rbx, %rdi
// 278: 4c 89 e6                      movq    %r12, %rsi
// 27b: 4c 89 f2                      movq    %r14, %rdx
// 27e: 48 83 c4 18                   addq    $0x18, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: ff e0                         jmpq    *%rax
// 28e: 49 83 c4 f8                   addq    $-0x8, %r12
// 292: 49 29 dc                      subq    %rbx, %r12
// 295: 49 83 c4 b8                   addq    $-0x48, %r12
// 299: 49 c1 ec 03                   shrq    $0x3, %r12
// 29d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: 48 83 c4 18                   addq    $0x18, %rsp
// 2a7: 5b                            popq    %rbx
// 2a8: 41 5c                         popq    %r12
// 2aa: 41 5d                         popq    %r13
// 2ac: 41 5e                         popq    %r14
// 2ae: 41 5f                         popq    %r15
// 2b0: 5d                            popq    %rbp
// 2b1: c3                            retq
// 2b2: 
static const unsigned char _BUILD_SETplus_UNPACK_EX_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x3c, 0x24, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xfc, 0xe9, 0x6f, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x29, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x13, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x2c, 0x17, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xf2, 0x4d, 0x8b, 0x64, 0xf7, 0xf8, 0x0f, 0xb6, 0xd0, 0xc1, 0xe9, 0x08, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x48, 0x01, 0xf0, 0x4d, 0x8d, 0x04, 0xc7, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x0f, 0xb6, 0xc0, 0xc1, 0xe9, 0x08, 0x01, 0xc1, 0x48, 0x01, 0xd1, 0x85, 0xed, 0x48, 0x0f, 0x44, 0xca, 0x4d, 0x8d, 0x24, 0xcf, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_UNPACK_EX_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_UNPACK_EX_data_holes[1];

// _BUILD_SETplus_UNPACK_SEQUENCE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_UNPACK_SEQUENCE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f5                      movq    %rsi, %rbp
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ed 00 00 00             je      0x11b <_JIT_ENTRY+0x11b>
// 2e: 49 89 c5                      movq    %rax, %r13
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 4f 01 00 00             je      0x193 <_JIT_ENTRY+0x193>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 48 89 2c 24                   movq    %rbp, (%rsp)
// 59: 49 89 ec                      movq    %rbp, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: bd 01 00 00 00                movl    $0x1, %ebp
// 74: 0f 43 e8                      cmovael %eax, %ebp
// 77: 45 31 ff                      xorl    %r15d, %r15d
// 7a: 45 31 f6                      xorl    %r14d, %r14d
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 49 ff c7                      incq    %r15
// 83: 4c 39 fd                      cmpq    %r15, %rbp
// 86: 0f 84 97 00 00 00             je      0x123 <_JIT_ENTRY+0x123>
// 8c: 4b 8b 1c fc                   movq    (%r12,%r15,8), %rbx
// 90: 45 85 f6                      testl   %r14d, %r14d
// 93: 74 1b                         je      0xb0 <_JIT_ENTRY+0xb0>
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 85 c0                      testq   %rax, %rax
// 9b: 7e 30                         jle     0xcd <_JIT_ENTRY+0xcd>
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 df                         js      0x80 <_JIT_ENTRY+0x80>
// a1: eb 4f                         jmp     0xf2 <_JIT_ENTRY+0xf2>
// a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// b0: 4c 89 ef                      movq    %r13, %rdi
// b3: 48 89 de                      movq    %rbx, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 41 89 c6                      movl    %eax, %r14d
// c5: 48 8b 03                      movq    (%rbx), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7f d0                         jg      0x9d <_JIT_ENTRY+0x9d>
// cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cf:  R_X86_64_64  .rodata.str1.1
// d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// dc: 48 89 da                      movq    %rbx, %rdx
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: ff d0                         callq   *%rax
// eb: 48 8b 03                      movq    (%rbx), %rax
// ee: 85 c0                         testl   %eax, %eax
// f0: 78 8e                         js      0x80 <_JIT_ENTRY+0x80>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fc: ff d0                         callq   *%rax
// fe: 48 ff 0b                      decq    (%rbx)
// 101: 0f 85 79 ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 107: 48 89 df                      movq    %rbx, %rdi
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_Dealloc
// 114: ff d0                         callq   *%rax
// 116: e9 65 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11b: 49 89 ec                      movq    %rbp, %r12
// 11e: e9 6f 01 00 00                jmp     0x292 <_JIT_ENTRY+0x292>
// 123: 45 85 f6                      testl   %r14d, %r14d
// 126: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 12b: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 130: 48 8b 2c 24                   movq    (%rsp), %rbp
// 134: 74 5d                         je      0x193 <_JIT_ENTRY+0x193>
// 136: 49 8b 45 00                   movq    (%r13), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 22                         jg      0x161 <_JIT_ENTRY+0x161>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_NegativeRefcount
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 45 00                   movq    (%r13), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 29 01 00 00             js      0x292 <_JIT_ENTRY+0x292>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 4d 00                   decq    (%r13)
// 179: 0f 85 13 01 00 00             jne     0x292 <_JIT_ENTRY+0x292>
// 17f: 4c 89 ef                      movq    %r13, %rdi
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_Dealloc
// 18c: ff d0                         callq   *%rax
// 18e: e9 ff 00 00 00                jmp     0x292 <_JIT_ENTRY+0x292>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 d0                      movzwl  %ax, %edx
// 1a0: 0f b7 c0                      movzwl  %ax, %eax
// 1a3: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 1ab: 48 f7 d9                      negq    %rcx
// 1ae: 4c 89 6c 0d 00                movq    %r13, (%rbp,%rcx)
// 1b3: b9 01 00 00 00                movl    $0x1, %ecx
// 1b8: 29 d1                         subl    %edx, %ecx
// 1ba: 48 63 c9                      movslq  %ecx, %rcx
// 1bd: 4c 8b 74 cd f8                movq    -0x8(%rbp,%rcx,8), %r14
// 1c2: 48 01 c8                      addq    %rcx, %rax
// 1c5: 49 89 ec                      movq    %rbp, %r12
// 1c8: 4c 8d 04 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %r8
// 1d0: 49 01 e8                      addq    %rbp, %r8
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _PyEval_UnpackIterable
// 1dd: 4c 89 ff                      movq    %r15, %rdi
// 1e0: 4c 89 f6                      movq    %r14, %rsi
// 1e3: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 1e8: ff d0                         callq   *%rax
// 1ea: 89 c5                         movl    %eax, %ebp
// 1ec: 49 8b 06                      movq    (%r14), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 7e 06                         jle     0x1fa <_JIT_ENTRY+0x1fa>
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 79 27                         jns     0x21f <_JIT_ENTRY+0x21f>
// 1f8: eb 45                         jmp     0x23f <_JIT_ENTRY+0x23f>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_NegativeRefcount
// 20e: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 213: 4c 89 f2                      movq    %r14, %rdx
// 216: ff d0                         callq   *%rax
// 218: 49 8b 06                      movq    (%r14), %rax
// 21b: 85 c0                         testl   %eax, %eax
// 21d: 78 20                         js      0x23f <_JIT_ENTRY+0x23f>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 229: ff d0                         callq   *%rax
// 22b: 49 ff 0e                      decq    (%r14)
// 22e: 75 0f                         jne     0x23f <_JIT_ENTRY+0x23f>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_Dealloc
// 23a: 4c 89 f7                      movq    %r14, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: 0f b7 c8                      movzwl  %ax, %ecx
// 24c: ba 01 00 00 00                movl    $0x1, %edx
// 251: 29 ca                         subl    %ecx, %edx
// 253: 48 63 ca                      movslq  %edx, %rcx
// 256: 0f b7 c0                      movzwl  %ax, %eax
// 259: 48 01 c8                      addq    %rcx, %rax
// 25c: 48 ff c8                      decq    %rax
// 25f: 85 ed                         testl   %ebp, %ebp
// 261: 48 0f 44 c1                   cmoveq  %rcx, %rax
// 265: 4d 8d 24 c4                   leaq    (%r12,%rax,8), %r12
// 269: 74 23                         je      0x28e <_JIT_ENTRY+0x28e>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_CONTINUE
// 275: 48 89 df                      movq    %rbx, %rdi
// 278: 4c 89 e6                      movq    %r12, %rsi
// 27b: 4c 89 fa                      movq    %r15, %rdx
// 27e: 48 83 c4 18                   addq    $0x18, %rsp
// 282: 5b                            popq    %rbx
// 283: 41 5c                         popq    %r12
// 285: 41 5d                         popq    %r13
// 287: 41 5e                         popq    %r14
// 289: 41 5f                         popq    %r15
// 28b: 5d                            popq    %rbp
// 28c: ff e0                         jmpq    *%rax
// 28e: 49 83 c4 f8                   addq    $-0x8, %r12
// 292: 49 29 dc                      subq    %rbx, %r12
// 295: 49 83 c4 b8                   addq    $-0x48, %r12
// 299: 49 c1 ec 03                   shrq    $0x3, %r12
// 29d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: 48 83 c4 18                   addq    $0x18, %rsp
// 2a7: 5b                            popq    %rbx
// 2a8: 41 5c                         popq    %r12
// 2aa: 41 5d                         popq    %r13
// 2ac: 41 5e                         popq    %r14
// 2ae: 41 5f                         popq    %r15
// 2b0: 5d                            popq    %rbp
// 2b1: c3                            retq
// 2b2: 
static const unsigned char _BUILD_SETplus_UNPACK_SEQUENCE_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0x2c, 0x24, 0x49, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xff, 0x45, 0x31, 0xf6, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x1c, 0xfc, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x49, 0x89, 0xec, 0xe9, 0x6f, 0x01, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x29, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x13, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x89, 0x6c, 0x0d, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8b, 0x74, 0xcd, 0xf8, 0x48, 0x01, 0xc8, 0x49, 0x89, 0xec, 0x4c, 0x8d, 0x04, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x49, 0x01, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x48, 0xff, 0xc8, 0x85, 0xed, 0x48, 0x0f, 0x44, 0xc1, 0x4d, 0x8d, 0x24, 0xc4, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_UNPACK_SEQUENCE_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_UNPACK_SEQUENCE_data_holes[1];

// _BUILD_SETplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_UNPACK_SEQUENCE_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 49 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 49: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ef                      movq    %r13, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: eb 5d                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 126: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12a: 74 66                         je      0x192 <_JIT_ENTRY+0x192>
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 0c 24                   decq    (%r12)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: ff d0                         callq   *%rax
// 17c: 49 29 df                      subq    %rbx, %r15
// 17f: 49 83 c7 b8                   addq    $-0x48, %r15
// 183: 49 c1 ef 03                   shrq    $0x3, %r15
// 187: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: e9 07 01 00 00                jmp     0x299 <_JIT_ENTRY+0x299>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 c8                      movzwl  %ax, %ecx
// 19f: 0f b7 c0                      movzwl  %ax, %eax
// 1a2: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a6: 48 f7 d8                      negq    %rax
// 1a9: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1ae: b8 01 00 00 00                movl    $0x1, %eax
// 1b3: 29 c8                         subl    %ecx, %eax
// 1b5: 48 98                         cltq
// 1b7: 4d 8b 64 c5 f8                movq    -0x8(%r13,%rax,8), %r12
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  PyList_Type
// 1c6: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1cb: 0f 85 96 00 00 00             jne     0x267 <_JIT_ENTRY+0x267>
// 1d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d3:  R_X86_64_64  _JIT_OPARG
// 1db: 0f b7 c9                      movzwl  %cx, %ecx
// 1de: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 1e3: 0f 85 7e 00 00 00             jne     0x267 <_JIT_ENTRY+0x267>
// 1e9: 4c 89 2c 24                   movq    %r13, (%rsp)
// 1ed: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 1f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f4:  R_X86_64_64  _JIT_OPARG
// 1fc: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 202: 0f 8e a0 00 00 00             jle     0x2a8 <_JIT_ENTRY+0x2a8>
// 208: 48 8b 0c 24                   movq    (%rsp), %rcx
// 20c: 48 8d 1c c1                   leaq    (%rcx,%rax,8), %rbx
// 210: 48 83 c3 f8                   addq    $-0x8, %rbx
// 214: 4d 8b 74 24 18                movq    0x18(%r12), %r14
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 44 0f b7 f8                   movzwl  %ax, %r15d
// 227: 49 ff c7                      incq    %r15
// 22a: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000022c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 234: eb 1a                         jmp     0x250 <_JIT_ENTRY+0x250>
// 236: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 240: 48 89 2b                      movq    %rbp, (%rbx)
// 243: 48 83 c3 08                   addq    $0x8, %rbx
// 247: 49 ff cf                      decq    %r15
// 24a: 49 83 ff 01                   cmpq    $0x1, %r15
// 24e: 7e 58                         jle     0x2a8 <_JIT_ENTRY+0x2a8>
// 250: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 254: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 258: 8b 45 00                      movl    (%rbp), %eax
// 25b: ff c0                         incl    %eax
// 25d: 74 e1                         je      0x240 <_JIT_ENTRY+0x240>
// 25f: 89 45 00                      movl    %eax, (%rbp)
// 262: 41 ff d5                      callq   *%r13
// 265: eb d9                         jmp     0x240 <_JIT_ENTRY+0x240>
// 267: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 26f: 4c 01 e8                      addq    %r13, %rax
// 272: 48 29 d8                      subq    %rbx, %rax
// 275: 48 83 c0 b8                   addq    $-0x48, %rax
// 279: 48 c1 e8 03                   shrq    $0x3, %rax
// 27d: 89 43 40                      movl    %eax, 0x40(%rbx)
// 280: 48 8b 03                      movq    (%rbx), %rax
// 283: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000285:  R_X86_64_64  _JIT_TARGET
// 28d: 89 c9                         movl    %ecx, %ecx
// 28f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 293: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: c3                            retq
// 2a8: 49 8b 04 24                   movq    (%r12), %rax
// 2ac: 48 85 c0                      testq   %rax, %rax
// 2af: 7f 22                         jg      0x2d3 <_JIT_ENTRY+0x2d3>
// 2b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b3:  R_X86_64_64  .rodata.str1.1
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_NegativeRefcount
// 2c5: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 2ca: 4c 89 e2                      movq    %r12, %rdx
// 2cd: ff d0                         callq   *%rax
// 2cf: 49 8b 04 24                   movq    (%r12), %rax
// 2d3: 85 c0                         testl   %eax, %eax
// 2d5: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2da: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 2df: 4c 8b 3c 24                   movq    (%rsp), %r15
// 2e3: 78 21                         js      0x306 <_JIT_ENTRY+0x306>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 ff 0c 24                   decq    (%r12)
// 2f5: 75 0f                         jne     0x306 <_JIT_ENTRY+0x306>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: 4c 89 e7                      movq    %r12, %rdi
// 304: ff d0                         callq   *%rax
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _JIT_OPARG
// 310: 0f b7 c8                      movzwl  %ax, %ecx
// 313: ba 01 00 00 00                movl    $0x1, %edx
// 318: 29 ca                         subl    %ecx, %edx
// 31a: 48 63 ca                      movslq  %edx, %rcx
// 31d: 0f b7 c0                      movzwl  %ax, %eax
// 320: 48 01 c8                      addq    %rcx, %rax
// 323: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 327: 48 83 c6 f8                   addq    $-0x8, %rsi
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _JIT_CONTINUE
// 335: 48 89 df                      movq    %rbx, %rdi
// 338: 4c 89 f2                      movq    %r14, %rdx
// 33b: 48 83 c4 18                   addq    $0x18, %rsp
// 33f: 5b                            popq    %rbx
// 340: 41 5c                         popq    %r12
// 342: 41 5d                         popq    %r13
// 344: 41 5e                         popq    %r14
// 346: 41 5f                         popq    %r15
// 348: 5d                            popq    %rbp
// 349: ff e0                         jmpq    *%rax
// 34b: 
static const unsigned char _BUILD_SETplus_UNPACK_SEQUENCE_LIST_code_body[844] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xeb, 0x5d, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x96, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x0f, 0x85, 0x7e, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x1c, 0xc1, 0x48, 0x83, 0xc3, 0xf8, 0x4d, 0x8b, 0x74, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1a, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x58, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc6, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe1, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0xeb, 0xd9, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_UNPACK_SEQUENCE_LIST_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _BUILD_SETplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_UNPACK_SEQUENCE_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d3                      movq    %rdx, %rbx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 36: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000038:  R_X86_64_64  _JIT_OPARG
// 40: 66 85 c0                      testw   %ax, %ax
// 43: 0f 84 49 01 00 00             je      0x192 <_JIT_ENTRY+0x192>
// 49: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 5d                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 126: 4c 8b 34 24                   movq    (%rsp), %r14
// 12a: 74 66                         je      0x192 <_JIT_ENTRY+0x192>
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f 22                         jg      0x157 <_JIT_ENTRY+0x157>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_NegativeRefcount
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 21                         js      0x17c <_JIT_ENTRY+0x17c>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 165: ff d0                         callq   *%rax
// 167: 49 ff 0c 24                   decq    (%r12)
// 16b: 75 0f                         jne     0x17c <_JIT_ENTRY+0x17c>
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: ff d0                         callq   *%rax
// 17c: 49 29 ef                      subq    %rbp, %r15
// 17f: 49 83 c7 b8                   addq    $-0x48, %r15
// 183: 49 c1 ef 03                   shrq    $0x3, %r15
// 187: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: e9 f4 00 00 00                jmp     0x286 <_JIT_ENTRY+0x286>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 c8                      movzwl  %ax, %ecx
// 19f: 0f b7 c0                      movzwl  %ax, %eax
// 1a2: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a6: 48 f7 d8                      negq    %rax
// 1a9: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1ad: b8 01 00 00 00                movl    $0x1, %eax
// 1b2: 29 c8                         subl    %ecx, %eax
// 1b4: 48 98                         cltq
// 1b6: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  PyTuple_Type
// 1c5: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1ca: 0f 85 8a 00 00 00             jne     0x25a <_JIT_ENTRY+0x25a>
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_OPARG
// 1da: 0f b7 c9                      movzwl  %cx, %ecx
// 1dd: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 1e2: 75 76                         jne     0x25a <_JIT_ENTRY+0x25a>
// 1e4: 4c 89 34 24                   movq    %r14, (%rsp)
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  _JIT_OPARG
// 1f2: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 1f8: 0f 8e 97 00 00 00             jle     0x295 <_JIT_ENTRY+0x295>
// 1fe: 48 8b 0c 24                   movq    (%rsp), %rcx
// 202: 48 8d 1c c1                   leaq    (%rcx,%rax,8), %rbx
// 206: 48 83 c3 f8                   addq    $-0x8, %rbx
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_OPARG
// 214: 44 0f b7 f0                   movzwl  %ax, %r14d
// 218: 49 ff c6                      incq    %r14
// 21b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000021d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 225: eb 19                         jmp     0x240 <_JIT_ENTRY+0x240>
// 227: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 230: 4c 89 2b                      movq    %r13, (%rbx)
// 233: 48 83 c3 08                   addq    $0x8, %rbx
// 237: 49 ff ce                      decq    %r14
// 23a: 49 83 fe 01                   cmpq    $0x1, %r14
// 23e: 7e 55                         jle     0x295 <_JIT_ENTRY+0x295>
// 240: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// 244: 4d 8b 6c c4 18                movq    0x18(%r12,%rax,8), %r13
// 249: 41 8b 45 00                   movl    (%r13), %eax
// 24d: ff c0                         incl    %eax
// 24f: 74 df                         je      0x230 <_JIT_ENTRY+0x230>
// 251: 41 89 45 00                   movl    %eax, (%r13)
// 255: 41 ff d7                      callq   *%r15
// 258: eb d6                         jmp     0x230 <_JIT_ENTRY+0x230>
// 25a: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 25e: 48 29 e8                      subq    %rbp, %rax
// 261: 48 83 c0 b8                   addq    $-0x48, %rax
// 265: 48 c1 e8 03                   shrq    $0x3, %rax
// 269: 89 45 40                      movl    %eax, 0x40(%rbp)
// 26c: 48 8b 45 00                   movq    (%rbp), %rax
// 270: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000272:  R_X86_64_64  _JIT_TARGET
// 27a: 89 c9                         movl    %ecx, %ecx
// 27c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 280: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 286: 48 83 c4 18                   addq    $0x18, %rsp
// 28a: 5b                            popq    %rbx
// 28b: 41 5c                         popq    %r12
// 28d: 41 5d                         popq    %r13
// 28f: 41 5e                         popq    %r14
// 291: 41 5f                         popq    %r15
// 293: 5d                            popq    %rbp
// 294: c3                            retq
// 295: 49 8b 04 24                   movq    (%r12), %rax
// 299: 48 85 c0                      testq   %rax, %rax
// 29c: 7f 22                         jg      0x2c0 <_JIT_ENTRY+0x2c0>
// 29e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a0:  R_X86_64_64  .rodata.str1.1
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_NegativeRefcount
// 2b2: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 2b7: 4c 89 e2                      movq    %r12, %rdx
// 2ba: ff d0                         callq   *%rax
// 2bc: 49 8b 04 24                   movq    (%r12), %rax
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2c7: 4c 8b 34 24                   movq    (%rsp), %r14
// 2cb: 78 21                         js      0x2ee <_JIT_ENTRY+0x2ee>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d7: ff d0                         callq   *%rax
// 2d9: 49 ff 0c 24                   decq    (%r12)
// 2dd: 75 0f                         jne     0x2ee <_JIT_ENTRY+0x2ee>
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_Dealloc
// 2e9: 4c 89 e7                      movq    %r12, %rdi
// 2ec: ff d0                         callq   *%rax
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _JIT_OPARG
// 2f8: 0f b7 c8                      movzwl  %ax, %ecx
// 2fb: ba 01 00 00 00                movl    $0x1, %edx
// 300: 29 ca                         subl    %ecx, %edx
// 302: 48 63 ca                      movslq  %edx, %rcx
// 305: 0f b7 c0                      movzwl  %ax, %eax
// 308: 48 01 c8                      addq    %rcx, %rax
// 30b: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 30f: 48 83 c6 f8                   addq    $-0x8, %rsi
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _JIT_CONTINUE
// 31d: 48 89 ef                      movq    %rbp, %rdi
// 320: 48 89 da                      movq    %rbx, %rdx
// 323: 48 83 c4 18                   addq    $0x18, %rsp
// 327: 5b                            popq    %rbx
// 328: 41 5c                         popq    %r12
// 32a: 41 5d                         popq    %r13
// 32c: 41 5e                         popq    %r14
// 32e: 41 5f                         popq    %r15
// 330: 5d                            popq    %rbp
// 331: ff e0                         jmpq    *%rax
// 333: 
static const unsigned char _BUILD_SETplus_UNPACK_SEQUENCE_TUPLE_code_body[820] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x5d, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0xf4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x75, 0x76, 0x4c, 0x89, 0x34, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x97, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x1c, 0xc1, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x19, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x55, 0x41, 0x8d, 0x46, 0xfe, 0x4d, 0x8b, 0x6c, 0xc4, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xdf, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0xeb, 0xd6, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xe8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x45, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_UNPACK_SEQUENCE_TUPLE_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _BUILD_SETplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_UNPACK_SEQUENCE_TWO_TUPLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 fd                      movq    %rdi, %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 53 01 00 00             je      0x197 <_JIT_ENTRY+0x197>
// 44: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 49: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 34 24                   movq    %r14, (%rsp)
// 59: 4d 89 f7                      movq    %r14, %r15
// 5c: 49 29 c7                      subq    %rax, %r15
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 f7                      movq    %r14, %r15
// 11d: eb 62                         jmp     0x181 <_JIT_ENTRY+0x181>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 126: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 12b: 4c 8b 34 24                   movq    (%rsp), %r14
// 12f: 74 66                         je      0x197 <_JIT_ENTRY+0x197>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7f 22                         jg      0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013c:  R_X86_64_64  .rodata.str1.1
// 144: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 149: 4c 89 e2                      movq    %r12, %rdx
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: ff d0                         callq   *%rax
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 78 21                         js      0x181 <_JIT_ENTRY+0x181>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 75 0f                         jne     0x181 <_JIT_ENTRY+0x181>
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: ff d0                         callq   *%rax
// 181: 4d 29 ef                      subq    %r13, %r15
// 184: 49 83 c7 b8                   addq    $-0x48, %r15
// 188: 49 c1 ef 03                   shrq    $0x3, %r15
// 18c: 45 89 7d 40                   movl    %r15d, 0x40(%r13)
// 190: 31 c0                         xorl    %eax, %eax
// 192: e9 db 00 00 00                jmp     0x272 <_JIT_ENTRY+0x272>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c8                      movzwl  %ax, %ecx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ab: 48 f7 d8                      negq    %rax
// 1ae: 4d 89 24 06                   movq    %r12, (%r14,%rax)
// 1b2: b8 01 00 00 00                movl    $0x1, %eax
// 1b7: 29 c8                         subl    %ecx, %eax
// 1b9: 48 98                         cltq
// 1bb: 49 8d 1c c6                   leaq    (%r14,%rax,8), %rbx
// 1bf: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  PyTuple_Type
// 1ce: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d3: 75 74                         jne     0x249 <_JIT_ENTRY+0x249>
// 1d5: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 1db: 75 6c                         jne     0x249 <_JIT_ENTRY+0x249>
// 1dd: 4d 8b 7c 24 20                movq    0x20(%r12), %r15
// 1e2: 41 8b 07                      movl    (%r15), %eax
// 1e5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ef: ff c0                         incl    %eax
// 1f1: 74 19                         je      0x20c <_JIT_ENTRY+0x20c>
// 1f3: 41 89 07                      movl    %eax, (%r15)
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 200: ff d0                         callq   *%rax
// 202: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000204:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_OPARG
// 216: 0f b7 c0                      movzwl  %ax, %eax
// 219: b9 01 00 00 00                movl    $0x1, %ecx
// 21e: 29 c1                         subl    %eax, %ecx
// 220: 48 63 c1                      movslq  %ecx, %rax
// 223: 4d 89 7c c6 f8                movq    %r15, -0x8(%r14,%rax,8)
// 228: 4d 8b 7c 24 18                movq    0x18(%r12), %r15
// 22d: 41 8b 07                      movl    (%r15), %eax
// 230: ff c0                         incl    %eax
// 232: 75 4d                         jne     0x281 <_JIT_ENTRY+0x281>
// 234: 4c 89 3b                      movq    %r15, (%rbx)
// 237: 49 8b 04 24                   movq    (%r12), %rax
// 23b: 48 85 c0                      testq   %rax, %rax
// 23e: 7e 52                         jle     0x292 <_JIT_ENTRY+0x292>
// 240: 85 c0                         testl   %eax, %eax
// 242: 79 74                         jns     0x2b8 <_JIT_ENTRY+0x2b8>
// 244: e9 90 00 00 00                jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 249: 4c 29 eb                      subq    %r13, %rbx
// 24c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 250: 48 c1 eb 03                   shrq    $0x3, %rbx
// 254: 41 89 5d 40                   movl    %ebx, 0x40(%r13)
// 258: 49 8b 45 00                   movq    (%r13), %rax
// 25c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025e:  R_X86_64_64  _JIT_TARGET
// 266: 89 c9                         movl    %ecx, %ecx
// 268: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 272: 48 83 c4 18                   addq    $0x18, %rsp
// 276: 5b                            popq    %rbx
// 277: 41 5c                         popq    %r12
// 279: 41 5d                         popq    %r13
// 27b: 41 5e                         popq    %r14
// 27d: 41 5f                         popq    %r15
// 27f: 5d                            popq    %rbp
// 280: c3                            retq
// 281: 41 89 07                      movl    %eax, (%r15)
// 284: ff d2                         callq   *%rdx
// 286: 4c 89 3b                      movq    %r15, (%rbx)
// 289: 49 8b 04 24                   movq    (%r12), %rax
// 28d: 48 85 c0                      testq   %rax, %rax
// 290: 7f ae                         jg      0x240 <_JIT_ENTRY+0x240>
// 292: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000294:  R_X86_64_64  .rodata.str1.1
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_NegativeRefcount
// 2a6: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 2ab: 4c 89 e2                      movq    %r12, %rdx
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 04 24                   movq    (%r12), %rax
// 2b4: 85 c0                         testl   %eax, %eax
// 2b6: 78 21                         js      0x2d9 <_JIT_ENTRY+0x2d9>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 ff 0c 24                   decq    (%r12)
// 2c8: 75 0f                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_Dealloc
// 2d4: 4c 89 e7                      movq    %r12, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _JIT_OPARG
// 2e3: 0f b7 c8                      movzwl  %ax, %ecx
// 2e6: ba 01 00 00 00                movl    $0x1, %edx
// 2eb: 29 ca                         subl    %ecx, %edx
// 2ed: 48 63 ca                      movslq  %edx, %rcx
// 2f0: 0f b7 c0                      movzwl  %ax, %eax
// 2f3: 48 01 c8                      addq    %rcx, %rax
// 2f6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2fa: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _JIT_CONTINUE
// 308: 4c 89 ef                      movq    %r13, %rdi
// 30b: 48 89 ea                      movq    %rbp, %rdx
// 30e: 48 83 c4 18                   addq    $0x18, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: ff e0                         jmpq    *%rax
// 31e: 
static const unsigned char _BUILD_SETplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[799] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xfd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0x01, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x34, 0x24, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0xeb, 0x62, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x66, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0xe9, 0xdb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x24, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x1c, 0xc6, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x74, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x6c, 0x4d, 0x8b, 0x7c, 0x24, 0x20, 0x41, 0x8b, 0x07, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x19, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x7c, 0xc6, 0xf8, 0x4d, 0x8b, 0x7c, 0x24, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x4d, 0x4c, 0x89, 0x3b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5d, 0x40, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x07, 0xff, 0xd2, 0x4c, 0x89, 0x3b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xae, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SETplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[26] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _BUILD_SETplus_WITH_EXCEPT_START
// 
// /tmp/tmpf387v2hk/_BUILD_SETplus_WITH_EXCEPT_START.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 48                   subq    $0x48, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: 4c 89 74 24 18                movq    %r14, 0x18(%rsp)
// 36: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _JIT_OPARG
// 45: 66 85 c0                      testw   %ax, %ax
// 48: 0f 84 3f 01 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 5a: 4d 89 ef                      movq    %r13, %r15
// 5d: 49 29 c7                      subq    %rax, %r15
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 c0                      movzwl  %ax, %eax
// 6d: 83 f8 02                      cmpl    $0x2, %eax
// 70: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 76: 44 0f 43 e8                   cmovael %eax, %r13d
// 7a: 31 db                         xorl    %ebx, %ebx
// 7c: 31 ed                         xorl    %ebp, %ebp
// 7e: eb 0c                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 96 00 00 00             je      0x122 <_JIT_ENTRY+0x122>
// 8c: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 06                      movq    (%r14), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: 4c 89 f6                      movq    %r14, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 f2                      movq    %r14, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 06                      movq    (%r14), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0e                      decq    (%r14)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 f7                      movq    %r14, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ef                      movq    %r13, %r15
// 11d: e9 a1 01 00 00                jmp     0x2c3 <_JIT_ENTRY+0x2c3>
// 122: 85 ed                         testl   %ebp, %ebp
// 124: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 129: 74 62                         je      0x18d <_JIT_ENTRY+0x18d>
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 48 85 c0                      testq   %rax, %rax
// 132: 7f 22                         jg      0x156 <_JIT_ENTRY+0x156>
// 134: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000136:  R_X86_64_64  .rodata.str1.1
// 13e: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 143: 4c 89 e2                      movq    %r12, %rdx
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: ff d0                         callq   *%rax
// 152: 49 8b 04 24                   movq    (%r12), %rax
// 156: 85 c0                         testl   %eax, %eax
// 158: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 15d: 0f 88 60 01 00 00             js      0x2c3 <_JIT_ENTRY+0x2c3>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 4a 01 00 00             jne     0x2c3 <_JIT_ENTRY+0x2c3>
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: ff d0                         callq   *%rax
// 188: e9 36 01 00 00                jmp     0x2c3 <_JIT_ENTRY+0x2c3>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c8                      movzwl  %ax, %ecx
// 19a: 0f b7 c0                      movzwl  %ax, %eax
// 19d: 48 c1 e0 03                   shlq    $0x3, %rax
// 1a1: 48 f7 d8                      negq    %rax
// 1a4: 4d 89 64 05 00                movq    %r12, (%r13,%rax)
// 1a9: b8 01 00 00 00                movl    $0x1, %eax
// 1ae: 29 c8                         subl    %ecx, %eax
// 1b0: 48 63 d8                      movslq  %eax, %rbx
// 1b3: 4d 8b 64 dd e0                movq    -0x20(%r13,%rbx,8), %r12
// 1b8: 4d 89 ef                      movq    %r13, %r15
// 1bb: 4d 8b 6c dd f8                movq    -0x8(%r13,%rbx,8), %r13
// 1c0: 4d 8b 75 08                   movq    0x8(%r13), %r14
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  PyException_GetTraceback
// 1ce: 4c 89 ef                      movq    %r13, %rdi
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 74 54                         je      0x22c <_JIT_ENTRY+0x22c>
// 1d8: 48 89 c5                      movq    %rax, %rbp
// 1db: 48 8b 00                      movq    (%rax), %rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 7f 22                         jg      0x205 <_JIT_ENTRY+0x205>
// 1e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_NegativeRefcount
// 1f7: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 1fc: 48 89 ea                      movq    %rbp, %rdx
// 1ff: ff d0                         callq   *%rax
// 201: 48 8b 45 00                   movq    (%rbp), %rax
// 205: 85 c0                         testl   %eax, %eax
// 207: 78 2d                         js      0x236 <_JIT_ENTRY+0x236>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 213: ff d0                         callq   *%rax
// 215: 48 ff 4d 00                   decq    (%rbp)
// 219: 75 1b                         jne     0x236 <_JIT_ENTRY+0x236>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: 48 89 ef                      movq    %rbp, %rdi
// 228: ff d0                         callq   *%rax
// 22a: eb 0a                         jmp     0x236 <_JIT_ENTRY+0x236>
// 22c: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000022e:  R_X86_64_64  _Py_NoneStruct
// 236: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
// 23f: 48 8d 74 24 28                leaq    0x28(%rsp), %rsi
// 244: 4c 89 74 24 28                movq    %r14, 0x28(%rsp)
// 249: 4c 89 6c 24 30                movq    %r13, 0x30(%rsp)
// 24e: 48 89 6c 24 38                movq    %rbp, 0x38(%rsp)
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  PyObject_Vectorcall
// 25d: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 267: 4c 89 e7                      movq    %r12, %rdi
// 26a: 31 c9                         xorl    %ecx, %ecx
// 26c: ff d0                         callq   *%rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 74 47                         je      0x2ba <_JIT_ENTRY+0x2ba>
// 273: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000275:  R_X86_64_64  _JIT_OPARG
// 27d: 0f b7 c9                      movzwl  %cx, %ecx
// 280: ba 01 00 00 00                movl    $0x1, %edx
// 285: 29 ca                         subl    %ecx, %edx
// 287: 48 63 ca                      movslq  %edx, %rcx
// 28a: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 28e: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 292: 48 83 c6 08                   addq    $0x8, %rsi
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _JIT_CONTINUE
// 2a0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2a5: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 2aa: 48 83 c4 48                   addq    $0x48, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: ff e0                         jmpq    *%rax
// 2ba: 4d 8d 3c df                   leaq    (%r15,%rbx,8), %r15
// 2be: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2c3: 49 29 df                      subq    %rbx, %r15
// 2c6: 49 83 c7 b8                   addq    $-0x48, %r15
// 2ca: 49 c1 ef 03                   shrq    $0x3, %r15
// 2ce: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2d2: 31 c0                         xorl    %eax, %eax
// 2d4: 48 83 c4 48                   addq    $0x48, %rsp
// 2d8: 5b                            popq    %rbx
// 2d9: 41 5c                         popq    %r12
// 2db: 41 5d                         popq    %r13
// 2dd: 41 5e                         popq    %r14
// 2df: 41 5f                         popq    %r15
// 2e1: 5d                            popq    %rbp
// 2e2: c3                            retq
// 2e3: 
static const unsigned char _BUILD_SETplus_WITH_EXCEPT_START_code_body[740] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x48, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x4c, 0x89, 0x74, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x34, 0xdf, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xef, 0xe9, 0xa1, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x62, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x88, 0x60, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x4a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x64, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xdd, 0xe0, 0x4d, 0x89, 0xef, 0x4d, 0x8b, 0x6c, 0xdd, 0xf8, 0x4d, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x54, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x28, 0x4c, 0x89, 0x74, 0x24, 0x28, 0x4c, 0x89, 0x6c, 0x24, 0x30, 0x48, 0x89, 0x6c, 0x24, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4c, 0x89, 0xe7, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x8d, 0x3c, 0xdf, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SETplus_WITH_EXCEPT_START_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SETplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SETplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_BUILD_SETplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_BUILD_SETplus_BEFORE_ASYNC_WITH),
    [_BUILD_SETplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_BUILD_SETplus_BEFORE_WITH),
    [_BUILD_SETplus_BINARY_OP] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_OP),
    [_BUILD_SETplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_OP_ADD_FLOAT),
    [_BUILD_SETplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_OP_ADD_INT),
    [_BUILD_SETplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_OP_ADD_UNICODE),
    [_BUILD_SETplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_OP_MULTIPLY_FLOAT),
    [_BUILD_SETplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_OP_MULTIPLY_INT),
    [_BUILD_SETplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_OP_SUBTRACT_FLOAT),
    [_BUILD_SETplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_OP_SUBTRACT_INT),
    [_BUILD_SETplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_SLICE),
    [_BUILD_SETplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_SUBSCR),
    [_BUILD_SETplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_SUBSCR_DICT),
    [_BUILD_SETplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_SUBSCR_LIST_INT),
    [_BUILD_SETplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_SUBSCR_STR_INT),
    [_BUILD_SETplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_BINARY_SUBSCR_TUPLE_INT),
    [_BUILD_SETplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_BUILD_SETplus_BUILD_CONST_KEY_MAP),
    [_BUILD_SETplus_BUILD_LIST] = INIT_STENCIL_GROUP(_BUILD_SETplus_BUILD_LIST),
    [_BUILD_SETplus_BUILD_MAP] = INIT_STENCIL_GROUP(_BUILD_SETplus_BUILD_MAP),
    [_BUILD_SETplus_BUILD_SET] = INIT_STENCIL_GROUP(_BUILD_SETplus_BUILD_SET),
    [_BUILD_SETplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_BUILD_SETplus_BUILD_SLICE),
    [_BUILD_SETplus_BUILD_STRING] = INIT_STENCIL_GROUP(_BUILD_SETplus_BUILD_STRING),
    [_BUILD_SETplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_BUILD_SETplus_BUILD_TUPLE),
    [_BUILD_SETplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_BUILTIN_CLASS),
    [_BUILD_SETplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_BUILTIN_FAST),
    [_BUILD_SETplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_BUILD_SETplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_BUILTIN_O),
    [_BUILD_SETplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_INTRINSIC_1),
    [_BUILD_SETplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_INTRINSIC_2),
    [_BUILD_SETplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_ISINSTANCE),
    [_BUILD_SETplus_CALL_LEN] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_LEN),
    [_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_METHOD_DESCRIPTOR_O),
    [_BUILD_SETplus_CALL_STR_1] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_STR_1),
    [_BUILD_SETplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_TUPLE_1),
    [_BUILD_SETplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_BUILD_SETplus_CALL_TYPE_1),
    [_BUILD_SETplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_ATTR_CLASS),
    [_BUILD_SETplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_BUILD_SETplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_ATTR_MODULE),
    [_BUILD_SETplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_ATTR_WITH_HINT),
    [_BUILD_SETplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_BUILD_SETplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_EG_MATCH),
    [_BUILD_SETplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_EXC_MATCH),
    [_BUILD_SETplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_FUNCTION_EXACT_ARGS),
    [_BUILD_SETplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_BUILD_SETplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_PEP_523),
    [_BUILD_SETplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_STACK_SPACE),
    [_BUILD_SETplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_BUILD_SETplus_CHECK_VALIDITY),
    [_BUILD_SETplus_COMPARE_OP] = INIT_STENCIL_GROUP(_BUILD_SETplus_COMPARE_OP),
    [_BUILD_SETplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_BUILD_SETplus_COMPARE_OP_FLOAT),
    [_BUILD_SETplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_COMPARE_OP_INT),
    [_BUILD_SETplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_BUILD_SETplus_COMPARE_OP_STR),
    [_BUILD_SETplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_BUILD_SETplus_CONTAINS_OP),
    [_BUILD_SETplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_BUILD_SETplus_CONVERT_VALUE),
    [_BUILD_SETplus_COPY] = INIT_STENCIL_GROUP(_BUILD_SETplus_COPY),
    [_BUILD_SETplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_BUILD_SETplus_COPY_FREE_VARS),
    [_BUILD_SETplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_BUILD_SETplus_DELETE_ATTR),
    [_BUILD_SETplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_BUILD_SETplus_DELETE_DEREF),
    [_BUILD_SETplus_DELETE_FAST] = INIT_STENCIL_GROUP(_BUILD_SETplus_DELETE_FAST),
    [_BUILD_SETplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_SETplus_DELETE_GLOBAL),
    [_BUILD_SETplus_DELETE_NAME] = INIT_STENCIL_GROUP(_BUILD_SETplus_DELETE_NAME),
    [_BUILD_SETplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_SETplus_DELETE_SUBSCR),
    [_BUILD_SETplus_DICT_MERGE] = INIT_STENCIL_GROUP(_BUILD_SETplus_DICT_MERGE),
    [_BUILD_SETplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_BUILD_SETplus_DICT_UPDATE),
    [_BUILD_SETplus_END_SEND] = INIT_STENCIL_GROUP(_BUILD_SETplus_END_SEND),
    [_BUILD_SETplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_BUILD_SETplus_EXIT_INIT_CHECK),
    [_BUILD_SETplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_BUILD_SETplus_EXIT_TRACE),
    [_BUILD_SETplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_BUILD_SETplus_FORMAT_SIMPLE),
    [_BUILD_SETplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_BUILD_SETplus_FORMAT_WITH_SPEC),
    [_BUILD_SETplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_BUILD_SETplus_FOR_ITER_TIER_TWO),
    [_BUILD_SETplus_GET_AITER] = INIT_STENCIL_GROUP(_BUILD_SETplus_GET_AITER),
    [_BUILD_SETplus_GET_ANEXT] = INIT_STENCIL_GROUP(_BUILD_SETplus_GET_ANEXT),
    [_BUILD_SETplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_BUILD_SETplus_GET_AWAITABLE),
    [_BUILD_SETplus_GET_ITER] = INIT_STENCIL_GROUP(_BUILD_SETplus_GET_ITER),
    [_BUILD_SETplus_GET_LEN] = INIT_STENCIL_GROUP(_BUILD_SETplus_GET_LEN),
    [_BUILD_SETplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_BUILD_SETplus_GET_YIELD_FROM_ITER),
    [_BUILD_SETplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_BOTH_FLOAT),
    [_BUILD_SETplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_BOTH_INT),
    [_BUILD_SETplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_BOTH_UNICODE),
    [_BUILD_SETplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_BUILTINS_VERSION),
    [_BUILD_SETplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_DORV_VALUES),
    [_BUILD_SETplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_BUILD_SETplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_GLOBALS_VERSION),
    [_BUILD_SETplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_IS_FALSE_POP),
    [_BUILD_SETplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_IS_NONE_POP),
    [_BUILD_SETplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_IS_NOT_NONE_POP),
    [_BUILD_SETplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_IS_TRUE_POP),
    [_BUILD_SETplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_KEYS_VERSION),
    [_BUILD_SETplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_NOT_EXHAUSTED_LIST),
    [_BUILD_SETplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_BUILD_SETplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_BUILD_SETplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_BUILD_SETplus_GUARD_TYPE_VERSION),
    [_BUILD_SETplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_SETplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_BUILD_SETplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_SETplus_INIT_CALL_PY_EXACT_ARGS),
    [_BUILD_SETplus_INSERT] = INIT_STENCIL_GROUP(_BUILD_SETplus_INSERT),
    [_BUILD_SETplus_IS_NONE] = INIT_STENCIL_GROUP(_BUILD_SETplus_IS_NONE),
    [_BUILD_SETplus_IS_OP] = INIT_STENCIL_GROUP(_BUILD_SETplus_IS_OP),
    [_BUILD_SETplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_BUILD_SETplus_ITER_CHECK_LIST),
    [_BUILD_SETplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_BUILD_SETplus_ITER_CHECK_RANGE),
    [_BUILD_SETplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_BUILD_SETplus_ITER_CHECK_TUPLE),
    [_BUILD_SETplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_BUILD_SETplus_ITER_NEXT_LIST),
    [_BUILD_SETplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_BUILD_SETplus_ITER_NEXT_RANGE),
    [_BUILD_SETplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_BUILD_SETplus_ITER_NEXT_TUPLE),
    [_BUILD_SETplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_BUILD_SETplus_JUMP_TO_TOP),
    [_BUILD_SETplus_LIST_APPEND] = INIT_STENCIL_GROUP(_BUILD_SETplus_LIST_APPEND),
    [_BUILD_SETplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_BUILD_SETplus_LIST_EXTEND),
    [_BUILD_SETplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ASSERTION_ERROR),
    [_BUILD_SETplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR),
    [_BUILD_SETplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_CLASS),
    [_BUILD_SETplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_INSTANCE_VALUE),
    [_BUILD_SETplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_BUILD_SETplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_METHOD_NO_DICT),
    [_BUILD_SETplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_BUILD_SETplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_MODULE),
    [_BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_BUILD_SETplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_SLOT),
    [_BUILD_SETplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_ATTR_WITH_HINT),
    [_BUILD_SETplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_BUILD_CLASS),
    [_BUILD_SETplus_LOAD_CONST] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_CONST),
    [_BUILD_SETplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_DEREF),
    [_BUILD_SETplus_LOAD_FAST] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_FAST),
    [_BUILD_SETplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_FAST_AND_CLEAR),
    [_BUILD_SETplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_FAST_CHECK),
    [_BUILD_SETplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_FROM_DICT_OR_DEREF),
    [_BUILD_SETplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_BUILD_SETplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_GLOBAL),
    [_BUILD_SETplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_GLOBAL_BUILTINS),
    [_BUILD_SETplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_GLOBAL_MODULE),
    [_BUILD_SETplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_LOCALS),
    [_BUILD_SETplus_LOAD_NAME] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_NAME),
    [_BUILD_SETplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_SUPER_ATTR_ATTR),
    [_BUILD_SETplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_BUILD_SETplus_LOAD_SUPER_ATTR_METHOD),
    [_BUILD_SETplus_MAKE_CELL] = INIT_STENCIL_GROUP(_BUILD_SETplus_MAKE_CELL),
    [_BUILD_SETplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_BUILD_SETplus_MAKE_FUNCTION),
    [_BUILD_SETplus_MAP_ADD] = INIT_STENCIL_GROUP(_BUILD_SETplus_MAP_ADD),
    [_BUILD_SETplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_BUILD_SETplus_MATCH_CLASS),
    [_BUILD_SETplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_BUILD_SETplus_MATCH_KEYS),
    [_BUILD_SETplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_BUILD_SETplus_MATCH_MAPPING),
    [_BUILD_SETplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_BUILD_SETplus_MATCH_SEQUENCE),
    [_BUILD_SETplus_NOP] = INIT_STENCIL_GROUP(_BUILD_SETplus_NOP),
    [_BUILD_SETplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_BUILD_SETplus_POP_EXCEPT),
    [_BUILD_SETplus_POP_FRAME] = INIT_STENCIL_GROUP(_BUILD_SETplus_POP_FRAME),
    [_BUILD_SETplus_POP_TOP] = INIT_STENCIL_GROUP(_BUILD_SETplus_POP_TOP),
    [_BUILD_SETplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_BUILD_SETplus_PUSH_EXC_INFO),
    [_BUILD_SETplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_BUILD_SETplus_PUSH_FRAME),
    [_BUILD_SETplus_PUSH_NULL] = INIT_STENCIL_GROUP(_BUILD_SETplus_PUSH_NULL),
    [_BUILD_SETplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_BUILD_SETplus_RESUME_CHECK),
    [_BUILD_SETplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_BUILD_SETplus_SAVE_RETURN_OFFSET),
    [_BUILD_SETplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_BUILD_SETplus_SETUP_ANNOTATIONS),
    [_BUILD_SETplus_SET_ADD] = INIT_STENCIL_GROUP(_BUILD_SETplus_SET_ADD),
    [_BUILD_SETplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_BUILD_SETplus_SET_FUNCTION_ATTRIBUTE),
    [_BUILD_SETplus_SET_IP] = INIT_STENCIL_GROUP(_BUILD_SETplus_SET_IP),
    [_BUILD_SETplus_SET_UPDATE] = INIT_STENCIL_GROUP(_BUILD_SETplus_SET_UPDATE),
    [_BUILD_SETplus_STORE_ATTR] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_ATTR),
    [_BUILD_SETplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_ATTR_INSTANCE_VALUE),
    [_BUILD_SETplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_ATTR_SLOT),
    [_BUILD_SETplus_STORE_DEREF] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_DEREF),
    [_BUILD_SETplus_STORE_FAST] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_FAST),
    [_BUILD_SETplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_GLOBAL),
    [_BUILD_SETplus_STORE_NAME] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_NAME),
    [_BUILD_SETplus_STORE_SLICE] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_SLICE),
    [_BUILD_SETplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_SUBSCR),
    [_BUILD_SETplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_SUBSCR_DICT),
    [_BUILD_SETplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_STORE_SUBSCR_LIST_INT),
    [_BUILD_SETplus_SWAP] = INIT_STENCIL_GROUP(_BUILD_SETplus_SWAP),
    [_BUILD_SETplus_TO_BOOL] = INIT_STENCIL_GROUP(_BUILD_SETplus_TO_BOOL),
    [_BUILD_SETplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_BUILD_SETplus_TO_BOOL_ALWAYS_TRUE),
    [_BUILD_SETplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_BUILD_SETplus_TO_BOOL_BOOL),
    [_BUILD_SETplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_BUILD_SETplus_TO_BOOL_INT),
    [_BUILD_SETplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_BUILD_SETplus_TO_BOOL_LIST),
    [_BUILD_SETplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_BUILD_SETplus_TO_BOOL_NONE),
    [_BUILD_SETplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_BUILD_SETplus_TO_BOOL_STR),
    [_BUILD_SETplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_BUILD_SETplus_UNARY_INVERT),
    [_BUILD_SETplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_BUILD_SETplus_UNARY_NEGATIVE),
    [_BUILD_SETplus_UNARY_NOT] = INIT_STENCIL_GROUP(_BUILD_SETplus_UNARY_NOT),
    [_BUILD_SETplus_UNPACK_EX] = INIT_STENCIL_GROUP(_BUILD_SETplus_UNPACK_EX),
    [_BUILD_SETplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_BUILD_SETplus_UNPACK_SEQUENCE),
    [_BUILD_SETplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_BUILD_SETplus_UNPACK_SEQUENCE_LIST),
    [_BUILD_SETplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_BUILD_SETplus_UNPACK_SEQUENCE_TUPLE),
    [_BUILD_SETplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_BUILD_SETplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_BUILD_SETplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_BUILD_SETplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
